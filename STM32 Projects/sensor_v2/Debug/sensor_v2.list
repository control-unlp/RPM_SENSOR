
sensor_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008808  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008914  08008914  00009914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800897c  0800897c  0000a180  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800897c  0800897c  0000a180  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800897c  0800897c  0000a180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800897c  0800897c  0000997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008980  08008980  00009980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  08008984  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001278  20000180  08008b04  0000a180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013f8  08008b04  0000a3f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c04  00000000  00000000  0000a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ff  00000000  00000000  0001bdad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4b  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a496  00000000  00000000  00020e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cf8  00000000  00000000  0003b2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd98  00000000  00000000  0004ffd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcd71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004198  00000000  00000000  000dcdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000e0f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	080088fc 	.word	0x080088fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	080088fc 	.word	0x080088fc

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b28      	ldr	r3, [pc, #160]	@ (8000204 <MX_GPIO_Init+0xb8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a27      	ldr	r2, [pc, #156]	@ (8000204 <MX_GPIO_Init+0xb8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b25      	ldr	r3, [pc, #148]	@ (8000204 <MX_GPIO_Init+0xb8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b22      	ldr	r3, [pc, #136]	@ (8000204 <MX_GPIO_Init+0xb8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a21      	ldr	r2, [pc, #132]	@ (8000204 <MX_GPIO_Init+0xb8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1f      	ldr	r3, [pc, #124]	@ (8000204 <MX_GPIO_Init+0xb8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b1c      	ldr	r3, [pc, #112]	@ (8000204 <MX_GPIO_Init+0xb8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1b      	ldr	r2, [pc, #108]	@ (8000204 <MX_GPIO_Init+0xb8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b19      	ldr	r3, [pc, #100]	@ (8000204 <MX_GPIO_Init+0xb8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ae:	4816      	ldr	r0, [pc, #88]	@ (8000208 <MX_GPIO_Init+0xbc>)
 80001b0:	f000 fe5a 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ba:	2301      	movs	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001be:	2300      	movs	r3, #0
 80001c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001c2:	2302      	movs	r3, #2
 80001c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001c6:	f107 0310 	add.w	r3, r7, #16
 80001ca:	4619      	mov	r1, r3
 80001cc:	480e      	ldr	r0, [pc, #56]	@ (8000208 <MX_GPIO_Init+0xbc>)
 80001ce:	f000 fcc7 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80001d2:	2301      	movs	r3, #1
 80001d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001d6:	4b0d      	ldr	r3, [pc, #52]	@ (800020c <MX_GPIO_Init+0xc0>)
 80001d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80001da:	2302      	movs	r3, #2
 80001dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	480a      	ldr	r0, [pc, #40]	@ (8000210 <MX_GPIO_Init+0xc4>)
 80001e6:	f000 fcbb 	bl	8000b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2100      	movs	r1, #0
 80001ee:	2006      	movs	r0, #6
 80001f0:	f000 fc7f 	bl	8000af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80001f4:	2006      	movs	r0, #6
 80001f6:	f000 fc98 	bl	8000b2a <HAL_NVIC_EnableIRQ>

}
 80001fa:	bf00      	nop
 80001fc:	3720      	adds	r7, #32
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40021000 	.word	0x40021000
 8000208:	40011000 	.word	0x40011000
 800020c:	10210000 	.word	0x10210000
 8000210:	40010800 	.word	0x40010800

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 fb32 	bl	8000880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f814 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f7ff ff94 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000224:	f007 fec8 	bl	8007fb8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000228:	f000 f994 	bl	8000554 <MX_TIM1_Init>
  MX_TIM3_Init();
 800022c:	f000 fa16 	bl	800065c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Iniciar PWM del canal elegido
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000230:	2100      	movs	r1, #0
 8000232:	4804      	ldr	r0, [pc, #16]	@ (8000244 <main+0x30>)
 8000234:	f003 f896 	bl	8003364 <HAL_TIM_PWM_Start>

  Phases_Start();   // arranca en la fase SAFE
 8000238:	f000 f88a 	bl	8000350 <Phases_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Phases_Update();
 800023c:	f000 f89c 	bl	8000378 <Phases_Update>
 8000240:	e7fc      	b.n	800023c <main+0x28>
 8000242:	bf00      	nop
 8000244:	200001a4 	.word	0x200001a4

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b094      	sub	sp, #80	@ 0x50
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000252:	2228      	movs	r2, #40	@ 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f008 fb24 	bl	80088a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000278:	2301      	movs	r3, #1
 800027a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000286:	2301      	movs	r3, #1
 8000288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000292:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000294:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000298:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 fb7c 	bl	800299c <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002aa:	f000 f827 	bl	80002fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b2:	2302      	movs	r3, #2
 80002b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fde8 	bl	8002ea0 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002d6:	f000 f811 	bl	80002fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002da:	2310      	movs	r3, #16
 80002dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 ff37 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002f0:	f000 f804 	bl	80002fc <Error_Handler>
  }
}
 80002f4:	bf00      	nop
 80002f6:	3750      	adds	r7, #80	@ 0x50
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000300:	b672      	cpsid	i
}
 8000302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000304:	bf00      	nop
 8000306:	e7fd      	b.n	8000304 <Error_Handler+0x8>

08000308 <PWM_SetPulse_us>:

// Tu función de PWM
// extern void PWM_SetPulse_us(uint16_t pulse_us);
volatile uint16_t currentPulse = 1000;

void PWM_SetPulse_us(uint16_t pulse_us) {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	80fb      	strh	r3, [r7, #6]
    // CCR = pulse_us / 1 µs * factor de timer
    // Si TIM1 está a 72 MHz con prescaler= 71, entonces 1 tick = 1 µs
    if (pulse_us < 1000) pulse_us = 1000;
 8000312:	88fb      	ldrh	r3, [r7, #6]
 8000314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000318:	d202      	bcs.n	8000320 <PWM_SetPulse_us+0x18>
 800031a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800031e:	80fb      	strh	r3, [r7, #6]
    if (pulse_us > 2000) pulse_us = 2000;
 8000320:	88fb      	ldrh	r3, [r7, #6]
 8000322:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000326:	d902      	bls.n	800032e <PWM_SetPulse_us+0x26>
 8000328:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800032c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_us);
 800032e:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <PWM_SetPulse_us+0x40>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	88fa      	ldrh	r2, [r7, #6]
 8000334:	635a      	str	r2, [r3, #52]	@ 0x34
    currentPulse = pulse_us;
 8000336:	4a05      	ldr	r2, [pc, #20]	@ (800034c <PWM_SetPulse_us+0x44>)
 8000338:	88fb      	ldrh	r3, [r7, #6]
 800033a:	8013      	strh	r3, [r2, #0]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	200001a4 	.word	0x200001a4
 800034c:	20000000 	.word	0x20000000

08000350 <Phases_Start>:
// Estado actual
static Phase_t currentPhase = PHASE_SAFE;
static uint32_t phaseStart = 0;

void Phases_Start(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
    currentPhase = PHASE_SAFE;
 8000354:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <Phases_Start+0x20>)
 8000356:	2200      	movs	r2, #0
 8000358:	701a      	strb	r2, [r3, #0]
    phaseStart = HAL_GetTick();
 800035a:	f000 fae9 	bl	8000930 <HAL_GetTick>
 800035e:	4603      	mov	r3, r0
 8000360:	4a04      	ldr	r2, [pc, #16]	@ (8000374 <Phases_Start+0x24>)
 8000362:	6013      	str	r3, [r2, #0]
    PWM_SetPulse_us(1000);   // seguro
 8000364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000368:	f7ff ffce 	bl	8000308 <PWM_SetPulse_us>
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	2000019c 	.word	0x2000019c
 8000374:	200001a0 	.word	0x200001a0

08000378 <Phases_Update>:

void Phases_Update(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
    uint32_t elapsed = HAL_GetTick() - phaseStart;
 800037e:	f000 fad7 	bl	8000930 <HAL_GetTick>
 8000382:	4602      	mov	r2, r0
 8000384:	4b31      	ldr	r3, [pc, #196]	@ (800044c <Phases_Update+0xd4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	607b      	str	r3, [r7, #4]

    switch (currentPhase) {
 800038c:	4b30      	ldr	r3, [pc, #192]	@ (8000450 <Phases_Update+0xd8>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b05      	cmp	r3, #5
 8000392:	d857      	bhi.n	8000444 <Phases_Update+0xcc>
 8000394:	a201      	add	r2, pc, #4	@ (adr r2, 800039c <Phases_Update+0x24>)
 8000396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039a:	bf00      	nop
 800039c:	080003b5 	.word	0x080003b5
 80003a0:	080003d7 	.word	0x080003d7
 80003a4:	080003f9 	.word	0x080003f9
 80003a8:	08000433 	.word	0x08000433
 80003ac:	0800041b 	.word	0x0800041b
 80003b0:	08000433 	.word	0x08000433
        case PHASE_SAFE:
            if (elapsed > 1000) {    // 1s
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80003ba:	d93c      	bls.n	8000436 <Phases_Update+0xbe>
                currentPhase = PHASE_INICIAL;
 80003bc:	4b24      	ldr	r3, [pc, #144]	@ (8000450 <Phases_Update+0xd8>)
 80003be:	2201      	movs	r2, #1
 80003c0:	701a      	strb	r2, [r3, #0]
                phaseStart = HAL_GetTick();
 80003c2:	f000 fab5 	bl	8000930 <HAL_GetTick>
 80003c6:	4603      	mov	r3, r0
 80003c8:	4a20      	ldr	r2, [pc, #128]	@ (800044c <Phases_Update+0xd4>)
 80003ca:	6013      	str	r3, [r2, #0]
                PWM_SetPulse_us(1200);
 80003cc:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80003d0:	f7ff ff9a 	bl	8000308 <PWM_SetPulse_us>
            }
            break;
 80003d4:	e02f      	b.n	8000436 <Phases_Update+0xbe>

        case PHASE_INICIAL:
            if (elapsed > 2000) {    // 2s
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80003dc:	d92d      	bls.n	800043a <Phases_Update+0xc2>
                currentPhase = PHASE_ESCALON;
 80003de:	4b1c      	ldr	r3, [pc, #112]	@ (8000450 <Phases_Update+0xd8>)
 80003e0:	2202      	movs	r2, #2
 80003e2:	701a      	strb	r2, [r3, #0]
                phaseStart = HAL_GetTick();
 80003e4:	f000 faa4 	bl	8000930 <HAL_GetTick>
 80003e8:	4603      	mov	r3, r0
 80003ea:	4a18      	ldr	r2, [pc, #96]	@ (800044c <Phases_Update+0xd4>)
 80003ec:	6013      	str	r3, [r2, #0]
                PWM_SetPulse_us(1500);
 80003ee:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80003f2:	f7ff ff89 	bl	8000308 <PWM_SetPulse_us>
            }
            break;
 80003f6:	e020      	b.n	800043a <Phases_Update+0xc2>

        case PHASE_ESCALON:
            if (elapsed > 2000) {    // 2s
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80003fe:	d91e      	bls.n	800043e <Phases_Update+0xc6>
                currentPhase = PHASE_RALENTI;
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <Phases_Update+0xd8>)
 8000402:	2203      	movs	r2, #3
 8000404:	701a      	strb	r2, [r3, #0]
                phaseStart = HAL_GetTick();
 8000406:	f000 fa93 	bl	8000930 <HAL_GetTick>
 800040a:	4603      	mov	r3, r0
 800040c:	4a0f      	ldr	r2, [pc, #60]	@ (800044c <Phases_Update+0xd4>)
 800040e:	6013      	str	r3, [r2, #0]
                PWM_SetPulse_us(1100);
 8000410:	f240 404c 	movw	r0, #1100	@ 0x44c
 8000414:	f7ff ff78 	bl	8000308 <PWM_SetPulse_us>
            }
            break;
 8000418:	e011      	b.n	800043e <Phases_Update+0xc6>
        case PHASE_RALENTI:
            // si querés que quede fijo hasta que lo cortes, no hagas nada acá
            break;

        case PHASE_FINAL:
            if (elapsed > 1000) {   // 1s
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000420:	d90f      	bls.n	8000442 <Phases_Update+0xca>
                currentPhase = PHASE_DONE;
 8000422:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <Phases_Update+0xd8>)
 8000424:	2205      	movs	r2, #5
 8000426:	701a      	strb	r2, [r3, #0]
                PWM_SetPulse_us(1000);
 8000428:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800042c:	f7ff ff6c 	bl	8000308 <PWM_SetPulse_us>
            }
            break;
 8000430:	e007      	b.n	8000442 <Phases_Update+0xca>
            break;
 8000432:	bf00      	nop
 8000434:	e006      	b.n	8000444 <Phases_Update+0xcc>
            break;
 8000436:	bf00      	nop
 8000438:	e004      	b.n	8000444 <Phases_Update+0xcc>
            break;
 800043a:	bf00      	nop
 800043c:	e002      	b.n	8000444 <Phases_Update+0xcc>
            break;
 800043e:	bf00      	nop
 8000440:	e000      	b.n	8000444 <Phases_Update+0xcc>
            break;
 8000442:	bf00      	nop

        case PHASE_DONE:
            // nada más que hacer
            break;
    }
}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200001a0 	.word	0x200001a0
 8000450:	2000019c 	.word	0x2000019c

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045a:	4b15      	ldr	r3, [pc, #84]	@ (80004b0 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a14      	ldr	r2, [pc, #80]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b12      	ldr	r3, [pc, #72]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048a:	4b0a      	ldr	r3, [pc, #40]	@ (80004b4 <HAL_MspInit+0x60>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	4a04      	ldr	r2, [pc, #16]	@ (80004b4 <HAL_MspInit+0x60>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <NMI_Handler+0x4>

080004c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <HardFault_Handler+0x4>

080004c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <MemManage_Handler+0x4>

080004d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <UsageFault_Handler+0x4>

080004e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000508:	f000 fa00 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000514:	2001      	movs	r0, #1
 8000516:	f000 fcbf 	bl	8000e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000524:	4802      	ldr	r0, [pc, #8]	@ (8000530 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000526:	f000 fdf5 	bl	8001114 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000f00 	.word	0x20000f00

08000534 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000538:	4802      	ldr	r0, [pc, #8]	@ (8000544 <TIM3_IRQHandler+0x10>)
 800053a:	f003 f804 	bl	8003546 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200001ec 	.word	0x200001ec

08000548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b092      	sub	sp, #72	@ 0x48
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
 8000574:	615a      	str	r2, [r3, #20]
 8000576:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2220      	movs	r2, #32
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f008 f990 	bl	80088a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000584:	4b33      	ldr	r3, [pc, #204]	@ (8000654 <MX_TIM1_Init+0x100>)
 8000586:	4a34      	ldr	r2, [pc, #208]	@ (8000658 <MX_TIM1_Init+0x104>)
 8000588:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1439;
 800058a:	4b32      	ldr	r3, [pc, #200]	@ (8000654 <MX_TIM1_Init+0x100>)
 800058c:	f240 529f 	movw	r2, #1439	@ 0x59f
 8000590:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000592:	4b30      	ldr	r3, [pc, #192]	@ (8000654 <MX_TIM1_Init+0x100>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 8000598:	4b2e      	ldr	r3, [pc, #184]	@ (8000654 <MX_TIM1_Init+0x100>)
 800059a:	f240 529f 	movw	r2, #1439	@ 0x59f
 800059e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000654 <MX_TIM1_Init+0x100>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000654 <MX_TIM1_Init+0x100>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ac:	4b29      	ldr	r3, [pc, #164]	@ (8000654 <MX_TIM1_Init+0x100>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005b2:	4828      	ldr	r0, [pc, #160]	@ (8000654 <MX_TIM1_Init+0x100>)
 80005b4:	f002 fe86 	bl	80032c4 <HAL_TIM_PWM_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80005be:	f7ff fe9d 	bl	80002fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c2:	2300      	movs	r3, #0
 80005c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005ce:	4619      	mov	r1, r3
 80005d0:	4820      	ldr	r0, [pc, #128]	@ (8000654 <MX_TIM1_Init+0x100>)
 80005d2:	f003 fd5d 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80005dc:	f7ff fe8e 	bl	80002fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e0:	2360      	movs	r3, #96	@ 0x60
 80005e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e8:	2300      	movs	r3, #0
 80005ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005ec:	2300      	movs	r3, #0
 80005ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000600:	2200      	movs	r2, #0
 8000602:	4619      	mov	r1, r3
 8000604:	4813      	ldr	r0, [pc, #76]	@ (8000654 <MX_TIM1_Init+0x100>)
 8000606:	f003 f92b 	bl	8003860 <HAL_TIM_PWM_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000610:	f7ff fe74 	bl	80002fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000628:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800062c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4807      	ldr	r0, [pc, #28]	@ (8000654 <MX_TIM1_Init+0x100>)
 8000638:	f003 fd88 	bl	800414c <HAL_TIMEx_ConfigBreakDeadTime>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000642:	f7ff fe5b 	bl	80002fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000646:	4803      	ldr	r0, [pc, #12]	@ (8000654 <MX_TIM1_Init+0x100>)
 8000648:	f000 f8c0 	bl	80007cc <HAL_TIM_MspPostInit>

}
 800064c:	bf00      	nop
 800064e:	3748      	adds	r7, #72	@ 0x48
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200001a4 	.word	0x200001a4
 8000658:	40012c00 	.word	0x40012c00

0800065c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_TIM3_Init+0xa0>)
 800067a:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <MX_TIM3_Init+0xa4>)
 800067c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800067e:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <MX_TIM3_Init+0xa0>)
 8000680:	2247      	movs	r2, #71	@ 0x47
 8000682:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_TIM3_Init+0xa0>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <MX_TIM3_Init+0xa0>)
 800068c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000690:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_TIM3_Init+0xa0>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_TIM3_Init+0xa0>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800069e:	4817      	ldr	r0, [pc, #92]	@ (80006fc <MX_TIM3_Init+0xa0>)
 80006a0:	f002 ff02 	bl	80034a8 <HAL_TIM_IC_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80006aa:	f7ff fe27 	bl	80002fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	4619      	mov	r1, r3
 80006bc:	480f      	ldr	r0, [pc, #60]	@ (80006fc <MX_TIM3_Init+0xa0>)
 80006be:	f003 fce7 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80006c8:	f7ff fe18 	bl	80002fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80006cc:	2302      	movs	r3, #2
 80006ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006d0:	2301      	movs	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <MX_TIM3_Init+0xa0>)
 80006e4:	f003 f81f 	bl	8003726 <HAL_TIM_IC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006ee:	f7ff fe05 	bl	80002fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200001ec 	.word	0x200001ec
 8000700:	40000400 	.word	0x40000400

08000704 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <HAL_TIM_PWM_MspInit+0x34>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d10b      	bne.n	800072e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <HAL_TIM_PWM_MspInit+0x38>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a08      	ldr	r2, [pc, #32]	@ (800073c <HAL_TIM_PWM_MspInit+0x38>)
 800071c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_TIM_PWM_MspInit+0x38>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40012c00 	.word	0x40012c00
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM3)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a19      	ldr	r2, [pc, #100]	@ (80007c0 <HAL_TIM_IC_MspInit+0x80>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d12b      	bne.n	80007b8 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <HAL_TIM_IC_MspInit+0x84>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	4a17      	ldr	r2, [pc, #92]	@ (80007c4 <HAL_TIM_IC_MspInit+0x84>)
 8000766:	f043 0302 	orr.w	r3, r3, #2
 800076a:	61d3      	str	r3, [r2, #28]
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <HAL_TIM_IC_MspInit+0x84>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_TIM_IC_MspInit+0x84>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a11      	ldr	r2, [pc, #68]	@ (80007c4 <HAL_TIM_IC_MspInit+0x84>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <HAL_TIM_IC_MspInit+0x84>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000790:	2340      	movs	r3, #64	@ 0x40
 8000792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	4809      	ldr	r0, [pc, #36]	@ (80007c8 <HAL_TIM_IC_MspInit+0x88>)
 80007a4:	f000 f9dc 	bl	8000b60 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	201d      	movs	r0, #29
 80007ae:	f000 f9a0 	bl	8000af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007b2:	201d      	movs	r0, #29
 80007b4:	f000 f9b9 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40000400 	.word	0x40000400
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800

080007cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <HAL_TIM_MspPostInit+0x5c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d118      	bne.n	800081e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <HAL_TIM_MspPostInit+0x60>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <HAL_TIM_MspPostInit+0x60>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <HAL_TIM_MspPostInit+0x60>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000804:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2302      	movs	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <HAL_TIM_MspPostInit+0x64>)
 800081a:	f000 f9a1 	bl	8000b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40012c00 	.word	0x40012c00
 800082c:	40021000 	.word	0x40021000
 8000830:	40010800 	.word	0x40010800

08000834 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000834:	f7ff fe88 	bl	8000548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480b      	ldr	r0, [pc, #44]	@ (8000868 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800083a:	490c      	ldr	r1, [pc, #48]	@ (800086c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800083c:	4a0c      	ldr	r2, [pc, #48]	@ (8000870 <LoopFillZerobss+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a09      	ldr	r2, [pc, #36]	@ (8000874 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000850:	4c09      	ldr	r4, [pc, #36]	@ (8000878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085e:	f008 f829 	bl	80088b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000862:	f7ff fcd7 	bl	8000214 <main>
  bx lr
 8000866:	4770      	bx	lr
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000870:	08008984 	.word	0x08008984
  ldr r2, =_sbss
 8000874:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000878:	200013f8 	.word	0x200013f8

0800087c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC1_2_IRQHandler>
	...

08000880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_Init+0x28>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a07      	ldr	r2, [pc, #28]	@ (80008a8 <HAL_Init+0x28>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f923 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	200f      	movs	r0, #15
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff fdda 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40022000 	.word	0x40022000

080008ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_InitTick+0x54>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x58>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f93b 	bl	8000b46 <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f903 	bl	8000af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	@ (8000908 <HAL_InitTick+0x5c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000004 	.word	0x20000004
 8000904:	2000000c 	.word	0x2000000c
 8000908:	20000008 	.word	0x20000008

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_IncTick+0x1c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	@ (800092c <HAL_IncTick+0x20>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a03      	ldr	r2, [pc, #12]	@ (800092c <HAL_IncTick+0x20>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	2000000c 	.word	0x2000000c
 800092c:	20000234 	.word	0x20000234

08000930 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b02      	ldr	r3, [pc, #8]	@ (8000940 <HAL_GetTick+0x10>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	20000234 	.word	0x20000234

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	@ (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4906      	ldr	r1, [pc, #24]	@ (80009dc <__NVIC_EnableIRQ+0x34>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	@ (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	@ (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	@ 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	@ 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f7ff ff90 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	@ (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff2d 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff42 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff90 	bl	8000a34 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5f 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff35 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffa2 	bl	8000a98 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b08b      	sub	sp, #44	@ 0x2c
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b72:	e169      	b.n	8000e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b74:	2201      	movs	r2, #1
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f040 8158 	bne.w	8000e42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	4a9a      	ldr	r2, [pc, #616]	@ (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d05e      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000b9c:	4a98      	ldr	r2, [pc, #608]	@ (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d875      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000ba2:	4a98      	ldr	r2, [pc, #608]	@ (8000e04 <HAL_GPIO_Init+0x2a4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d058      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000ba8:	4a96      	ldr	r2, [pc, #600]	@ (8000e04 <HAL_GPIO_Init+0x2a4>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d86f      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bae:	4a96      	ldr	r2, [pc, #600]	@ (8000e08 <HAL_GPIO_Init+0x2a8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d052      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bb4:	4a94      	ldr	r2, [pc, #592]	@ (8000e08 <HAL_GPIO_Init+0x2a8>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d869      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bba:	4a94      	ldr	r2, [pc, #592]	@ (8000e0c <HAL_GPIO_Init+0x2ac>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d04c      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bc0:	4a92      	ldr	r2, [pc, #584]	@ (8000e0c <HAL_GPIO_Init+0x2ac>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d863      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bc6:	4a92      	ldr	r2, [pc, #584]	@ (8000e10 <HAL_GPIO_Init+0x2b0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d046      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bcc:	4a90      	ldr	r2, [pc, #576]	@ (8000e10 <HAL_GPIO_Init+0x2b0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d85d      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bd2:	2b12      	cmp	r3, #18
 8000bd4:	d82a      	bhi.n	8000c2c <HAL_GPIO_Init+0xcc>
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d859      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bda:	a201      	add	r2, pc, #4	@ (adr r2, 8000be0 <HAL_GPIO_Init+0x80>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08000c5b 	.word	0x08000c5b
 8000be4:	08000c35 	.word	0x08000c35
 8000be8:	08000c47 	.word	0x08000c47
 8000bec:	08000c89 	.word	0x08000c89
 8000bf0:	08000c8f 	.word	0x08000c8f
 8000bf4:	08000c8f 	.word	0x08000c8f
 8000bf8:	08000c8f 	.word	0x08000c8f
 8000bfc:	08000c8f 	.word	0x08000c8f
 8000c00:	08000c8f 	.word	0x08000c8f
 8000c04:	08000c8f 	.word	0x08000c8f
 8000c08:	08000c8f 	.word	0x08000c8f
 8000c0c:	08000c8f 	.word	0x08000c8f
 8000c10:	08000c8f 	.word	0x08000c8f
 8000c14:	08000c8f 	.word	0x08000c8f
 8000c18:	08000c8f 	.word	0x08000c8f
 8000c1c:	08000c8f 	.word	0x08000c8f
 8000c20:	08000c8f 	.word	0x08000c8f
 8000c24:	08000c3d 	.word	0x08000c3d
 8000c28:	08000c51 	.word	0x08000c51
 8000c2c:	4a79      	ldr	r2, [pc, #484]	@ (8000e14 <HAL_GPIO_Init+0x2b4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d013      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c32:	e02c      	b.n	8000c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	623b      	str	r3, [r7, #32]
          break;
 8000c3a:	e029      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	3304      	adds	r3, #4
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e024      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e01f      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	330c      	adds	r3, #12
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e01a      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c62:	2304      	movs	r3, #4
 8000c64:	623b      	str	r3, [r7, #32]
          break;
 8000c66:	e013      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d105      	bne.n	8000c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c70:	2308      	movs	r3, #8
 8000c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	611a      	str	r2, [r3, #16]
          break;
 8000c7a:	e009      	b.n	8000c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	615a      	str	r2, [r3, #20]
          break;
 8000c86:	e003      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
          break;
 8000c8c:	e000      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          break;
 8000c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2bff      	cmp	r3, #255	@ 0xff
 8000c94:	d801      	bhi.n	8000c9a <HAL_GPIO_Init+0x13a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	e001      	b.n	8000c9e <HAL_GPIO_Init+0x13e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2bff      	cmp	r3, #255	@ 0xff
 8000ca4:	d802      	bhi.n	8000cac <HAL_GPIO_Init+0x14c>
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	e002      	b.n	8000cb2 <HAL_GPIO_Init+0x152>
 8000cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cae:	3b08      	subs	r3, #8
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	210f      	movs	r1, #15
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	6a39      	ldr	r1, [r7, #32]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a4c      	ldr	r2, [pc, #304]	@ (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b4a      	ldr	r3, [pc, #296]	@ (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cf8:	4a48      	ldr	r2, [pc, #288]	@ (8000e1c <HAL_GPIO_Init+0x2bc>)
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a40      	ldr	r2, [pc, #256]	@ (8000e20 <HAL_GPIO_Init+0x2c0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d013      	beq.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a3f      	ldr	r2, [pc, #252]	@ (8000e24 <HAL_GPIO_Init+0x2c4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d00d      	beq.n	8000d48 <HAL_GPIO_Init+0x1e8>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e28 <HAL_GPIO_Init+0x2c8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d007      	beq.n	8000d44 <HAL_GPIO_Init+0x1e4>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3d      	ldr	r2, [pc, #244]	@ (8000e2c <HAL_GPIO_Init+0x2cc>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d101      	bne.n	8000d40 <HAL_GPIO_Init+0x1e0>
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e006      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d40:	2304      	movs	r3, #4
 8000d42:	e004      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e002      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d50:	f002 0203 	and.w	r2, r2, #3
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	4093      	lsls	r3, r2
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d5e:	492f      	ldr	r1, [pc, #188]	@ (8000e1c <HAL_GPIO_Init+0x2bc>)
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d78:	4b2d      	ldr	r3, [pc, #180]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	492c      	ldr	r1, [pc, #176]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	608b      	str	r3, [r1, #8]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d86:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4928      	ldr	r1, [pc, #160]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da0:	4b23      	ldr	r3, [pc, #140]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	4922      	ldr	r1, [pc, #136]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	60cb      	str	r3, [r1, #12]
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dae:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	491e      	ldr	r1, [pc, #120]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dc8:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4918      	ldr	r1, [pc, #96]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	4914      	ldr	r1, [pc, #80]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d021      	beq.n	8000e34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	490e      	ldr	r1, [pc, #56]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	600b      	str	r3, [r1, #0]
 8000dfc:	e021      	b.n	8000e42 <HAL_GPIO_Init+0x2e2>
 8000dfe:	bf00      	nop
 8000e00:	10320000 	.word	0x10320000
 8000e04:	10310000 	.word	0x10310000
 8000e08:	10220000 	.word	0x10220000
 8000e0c:	10210000 	.word	0x10210000
 8000e10:	10120000 	.word	0x10120000
 8000e14:	10110000 	.word	0x10110000
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	40010800 	.word	0x40010800
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	40011400 	.word	0x40011400
 8000e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e34:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4909      	ldr	r1, [pc, #36]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e44:	3301      	adds	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f47f ae8e 	bne.w	8000b74 <HAL_GPIO_Init+0x14>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	372c      	adds	r7, #44	@ 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e84:	e003      	b.n	8000e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	041a      	lsls	r2, r3, #16
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	611a      	str	r2, [r3, #16]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d006      	beq.n	8000ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f806 	bl	8000ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40010400 	.word	0x40010400

08000ec8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0e8      	b.n	80010c0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f007 fa24 	bl	8008350 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 f99c 	bl	8004258 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3304      	adds	r3, #4
 8000f28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f2a:	f003 f972 	bl	8004212 <USB_CoreInit>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0bf      	b.n	80010c0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 f9a0 	bl	800428c <USB_SetCurrentMode>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2202      	movs	r2, #2
 8000f56:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0b0      	b.n	80010c0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e03e      	b.n	8000fe2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	3311      	adds	r3, #17
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	3310      	adds	r3, #16
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	3313      	adds	r3, #19
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	3320      	adds	r3, #32
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	440b      	add	r3, r1
 8000fc2:	3324      	adds	r3, #36	@ 0x24
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	1c5a      	adds	r2, r3, #1
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	440b      	add	r3, r1
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	791b      	ldrb	r3, [r3, #4]
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3bb      	bcc.n	8000f64 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e044      	b.n	800107c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	440b      	add	r3, r1
 800102c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	3301      	adds	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	791b      	ldrb	r3, [r3, #4]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	429a      	cmp	r2, r3
 8001084:	d3b5      	bcc.n	8000ff2 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3304      	adds	r3, #4
 800108e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001090:	f003 f908 	bl	80042a4 <USB_DevInit>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2202      	movs	r2, #2
 800109e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00c      	b.n	80010c0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f005 fb88 	bl	80067ce <USB_DevDisconnect>

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <HAL_PCD_Start+0x16>
 80010da:	2302      	movs	r3, #2
 80010dc:	e016      	b.n	800110c <HAL_PCD_Start+0x44>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 f89e 	bl	800422c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80010f0:	2101      	movs	r1, #1
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f007 fb9f 	bl	8008836 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 fb5c 	bl	80067ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f005 fb5e 	bl	80067e2 <USB_ReadInterrupts>
 8001126:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 fb1a 	bl	800176c <PCD_EP_ISR_Handler>

    return;
 8001138:	e119      	b.n	800136e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001140:	2b00      	cmp	r3, #0
 8001142:	d013      	beq.n	800116c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800114c:	b29a      	uxth	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001156:	b292      	uxth	r2, r2
 8001158:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f007 f972 	bl	8008446 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001162:	2100      	movs	r1, #0
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f905 	bl	8001374 <HAL_PCD_SetAddress>

    return;
 800116a:	e100      	b.n	800136e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00c      	beq.n	8001190 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001188:	b292      	uxth	r2, r2
 800118a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800118e:	e0ee      	b.n	800136e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00c      	beq.n	80011b4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80011ac:	b292      	uxth	r2, r2
 80011ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80011b2:	e0dc      	b.n	800136e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d027      	beq.n	800120e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0204 	bic.w	r2, r2, #4
 80011d0:	b292      	uxth	r2, r2
 80011d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011de:	b29a      	uxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0208 	bic.w	r2, r2, #8
 80011e8:	b292      	uxth	r2, r2
 80011ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f007 f962 	bl	80084b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001206:	b292      	uxth	r2, r2
 8001208:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800120c:	e0af      	b.n	800136e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8083 	beq.w	8001320 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800121a:	2300      	movs	r3, #0
 800121c:	77fb      	strb	r3, [r7, #31]
 800121e:	e010      	b.n	8001242 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	441a      	add	r2, r3
 800122c:	7ffb      	ldrb	r3, [r7, #31]
 800122e:	8812      	ldrh	r2, [r2, #0]
 8001230:	b292      	uxth	r2, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	3320      	adds	r3, #32
 8001236:	443b      	add	r3, r7
 8001238:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800123c:	7ffb      	ldrb	r3, [r7, #31]
 800123e:	3301      	adds	r3, #1
 8001240:	77fb      	strb	r3, [r7, #31]
 8001242:	7ffb      	ldrb	r3, [r7, #31]
 8001244:	2b07      	cmp	r3, #7
 8001246:	d9eb      	bls.n	8001220 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001250:	b29a      	uxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	b292      	uxth	r2, r2
 800125c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0201 	bic.w	r2, r2, #1
 8001272:	b292      	uxth	r2, r2
 8001274:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001278:	bf00      	nop
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001282:	b29b      	uxth	r3, r3
 8001284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f6      	beq.n	800127a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800129e:	b292      	uxth	r2, r2
 80012a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	e00f      	b.n	80012ca <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	7ffa      	ldrb	r2, [r7, #31]
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	440a      	add	r2, r1
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	3320      	adds	r3, #32
 80012bc:	443b      	add	r3, r7
 80012be:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80012c2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	3301      	adds	r3, #1
 80012c8:	77fb      	strb	r3, [r7, #31]
 80012ca:	7ffb      	ldrb	r3, [r7, #31]
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	d9ec      	bls.n	80012aa <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0208 	orr.w	r2, r2, #8
 80012e2:	b292      	uxth	r2, r2
 80012e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012fa:	b292      	uxth	r2, r2
 80012fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0204 	orr.w	r2, r2, #4
 8001312:	b292      	uxth	r2, r2
 8001314:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f007 f8b3 	bl	8008484 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800131e:	e026      	b.n	800136e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00f      	beq.n	800134a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001332:	b29a      	uxth	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800133c:	b292      	uxth	r2, r2
 800133e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f007 f871 	bl	800842a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001348:	e011      	b.n	800136e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00c      	beq.n	800136e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800135c:	b29a      	uxth	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001366:	b292      	uxth	r2, r2
 8001368:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800136c:	bf00      	nop
  }
}
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_PCD_SetAddress+0x1a>
 800138a:	2302      	movs	r3, #2
 800138c:	e012      	b.n	80013b4 <HAL_PCD_SetAddress+0x40>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	78fa      	ldrb	r2, [r7, #3]
 800139a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f005 f9f5 	bl	8006794 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	70fb      	strb	r3, [r7, #3]
 80013ce:	460b      	mov	r3, r1
 80013d0:	803b      	strh	r3, [r7, #0]
 80013d2:	4613      	mov	r3, r2
 80013d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da0e      	bge.n	8001400 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	f003 0207 	and.w	r2, r3, #7
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	3310      	adds	r3, #16
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	705a      	strb	r2, [r3, #1]
 80013fe:	e00e      	b.n	800141e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	f003 0207 	and.w	r2, r3, #7
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	b2da      	uxtb	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800142a:	883a      	ldrh	r2, [r7, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	78ba      	ldrb	r2, [r7, #2]
 8001434:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001436:	78bb      	ldrb	r3, [r7, #2]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d102      	bne.n	8001442 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_PCD_EP_Open+0x94>
 800144c:	2302      	movs	r3, #2
 800144e:	e00e      	b.n	800146e <HAL_PCD_EP_Open+0xb2>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68f9      	ldr	r1, [r7, #12]
 800145e:	4618      	mov	r0, r3
 8001460:	f002 ff3e 	bl	80042e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800146c:	7afb      	ldrb	r3, [r7, #11]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001486:	2b00      	cmp	r3, #0
 8001488:	da0e      	bge.n	80014a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	f003 0207 	and.w	r2, r3, #7
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	3310      	adds	r3, #16
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	705a      	strb	r2, [r3, #1]
 80014a6:	e00e      	b.n	80014c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	f003 0207 	and.w	r2, r3, #7
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_PCD_EP_Close+0x6a>
 80014dc:	2302      	movs	r3, #2
 80014de:	e00e      	b.n	80014fe <HAL_PCD_EP_Close+0x88>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68f9      	ldr	r1, [r7, #12]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fab6 	bl	8004a60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	460b      	mov	r3, r1
 8001514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001516:	7afb      	ldrb	r3, [r7, #11]
 8001518:	f003 0207 	and.w	r2, r3, #7
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2200      	movs	r2, #0
 8001544:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001546:	7afb      	ldrb	r3, [r7, #11]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	b2da      	uxtb	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6979      	ldr	r1, [r7, #20]
 8001558:	4618      	mov	r0, r3
 800155a:	f003 fc6d 	bl	8004e38 <USB_EPStartXfer>

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	f003 0207 	and.w	r2, r3, #7
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	460b      	mov	r3, r1
 80015a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	f003 0207 	and.w	r2, r3, #7
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	3310      	adds	r3, #16
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2201      	movs	r2, #1
 80015e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6979      	ldr	r1, [r7, #20]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fc1f 	bl	8004e38 <USB_EPStartXfer>

  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	7912      	ldrb	r2, [r2, #4]
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e04c      	b.n	80016bc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001626:	2b00      	cmp	r3, #0
 8001628:	da0e      	bge.n	8001648 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	f003 0207 	and.w	r2, r3, #7
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	3310      	adds	r3, #16
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	705a      	strb	r2, [r3, #1]
 8001646:	e00c      	b.n	8001662 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2201      	movs	r2, #1
 8001666:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	b2da      	uxtb	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_PCD_EP_SetStall+0x7e>
 800167e:	2302      	movs	r3, #2
 8001680:	e01c      	b.n	80016bc <HAL_PCD_EP_SetStall+0xb8>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68f9      	ldr	r1, [r7, #12]
 8001690:	4618      	mov	r0, r3
 8001692:	f004 ff82 	bl	800659a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	2b00      	cmp	r3, #0
 800169e:	d108      	bne.n	80016b2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80016aa:	4619      	mov	r1, r3
 80016ac:	4610      	mov	r0, r2
 80016ae:	f005 f8a7 	bl	8006800 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	7912      	ldrb	r2, [r2, #4]
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e040      	b.n	8001764 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da0e      	bge.n	8001708 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	f003 0207 	and.w	r2, r3, #7
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	3310      	adds	r3, #16
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	705a      	strb	r2, [r3, #1]
 8001706:	e00e      	b.n	8001726 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	f003 0207 	and.w	r2, r3, #7
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	b2da      	uxtb	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_PCD_EP_ClrStall+0x82>
 8001742:	2302      	movs	r3, #2
 8001744:	e00e      	b.n	8001764 <HAL_PCD_EP_ClrStall+0xa0>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f004 ff70 	bl	800663a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b096      	sub	sp, #88	@ 0x58
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001774:	e3bb      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800177e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001782:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001790:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001794:	2b00      	cmp	r3, #0
 8001796:	f040 8175 	bne.w	8001a84 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800179a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d14e      	bne.n	8001844 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80017b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017b6:	81fb      	strh	r3, [r7, #14]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3310      	adds	r3, #16
 80017ce:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017d8:	b29b      	uxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	3302      	adds	r3, #2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	441a      	add	r2, r3
 8001806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001808:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800180a:	2100      	movs	r1, #0
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f006 fdf2 	bl	80083f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7b5b      	ldrb	r3, [r3, #13]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8368 	beq.w	8001eee <PCD_EP_ISR_Handler+0x782>
 800181e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 8363 	bne.w	8001eee <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7b5b      	ldrb	r3, [r3, #13]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001832:	b2da      	uxtb	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	735a      	strb	r2, [r3, #13]
 8001842:	e354      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800184a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001856:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800185a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800185e:	2b00      	cmp	r3, #0
 8001860:	d034      	beq.n	80018cc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800186a:	b29b      	uxth	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	3306      	adds	r3, #6
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800188a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800188c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800189c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f004 fffe 	bl	80068a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80018b2:	4013      	ands	r3, r2
 80018b4:	823b      	strh	r3, [r7, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	8a3a      	ldrh	r2, [r7, #16]
 80018bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018c0:	b292      	uxth	r2, r2
 80018c2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f006 fd69 	bl	800839c <HAL_PCD_SetupStageCallback>
 80018ca:	e310      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018cc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f280 830c 	bge.w	8001eee <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80018e2:	4013      	ands	r3, r2
 80018e4:	83fb      	strh	r3, [r7, #30]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	8bfa      	ldrh	r2, [r7, #30]
 80018ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018f0:	b292      	uxth	r2, r2
 80018f2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	3306      	adds	r3, #6
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4413      	add	r3, r2
 8001912:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800191c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800191e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d019      	beq.n	800195c <PCD_EP_ISR_Handler+0x1f0>
 8001928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d015      	beq.n	800195c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001936:	6959      	ldr	r1, [r3, #20]
 8001938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800193c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001940:	b29b      	uxth	r3, r3
 8001942:	f004 ffae 	bl	80068a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	441a      	add	r2, r3
 8001950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001952:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001954:	2100      	movs	r1, #0
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f006 fd32 	bl	80083c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001966:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800196a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 82bd 	bne.w	8001eee <PCD_EP_ISR_Handler+0x782>
 8001974:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001978:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800197c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001980:	f000 82b5 	beq.w	8001eee <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4413      	add	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80019ba:	d91d      	bls.n	80019f8 <PCD_EP_ISR_Handler+0x28c>
 80019bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	095b      	lsrs	r3, r3, #5
 80019c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80019c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <PCD_EP_ISR_Handler+0x26a>
 80019d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019d2:	3b01      	subs	r3, #1
 80019d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019de:	b29b      	uxth	r3, r3
 80019e0:	029b      	lsls	r3, r3, #10
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	801a      	strh	r2, [r3, #0]
 80019f6:	e026      	b.n	8001a46 <PCD_EP_ISR_Handler+0x2da>
 80019f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10a      	bne.n	8001a16 <PCD_EP_ISR_Handler+0x2aa>
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	801a      	strh	r2, [r3, #0]
 8001a14:	e017      	b.n	8001a46 <PCD_EP_ISR_Handler+0x2da>
 8001a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	085b      	lsrs	r3, r3, #1
 8001a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <PCD_EP_ISR_Handler+0x2c4>
 8001a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	029b      	lsls	r3, r3, #10
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a56:	827b      	strh	r3, [r7, #18]
 8001a58:	8a7b      	ldrh	r3, [r7, #18]
 8001a5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001a5e:	827b      	strh	r3, [r7, #18]
 8001a60:	8a7b      	ldrh	r3, [r7, #18]
 8001a62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001a66:	827b      	strh	r3, [r7, #18]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	8a7b      	ldrh	r3, [r7, #18]
 8001a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	8013      	strh	r3, [r2, #0]
 8001a82:	e234      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a98:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f280 80fc 	bge.w	8001c9a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001ab8:	4013      	ands	r3, r2
 8001aba:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001ad0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ad4:	b292      	uxth	r2, r2
 8001ad6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ad8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af0:	7b1b      	ldrb	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d125      	bne.n	8001b42 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3306      	adds	r3, #6
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b1e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001b22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8092 	beq.w	8001c50 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b32:	6959      	ldr	r1, [r3, #20]
 8001b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b36:	88da      	ldrh	r2, [r3, #6]
 8001b38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b3c:	f004 feb1 	bl	80068a2 <USB_ReadPMA>
 8001b40:	e086      	b.n	8001c50 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b44:	78db      	ldrb	r3, [r3, #3]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d10a      	bne.n	8001b60 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b4e:	461a      	mov	r2, r3
 8001b50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f9d9 	bl	8001f0a <HAL_PCD_EP_DB_Receive>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001b5e:	e077      	b.n	8001c50 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b7a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	441a      	add	r2, r3
 8001b8c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d024      	beq.n	8001c08 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001bea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d02e      	beq.n	8001c50 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf8:	6959      	ldr	r1, [r3, #20]
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfc:	891a      	ldrh	r2, [r3, #8]
 8001bfe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c02:	f004 fe4e 	bl	80068a2 <USB_ReadPMA>
 8001c06:	e023      	b.n	8001c50 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3306      	adds	r3, #6
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001c34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c42:	6959      	ldr	r1, [r3, #20]
 8001c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c46:	895a      	ldrh	r2, [r3, #10]
 8001c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c4c:	f004 fe29 	bl	80068a2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c58:	441a      	add	r2, r3
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c66:	441a      	add	r2, r3
 8001c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <PCD_EP_ISR_Handler+0x514>
 8001c74:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d206      	bcs.n	8001c8e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f006 fb9a 	bl	80083c0 <HAL_PCD_DataOutStageCallback>
 8001c8c:	e005      	b.n	8001c9a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 f8cf 	bl	8004e38 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8123 	beq.w	8001eee <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ca8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	3310      	adds	r3, #16
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	441a      	add	r2, r3
 8001ce8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfa:	78db      	ldrb	r3, [r3, #3]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	f040 80a2 	bne.w	8001e46 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0a:	7b1b      	ldrb	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8093 	beq.w	8001e38 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d046      	beq.n	8001dac <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d20:	785b      	ldrb	r3, [r3, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d126      	bne.n	8001d74 <PCD_EP_ISR_Handler+0x608>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	4413      	add	r3, r2
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	011a      	lsls	r2, r3, #4
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	4413      	add	r3, r2
 8001d48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	801a      	strh	r2, [r3, #0]
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	e061      	b.n	8001e38 <PCD_EP_ISR_Handler+0x6cc>
 8001d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d15d      	bne.n	8001e38 <PCD_EP_ISR_Handler+0x6cc>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d90:	4413      	add	r3, r2
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	011a      	lsls	r2, r3, #4
 8001d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001da2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	e045      	b.n	8001e38 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d126      	bne.n	8001e08 <PCD_EP_ISR_Handler+0x69c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dce:	4413      	add	r3, r2
 8001dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	011a      	lsls	r2, r3, #4
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dda:	4413      	add	r3, r2
 8001ddc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	e017      	b.n	8001e38 <PCD_EP_ISR_Handler+0x6cc>
 8001e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0a:	785b      	ldrb	r3, [r3, #1]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d113      	bne.n	8001e38 <PCD_EP_ISR_Handler+0x6cc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e1e:	4413      	add	r3, r2
 8001e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	011a      	lsls	r2, r3, #4
 8001e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e34:	2200      	movs	r2, #0
 8001e36:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f006 fad9 	bl	80083f6 <HAL_PCD_DataInStageCallback>
 8001e44:	e053      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d146      	bne.n	8001ee0 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	3302      	adds	r3, #2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d907      	bls.n	8001e9a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e92:	1ad2      	subs	r2, r2, r3
 8001e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e96:	619a      	str	r2, [r3, #24]
 8001e98:	e002      	b.n	8001ea0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d106      	bne.n	8001eb6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f006 faa1 	bl	80083f6 <HAL_PCD_DataInStageCallback>
 8001eb4:	e01b      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ebe:	441a      	add	r2, r3
 8001ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ecc:	441a      	add	r2, r3
 8001ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 ffad 	bl	8004e38 <USB_EPStartXfer>
 8001ede:	e006      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ee0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f91b 	bl	8002124 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f6ff ac3b 	blt.w	8001776 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3758      	adds	r7, #88	@ 0x58
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	4613      	mov	r3, r2
 8001f16:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d07e      	beq.n	8002020 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	3302      	adds	r3, #2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	699a      	ldr	r2, [r3, #24]
 8001f50:	8b7b      	ldrh	r3, [r7, #26]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d306      	bcc.n	8001f64 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	8b7b      	ldrh	r3, [r7, #26]
 8001f5c:	1ad2      	subs	r2, r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	619a      	str	r2, [r3, #24]
 8001f62:	e002      	b.n	8001f6a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d123      	bne.n	8001fba <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f8c:	833b      	strh	r3, [r7, #24]
 8001f8e:	8b3b      	ldrh	r3, [r7, #24]
 8001f90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f94:	833b      	strh	r3, [r7, #24]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	441a      	add	r2, r3
 8001fa4:	8b3b      	ldrh	r3, [r7, #24]
 8001fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01f      	beq.n	8002004 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fde:	82fb      	strh	r3, [r7, #22]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	441a      	add	r2, r3
 8001fee:	8afb      	ldrh	r3, [r7, #22]
 8001ff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ffc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002000:	b29b      	uxth	r3, r3
 8002002:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002004:	8b7b      	ldrh	r3, [r7, #26]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8087 	beq.w	800211a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6959      	ldr	r1, [r3, #20]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	891a      	ldrh	r2, [r3, #8]
 8002018:	8b7b      	ldrh	r3, [r7, #26]
 800201a:	f004 fc42 	bl	80068a2 <USB_ReadPMA>
 800201e:	e07c      	b.n	800211a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	3306      	adds	r3, #6
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002048:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	8b7b      	ldrh	r3, [r7, #26]
 8002050:	429a      	cmp	r2, r3
 8002052:	d306      	bcc.n	8002062 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	8b7b      	ldrh	r3, [r7, #26]
 800205a:	1ad2      	subs	r2, r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	e002      	b.n	8002068 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d123      	bne.n	80020b8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800208a:	83fb      	strh	r3, [r7, #30]
 800208c:	8bfb      	ldrh	r3, [r7, #30]
 800208e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002092:	83fb      	strh	r3, [r7, #30]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	441a      	add	r2, r3
 80020a2:	8bfb      	ldrh	r3, [r7, #30]
 80020a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d11f      	bne.n	8002102 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020dc:	83bb      	strh	r3, [r7, #28]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	441a      	add	r2, r3
 80020ec:	8bbb      	ldrh	r3, [r7, #28]
 80020ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020fe:	b29b      	uxth	r3, r3
 8002100:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002102:	8b7b      	ldrh	r3, [r7, #26]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	6959      	ldr	r1, [r3, #20]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	895a      	ldrh	r2, [r3, #10]
 8002114:	8b7b      	ldrh	r3, [r7, #26]
 8002116:	f004 fbc4 	bl	80068a2 <USB_ReadPMA>
    }
  }

  return count;
 800211a:	8b7b      	ldrh	r3, [r7, #26]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0a4      	sub	sp, #144	@ 0x90
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 81dd 	beq.w	80024f8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	3302      	adds	r3, #2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002166:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002172:	429a      	cmp	r2, r3
 8002174:	d907      	bls.n	8002186 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800217e:	1ad2      	subs	r2, r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	619a      	str	r2, [r3, #24]
 8002184:	e002      	b.n	800218c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	f040 80b9 	bne.w	8002308 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	785b      	ldrb	r3, [r3, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d126      	bne.n	80021ec <HAL_PCD_EP_DB_Transmit+0xc8>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b2:	4413      	add	r3, r2
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	011a      	lsls	r2, r3, #4
 80021bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021be:	4413      	add	r3, r2
 80021c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d4:	801a      	strh	r2, [r3, #0]
 80021d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e8:	801a      	strh	r2, [r3, #0]
 80021ea:	e01a      	b.n	8002222 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	785b      	ldrb	r3, [r3, #1]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d116      	bne.n	8002222 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002208:	4413      	add	r3, r2
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	011a      	lsls	r2, r3, #4
 8002212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002214:	4413      	add	r3, r2
 8002216:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800221a:	633b      	str	r3, [r7, #48]	@ 0x30
 800221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221e:	2200      	movs	r2, #0
 8002220:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d126      	bne.n	800227e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	011a      	lsls	r2, r3, #4
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002262:	b29a      	uxth	r2, r3
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	801a      	strh	r2, [r3, #0]
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002276:	b29a      	uxth	r2, r3
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	e017      	b.n	80022ae <HAL_PCD_EP_DB_Transmit+0x18a>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d113      	bne.n	80022ae <HAL_PCD_EP_DB_Transmit+0x18a>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	4413      	add	r3, r2
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	011a      	lsls	r2, r3, #4
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	4413      	add	r3, r2
 80022a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	2200      	movs	r2, #0
 80022ac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f006 f89e 	bl	80083f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 82fc 	beq.w	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022e0:	82fb      	strh	r3, [r7, #22]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	441a      	add	r2, r3
 80022f0:	8afb      	ldrh	r3, [r7, #22]
 80022f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002302:	b29b      	uxth	r3, r3
 8002304:	8013      	strh	r3, [r2, #0]
 8002306:	e2da      	b.n	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d021      	beq.n	8002356 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800232c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	441a      	add	r2, r3
 800233e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800234a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800234e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002352:	b29b      	uxth	r3, r3
 8002354:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 82ae 	bne.w	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800236a:	441a      	add	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002378:	441a      	add	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	429a      	cmp	r2, r3
 8002388:	d30b      	bcc.n	80023a2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	621a      	str	r2, [r3, #32]
 80023a0:	e017      	b.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80023aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023ba:	e00a      	b.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	785b      	ldrb	r3, [r3, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d165      	bne.n	80024a6 <HAL_PCD_EP_DB_Transmit+0x382>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ee:	4413      	add	r3, r2
 80023f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	011a      	lsls	r2, r3, #4
 80023f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fa:	4413      	add	r3, r2
 80023fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002400:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240c:	b29a      	uxth	r2, r3
 800240e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002416:	2b3e      	cmp	r3, #62	@ 0x3e
 8002418:	d91d      	bls.n	8002456 <HAL_PCD_EP_DB_Transmit+0x332>
 800241a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_PCD_EP_DB_Transmit+0x310>
 800242e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002430:	3b01      	subs	r3, #1
 8002432:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b29a      	uxth	r2, r3
 800243a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800243c:	b29b      	uxth	r3, r3
 800243e:	029b      	lsls	r3, r3, #10
 8002440:	b29b      	uxth	r3, r3
 8002442:	4313      	orrs	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244e:	b29a      	uxth	r2, r3
 8002450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	e044      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <HAL_PCD_EP_DB_Transmit+0x350>
 800245e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800246c:	b29a      	uxth	r2, r3
 800246e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002470:	801a      	strh	r2, [r3, #0]
 8002472:	e035      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800247c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800248a:	3301      	adds	r3, #1
 800248c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29a      	uxth	r2, r3
 8002494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002496:	b29b      	uxth	r3, r3
 8002498:	029b      	lsls	r3, r3, #10
 800249a:	b29b      	uxth	r3, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	b29a      	uxth	r2, r3
 80024a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	e01c      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d118      	bne.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024bc:	b29b      	uxth	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024c2:	4413      	add	r3, r2
 80024c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	011a      	lsls	r2, r3, #4
 80024cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ce:	4413      	add	r3, r2
 80024d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80024d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024da:	b29a      	uxth	r2, r3
 80024dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6959      	ldr	r1, [r3, #20]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	891a      	ldrh	r2, [r3, #8]
 80024ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f004 f990 	bl	8006816 <USB_WritePMA>
 80024f6:	e1e2      	b.n	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002500:	b29b      	uxth	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	3306      	adds	r3, #6
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002520:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800252c:	429a      	cmp	r2, r3
 800252e:	d307      	bcc.n	8002540 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002538:	1ad2      	subs	r2, r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	619a      	str	r2, [r3, #24]
 800253e:	e002      	b.n	8002546 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80c0 	bne.w	80026d0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d126      	bne.n	80025a6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002566:	b29b      	uxth	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800256c:	4413      	add	r3, r2
 800256e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	011a      	lsls	r2, r3, #4
 8002576:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002578:	4413      	add	r3, r2
 800257a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800257e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258a:	b29a      	uxth	r2, r3
 800258c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800259a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259e:	b29a      	uxth	r2, r3
 80025a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025a2:	801a      	strh	r2, [r3, #0]
 80025a4:	e01a      	b.n	80025dc <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d116      	bne.n	80025dc <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025bc:	b29b      	uxth	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025c2:	4413      	add	r3, r2
 80025c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	011a      	lsls	r2, r3, #4
 80025cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025ce:	4413      	add	r3, r2
 80025d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80025d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025d8:	2200      	movs	r2, #0
 80025da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d12b      	bne.n	8002642 <HAL_PCD_EP_DB_Transmit+0x51e>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025fe:	4413      	add	r3, r2
 8002600:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	011a      	lsls	r2, r3, #4
 8002608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800260a:	4413      	add	r3, r2
 800260c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002610:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002614:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002620:	b29a      	uxth	r2, r3
 8002622:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002626:	801a      	strh	r2, [r3, #0]
 8002628:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002638:	b29a      	uxth	r2, r3
 800263a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800263e:	801a      	strh	r2, [r3, #0]
 8002640:	e017      	b.n	8002672 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	785b      	ldrb	r3, [r3, #1]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d113      	bne.n	8002672 <HAL_PCD_EP_DB_Transmit+0x54e>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002658:	4413      	add	r3, r2
 800265a:	677b      	str	r3, [r7, #116]	@ 0x74
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	011a      	lsls	r2, r3, #4
 8002662:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002664:	4413      	add	r3, r2
 8002666:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800266a:	673b      	str	r3, [r7, #112]	@ 0x70
 800266c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800266e:	2200      	movs	r2, #0
 8002670:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f005 febc 	bl	80083f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002684:	2b00      	cmp	r3, #0
 8002686:	f040 811a 	bne.w	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	441a      	add	r2, r3
 80026b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	8013      	strh	r3, [r2, #0]
 80026ce:	e0f6      	b.n	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d121      	bne.n	800271e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026f4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	441a      	add	r2, r3
 8002706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800270a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800270e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800271a:	b29b      	uxth	r3, r3
 800271c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 80ca 	bne.w	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002732:	441a      	add	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002740:	441a      	add	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	429a      	cmp	r2, r3
 8002750:	d30b      	bcc.n	800276a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	6a1a      	ldr	r2, [r3, #32]
 800275e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002762:	1ad2      	subs	r2, r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	621a      	str	r2, [r3, #32]
 8002768:	e017      	b.n	800279a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002772:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002782:	e00a      	b.n	800279a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	657b      	str	r3, [r7, #84]	@ 0x54
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d165      	bne.n	8002874 <HAL_PCD_EP_DB_Transmit+0x750>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027bc:	4413      	add	r3, r2
 80027be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	011a      	lsls	r2, r3, #4
 80027c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027c8:	4413      	add	r3, r2
 80027ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80027e6:	d91d      	bls.n	8002824 <HAL_PCD_EP_DB_Transmit+0x700>
 80027e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <HAL_PCD_EP_DB_Transmit+0x6de>
 80027fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027fe:	3b01      	subs	r3, #1
 8002800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002802:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29a      	uxth	r2, r3
 8002808:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800280a:	b29b      	uxth	r3, r3
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	b29b      	uxth	r3, r3
 8002810:	4313      	orrs	r3, r2
 8002812:	b29b      	uxth	r3, r3
 8002814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800281c:	b29a      	uxth	r2, r3
 800281e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	e041      	b.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <HAL_PCD_EP_DB_Transmit+0x71e>
 800282c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283a:	b29a      	uxth	r2, r3
 800283c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	e032      	b.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800284a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_PCD_EP_DB_Transmit+0x738>
 8002856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002858:	3301      	adds	r3, #1
 800285a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800285c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29a      	uxth	r2, r3
 8002862:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002864:	b29b      	uxth	r3, r3
 8002866:	029b      	lsls	r3, r3, #10
 8002868:	b29b      	uxth	r3, r3
 800286a:	4313      	orrs	r3, r2
 800286c:	b29a      	uxth	r2, r3
 800286e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002870:	801a      	strh	r2, [r3, #0]
 8002872:	e019      	b.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	785b      	ldrb	r3, [r3, #1]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d115      	bne.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x784>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288a:	4413      	add	r3, r2
 800288c:	657b      	str	r3, [r7, #84]	@ 0x54
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	011a      	lsls	r2, r3, #4
 8002894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002896:	4413      	add	r3, r2
 8002898:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800289c:	653b      	str	r3, [r7, #80]	@ 0x50
 800289e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028a6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	6959      	ldr	r1, [r3, #20]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	895a      	ldrh	r2, [r3, #10]
 80028b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f003 ffac 	bl	8006816 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028d8:	82bb      	strh	r3, [r7, #20]
 80028da:	8abb      	ldrh	r3, [r7, #20]
 80028dc:	f083 0310 	eor.w	r3, r3, #16
 80028e0:	82bb      	strh	r3, [r7, #20]
 80028e2:	8abb      	ldrh	r3, [r7, #20]
 80028e4:	f083 0320 	eor.w	r3, r3, #32
 80028e8:	82bb      	strh	r3, [r7, #20]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	8abb      	ldrh	r3, [r7, #20]
 80028fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800290a:	b29b      	uxth	r3, r3
 800290c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3790      	adds	r7, #144	@ 0x90
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	817b      	strh	r3, [r7, #10]
 8002926:	4613      	mov	r3, r2
 8002928:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	f003 0207 	and.w	r2, r3, #7
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3310      	adds	r3, #16
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e009      	b.n	8002962 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800294e:	897a      	ldrh	r2, [r7, #10]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2200      	movs	r2, #0
 800296c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	b29a      	uxth	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	80da      	strh	r2, [r3, #6]
 8002976:	e00b      	b.n	8002990 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2201      	movs	r2, #1
 800297c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	b29a      	uxth	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	b29a      	uxth	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e272      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8087 	beq.w	8002aca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029bc:	4b92      	ldr	r3, [pc, #584]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d00c      	beq.n	80029e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d112      	bne.n	80029fa <HAL_RCC_OscConfig+0x5e>
 80029d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e0:	d10b      	bne.n	80029fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e2:	4b89      	ldr	r3, [pc, #548]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d06c      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x12c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d168      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e24c      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x76>
 8002a04:	4b80      	ldr	r3, [pc, #512]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a7f      	ldr	r2, [pc, #508]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	e02e      	b.n	8002a70 <HAL_RCC_OscConfig+0xd4>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x98>
 8002a1a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a7a      	ldr	r2, [pc, #488]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b78      	ldr	r3, [pc, #480]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a77      	ldr	r2, [pc, #476]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e01d      	b.n	8002a70 <HAL_RCC_OscConfig+0xd4>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0xbc>
 8002a3e:	4b72      	ldr	r3, [pc, #456]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a71      	ldr	r2, [pc, #452]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0xd4>
 8002a58:	4b6b      	ldr	r3, [pc, #428]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b68      	ldr	r3, [pc, #416]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a67      	ldr	r2, [pc, #412]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fd ff5a 	bl	8000930 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a80:	f7fd ff56 	bl	8000930 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	@ 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e200      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b5d      	ldr	r3, [pc, #372]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0xe4>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fd ff46 	bl	8000930 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fd ff42 	bl	8000930 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	@ 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e1ec      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	4b53      	ldr	r3, [pc, #332]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x10c>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d063      	beq.n	8002b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ae2:	4b49      	ldr	r3, [pc, #292]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d11c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x18c>
 8002aee:	4b46      	ldr	r3, [pc, #280]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d116      	bne.n	8002b28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	4b43      	ldr	r3, [pc, #268]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_RCC_OscConfig+0x176>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e1c0      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b12:	4b3d      	ldr	r3, [pc, #244]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4939      	ldr	r1, [pc, #228]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b26:	e03a      	b.n	8002b9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b30:	4b36      	ldr	r3, [pc, #216]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fd fefb 	bl	8000930 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7fd fef7 	bl	8000930 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e1a1      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	4b2d      	ldr	r3, [pc, #180]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4927      	ldr	r1, [pc, #156]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
 8002b70:	e015      	b.n	8002b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b72:	4b26      	ldr	r3, [pc, #152]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fd feda 	bl	8000930 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b80:	f7fd fed6 	bl	8000930 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e180      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	4b1d      	ldr	r3, [pc, #116]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d03a      	beq.n	8002c20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d019      	beq.n	8002be6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb2:	4b17      	ldr	r3, [pc, #92]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb8:	f7fd feba 	bl	8000930 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7fd feb6 	bl	8000930 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e160      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bde:	2001      	movs	r0, #1
 8002be0:	f000 fa9c 	bl	800311c <RCC_Delay>
 8002be4:	e01c      	b.n	8002c20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7fd fea0 	bl	8000930 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf2:	e00f      	b.n	8002c14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7fd fe9c 	bl	8000930 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d908      	bls.n	8002c14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e146      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	42420000 	.word	0x42420000
 8002c10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	4b92      	ldr	r3, [pc, #584]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e9      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80a6 	beq.w	8002d7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c32:	4b8b      	ldr	r3, [pc, #556]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10d      	bne.n	8002c5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	4b88      	ldr	r3, [pc, #544]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	4a87      	ldr	r2, [pc, #540]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	61d3      	str	r3, [r2, #28]
 8002c4a:	4b85      	ldr	r3, [pc, #532]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b82      	ldr	r3, [pc, #520]	@ (8002e64 <HAL_RCC_OscConfig+0x4c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d118      	bne.n	8002c98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c66:	4b7f      	ldr	r3, [pc, #508]	@ (8002e64 <HAL_RCC_OscConfig+0x4c8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e64 <HAL_RCC_OscConfig+0x4c8>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7fd fe5d 	bl	8000930 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7a:	f7fd fe59 	bl	8000930 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b64      	cmp	r3, #100	@ 0x64
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e103      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	4b75      	ldr	r3, [pc, #468]	@ (8002e64 <HAL_RCC_OscConfig+0x4c8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x312>
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4a6e      	ldr	r2, [pc, #440]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6213      	str	r3, [r2, #32]
 8002cac:	e02d      	b.n	8002d0a <HAL_RCC_OscConfig+0x36e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x334>
 8002cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a69      	ldr	r2, [pc, #420]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6213      	str	r3, [r2, #32]
 8002cc2:	4b67      	ldr	r3, [pc, #412]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4a66      	ldr	r2, [pc, #408]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6213      	str	r3, [r2, #32]
 8002cce:	e01c      	b.n	8002d0a <HAL_RCC_OscConfig+0x36e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b05      	cmp	r3, #5
 8002cd6:	d10c      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x356>
 8002cd8:	4b61      	ldr	r3, [pc, #388]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4a60      	ldr	r2, [pc, #384]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	6213      	str	r3, [r2, #32]
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6213      	str	r3, [r2, #32]
 8002cf0:	e00b      	b.n	8002d0a <HAL_RCC_OscConfig+0x36e>
 8002cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6213      	str	r3, [r2, #32]
 8002cfe:	4b58      	ldr	r3, [pc, #352]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a57      	ldr	r2, [pc, #348]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d015      	beq.n	8002d3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d12:	f7fd fe0d 	bl	8000930 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fd fe09 	bl	8000930 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0b1      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	4b4b      	ldr	r3, [pc, #300]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ee      	beq.n	8002d1a <HAL_RCC_OscConfig+0x37e>
 8002d3c:	e014      	b.n	8002d68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fd fdf7 	bl	8000930 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fd fdf3 	bl	8000930 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e09b      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5c:	4b40      	ldr	r3, [pc, #256]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ee      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4a3b      	ldr	r2, [pc, #236]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8087 	beq.w	8002e92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d84:	4b36      	ldr	r3, [pc, #216]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d061      	beq.n	8002e54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d146      	bne.n	8002e26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d98:	4b33      	ldr	r3, [pc, #204]	@ (8002e68 <HAL_RCC_OscConfig+0x4cc>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fd fdc7 	bl	8000930 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fd fdc3 	bl	8000930 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e06d      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db8:	4b29      	ldr	r3, [pc, #164]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dcc:	d108      	bne.n	8002de0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dce:	4b24      	ldr	r3, [pc, #144]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	4921      	ldr	r1, [pc, #132]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a19      	ldr	r1, [r3, #32]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	430b      	orrs	r3, r1
 8002df2:	491b      	ldr	r1, [pc, #108]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <HAL_RCC_OscConfig+0x4cc>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7fd fd97 	bl	8000930 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e06:	f7fd fd93 	bl	8000930 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e03d      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x46a>
 8002e24:	e035      	b.n	8002e92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <HAL_RCC_OscConfig+0x4cc>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fd fd80 	bl	8000930 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fd fd7c 	bl	8000930 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e026      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x498>
 8002e52:	e01e      	b.n	8002e92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e019      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40007000 	.word	0x40007000
 8002e68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_RCC_OscConfig+0x500>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0d0      	b.n	8003056 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003060 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d910      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b67      	ldr	r3, [pc, #412]	@ (8003060 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 0207 	bic.w	r2, r3, #7
 8002eca:	4965      	ldr	r1, [pc, #404]	@ (8003060 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0b8      	b.n	8003056 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002efc:	4b59      	ldr	r3, [pc, #356]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a58      	ldr	r2, [pc, #352]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f14:	4b53      	ldr	r3, [pc, #332]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a52      	ldr	r2, [pc, #328]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f20:	4b50      	ldr	r3, [pc, #320]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	494d      	ldr	r1, [pc, #308]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d040      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	4b47      	ldr	r3, [pc, #284]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d115      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e07f      	b.n	8003056 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5e:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e073      	b.n	8003056 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06b      	b.n	8003056 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7e:	4b39      	ldr	r3, [pc, #228]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f023 0203 	bic.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4936      	ldr	r1, [pc, #216]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f90:	f7fd fcce 	bl	8000930 <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f98:	f7fd fcca 	bl	8000930 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e053      	b.n	8003056 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	4b2d      	ldr	r3, [pc, #180]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 020c 	and.w	r2, r3, #12
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d1eb      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b27      	ldr	r3, [pc, #156]	@ (8003060 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d210      	bcs.n	8002ff0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 0207 	bic.w	r2, r3, #7
 8002fd6:	4922      	ldr	r1, [pc, #136]	@ (8003060 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b20      	ldr	r3, [pc, #128]	@ (8003060 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e032      	b.n	8003056 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4916      	ldr	r1, [pc, #88]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800301a:	4b12      	ldr	r3, [pc, #72]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	490e      	ldr	r1, [pc, #56]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800302e:	f000 f821 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8003032:	4602      	mov	r2, r0
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	490a      	ldr	r1, [pc, #40]	@ (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	5ccb      	ldrb	r3, [r1, r3]
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	4a09      	ldr	r2, [pc, #36]	@ (800306c <HAL_RCC_ClockConfig+0x1cc>)
 8003048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800304a:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <HAL_RCC_ClockConfig+0x1d0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fc2c 	bl	80008ac <HAL_InitTick>

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40022000 	.word	0x40022000
 8003064:	40021000 	.word	0x40021000
 8003068:	08008958 	.word	0x08008958
 800306c:	20000004 	.word	0x20000004
 8003070:	20000008 	.word	0x20000008

08003074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	2300      	movs	r3, #0
 8003088:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800308e:	4b1e      	ldr	r3, [pc, #120]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x94>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b04      	cmp	r3, #4
 800309c:	d002      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x30>
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d003      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x36>
 80030a2:	e027      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a4:	4b19      	ldr	r3, [pc, #100]	@ (800310c <HAL_RCC_GetSysClockFreq+0x98>)
 80030a6:	613b      	str	r3, [r7, #16]
      break;
 80030a8:	e027      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	0c9b      	lsrs	r3, r3, #18
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	4a17      	ldr	r2, [pc, #92]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d010      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030c2:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x94>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	0c5b      	lsrs	r3, r3, #17
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	4a11      	ldr	r2, [pc, #68]	@ (8003114 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <HAL_RCC_GetSysClockFreq+0x98>)
 80030d6:	fb03 f202 	mul.w	r2, r3, r2
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e004      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003118 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	613b      	str	r3, [r7, #16]
      break;
 80030f2:	e002      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b05      	ldr	r3, [pc, #20]	@ (800310c <HAL_RCC_GetSysClockFreq+0x98>)
 80030f6:	613b      	str	r3, [r7, #16]
      break;
 80030f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fa:	693b      	ldr	r3, [r7, #16]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	007a1200 	.word	0x007a1200
 8003110:	08008968 	.word	0x08008968
 8003114:	08008978 	.word	0x08008978
 8003118:	003d0900 	.word	0x003d0900

0800311c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <RCC_Delay+0x34>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	@ (8003154 <RCC_Delay+0x38>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0a5b      	lsrs	r3, r3, #9
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003138:	bf00      	nop
  }
  while (Delay --);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1e5a      	subs	r2, r3, #1
 800313e:	60fa      	str	r2, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f9      	bne.n	8003138 <RCC_Delay+0x1c>
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	20000004 	.word	0x20000004
 8003154:	10624dd3 	.word	0x10624dd3

08003158 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d07d      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003178:	4b4f      	ldr	r3, [pc, #316]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10d      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003184:	4b4c      	ldr	r3, [pc, #304]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	4a4b      	ldr	r2, [pc, #300]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800318e:	61d3      	str	r3, [r2, #28]
 8003190:	4b49      	ldr	r3, [pc, #292]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319c:	2301      	movs	r3, #1
 800319e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b46      	ldr	r3, [pc, #280]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d118      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ac:	4b43      	ldr	r3, [pc, #268]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a42      	ldr	r2, [pc, #264]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b8:	f7fd fbba 	bl	8000930 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	e008      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c0:	f7fd fbb6 	bl	8000930 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	@ 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e06d      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b3a      	ldr	r3, [pc, #232]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031de:	4b36      	ldr	r3, [pc, #216]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d02e      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d027      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031fc:	4b2e      	ldr	r3, [pc, #184]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003204:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003206:	4b2e      	ldr	r3, [pc, #184]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800320c:	4b2c      	ldr	r3, [pc, #176]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003212:	4a29      	ldr	r2, [pc, #164]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fd fb85 	bl	8000930 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fd fb81 	bl	8000930 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e036      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324c:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4917      	ldr	r1, [pc, #92]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	4313      	orrs	r3, r2
 800325c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	4a13      	ldr	r2, [pc, #76]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800327c:	4b0e      	ldr	r3, [pc, #56]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	490b      	ldr	r1, [pc, #44]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329a:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4904      	ldr	r1, [pc, #16]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
 80032c0:	42420440 	.word	0x42420440

080032c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e041      	b.n	800335a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd fa0a 	bl	8000704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f000 fb9c 	bl	8003a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_TIM_PWM_Start+0x24>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	bf14      	ite	ne
 8003380:	2301      	movne	r3, #1
 8003382:	2300      	moveq	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e022      	b.n	80033ce <HAL_TIM_PWM_Start+0x6a>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b04      	cmp	r3, #4
 800338c:	d109      	bne.n	80033a2 <HAL_TIM_PWM_Start+0x3e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	bf14      	ite	ne
 800339a:	2301      	movne	r3, #1
 800339c:	2300      	moveq	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	e015      	b.n	80033ce <HAL_TIM_PWM_Start+0x6a>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d109      	bne.n	80033bc <HAL_TIM_PWM_Start+0x58>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e008      	b.n	80033ce <HAL_TIM_PWM_Start+0x6a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e05e      	b.n	8003494 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_PWM_Start+0x82>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033e4:	e013      	b.n	800340e <HAL_TIM_PWM_Start+0xaa>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d104      	bne.n	80033f6 <HAL_TIM_PWM_Start+0x92>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033f4:	e00b      	b.n	800340e <HAL_TIM_PWM_Start+0xaa>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d104      	bne.n	8003406 <HAL_TIM_PWM_Start+0xa2>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003404:	e003      	b.n	800340e <HAL_TIM_PWM_Start+0xaa>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2201      	movs	r2, #1
 8003414:	6839      	ldr	r1, [r7, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fe15 	bl	8004046 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1e      	ldr	r2, [pc, #120]	@ (800349c <HAL_TIM_PWM_Start+0x138>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d107      	bne.n	8003436 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003434:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a18      	ldr	r2, [pc, #96]	@ (800349c <HAL_TIM_PWM_Start+0x138>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00e      	beq.n	800345e <HAL_TIM_PWM_Start+0xfa>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003448:	d009      	beq.n	800345e <HAL_TIM_PWM_Start+0xfa>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a14      	ldr	r2, [pc, #80]	@ (80034a0 <HAL_TIM_PWM_Start+0x13c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_TIM_PWM_Start+0xfa>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a12      	ldr	r2, [pc, #72]	@ (80034a4 <HAL_TIM_PWM_Start+0x140>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d111      	bne.n	8003482 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b06      	cmp	r3, #6
 800346e:	d010      	beq.n	8003492 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003480:	e007      	b.n	8003492 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800

080034a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e041      	b.n	800353e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd f936 	bl	8000740 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 faaa 	bl	8003a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01b      	beq.n	80035aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f06f 0202 	mvn.w	r2, #2
 800357a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fa39 	bl	8003a08 <HAL_TIM_IC_CaptureCallback>
 8003596:	e005      	b.n	80035a4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fa2c 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa3b 	bl	8003a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d01b      	beq.n	80035f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f06f 0204 	mvn.w	r2, #4
 80035c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fa13 	bl	8003a08 <HAL_TIM_IC_CaptureCallback>
 80035e2:	e005      	b.n	80035f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fa06 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa15 	bl	8003a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01b      	beq.n	8003642 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f06f 0208 	mvn.w	r2, #8
 8003612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2204      	movs	r2, #4
 8003618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f9ed 	bl	8003a08 <HAL_TIM_IC_CaptureCallback>
 800362e:	e005      	b.n	800363c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f9e0 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f9ef 	bl	8003a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01b      	beq.n	800368e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f06f 0210 	mvn.w	r2, #16
 800365e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2208      	movs	r2, #8
 8003664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f9c7 	bl	8003a08 <HAL_TIM_IC_CaptureCallback>
 800367a:	e005      	b.n	8003688 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f9ba 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9c9 	bl	8003a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00c      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f06f 0201 	mvn.w	r2, #1
 80036aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f999 	bl	80039e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00c      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fd95 	bl	8004200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00c      	beq.n	80036fa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f999 	bl	8003a2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00c      	beq.n	800371e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f06f 0220 	mvn.w	r2, #32
 8003716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fd68 	bl	80041ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003740:	2302      	movs	r3, #2
 8003742:	e088      	b.n	8003856 <HAL_TIM_IC_ConfigChannel+0x130>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11b      	bne.n	800378a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003762:	f000 fb63 	bl	8003e2c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 020c 	bic.w	r2, r2, #12
 8003774:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6999      	ldr	r1, [r3, #24]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	619a      	str	r2, [r3, #24]
 8003788:	e060      	b.n	800384c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b04      	cmp	r3, #4
 800378e:	d11c      	bne.n	80037ca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80037a0:	f000 fb9e 	bl	8003ee0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80037b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6999      	ldr	r1, [r3, #24]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	021a      	lsls	r2, r3, #8
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	619a      	str	r2, [r3, #24]
 80037c8:	e040      	b.n	800384c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037e0:	f000 fbba 	bl	8003f58 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 020c 	bic.w	r2, r2, #12
 80037f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69d9      	ldr	r1, [r3, #28]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	61da      	str	r2, [r3, #28]
 8003806:	e021      	b.n	800384c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d11c      	bne.n	8003848 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800381e:	f000 fbd6 	bl	8003fce <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003830:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69d9      	ldr	r1, [r3, #28]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	021a      	lsls	r2, r3, #8
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	61da      	str	r2, [r3, #28]
 8003846:	e001      	b.n	800384c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800387a:	2302      	movs	r3, #2
 800387c:	e0ae      	b.n	80039dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b0c      	cmp	r3, #12
 800388a:	f200 809f 	bhi.w	80039cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800388e:	a201      	add	r2, pc, #4	@ (adr r2, 8003894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038c9 	.word	0x080038c9
 8003898:	080039cd 	.word	0x080039cd
 800389c:	080039cd 	.word	0x080039cd
 80038a0:	080039cd 	.word	0x080039cd
 80038a4:	08003909 	.word	0x08003909
 80038a8:	080039cd 	.word	0x080039cd
 80038ac:	080039cd 	.word	0x080039cd
 80038b0:	080039cd 	.word	0x080039cd
 80038b4:	0800394b 	.word	0x0800394b
 80038b8:	080039cd 	.word	0x080039cd
 80038bc:	080039cd 	.word	0x080039cd
 80038c0:	080039cd 	.word	0x080039cd
 80038c4:	0800398b 	.word	0x0800398b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f924 	bl	8003b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0208 	orr.w	r2, r2, #8
 80038e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0204 	bic.w	r2, r2, #4
 80038f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6999      	ldr	r1, [r3, #24]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	619a      	str	r2, [r3, #24]
      break;
 8003906:	e064      	b.n	80039d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f96a 	bl	8003be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6999      	ldr	r1, [r3, #24]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	021a      	lsls	r2, r3, #8
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	619a      	str	r2, [r3, #24]
      break;
 8003948:	e043      	b.n	80039d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 f9b3 	bl	8003cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0208 	orr.w	r2, r2, #8
 8003964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0204 	bic.w	r2, r2, #4
 8003974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69d9      	ldr	r1, [r3, #28]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	61da      	str	r2, [r3, #28]
      break;
 8003988:	e023      	b.n	80039d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f9fd 	bl	8003d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69d9      	ldr	r1, [r3, #28]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	021a      	lsls	r2, r3, #8
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	61da      	str	r2, [r3, #28]
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
      break;
 80039d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039da:	7dfb      	ldrb	r3, [r7, #23]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
	...

08003a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a2f      	ldr	r2, [pc, #188]	@ (8003b10 <TIM_Base_SetConfig+0xd0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00b      	beq.n	8003a70 <TIM_Base_SetConfig+0x30>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5e:	d007      	beq.n	8003a70 <TIM_Base_SetConfig+0x30>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a2c      	ldr	r2, [pc, #176]	@ (8003b14 <TIM_Base_SetConfig+0xd4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d003      	beq.n	8003a70 <TIM_Base_SetConfig+0x30>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b18 <TIM_Base_SetConfig+0xd8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d108      	bne.n	8003a82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a22      	ldr	r2, [pc, #136]	@ (8003b10 <TIM_Base_SetConfig+0xd0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00b      	beq.n	8003aa2 <TIM_Base_SetConfig+0x62>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a90:	d007      	beq.n	8003aa2 <TIM_Base_SetConfig+0x62>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1f      	ldr	r2, [pc, #124]	@ (8003b14 <TIM_Base_SetConfig+0xd4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_Base_SetConfig+0x62>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b18 <TIM_Base_SetConfig+0xd8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d108      	bne.n	8003ab4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a0d      	ldr	r2, [pc, #52]	@ (8003b10 <TIM_Base_SetConfig+0xd0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d103      	bne.n	8003ae8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f023 0201 	bic.w	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	611a      	str	r2, [r3, #16]
  }
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800

08003b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f023 0201 	bic.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f023 0302 	bic.w	r3, r3, #2
 8003b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a1c      	ldr	r2, [pc, #112]	@ (8003be4 <TIM_OC1_SetConfig+0xc8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d10c      	bne.n	8003b92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 0308 	bic.w	r3, r3, #8
 8003b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f023 0304 	bic.w	r3, r3, #4
 8003b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a13      	ldr	r2, [pc, #76]	@ (8003be4 <TIM_OC1_SetConfig+0xc8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d111      	bne.n	8003bbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	621a      	str	r2, [r3, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40012c00 	.word	0x40012c00

08003be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f023 0210 	bic.w	r2, r3, #16
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0320 	bic.w	r3, r3, #32
 8003c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <TIM_OC2_SetConfig+0xd0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10d      	bne.n	8003c64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <TIM_OC2_SetConfig+0xd0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d113      	bne.n	8003c94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00

08003cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0303 	bic.w	r3, r3, #3
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1d      	ldr	r2, [pc, #116]	@ (8003d8c <TIM_OC3_SetConfig+0xd0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d10d      	bne.n	8003d36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a14      	ldr	r2, [pc, #80]	@ (8003d8c <TIM_OC3_SetConfig+0xd0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d113      	bne.n	8003d66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	621a      	str	r2, [r3, #32]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40012c00 	.word	0x40012c00

08003d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	031b      	lsls	r3, r3, #12
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0f      	ldr	r2, [pc, #60]	@ (8003e28 <TIM_OC4_SetConfig+0x98>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d109      	bne.n	8003e04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	40012c00 	.word	0x40012c00

08003e2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f023 0201 	bic.w	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed4 <TIM_TI1_SetConfig+0xa8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00b      	beq.n	8003e72 <TIM_TI1_SetConfig+0x46>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e60:	d007      	beq.n	8003e72 <TIM_TI1_SetConfig+0x46>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed8 <TIM_TI1_SetConfig+0xac>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_TI1_SetConfig+0x46>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003edc <TIM_TI1_SetConfig+0xb0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <TIM_TI1_SetConfig+0x4a>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <TIM_TI1_SetConfig+0x4c>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 0303 	bic.w	r3, r3, #3
 8003e82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e003      	b.n	8003e96 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f023 030a 	bic.w	r3, r3, #10
 8003eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f003 030a 	and.w	r3, r3, #10
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	621a      	str	r2, [r3, #32]
}
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800

08003ee0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f023 0210 	bic.w	r2, r3, #16
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	031b      	lsls	r3, r3, #12
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f32:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f023 0303 	bic.w	r3, r3, #3
 8003f84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	621a      	str	r2, [r3, #32]
}
 8003fc4:	bf00      	nop
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ffa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800400c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	031b      	lsls	r3, r3, #12
 8004012:	b29b      	uxth	r3, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004020:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	031b      	lsls	r3, r3, #12
 8004026:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004046:	b480      	push	{r7}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2201      	movs	r2, #1
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	43db      	mvns	r3, r3
 8004068:	401a      	ands	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1a      	ldr	r2, [r3, #32]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	431a      	orrs	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	621a      	str	r2, [r3, #32]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
	...

08004090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e046      	b.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a16      	ldr	r2, [pc, #88]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00e      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f4:	d009      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a12      	ldr	r2, [pc, #72]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a10      	ldr	r2, [pc, #64]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d10c      	bne.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	4313      	orrs	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800

0800414c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004164:	2302      	movs	r3, #2
 8004166:	e03d      	b.n	80041e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	4638      	mov	r0, r7
 800421c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800423c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004240:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004260:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004264:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	b29b      	uxth	r3, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	b29b      	uxth	r3, r3
 8004276:	4013      	ands	r3, r2
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4638      	mov	r0, r7
 80042ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
	...

080042e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b09d      	sub	sp, #116	@ 0x74
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004306:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	78db      	ldrb	r3, [r3, #3]
 800430e:	2b03      	cmp	r3, #3
 8004310:	d81f      	bhi.n	8004352 <USB_ActivateEndpoint+0x72>
 8004312:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <USB_ActivateEndpoint+0x38>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	08004329 	.word	0x08004329
 800431c:	08004345 	.word	0x08004345
 8004320:	0800435b 	.word	0x0800435b
 8004324:	08004337 	.word	0x08004337
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004328:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800432c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004330:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004334:	e012      	b.n	800435c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004336:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800433a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800433e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004342:	e00b      	b.n	800435c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004344:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004348:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800434c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004350:	e004      	b.n	800435c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004358:	e000      	b.n	800435c <USB_ActivateEndpoint+0x7c>
      break;
 800435a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	441a      	add	r2, r3
 8004366:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800436a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800436e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800437a:	b29b      	uxth	r3, r3
 800437c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004394:	b29b      	uxth	r3, r3
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	4313      	orrs	r3, r2
 800439c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80043ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043be:	b29b      	uxth	r3, r3
 80043c0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	7b1b      	ldrb	r3, [r3, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 8178 	bne.w	80046bc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8084 	beq.w	80044de <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	4413      	add	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	011a      	lsls	r2, r3, #4
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	88db      	ldrh	r3, [r3, #6]
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	b29b      	uxth	r3, r3
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	827b      	strh	r3, [r7, #18]
 8004418:	8a7b      	ldrh	r3, [r7, #18]
 800441a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01b      	beq.n	800445a <USB_ActivateEndpoint+0x17a>
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004438:	823b      	strh	r3, [r7, #16]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	441a      	add	r2, r3
 8004444:	8a3b      	ldrh	r3, [r7, #16]
 8004446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800444a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800444e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004452:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004456:	b29b      	uxth	r3, r3
 8004458:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	78db      	ldrb	r3, [r3, #3]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d020      	beq.n	80044a4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004478:	81bb      	strh	r3, [r7, #12]
 800447a:	89bb      	ldrh	r3, [r7, #12]
 800447c:	f083 0320 	eor.w	r3, r3, #32
 8004480:	81bb      	strh	r3, [r7, #12]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	441a      	add	r2, r3
 800448c:	89bb      	ldrh	r3, [r7, #12]
 800448e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800449a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800449e:	b29b      	uxth	r3, r3
 80044a0:	8013      	strh	r3, [r2, #0]
 80044a2:	e2d5      	b.n	8004a50 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ba:	81fb      	strh	r3, [r7, #14]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	441a      	add	r2, r3
 80044c6:	89fb      	ldrh	r3, [r7, #14]
 80044c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044d8:	b29b      	uxth	r3, r3
 80044da:	8013      	strh	r3, [r2, #0]
 80044dc:	e2b8      	b.n	8004a50 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ee:	4413      	add	r3, r2
 80044f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	011a      	lsls	r2, r3, #4
 80044f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	88db      	ldrh	r3, [r3, #6]
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	b29b      	uxth	r3, r3
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800451c:	b29b      	uxth	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	4413      	add	r3, r2
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	011a      	lsls	r2, r3, #4
 800452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452e:	4413      	add	r3, r2
 8004530:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004540:	b29a      	uxth	r2, r3
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	801a      	strh	r2, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b3e      	cmp	r3, #62	@ 0x3e
 800454c:	d91d      	bls.n	800458a <USB_ActivateEndpoint+0x2aa>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <USB_ActivateEndpoint+0x288>
 8004562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004564:	3b01      	subs	r3, #1
 8004566:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29a      	uxth	r2, r3
 800456e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004570:	b29b      	uxth	r3, r3
 8004572:	029b      	lsls	r3, r3, #10
 8004574:	b29b      	uxth	r3, r3
 8004576:	4313      	orrs	r3, r2
 8004578:	b29b      	uxth	r3, r3
 800457a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004582:	b29a      	uxth	r2, r3
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	e026      	b.n	80045d8 <USB_ActivateEndpoint+0x2f8>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <USB_ActivateEndpoint+0x2c8>
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	e017      	b.n	80045d8 <USB_ActivateEndpoint+0x2f8>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <USB_ActivateEndpoint+0x2e2>
 80045bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045be:	3301      	adds	r3, #1
 80045c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	4313      	orrs	r3, r2
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80045e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01b      	beq.n	8004628 <USB_ActivateEndpoint+0x348>
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004606:	843b      	strh	r3, [r7, #32]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	441a      	add	r2, r3
 8004612:	8c3b      	ldrh	r3, [r7, #32]
 8004614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800461c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004624:	b29b      	uxth	r3, r3
 8004626:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d124      	bne.n	800467a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004646:	83bb      	strh	r3, [r7, #28]
 8004648:	8bbb      	ldrh	r3, [r7, #28]
 800464a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800464e:	83bb      	strh	r3, [r7, #28]
 8004650:	8bbb      	ldrh	r3, [r7, #28]
 8004652:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004656:	83bb      	strh	r3, [r7, #28]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	8bbb      	ldrh	r3, [r7, #28]
 8004664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800466c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004674:	b29b      	uxth	r3, r3
 8004676:	8013      	strh	r3, [r2, #0]
 8004678:	e1ea      	b.n	8004a50 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800468c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004690:	83fb      	strh	r3, [r7, #30]
 8004692:	8bfb      	ldrh	r3, [r7, #30]
 8004694:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004698:	83fb      	strh	r3, [r7, #30]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	441a      	add	r2, r3
 80046a4:	8bfb      	ldrh	r3, [r7, #30]
 80046a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	8013      	strh	r3, [r2, #0]
 80046ba:	e1c9      	b.n	8004a50 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	78db      	ldrb	r3, [r3, #3]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d11e      	bne.n	8004702 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046da:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	441a      	add	r2, r3
 80046e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80046ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046f4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80046f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	8013      	strh	r3, [r2, #0]
 8004700:	e01d      	b.n	800473e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004718:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	441a      	add	r2, r3
 8004726:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800472a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800472e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800473a:	b29b      	uxth	r3, r3
 800473c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004748:	b29b      	uxth	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800474e:	4413      	add	r3, r2
 8004750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	011a      	lsls	r2, r3, #4
 8004758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800475a:	4413      	add	r3, r2
 800475c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004760:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	891b      	ldrh	r3, [r3, #8]
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	b29b      	uxth	r3, r3
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	657b      	str	r3, [r7, #84]	@ 0x54
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800477c:	b29b      	uxth	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004782:	4413      	add	r3, r2
 8004784:	657b      	str	r3, [r7, #84]	@ 0x54
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	011a      	lsls	r2, r3, #4
 800478c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800478e:	4413      	add	r3, r2
 8004790:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004794:	653b      	str	r3, [r7, #80]	@ 0x50
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	895b      	ldrh	r3, [r3, #10]
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047a4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f040 8093 	bne.w	80048d6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80047c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80047c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01b      	beq.n	8004804 <USB_ActivateEndpoint+0x524>
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	441a      	add	r2, r3
 80047ee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80047f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004800:	b29b      	uxth	r3, r3
 8004802:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004812:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01b      	beq.n	8004854 <USB_ActivateEndpoint+0x574>
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800482e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004832:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	441a      	add	r2, r3
 800483e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004840:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004844:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800484c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004850:	b29b      	uxth	r3, r3
 8004852:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800486c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800486e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004872:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004874:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004876:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800487a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	441a      	add	r2, r3
 80048be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80048c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	8013      	strh	r3, [r2, #0]
 80048d4:	e0bc      	b.n	8004a50 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80048e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80048ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01d      	beq.n	800492e <USB_ActivateEndpoint+0x64e>
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004908:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800491a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800491e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004922:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800493e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01d      	beq.n	8004986 <USB_ActivateEndpoint+0x6a6>
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004960:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800497a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800497e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004982:	b29b      	uxth	r3, r3
 8004984:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	78db      	ldrb	r3, [r3, #3]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d024      	beq.n	80049d8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80049a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80049ac:	f083 0320 	eor.w	r3, r3, #32
 80049b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80049c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8013      	strh	r3, [r2, #0]
 80049d6:	e01d      	b.n	8004a14 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004a50:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3774      	adds	r7, #116	@ 0x74
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop

08004a60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b08d      	sub	sp, #52	@ 0x34
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	7b1b      	ldrb	r3, [r3, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f040 808e 	bne.w	8004b90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d044      	beq.n	8004b06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	81bb      	strh	r3, [r7, #12]
 8004a8a:	89bb      	ldrh	r3, [r7, #12]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <USB_DeactivateEndpoint+0x6c>
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aaa:	817b      	strh	r3, [r7, #10]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	441a      	add	r2, r3
 8004ab6:	897b      	ldrh	r3, [r7, #10]
 8004ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ac4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ae2:	813b      	strh	r3, [r7, #8]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	893b      	ldrh	r3, [r7, #8]
 8004af0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	8013      	strh	r3, [r2, #0]
 8004b04:	e192      	b.n	8004e2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	827b      	strh	r3, [r7, #18]
 8004b14:	8a7b      	ldrh	r3, [r7, #18]
 8004b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01b      	beq.n	8004b56 <USB_DeactivateEndpoint+0xf6>
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b34:	823b      	strh	r3, [r7, #16]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	441a      	add	r2, r3
 8004b40:	8a3b      	ldrh	r3, [r7, #16]
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6c:	81fb      	strh	r3, [r7, #14]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]
 8004b8e:	e14d      	b.n	8004e2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f040 80a5 	bne.w	8004ce4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	843b      	strh	r3, [r7, #32]
 8004ba8:	8c3b      	ldrh	r3, [r7, #32]
 8004baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01b      	beq.n	8004bea <USB_DeactivateEndpoint+0x18a>
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc8:	83fb      	strh	r3, [r7, #30]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	441a      	add	r2, r3
 8004bd4:	8bfb      	ldrh	r3, [r7, #30]
 8004bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	83bb      	strh	r3, [r7, #28]
 8004bf8:	8bbb      	ldrh	r3, [r7, #28]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01b      	beq.n	8004c3a <USB_DeactivateEndpoint+0x1da>
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c18:	837b      	strh	r3, [r7, #26]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	8b7b      	ldrh	r3, [r7, #26]
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c50:	833b      	strh	r3, [r7, #24]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	8b3b      	ldrh	r3, [r7, #24]
 8004c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c88:	82fb      	strh	r3, [r7, #22]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	441a      	add	r2, r3
 8004c94:	8afb      	ldrh	r3, [r7, #22]
 8004c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc0:	82bb      	strh	r3, [r7, #20]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	8abb      	ldrh	r3, [r7, #20]
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]
 8004ce2:	e0a3      	b.n	8004e2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004cf2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01b      	beq.n	8004d34 <USB_DeactivateEndpoint+0x2d4>
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d12:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004d20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004d42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01b      	beq.n	8004d84 <USB_DeactivateEndpoint+0x324>
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004d70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004de0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004de4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	441a      	add	r2, r3
 8004e16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3734      	adds	r7, #52	@ 0x34
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b0c2      	sub	sp, #264	@ 0x108
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e46:	6018      	str	r0, [r3, #0]
 8004e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e50:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	f040 86b7 	bne.w	8005bd2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d908      	bls.n	8004e92 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004e90:	e007      	b.n	8004ea2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	7b1b      	ldrb	r3, [r3, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d13a      	bne.n	8004f28 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6959      	ldr	r1, [r3, #20]
 8004ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	88da      	ldrh	r2, [r3, #6]
 8004eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ed4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ed8:	6800      	ldr	r0, [r0, #0]
 8004eda:	f001 fc9c 	bl	8006816 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4413      	add	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	011a      	lsls	r2, r3, #4
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4413      	add	r3, r2
 8004f14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	f000 be1f 	b.w	8005b66 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	78db      	ldrb	r3, [r3, #3]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	f040 8462 	bne.w	80057fe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6a1a      	ldr	r2, [r3, #32]
 8004f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	f240 83df 	bls.w	8005716 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fa8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 81c7 	beq.w	8005388 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	633b      	str	r3, [r7, #48]	@ 0x30
 8005006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800500a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d177      	bne.n	8005106 <USB_EPStartXfer+0x2ce>
 8005016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800501a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005030:	b29b      	uxth	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	4413      	add	r3, r2
 8005038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800503a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800503e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	011a      	lsls	r2, r3, #4
 8005048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504a:	4413      	add	r3, r2
 800504c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800505c:	b29a      	uxth	r2, r3
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005066:	2b3e      	cmp	r3, #62	@ 0x3e
 8005068:	d921      	bls.n	80050ae <USB_EPStartXfer+0x276>
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <USB_EPStartXfer+0x252>
 8005080:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005084:	3b01      	subs	r3, #1
 8005086:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29a      	uxth	r2, r3
 8005090:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005094:	b29b      	uxth	r3, r3
 8005096:	029b      	lsls	r3, r3, #10
 8005098:	b29b      	uxth	r3, r3
 800509a:	4313      	orrs	r3, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	e050      	b.n	8005150 <USB_EPStartXfer+0x318>
 80050ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <USB_EPStartXfer+0x294>
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	801a      	strh	r2, [r3, #0]
 80050ca:	e041      	b.n	8005150 <USB_EPStartXfer+0x318>
 80050cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d004      	beq.n	80050ec <USB_EPStartXfer+0x2b4>
 80050e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80050e6:	3301      	adds	r3, #1
 80050e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	029b      	lsls	r3, r3, #10
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	4313      	orrs	r3, r2
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	e024      	b.n	8005150 <USB_EPStartXfer+0x318>
 8005106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d11c      	bne.n	8005150 <USB_EPStartXfer+0x318>
 8005116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005124:	b29b      	uxth	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	4413      	add	r3, r2
 800512c:	633b      	str	r3, [r7, #48]	@ 0x30
 800512e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	011a      	lsls	r2, r3, #4
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	4413      	add	r3, r2
 8005140:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800514a:	b29a      	uxth	r2, r3
 800514c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	895b      	ldrh	r3, [r3, #10]
 800515c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6959      	ldr	r1, [r3, #20]
 800516c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005170:	b29b      	uxth	r3, r3
 8005172:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005176:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800517a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800517e:	6800      	ldr	r0, [r0, #0]
 8005180:	f001 fb49 	bl	8006816 <USB_WritePMA>
            ep->xfer_buff += len;
 8005184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005194:	441a      	add	r2, r3
 8005196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d90f      	bls.n	80051de <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80051be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6a1a      	ldr	r2, [r3, #32]
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	621a      	str	r2, [r3, #32]
 80051dc:	e00e      	b.n	80051fc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80051de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80051ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2200      	movs	r2, #0
 80051fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d177      	bne.n	80052fc <USB_EPStartXfer+0x4c4>
 800520c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005226:	b29b      	uxth	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	4413      	add	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	011a      	lsls	r2, r3, #4
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	4413      	add	r3, r2
 8005242:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005252:	b29a      	uxth	r2, r3
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800525c:	2b3e      	cmp	r3, #62	@ 0x3e
 800525e:	d921      	bls.n	80052a4 <USB_EPStartXfer+0x46c>
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800526a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2b00      	cmp	r3, #0
 8005274:	d104      	bne.n	8005280 <USB_EPStartXfer+0x448>
 8005276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800527a:	3b01      	subs	r3, #1
 800527c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29a      	uxth	r2, r3
 8005286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800528a:	b29b      	uxth	r3, r3
 800528c:	029b      	lsls	r3, r3, #10
 800528e:	b29b      	uxth	r3, r3
 8005290:	4313      	orrs	r3, r2
 8005292:	b29b      	uxth	r3, r3
 8005294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529c:	b29a      	uxth	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	e056      	b.n	8005352 <USB_EPStartXfer+0x51a>
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <USB_EPStartXfer+0x48a>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	e047      	b.n	8005352 <USB_EPStartXfer+0x51a>
 80052c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <USB_EPStartXfer+0x4aa>
 80052d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052dc:	3301      	adds	r3, #1
 80052de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	029b      	lsls	r3, r3, #10
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	4313      	orrs	r3, r2
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	e02a      	b.n	8005352 <USB_EPStartXfer+0x51a>
 80052fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d122      	bne.n	8005352 <USB_EPStartXfer+0x51a>
 800530c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	4413      	add	r3, r2
 800532e:	623b      	str	r3, [r7, #32]
 8005330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	011a      	lsls	r2, r3, #4
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	4413      	add	r3, r2
 8005342:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534c:	b29a      	uxth	r2, r3
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	891b      	ldrh	r3, [r3, #8]
 800535e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6959      	ldr	r1, [r3, #20]
 800536e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005372:	b29b      	uxth	r3, r3
 8005374:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005378:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800537c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005380:	6800      	ldr	r0, [r0, #0]
 8005382:	f001 fa48 	bl	8006816 <USB_WritePMA>
 8005386:	e3ee      	b.n	8005b66 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d177      	bne.n	8005488 <USB_EPStartXfer+0x650>
 8005398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b8:	4413      	add	r3, r2
 80053ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	011a      	lsls	r2, r3, #4
 80053ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053cc:	4413      	add	r3, r2
 80053ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053de:	b29a      	uxth	r2, r3
 80053e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80053ea:	d921      	bls.n	8005430 <USB_EPStartXfer+0x5f8>
 80053ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d104      	bne.n	800540c <USB_EPStartXfer+0x5d4>
 8005402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005406:	3b01      	subs	r3, #1
 8005408:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800540c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29a      	uxth	r2, r3
 8005412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005416:	b29b      	uxth	r3, r3
 8005418:	029b      	lsls	r3, r3, #10
 800541a:	b29b      	uxth	r3, r3
 800541c:	4313      	orrs	r3, r2
 800541e:	b29b      	uxth	r3, r3
 8005420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005428:	b29a      	uxth	r2, r3
 800542a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	e056      	b.n	80054de <USB_EPStartXfer+0x6a6>
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <USB_EPStartXfer+0x616>
 8005438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005446:	b29a      	uxth	r2, r3
 8005448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	e047      	b.n	80054de <USB_EPStartXfer+0x6a6>
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005452:	085b      	lsrs	r3, r3, #1
 8005454:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <USB_EPStartXfer+0x636>
 8005464:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005468:	3301      	adds	r3, #1
 800546a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800546e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29a      	uxth	r2, r3
 8005474:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005478:	b29b      	uxth	r3, r3
 800547a:	029b      	lsls	r3, r3, #10
 800547c:	b29b      	uxth	r3, r3
 800547e:	4313      	orrs	r3, r2
 8005480:	b29a      	uxth	r2, r3
 8005482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005484:	801a      	strh	r2, [r3, #0]
 8005486:	e02a      	b.n	80054de <USB_EPStartXfer+0x6a6>
 8005488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d122      	bne.n	80054de <USB_EPStartXfer+0x6a6>
 8005498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800549c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054b8:	4413      	add	r3, r2
 80054ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80054bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	011a      	lsls	r2, r3, #4
 80054ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054cc:	4413      	add	r3, r2
 80054ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d8:	b29a      	uxth	r2, r3
 80054da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	891b      	ldrh	r3, [r3, #8]
 80054ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6959      	ldr	r1, [r3, #20]
 80054fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005504:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005508:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800550c:	6800      	ldr	r0, [r0, #0]
 800550e:	f001 f982 	bl	8006816 <USB_WritePMA>
            ep->xfer_buff += len;
 8005512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695a      	ldr	r2, [r3, #20]
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005522:	441a      	add	r2, r3
 8005524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a1a      	ldr	r2, [r3, #32]
 800553c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	429a      	cmp	r2, r3
 800554a:	d90f      	bls.n	800556c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800554c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a1a      	ldr	r2, [r3, #32]
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555c:	1ad2      	subs	r2, r2, r3
 800555e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	621a      	str	r2, [r3, #32]
 800556a:	e00e      	b.n	800558a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800556c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800557c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800558a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	643b      	str	r3, [r7, #64]	@ 0x40
 8005596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d177      	bne.n	8005696 <USB_EPStartXfer+0x85e>
 80055a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c6:	4413      	add	r3, r2
 80055c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	011a      	lsls	r2, r3, #4
 80055d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055da:	4413      	add	r3, r2
 80055dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80055f8:	d921      	bls.n	800563e <USB_EPStartXfer+0x806>
 80055fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005608:	f003 031f 	and.w	r3, r3, #31
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <USB_EPStartXfer+0x7e2>
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	3b01      	subs	r3, #1
 8005616:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800561a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29a      	uxth	r2, r3
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	b29b      	uxth	r3, r3
 8005626:	029b      	lsls	r3, r3, #10
 8005628:	b29b      	uxth	r3, r3
 800562a:	4313      	orrs	r3, r2
 800562c:	b29b      	uxth	r3, r3
 800562e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005636:	b29a      	uxth	r2, r3
 8005638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	e050      	b.n	80056e0 <USB_EPStartXfer+0x8a8>
 800563e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <USB_EPStartXfer+0x824>
 8005646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005654:	b29a      	uxth	r2, r3
 8005656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	e041      	b.n	80056e0 <USB_EPStartXfer+0x8a8>
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <USB_EPStartXfer+0x844>
 8005672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005676:	3301      	adds	r3, #1
 8005678:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800567c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29a      	uxth	r2, r3
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005686:	b29b      	uxth	r3, r3
 8005688:	029b      	lsls	r3, r3, #10
 800568a:	b29b      	uxth	r3, r3
 800568c:	4313      	orrs	r3, r2
 800568e:	b29a      	uxth	r2, r3
 8005690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005692:	801a      	strh	r2, [r3, #0]
 8005694:	e024      	b.n	80056e0 <USB_EPStartXfer+0x8a8>
 8005696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800569a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d11c      	bne.n	80056e0 <USB_EPStartXfer+0x8a8>
 80056a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ba:	4413      	add	r3, r2
 80056bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80056be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	011a      	lsls	r2, r3, #4
 80056cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	895b      	ldrh	r3, [r3, #10]
 80056ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6959      	ldr	r1, [r3, #20]
 80056fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005700:	b29b      	uxth	r3, r3
 8005702:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005706:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800570a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800570e:	6800      	ldr	r0, [r0, #0]
 8005710:	f001 f881 	bl	8006816 <USB_WritePMA>
 8005714:	e227      	b.n	8005b66 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	441a      	add	r2, r3
 800576a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800576e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800577a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800577e:	b29b      	uxth	r3, r3
 8005780:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800578e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800579c:	b29b      	uxth	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057a2:	4413      	add	r3, r2
 80057a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	011a      	lsls	r2, r3, #4
 80057b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057b6:	4413      	add	r3, r2
 80057b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	891b      	ldrh	r3, [r3, #8]
 80057d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6959      	ldr	r1, [r3, #20]
 80057e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057f6:	6800      	ldr	r0, [r0, #0]
 80057f8:	f001 f80d 	bl	8006816 <USB_WritePMA>
 80057fc:	e1b3      	b.n	8005b66 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a1a      	ldr	r2, [r3, #32]
 800580a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800581c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800582a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	b29b      	uxth	r3, r3
 800583a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80c6 	beq.w	80059d0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005848:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d177      	bne.n	8005950 <USB_EPStartXfer+0xb18>
 8005860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005864:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800586c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800587a:	b29b      	uxth	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005880:	4413      	add	r3, r2
 8005882:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	011a      	lsls	r2, r3, #4
 8005892:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005894:	4413      	add	r3, r2
 8005896:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800589a:	667b      	str	r3, [r7, #100]	@ 0x64
 800589c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80058b2:	d921      	bls.n	80058f8 <USB_EPStartXfer+0xac0>
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <USB_EPStartXfer+0xa9c>
 80058ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80058ce:	3b01      	subs	r3, #1
 80058d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29a      	uxth	r2, r3
 80058da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80058de:	b29b      	uxth	r3, r3
 80058e0:	029b      	lsls	r3, r3, #10
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	4313      	orrs	r3, r2
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e050      	b.n	800599a <USB_EPStartXfer+0xb62>
 80058f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10a      	bne.n	8005916 <USB_EPStartXfer+0xade>
 8005900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590e:	b29a      	uxth	r2, r3
 8005910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e041      	b.n	800599a <USB_EPStartXfer+0xb62>
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <USB_EPStartXfer+0xafe>
 800592c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005930:	3301      	adds	r3, #1
 8005932:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005936:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29a      	uxth	r2, r3
 800593c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005940:	b29b      	uxth	r3, r3
 8005942:	029b      	lsls	r3, r3, #10
 8005944:	b29b      	uxth	r3, r3
 8005946:	4313      	orrs	r3, r2
 8005948:	b29a      	uxth	r2, r3
 800594a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	e024      	b.n	800599a <USB_EPStartXfer+0xb62>
 8005950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d11c      	bne.n	800599a <USB_EPStartXfer+0xb62>
 8005960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005964:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800596e:	b29b      	uxth	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005974:	4413      	add	r3, r2
 8005976:	673b      	str	r3, [r7, #112]	@ 0x70
 8005978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	011a      	lsls	r2, r3, #4
 8005986:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005988:	4413      	add	r3, r2
 800598a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800598e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	b29a      	uxth	r2, r3
 8005996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005998:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800599a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	895b      	ldrh	r3, [r3, #10]
 80059a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6959      	ldr	r1, [r3, #20]
 80059b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059c8:	6800      	ldr	r0, [r0, #0]
 80059ca:	f000 ff24 	bl	8006816 <USB_WritePMA>
 80059ce:	e0ca      	b.n	8005b66 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d177      	bne.n	8005ad0 <USB_EPStartXfer+0xc98>
 80059e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a00:	4413      	add	r3, r2
 8005a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	011a      	lsls	r2, r3, #4
 8005a12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a14:	4413      	add	r3, r2
 8005a16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a2a:	801a      	strh	r2, [r3, #0]
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a30:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a32:	d921      	bls.n	8005a78 <USB_EPStartXfer+0xc40>
 8005a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d104      	bne.n	8005a54 <USB_EPStartXfer+0xc1c>
 8005a4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	029b      	lsls	r3, r3, #10
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	4313      	orrs	r3, r2
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	e05c      	b.n	8005b32 <USB_EPStartXfer+0xcfa>
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <USB_EPStartXfer+0xc5e>
 8005a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	e04d      	b.n	8005b32 <USB_EPStartXfer+0xcfa>
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <USB_EPStartXfer+0xc7e>
 8005aac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ab6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	029b      	lsls	r3, r3, #10
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e030      	b.n	8005b32 <USB_EPStartXfer+0xcfa>
 8005ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d128      	bne.n	8005b32 <USB_EPStartXfer+0xcfa>
 8005ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b04:	4413      	add	r3, r2
 8005b06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	011a      	lsls	r2, r3, #4
 8005b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	891b      	ldrh	r3, [r3, #8]
 8005b3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6959      	ldr	r1, [r3, #20]
 8005b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b58:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b5c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b60:	6800      	ldr	r0, [r0, #0]
 8005b62:	f000 fe58 	bl	8006816 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b8c:	817b      	strh	r3, [r7, #10]
 8005b8e:	897b      	ldrh	r3, [r7, #10]
 8005b90:	f083 0310 	eor.w	r3, r3, #16
 8005b94:	817b      	strh	r3, [r7, #10]
 8005b96:	897b      	ldrh	r3, [r7, #10]
 8005b98:	f083 0320 	eor.w	r3, r3, #32
 8005b9c:	817b      	strh	r3, [r7, #10]
 8005b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	441a      	add	r2, r3
 8005bb8:	897b      	ldrh	r3, [r7, #10]
 8005bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	8013      	strh	r3, [r2, #0]
 8005bce:	f000 bcde 	b.w	800658e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	7b1b      	ldrb	r3, [r3, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f040 80bb 	bne.w	8005d5a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699a      	ldr	r2, [r3, #24]
 8005bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d917      	bls.n	8005c30 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c20:	1ad2      	subs	r2, r2, r3
 8005c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	619a      	str	r2, [r3, #24]
 8005c2e:	e00e      	b.n	8005c4e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c72:	4413      	add	r3, r2
 8005c74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	011a      	lsls	r2, r3, #4
 8005c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cac:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cae:	d924      	bls.n	8005cfa <USB_EPStartXfer+0xec2>
 8005cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <USB_EPStartXfer+0xe98>
 8005cc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	029b      	lsls	r3, r3, #10
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	f000 bc10 	b.w	800651a <USB_EPStartXfer+0x16e2>
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10c      	bne.n	8005d1c <USB_EPStartXfer+0xee4>
 8005d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e3fe      	b.n	800651a <USB_EPStartXfer+0x16e2>
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <USB_EPStartXfer+0xf04>
 8005d32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d36:	3301      	adds	r3, #1
 8005d38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	e3df      	b.n	800651a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	78db      	ldrb	r3, [r3, #3]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	f040 8218 	bne.w	800619c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f040 809d 	bne.w	8005eb8 <USB_EPStartXfer+0x1080>
 8005d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005da2:	4413      	add	r3, r2
 8005da4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	011a      	lsls	r2, r3, #4
 8005db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dba:	4413      	add	r3, r2
 8005dbc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005de6:	d92b      	bls.n	8005e40 <USB_EPStartXfer+0x1008>
 8005de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <USB_EPStartXfer+0xfe0>
 8005e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e12:	3b01      	subs	r3, #1
 8005e14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	029b      	lsls	r3, r3, #10
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	e070      	b.n	8005f22 <USB_EPStartXfer+0x10ea>
 8005e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10c      	bne.n	8005e6a <USB_EPStartXfer+0x1032>
 8005e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e66:	801a      	strh	r2, [r3, #0]
 8005e68:	e05b      	b.n	8005f22 <USB_EPStartXfer+0x10ea>
 8005e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <USB_EPStartXfer+0x1062>
 8005e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e94:	3301      	adds	r3, #1
 8005e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	029b      	lsls	r3, r3, #10
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	4313      	orrs	r3, r2
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	e034      	b.n	8005f22 <USB_EPStartXfer+0x10ea>
 8005eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d12c      	bne.n	8005f22 <USB_EPStartXfer+0x10ea>
 8005ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ecc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005eec:	4413      	add	r3, r2
 8005eee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	011a      	lsls	r2, r3, #4
 8005f00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f04:	4413      	add	r3, r2
 8005f06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005f20:	801a      	strh	r2, [r3, #0]
 8005f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f040 809d 	bne.w	800607c <USB_EPStartXfer+0x1244>
 8005f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	461a      	mov	r2, r3
 8005f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f66:	4413      	add	r3, r2
 8005f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	011a      	lsls	r2, r3, #4
 8005f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f7e:	4413      	add	r3, r2
 8005f80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005faa:	d92b      	bls.n	8006004 <USB_EPStartXfer+0x11cc>
 8005fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <USB_EPStartXfer+0x11a4>
 8005fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	029b      	lsls	r3, r3, #10
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	e069      	b.n	80060d8 <USB_EPStartXfer+0x12a0>
 8006004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10c      	bne.n	800602e <USB_EPStartXfer+0x11f6>
 8006014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006024:	b29a      	uxth	r2, r3
 8006026:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e054      	b.n	80060d8 <USB_EPStartXfer+0x12a0>
 800602e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <USB_EPStartXfer+0x1226>
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006058:	3301      	adds	r3, #1
 800605a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800605e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29a      	uxth	r2, r3
 8006066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800606a:	b29b      	uxth	r3, r3
 800606c:	029b      	lsls	r3, r3, #10
 800606e:	b29b      	uxth	r3, r3
 8006070:	4313      	orrs	r3, r2
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e02d      	b.n	80060d8 <USB_EPStartXfer+0x12a0>
 800607c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d125      	bne.n	80060d8 <USB_EPStartXfer+0x12a0>
 800608c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006090:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800609a:	b29b      	uxth	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80060a2:	4413      	add	r3, r2
 80060a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	011a      	lsls	r2, r3, #4
 80060b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80060ba:	4413      	add	r3, r2
 80060bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060d6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80060d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8218 	beq.w	800651a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80060ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800610a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800610e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <USB_EPStartXfer+0x12ea>
 8006116:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10d      	bne.n	800613e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006122:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800612a:	2b00      	cmp	r3, #0
 800612c:	f040 81f5 	bne.w	800651a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006130:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	f040 81ee 	bne.w	800651a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800613e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006164:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	441a      	add	r2, r3
 8006182:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800618a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800618e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006192:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006196:	b29b      	uxth	r3, r3
 8006198:	8013      	strh	r3, [r2, #0]
 800619a:	e1be      	b.n	800651a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800619c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	78db      	ldrb	r3, [r3, #3]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	f040 81b4 	bne.w	8006516 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80061ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d917      	bls.n	80061fa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80061da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ea:	1ad2      	subs	r2, r2, r3
 80061ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	619a      	str	r2, [r3, #24]
 80061f8:	e00e      	b.n	8006218 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800620a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2200      	movs	r2, #0
 8006216:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f040 8085 	bne.w	8006334 <USB_EPStartXfer+0x14fc>
 800622a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006246:	b29b      	uxth	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800624e:	4413      	add	r3, r2
 8006250:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	011a      	lsls	r2, r3, #4
 8006262:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006266:	4413      	add	r3, r2
 8006268:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800626c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800627c:	b29a      	uxth	r2, r3
 800627e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006288:	2b3e      	cmp	r3, #62	@ 0x3e
 800628a:	d923      	bls.n	80062d4 <USB_EPStartXfer+0x149c>
 800628c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006290:	095b      	lsrs	r3, r3, #5
 8006292:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d104      	bne.n	80062ac <USB_EPStartXfer+0x1474>
 80062a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062a6:	3b01      	subs	r3, #1
 80062a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4313      	orrs	r3, r2
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e060      	b.n	8006396 <USB_EPStartXfer+0x155e>
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10c      	bne.n	80062f6 <USB_EPStartXfer+0x14be>
 80062dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	e04f      	b.n	8006396 <USB_EPStartXfer+0x155e>
 80062f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <USB_EPStartXfer+0x14de>
 800630c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006310:	3301      	adds	r3, #1
 8006312:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29a      	uxth	r2, r3
 800631e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006322:	b29b      	uxth	r3, r3
 8006324:	029b      	lsls	r3, r3, #10
 8006326:	b29b      	uxth	r3, r3
 8006328:	4313      	orrs	r3, r2
 800632a:	b29a      	uxth	r2, r3
 800632c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006330:	801a      	strh	r2, [r3, #0]
 8006332:	e030      	b.n	8006396 <USB_EPStartXfer+0x155e>
 8006334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d128      	bne.n	8006396 <USB_EPStartXfer+0x155e>
 8006344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006348:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006356:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006360:	b29b      	uxth	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006368:	4413      	add	r3, r2
 800636a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800636e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	011a      	lsls	r2, r3, #4
 800637c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006380:	4413      	add	r3, r2
 8006382:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006386:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638e:	b29a      	uxth	r2, r3
 8006390:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f040 8085 	bne.w	80064c0 <USB_EPStartXfer+0x1688>
 80063b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80063da:	4413      	add	r3, r2
 80063dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	011a      	lsls	r2, r3, #4
 80063ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80063f2:	4413      	add	r3, r2
 80063f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006408:	b29a      	uxth	r2, r3
 800640a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006414:	2b3e      	cmp	r3, #62	@ 0x3e
 8006416:	d923      	bls.n	8006460 <USB_EPStartXfer+0x1628>
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641c:	095b      	lsrs	r3, r3, #5
 800641e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	2b00      	cmp	r3, #0
 800642c:	d104      	bne.n	8006438 <USB_EPStartXfer+0x1600>
 800642e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006432:	3b01      	subs	r3, #1
 8006434:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006438:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29a      	uxth	r2, r3
 8006440:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006444:	b29b      	uxth	r3, r3
 8006446:	029b      	lsls	r3, r3, #10
 8006448:	b29b      	uxth	r3, r3
 800644a:	4313      	orrs	r3, r2
 800644c:	b29b      	uxth	r3, r3
 800644e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006456:	b29a      	uxth	r2, r3
 8006458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800645c:	801a      	strh	r2, [r3, #0]
 800645e:	e05c      	b.n	800651a <USB_EPStartXfer+0x16e2>
 8006460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10c      	bne.n	8006482 <USB_EPStartXfer+0x164a>
 8006468:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006478:	b29a      	uxth	r2, r3
 800647a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	e04b      	b.n	800651a <USB_EPStartXfer+0x16e2>
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006486:	085b      	lsrs	r3, r3, #1
 8006488:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <USB_EPStartXfer+0x166a>
 8006498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800649c:	3301      	adds	r3, #1
 800649e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	4313      	orrs	r3, r2
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	e02c      	b.n	800651a <USB_EPStartXfer+0x16e2>
 80064c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d124      	bne.n	800651a <USB_EPStartXfer+0x16e2>
 80064d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064de:	b29b      	uxth	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064e6:	4413      	add	r3, r2
 80064e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	011a      	lsls	r2, r3, #4
 80064fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064fe:	4413      	add	r3, r2
 8006500:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006504:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650c:	b29a      	uxth	r2, r3
 800650e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006512:	801a      	strh	r2, [r3, #0]
 8006514:	e001      	b.n	800651a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e03a      	b.n	8006590 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800651a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800653c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006540:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006544:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006548:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800654c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006550:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006554:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006558:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800655c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	441a      	add	r2, r3
 8006576:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800657a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800657e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800658a:	b29b      	uxth	r3, r3
 800658c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	785b      	ldrb	r3, [r3, #1]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d020      	beq.n	80065ee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c2:	81bb      	strh	r3, [r7, #12]
 80065c4:	89bb      	ldrh	r3, [r7, #12]
 80065c6:	f083 0310 	eor.w	r3, r3, #16
 80065ca:	81bb      	strh	r3, [r7, #12]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	441a      	add	r2, r3
 80065d6:	89bb      	ldrh	r3, [r7, #12]
 80065d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	8013      	strh	r3, [r2, #0]
 80065ec:	e01f      	b.n	800662e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006604:	81fb      	strh	r3, [r7, #14]
 8006606:	89fb      	ldrh	r3, [r7, #14]
 8006608:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800660c:	81fb      	strh	r3, [r7, #14]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	441a      	add	r2, r3
 8006618:	89fb      	ldrh	r3, [r7, #14]
 800661a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800661e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800662a:	b29b      	uxth	r3, r3
 800662c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr

0800663a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800663a:	b480      	push	{r7}
 800663c:	b087      	sub	sp, #28
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	7b1b      	ldrb	r3, [r3, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	f040 809d 	bne.w	8006788 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	785b      	ldrb	r3, [r3, #1]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d04c      	beq.n	80066f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	823b      	strh	r3, [r7, #16]
 8006664:	8a3b      	ldrh	r3, [r7, #16]
 8006666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01b      	beq.n	80066a6 <USB_EPClearStall+0x6c>
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006684:	81fb      	strh	r3, [r7, #14]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	441a      	add	r2, r3
 8006690:	89fb      	ldrh	r3, [r7, #14]
 8006692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800669a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800669e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	78db      	ldrb	r3, [r3, #3]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d06c      	beq.n	8006788 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c4:	81bb      	strh	r3, [r7, #12]
 80066c6:	89bb      	ldrh	r3, [r7, #12]
 80066c8:	f083 0320 	eor.w	r3, r3, #32
 80066cc:	81bb      	strh	r3, [r7, #12]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	441a      	add	r2, r3
 80066d8:	89bb      	ldrh	r3, [r7, #12]
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]
 80066ee:	e04b      	b.n	8006788 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	82fb      	strh	r3, [r7, #22]
 80066fe:	8afb      	ldrh	r3, [r7, #22]
 8006700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01b      	beq.n	8006740 <USB_EPClearStall+0x106>
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800671a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800671e:	82bb      	strh	r3, [r7, #20]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	441a      	add	r2, r3
 800672a:	8abb      	ldrh	r3, [r7, #20]
 800672c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006730:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006734:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800673c:	b29b      	uxth	r3, r3
 800673e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006756:	827b      	strh	r3, [r7, #18]
 8006758:	8a7b      	ldrh	r3, [r7, #18]
 800675a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800675e:	827b      	strh	r3, [r7, #18]
 8006760:	8a7b      	ldrh	r3, [r7, #18]
 8006762:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006766:	827b      	strh	r3, [r7, #18]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	441a      	add	r2, r3
 8006772:	8a7b      	ldrh	r3, [r7, #18]
 8006774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800677c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006784:	b29b      	uxth	r3, r3
 8006786:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr

08006794 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d103      	bne.n	80067ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2280      	movs	r2, #128	@ 0x80
 80067aa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr

080067ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80067f4:	68fb      	ldr	r3, [r7, #12]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr

08006816 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006816:	b480      	push	{r7}
 8006818:	b08b      	sub	sp, #44	@ 0x2c
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	4611      	mov	r1, r2
 8006822:	461a      	mov	r2, r3
 8006824:	460b      	mov	r3, r1
 8006826:	80fb      	strh	r3, [r7, #6]
 8006828:	4613      	mov	r3, r2
 800682a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800682c:	88bb      	ldrh	r3, [r7, #4]
 800682e:	3301      	adds	r3, #1
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	005a      	lsls	r2, r3, #1
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006848:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
 800684e:	e01f      	b.n	8006890 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	3301      	adds	r3, #1
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	b21b      	sxth	r3, r3
 800685e:	021b      	lsls	r3, r3, #8
 8006860:	b21a      	sxth	r2, r3
 8006862:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006866:	4313      	orrs	r3, r2
 8006868:	b21b      	sxth	r3, r3
 800686a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	8a7a      	ldrh	r2, [r7, #18]
 8006870:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	3302      	adds	r3, #2
 8006876:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	3302      	adds	r3, #2
 800687c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	3301      	adds	r3, #1
 8006882:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	3301      	adds	r3, #1
 8006888:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	3b01      	subs	r3, #1
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1dc      	bne.n	8006850 <USB_WritePMA+0x3a>
  }
}
 8006896:	bf00      	nop
 8006898:	bf00      	nop
 800689a:	372c      	adds	r7, #44	@ 0x2c
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr

080068a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b08b      	sub	sp, #44	@ 0x2c
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	4611      	mov	r1, r2
 80068ae:	461a      	mov	r2, r3
 80068b0:	460b      	mov	r3, r1
 80068b2:	80fb      	strh	r3, [r7, #6]
 80068b4:	4613      	mov	r3, r2
 80068b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80068b8:	88bb      	ldrh	r3, [r7, #4]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	b29b      	uxth	r3, r3
 80068be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	005a      	lsls	r2, r3, #1
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068da:	e01b      	b.n	8006914 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	3302      	adds	r3, #2
 80068e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	3301      	adds	r3, #1
 80068f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	0a1b      	lsrs	r3, r3, #8
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3301      	adds	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	3302      	adds	r3, #2
 800690c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	3b01      	subs	r3, #1
 8006912:	627b      	str	r3, [r7, #36]	@ 0x24
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e0      	bne.n	80068dc <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800691a:	88bb      	ldrh	r3, [r7, #4]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d007      	beq.n	8006936 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	b2da      	uxtb	r2, r3
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	701a      	strb	r2, [r3, #0]
  }
}
 8006936:	bf00      	nop
 8006938:	372c      	adds	r7, #44	@ 0x2c
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr

08006940 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	7c1b      	ldrb	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d115      	bne.n	8006984 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006958:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800695c:	2202      	movs	r2, #2
 800695e:	2181      	movs	r1, #129	@ 0x81
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 fe2c 	bl	80085be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800696c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006970:	2202      	movs	r2, #2
 8006972:	2101      	movs	r1, #1
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 fe22 	bl	80085be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006982:	e012      	b.n	80069aa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006984:	2340      	movs	r3, #64	@ 0x40
 8006986:	2202      	movs	r2, #2
 8006988:	2181      	movs	r1, #129	@ 0x81
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 fe17 	bl	80085be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006996:	2340      	movs	r3, #64	@ 0x40
 8006998:	2202      	movs	r2, #2
 800699a:	2101      	movs	r1, #1
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 fe0e 	bl	80085be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069aa:	2308      	movs	r3, #8
 80069ac:	2203      	movs	r2, #3
 80069ae:	2182      	movs	r1, #130	@ 0x82
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fe04 	bl	80085be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069bc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80069c0:	f001 ff24 	bl	800880c <USBD_static_malloc>
 80069c4:	4602      	mov	r2, r0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80069d6:	2301      	movs	r3, #1
 80069d8:	73fb      	strb	r3, [r7, #15]
 80069da:	e026      	b.n	8006a2a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069e2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	7c1b      	ldrb	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a10:	2101      	movs	r1, #1
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fec3 	bl	800879e <USBD_LL_PrepareReceive>
 8006a18:	e007      	b.n	8006a2a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a20:	2340      	movs	r3, #64	@ 0x40
 8006a22:	2101      	movs	r1, #1
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 feba 	bl	800879e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a44:	2181      	movs	r1, #129	@ 0x81
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fddf 	bl	800860a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a52:	2101      	movs	r1, #1
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fdd8 	bl	800860a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a62:	2182      	movs	r1, #130	@ 0x82
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fdd0 	bl	800860a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00e      	beq.n	8006a98 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 feca 	bl	8008824 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b086      	sub	sp, #24
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ab2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d039      	beq.n	8006b40 <USBD_CDC_Setup+0x9e>
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d17f      	bne.n	8006bd0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	88db      	ldrh	r3, [r3, #6]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d029      	beq.n	8006b2c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	b25b      	sxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	da11      	bge.n	8006b06 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006aee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	88d2      	ldrh	r2, [r2, #6]
 8006af4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006af6:	6939      	ldr	r1, [r7, #16]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	88db      	ldrh	r3, [r3, #6]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 f9d6 	bl	8007eb0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006b04:	e06b      	b.n	8006bde <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	785a      	ldrb	r2, [r3, #1]
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	88db      	ldrh	r3, [r3, #6]
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b1c:	6939      	ldr	r1, [r7, #16]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	88db      	ldrh	r3, [r3, #6]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 f9f1 	bl	8007f0c <USBD_CtlPrepareRx>
      break;
 8006b2a:	e058      	b.n	8006bde <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	7850      	ldrb	r0, [r2, #1]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	4798      	blx	r3
      break;
 8006b3e:	e04e      	b.n	8006bde <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b0b      	cmp	r3, #11
 8006b46:	d02e      	beq.n	8006ba6 <USBD_CDC_Setup+0x104>
 8006b48:	2b0b      	cmp	r3, #11
 8006b4a:	dc38      	bgt.n	8006bbe <USBD_CDC_Setup+0x11c>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <USBD_CDC_Setup+0xb4>
 8006b50:	2b0a      	cmp	r3, #10
 8006b52:	d014      	beq.n	8006b7e <USBD_CDC_Setup+0xdc>
 8006b54:	e033      	b.n	8006bbe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d107      	bne.n	8006b70 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b60:	f107 030c 	add.w	r3, r7, #12
 8006b64:	2202      	movs	r2, #2
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 f9a1 	bl	8007eb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b6e:	e02e      	b.n	8006bce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 f932 	bl	8007ddc <USBD_CtlError>
            ret = USBD_FAIL;
 8006b78:	2302      	movs	r3, #2
 8006b7a:	75fb      	strb	r3, [r7, #23]
          break;
 8006b7c:	e027      	b.n	8006bce <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d107      	bne.n	8006b98 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b88:	f107 030f 	add.w	r3, r7, #15
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 f98d 	bl	8007eb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b96:	e01a      	b.n	8006bce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 f91e 	bl	8007ddc <USBD_CtlError>
            ret = USBD_FAIL;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ba4:	e013      	b.n	8006bce <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d00d      	beq.n	8006bcc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 f912 	bl	8007ddc <USBD_CtlError>
            ret = USBD_FAIL;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006bbc:	e006      	b.n	8006bcc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f90b 	bl	8007ddc <USBD_CtlError>
          ret = USBD_FAIL;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bca:	e000      	b.n	8006bce <USBD_CDC_Setup+0x12c>
          break;
 8006bcc:	bf00      	nop
      }
      break;
 8006bce:	e006      	b.n	8006bde <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 f902 	bl	8007ddc <USBD_CtlError>
      ret = USBD_FAIL;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	75fb      	strb	r3, [r7, #23]
      break;
 8006bdc:	bf00      	nop
  }

  return ret;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bfa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c02:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d03a      	beq.n	8006c84 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c0e:	78fa      	ldrb	r2, [r7, #3]
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	331c      	adds	r3, #28
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d029      	beq.n	8006c78 <USBD_CDC_DataIn+0x90>
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	331c      	adds	r3, #28
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	78f9      	ldrb	r1, [r7, #3]
 8006c38:	68b8      	ldr	r0, [r7, #8]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4403      	add	r3, r0
 8006c44:	3320      	adds	r3, #32
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d110      	bne.n	8006c78 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c56:	78fa      	ldrb	r2, [r7, #3]
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	440b      	add	r3, r1
 8006c64:	331c      	adds	r3, #28
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c6a:	78f9      	ldrb	r1, [r7, #3]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2200      	movs	r2, #0
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fd71 	bl	8008758 <USBD_LL_Transmit>
 8006c76:	e003      	b.n	8006c80 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	e000      	b.n	8006c86 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006c84:	2302      	movs	r3, #2
  }
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fd9c 	bl	80087e4 <USBD_LL_GetRxDataSize>
 8006cac:	4602      	mov	r2, r0
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00d      	beq.n	8006cda <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	4798      	blx	r3

    return USBD_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e000      	b.n	8006cdc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006cda:	2302      	movs	r3, #2
  }
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cf2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d014      	beq.n	8006d28 <USBD_CDC_EP0_RxReady+0x44>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006d04:	2bff      	cmp	r3, #255	@ 0xff
 8006d06:	d00f      	beq.n	8006d28 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006d16:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	22ff      	movs	r2, #255	@ 0xff
 8006d24:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2243      	movs	r2, #67	@ 0x43
 8006d40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006d42:	4b03      	ldr	r3, [pc, #12]	@ (8006d50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20000098 	.word	0x20000098

08006d54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2243      	movs	r2, #67	@ 0x43
 8006d60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d62:	4b03      	ldr	r3, [pc, #12]	@ (8006d70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bc80      	pop	{r7}
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	20000054 	.word	0x20000054

08006d74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2243      	movs	r2, #67	@ 0x43
 8006d80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006d82:	4b03      	ldr	r3, [pc, #12]	@ (8006d90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	200000dc 	.word	0x200000dc

08006d94 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	220a      	movs	r2, #10
 8006da0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006da2:	4b03      	ldr	r3, [pc, #12]	@ (8006db0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20000010 	.word	0x20000010

08006db4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bc80      	pop	{r7}
 8006dde:	4770      	bx	lr

08006de0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	4613      	mov	r3, r2
 8006dec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006df4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr

08006e12 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e22:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr

08006e38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d017      	beq.n	8006e82 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7c1b      	ldrb	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e64:	2101      	movs	r1, #1
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 fc99 	bl	800879e <USBD_LL_PrepareReceive>
 8006e6c:	e007      	b.n	8006e7e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e74:	2340      	movs	r3, #64	@ 0x40
 8006e76:	2101      	movs	r1, #1
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 fc90 	bl	800879e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e000      	b.n	8006e84 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006e82:	2302      	movs	r3, #2
  }
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e01a      	b.n	8006eda <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	79fa      	ldrb	r2, [r7, #7]
 8006ed0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f001 fafe 	bl	80084d4 <USBD_LL_Init>

  return USBD_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d006      	beq.n	8006f04 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
 8006f02:	e001      	b.n	8006f08 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006f04:	2302      	movs	r3, #2
 8006f06:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fb33 	bl	8008588 <USBD_LL_Start>

  return USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr

08006f40 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00c      	beq.n	8006f74 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	78fa      	ldrb	r2, [r7, #3]
 8006f64:	4611      	mov	r1, r2
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4798      	blx	r3
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	4611      	mov	r1, r2
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3

  return USBD_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fed7 	bl	8007d6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d016      	beq.n	800700e <USBD_LL_SetupStage+0x6a>
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d81c      	bhi.n	800701e <USBD_LL_SetupStage+0x7a>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <USBD_LL_SetupStage+0x4a>
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d008      	beq.n	8006ffe <USBD_LL_SetupStage+0x5a>
 8006fec:	e017      	b.n	800701e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9ca 	bl	8007390 <USBD_StdDevReq>
      break;
 8006ffc:	e01a      	b.n	8007034 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fa2c 	bl	8007464 <USBD_StdItfReq>
      break;
 800700c:	e012      	b.n	8007034 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa6c 	bl	80074f4 <USBD_StdEPReq>
      break;
 800701c:	e00a      	b.n	8007034 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007024:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007028:	b2db      	uxtb	r3, r3
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fb0b 	bl	8008648 <USBD_LL_StallEP>
      break;
 8007032:	bf00      	nop
  }

  return USBD_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b086      	sub	sp, #24
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	460b      	mov	r3, r1
 8007048:	607a      	str	r2, [r7, #4]
 800704a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d14b      	bne.n	80070ea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007058:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007060:	2b03      	cmp	r3, #3
 8007062:	d134      	bne.n	80070ce <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	429a      	cmp	r2, r3
 800706e:	d919      	bls.n	80070a4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	1ad2      	subs	r2, r2, r3
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007086:	429a      	cmp	r2, r3
 8007088:	d203      	bcs.n	8007092 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800708e:	b29b      	uxth	r3, r3
 8007090:	e002      	b.n	8007098 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007096:	b29b      	uxth	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 ff53 	bl	8007f48 <USBD_CtlContinueRx>
 80070a2:	e038      	b.n	8007116 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d105      	bne.n	80070c6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 ff50 	bl	8007f6c <USBD_CtlSendStatus>
 80070cc:	e023      	b.n	8007116 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070d4:	2b05      	cmp	r3, #5
 80070d6:	d11e      	bne.n	8007116 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f001 fab0 	bl	8008648 <USBD_LL_StallEP>
 80070e8:	e015      	b.n	8007116 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00d      	beq.n	8007112 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d108      	bne.n	8007112 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	7afa      	ldrb	r2, [r7, #11]
 800710a:	4611      	mov	r1, r2
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	4798      	blx	r3
 8007110:	e001      	b.n	8007116 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007112:	2302      	movs	r3, #2
 8007114:	e000      	b.n	8007118 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	460b      	mov	r3, r1
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800712e:	7afb      	ldrb	r3, [r7, #11]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d17f      	bne.n	8007234 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3314      	adds	r3, #20
 8007138:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007140:	2b02      	cmp	r3, #2
 8007142:	d15c      	bne.n	80071fe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	429a      	cmp	r2, r3
 800714e:	d915      	bls.n	800717c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	1ad2      	subs	r2, r2, r3
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	b29b      	uxth	r3, r3
 8007164:	461a      	mov	r2, r3
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 febd 	bl	8007ee8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800716e:	2300      	movs	r3, #0
 8007170:	2200      	movs	r2, #0
 8007172:	2100      	movs	r1, #0
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f001 fb12 	bl	800879e <USBD_LL_PrepareReceive>
 800717a:	e04e      	b.n	800721a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	6912      	ldr	r2, [r2, #16]
 8007184:	fbb3 f1f2 	udiv	r1, r3, r2
 8007188:	fb01 f202 	mul.w	r2, r1, r2
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d11c      	bne.n	80071cc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800719a:	429a      	cmp	r2, r3
 800719c:	d316      	bcc.n	80071cc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d20f      	bcs.n	80071cc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071ac:	2200      	movs	r2, #0
 80071ae:	2100      	movs	r1, #0
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 fe99 	bl	8007ee8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071be:	2300      	movs	r3, #0
 80071c0:	2200      	movs	r2, #0
 80071c2:	2100      	movs	r1, #0
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f001 faea 	bl	800879e <USBD_LL_PrepareReceive>
 80071ca:	e026      	b.n	800721a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d105      	bne.n	80071ee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071ee:	2180      	movs	r1, #128	@ 0x80
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f001 fa29 	bl	8008648 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fecb 	bl	8007f92 <USBD_CtlReceiveStatus>
 80071fc:	e00d      	b.n	800721a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007204:	2b04      	cmp	r3, #4
 8007206:	d004      	beq.n	8007212 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007212:	2180      	movs	r1, #128	@ 0x80
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f001 fa17 	bl	8008648 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007220:	2b01      	cmp	r3, #1
 8007222:	d11d      	bne.n	8007260 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff fe81 	bl	8006f2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007232:	e015      	b.n	8007260 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00d      	beq.n	800725c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007246:	2b03      	cmp	r3, #3
 8007248:	d108      	bne.n	800725c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	7afa      	ldrb	r2, [r7, #11]
 8007254:	4611      	mov	r1, r2
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	4798      	blx	r3
 800725a:	e001      	b.n	8007260 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800725c:	2302      	movs	r3, #2
 800725e:	e000      	b.n	8007262 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007272:	2340      	movs	r3, #64	@ 0x40
 8007274:	2200      	movs	r2, #0
 8007276:	2100      	movs	r1, #0
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f9a0 	bl	80085be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2240      	movs	r2, #64	@ 0x40
 800728a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800728e:	2340      	movs	r3, #64	@ 0x40
 8007290:	2200      	movs	r2, #0
 8007292:	2180      	movs	r1, #128	@ 0x80
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 f992 	bl	80085be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2240      	movs	r2, #64	@ 0x40
 80072a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6852      	ldr	r2, [r2, #4]
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	4611      	mov	r1, r2
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
  }

  return USBD_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	78fa      	ldrb	r2, [r7, #3]
 80072fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr

0800730a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2204      	movs	r2, #4
 8007322:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr

08007332 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007340:	2b04      	cmp	r3, #4
 8007342:	d105      	bne.n	8007350 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800736a:	2b03      	cmp	r3, #3
 800736c:	d10b      	bne.n	8007386 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073a6:	2b40      	cmp	r3, #64	@ 0x40
 80073a8:	d005      	beq.n	80073b6 <USBD_StdDevReq+0x26>
 80073aa:	2b40      	cmp	r3, #64	@ 0x40
 80073ac:	d84f      	bhi.n	800744e <USBD_StdDevReq+0xbe>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d009      	beq.n	80073c6 <USBD_StdDevReq+0x36>
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	d14b      	bne.n	800744e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	4798      	blx	r3
      break;
 80073c4:	e048      	b.n	8007458 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	2b09      	cmp	r3, #9
 80073cc:	d839      	bhi.n	8007442 <USBD_StdDevReq+0xb2>
 80073ce:	a201      	add	r2, pc, #4	@ (adr r2, 80073d4 <USBD_StdDevReq+0x44>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	08007425 	.word	0x08007425
 80073d8:	08007439 	.word	0x08007439
 80073dc:	08007443 	.word	0x08007443
 80073e0:	0800742f 	.word	0x0800742f
 80073e4:	08007443 	.word	0x08007443
 80073e8:	08007407 	.word	0x08007407
 80073ec:	080073fd 	.word	0x080073fd
 80073f0:	08007443 	.word	0x08007443
 80073f4:	0800741b 	.word	0x0800741b
 80073f8:	08007411 	.word	0x08007411
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f9dc 	bl	80077bc <USBD_GetDescriptor>
          break;
 8007404:	e022      	b.n	800744c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fb3f 	bl	8007a8c <USBD_SetAddress>
          break;
 800740e:	e01d      	b.n	800744c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fb7e 	bl	8007b14 <USBD_SetConfig>
          break;
 8007418:	e018      	b.n	800744c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fc07 	bl	8007c30 <USBD_GetConfig>
          break;
 8007422:	e013      	b.n	800744c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fc37 	bl	8007c9a <USBD_GetStatus>
          break;
 800742c:	e00e      	b.n	800744c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fc65 	bl	8007d00 <USBD_SetFeature>
          break;
 8007436:	e009      	b.n	800744c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fc74 	bl	8007d28 <USBD_ClrFeature>
          break;
 8007440:	e004      	b.n	800744c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fcc9 	bl	8007ddc <USBD_CtlError>
          break;
 800744a:	bf00      	nop
      }
      break;
 800744c:	e004      	b.n	8007458 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fcc3 	bl	8007ddc <USBD_CtlError>
      break;
 8007456:	bf00      	nop
  }

  return ret;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop

08007464 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800747a:	2b40      	cmp	r3, #64	@ 0x40
 800747c:	d005      	beq.n	800748a <USBD_StdItfReq+0x26>
 800747e:	2b40      	cmp	r3, #64	@ 0x40
 8007480:	d82e      	bhi.n	80074e0 <USBD_StdItfReq+0x7c>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <USBD_StdItfReq+0x26>
 8007486:	2b20      	cmp	r3, #32
 8007488:	d12a      	bne.n	80074e0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007490:	3b01      	subs	r3, #1
 8007492:	2b02      	cmp	r3, #2
 8007494:	d81d      	bhi.n	80074d2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	889b      	ldrh	r3, [r3, #4]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b01      	cmp	r3, #1
 800749e:	d813      	bhi.n	80074c8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	88db      	ldrh	r3, [r3, #6]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d110      	bne.n	80074dc <USBD_StdItfReq+0x78>
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10d      	bne.n	80074dc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fd53 	bl	8007f6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074c6:	e009      	b.n	80074dc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fc86 	bl	8007ddc <USBD_CtlError>
          break;
 80074d0:	e004      	b.n	80074dc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fc81 	bl	8007ddc <USBD_CtlError>
          break;
 80074da:	e000      	b.n	80074de <USBD_StdItfReq+0x7a>
          break;
 80074dc:	bf00      	nop
      }
      break;
 80074de:	e004      	b.n	80074ea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fc7a 	bl	8007ddc <USBD_CtlError>
      break;
 80074e8:	bf00      	nop
  }

  return USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	889b      	ldrh	r3, [r3, #4]
 8007506:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007510:	2b40      	cmp	r3, #64	@ 0x40
 8007512:	d007      	beq.n	8007524 <USBD_StdEPReq+0x30>
 8007514:	2b40      	cmp	r3, #64	@ 0x40
 8007516:	f200 8146 	bhi.w	80077a6 <USBD_StdEPReq+0x2b2>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <USBD_StdEPReq+0x40>
 800751e:	2b20      	cmp	r3, #32
 8007520:	f040 8141 	bne.w	80077a6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
      break;
 8007532:	e13d      	b.n	80077b0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800753c:	2b20      	cmp	r3, #32
 800753e:	d10a      	bne.n	8007556 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
 800754e:	4603      	mov	r3, r0
 8007550:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	e12d      	b.n	80077b2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	2b03      	cmp	r3, #3
 800755c:	d007      	beq.n	800756e <USBD_StdEPReq+0x7a>
 800755e:	2b03      	cmp	r3, #3
 8007560:	f300 811b 	bgt.w	800779a <USBD_StdEPReq+0x2a6>
 8007564:	2b00      	cmp	r3, #0
 8007566:	d072      	beq.n	800764e <USBD_StdEPReq+0x15a>
 8007568:	2b01      	cmp	r3, #1
 800756a:	d03a      	beq.n	80075e2 <USBD_StdEPReq+0xee>
 800756c:	e115      	b.n	800779a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007574:	2b02      	cmp	r3, #2
 8007576:	d002      	beq.n	800757e <USBD_StdEPReq+0x8a>
 8007578:	2b03      	cmp	r3, #3
 800757a:	d015      	beq.n	80075a8 <USBD_StdEPReq+0xb4>
 800757c:	e02b      	b.n	80075d6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00c      	beq.n	800759e <USBD_StdEPReq+0xaa>
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b80      	cmp	r3, #128	@ 0x80
 8007588:	d009      	beq.n	800759e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 f85a 	bl	8008648 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007594:	2180      	movs	r1, #128	@ 0x80
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 f856 	bl	8008648 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800759c:	e020      	b.n	80075e0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fc1b 	bl	8007ddc <USBD_CtlError>
              break;
 80075a6:	e01b      	b.n	80075e0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	885b      	ldrh	r3, [r3, #2]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10e      	bne.n	80075ce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <USBD_StdEPReq+0xda>
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	2b80      	cmp	r3, #128	@ 0x80
 80075ba:	d008      	beq.n	80075ce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	88db      	ldrh	r3, [r3, #6]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f83d 	bl	8008648 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fccc 	bl	8007f6c <USBD_CtlSendStatus>

              break;
 80075d4:	e004      	b.n	80075e0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fbff 	bl	8007ddc <USBD_CtlError>
              break;
 80075de:	bf00      	nop
          }
          break;
 80075e0:	e0e0      	b.n	80077a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d002      	beq.n	80075f2 <USBD_StdEPReq+0xfe>
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d015      	beq.n	800761c <USBD_StdEPReq+0x128>
 80075f0:	e026      	b.n	8007640 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00c      	beq.n	8007612 <USBD_StdEPReq+0x11e>
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	2b80      	cmp	r3, #128	@ 0x80
 80075fc:	d009      	beq.n	8007612 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 f820 	bl	8008648 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007608:	2180      	movs	r1, #128	@ 0x80
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 f81c 	bl	8008648 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007610:	e01c      	b.n	800764c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fbe1 	bl	8007ddc <USBD_CtlError>
              break;
 800761a:	e017      	b.n	800764c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	885b      	ldrh	r3, [r3, #2]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d112      	bne.n	800764a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 f827 	bl	8008686 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fc97 	bl	8007f6c <USBD_CtlSendStatus>
              }
              break;
 800763e:	e004      	b.n	800764a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fbca 	bl	8007ddc <USBD_CtlError>
              break;
 8007648:	e000      	b.n	800764c <USBD_StdEPReq+0x158>
              break;
 800764a:	bf00      	nop
          }
          break;
 800764c:	e0aa      	b.n	80077a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007654:	2b02      	cmp	r3, #2
 8007656:	d002      	beq.n	800765e <USBD_StdEPReq+0x16a>
 8007658:	2b03      	cmp	r3, #3
 800765a:	d032      	beq.n	80076c2 <USBD_StdEPReq+0x1ce>
 800765c:	e097      	b.n	800778e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <USBD_StdEPReq+0x180>
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2b80      	cmp	r3, #128	@ 0x80
 8007668:	d004      	beq.n	8007674 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fbb5 	bl	8007ddc <USBD_CtlError>
                break;
 8007672:	e091      	b.n	8007798 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007678:	2b00      	cmp	r3, #0
 800767a:	da0b      	bge.n	8007694 <USBD_StdEPReq+0x1a0>
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	3310      	adds	r3, #16
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	4413      	add	r3, r2
 8007690:	3304      	adds	r3, #4
 8007692:	e00b      	b.n	80076ac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	4413      	add	r3, r2
 80076aa:	3304      	adds	r3, #4
 80076ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2202      	movs	r2, #2
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fbf8 	bl	8007eb0 <USBD_CtlSendData>
              break;
 80076c0:	e06a      	b.n	8007798 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	da11      	bge.n	80076ee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	f003 020f 	and.w	r2, r3, #15
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	3318      	adds	r3, #24
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d117      	bne.n	8007714 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fb78 	bl	8007ddc <USBD_CtlError>
                  break;
 80076ec:	e054      	b.n	8007798 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	f003 020f 	and.w	r2, r3, #15
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d104      	bne.n	8007714 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fb65 	bl	8007ddc <USBD_CtlError>
                  break;
 8007712:	e041      	b.n	8007798 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007718:	2b00      	cmp	r3, #0
 800771a:	da0b      	bge.n	8007734 <USBD_StdEPReq+0x240>
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	3310      	adds	r3, #16
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	4413      	add	r3, r2
 8007730:	3304      	adds	r3, #4
 8007732:	e00b      	b.n	800774c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4413      	add	r3, r2
 800774a:	3304      	adds	r3, #4
 800774c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <USBD_StdEPReq+0x266>
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b80      	cmp	r3, #128	@ 0x80
 8007758:	d103      	bne.n	8007762 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e00e      	b.n	8007780 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 ffac 	bl	80086c4 <USBD_LL_IsStallEP>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2201      	movs	r2, #1
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	e002      	b.n	8007780 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2202      	movs	r2, #2
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fb92 	bl	8007eb0 <USBD_CtlSendData>
              break;
 800778c:	e004      	b.n	8007798 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fb23 	bl	8007ddc <USBD_CtlError>
              break;
 8007796:	bf00      	nop
          }
          break;
 8007798:	e004      	b.n	80077a4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fb1d 	bl	8007ddc <USBD_CtlError>
          break;
 80077a2:	bf00      	nop
      }
      break;
 80077a4:	e004      	b.n	80077b0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fb17 	bl	8007ddc <USBD_CtlError>
      break;
 80077ae:	bf00      	nop
  }

  return ret;
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	885b      	ldrh	r3, [r3, #2]
 80077d6:	0a1b      	lsrs	r3, r3, #8
 80077d8:	b29b      	uxth	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	2b06      	cmp	r3, #6
 80077de:	f200 8128 	bhi.w	8007a32 <USBD_GetDescriptor+0x276>
 80077e2:	a201      	add	r2, pc, #4	@ (adr r2, 80077e8 <USBD_GetDescriptor+0x2c>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	08007805 	.word	0x08007805
 80077ec:	0800781d 	.word	0x0800781d
 80077f0:	0800785d 	.word	0x0800785d
 80077f4:	08007a33 	.word	0x08007a33
 80077f8:	08007a33 	.word	0x08007a33
 80077fc:	080079d3 	.word	0x080079d3
 8007800:	080079ff 	.word	0x080079ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	7c12      	ldrb	r2, [r2, #16]
 8007810:	f107 0108 	add.w	r1, r7, #8
 8007814:	4610      	mov	r0, r2
 8007816:	4798      	blx	r3
 8007818:	60f8      	str	r0, [r7, #12]
      break;
 800781a:	e112      	b.n	8007a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7c1b      	ldrb	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10d      	bne.n	8007840 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800782a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782c:	f107 0208 	add.w	r2, r7, #8
 8007830:	4610      	mov	r0, r2
 8007832:	4798      	blx	r3
 8007834:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3301      	adds	r3, #1
 800783a:	2202      	movs	r2, #2
 800783c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800783e:	e100      	b.n	8007a42 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007848:	f107 0208 	add.w	r2, r7, #8
 800784c:	4610      	mov	r0, r2
 800784e:	4798      	blx	r3
 8007850:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	2202      	movs	r2, #2
 8007858:	701a      	strb	r2, [r3, #0]
      break;
 800785a:	e0f2      	b.n	8007a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	885b      	ldrh	r3, [r3, #2]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b05      	cmp	r3, #5
 8007864:	f200 80ac 	bhi.w	80079c0 <USBD_GetDescriptor+0x204>
 8007868:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <USBD_GetDescriptor+0xb4>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	08007889 	.word	0x08007889
 8007874:	080078bd 	.word	0x080078bd
 8007878:	080078f1 	.word	0x080078f1
 800787c:	08007925 	.word	0x08007925
 8007880:	08007959 	.word	0x08007959
 8007884:	0800798d 	.word	0x0800798d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	7c12      	ldrb	r2, [r2, #16]
 80078a0:	f107 0108 	add.w	r1, r7, #8
 80078a4:	4610      	mov	r0, r2
 80078a6:	4798      	blx	r3
 80078a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078aa:	e091      	b.n	80079d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa94 	bl	8007ddc <USBD_CtlError>
            err++;
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	3301      	adds	r3, #1
 80078b8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ba:	e089      	b.n	80079d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	7c12      	ldrb	r2, [r2, #16]
 80078d4:	f107 0108 	add.w	r1, r7, #8
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
 80078dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078de:	e077      	b.n	80079d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa7a 	bl	8007ddc <USBD_CtlError>
            err++;
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	3301      	adds	r3, #1
 80078ec:	72fb      	strb	r3, [r7, #11]
          break;
 80078ee:	e06f      	b.n	80079d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00b      	beq.n	8007914 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	7c12      	ldrb	r2, [r2, #16]
 8007908:	f107 0108 	add.w	r1, r7, #8
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
 8007910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007912:	e05d      	b.n	80079d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fa60 	bl	8007ddc <USBD_CtlError>
            err++;
 800791c:	7afb      	ldrb	r3, [r7, #11]
 800791e:	3301      	adds	r3, #1
 8007920:	72fb      	strb	r3, [r7, #11]
          break;
 8007922:	e055      	b.n	80079d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	7c12      	ldrb	r2, [r2, #16]
 800793c:	f107 0108 	add.w	r1, r7, #8
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
 8007944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007946:	e043      	b.n	80079d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fa46 	bl	8007ddc <USBD_CtlError>
            err++;
 8007950:	7afb      	ldrb	r3, [r7, #11]
 8007952:	3301      	adds	r3, #1
 8007954:	72fb      	strb	r3, [r7, #11]
          break;
 8007956:	e03b      	b.n	80079d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00b      	beq.n	800797c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	7c12      	ldrb	r2, [r2, #16]
 8007970:	f107 0108 	add.w	r1, r7, #8
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
 8007978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800797a:	e029      	b.n	80079d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fa2c 	bl	8007ddc <USBD_CtlError>
            err++;
 8007984:	7afb      	ldrb	r3, [r7, #11]
 8007986:	3301      	adds	r3, #1
 8007988:	72fb      	strb	r3, [r7, #11]
          break;
 800798a:	e021      	b.n	80079d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00b      	beq.n	80079b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	7c12      	ldrb	r2, [r2, #16]
 80079a4:	f107 0108 	add.w	r1, r7, #8
 80079a8:	4610      	mov	r0, r2
 80079aa:	4798      	blx	r3
 80079ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ae:	e00f      	b.n	80079d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fa12 	bl	8007ddc <USBD_CtlError>
            err++;
 80079b8:	7afb      	ldrb	r3, [r7, #11]
 80079ba:	3301      	adds	r3, #1
 80079bc:	72fb      	strb	r3, [r7, #11]
          break;
 80079be:	e007      	b.n	80079d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa0a 	bl	8007ddc <USBD_CtlError>
          err++;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	3301      	adds	r3, #1
 80079cc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80079ce:	e038      	b.n	8007a42 <USBD_GetDescriptor+0x286>
 80079d0:	e037      	b.n	8007a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	7c1b      	ldrb	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d109      	bne.n	80079ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e2:	f107 0208 	add.w	r2, r7, #8
 80079e6:	4610      	mov	r0, r2
 80079e8:	4798      	blx	r3
 80079ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079ec:	e029      	b.n	8007a42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f9f3 	bl	8007ddc <USBD_CtlError>
        err++;
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	3301      	adds	r3, #1
 80079fa:	72fb      	strb	r3, [r7, #11]
      break;
 80079fc:	e021      	b.n	8007a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7c1b      	ldrb	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10d      	bne.n	8007a22 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0e:	f107 0208 	add.w	r2, r7, #8
 8007a12:	4610      	mov	r0, r2
 8007a14:	4798      	blx	r3
 8007a16:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	2207      	movs	r2, #7
 8007a1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a20:	e00f      	b.n	8007a42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f9d9 	bl	8007ddc <USBD_CtlError>
        err++;
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a30:	e007      	b.n	8007a42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f9d1 	bl	8007ddc <USBD_CtlError>
      err++;
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a40:	bf00      	nop
  }

  if (err != 0U)
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d11c      	bne.n	8007a82 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007a48:	893b      	ldrh	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d011      	beq.n	8007a72 <USBD_GetDescriptor+0x2b6>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	88db      	ldrh	r3, [r3, #6]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00d      	beq.n	8007a72 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	88da      	ldrh	r2, [r3, #6]
 8007a5a:	893b      	ldrh	r3, [r7, #8]
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	bf28      	it	cs
 8007a60:	4613      	movcs	r3, r2
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a66:	893b      	ldrh	r3, [r7, #8]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	68f9      	ldr	r1, [r7, #12]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fa1f 	bl	8007eb0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	88db      	ldrh	r3, [r3, #6]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d104      	bne.n	8007a84 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa76 	bl	8007f6c <USBD_CtlSendStatus>
 8007a80:	e000      	b.n	8007a84 <USBD_GetDescriptor+0x2c8>
    return;
 8007a82:	bf00      	nop
    }
  }
}
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop

08007a8c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	889b      	ldrh	r3, [r3, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d130      	bne.n	8007b00 <USBD_SetAddress+0x74>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	88db      	ldrh	r3, [r3, #6]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d12c      	bne.n	8007b00 <USBD_SetAddress+0x74>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	885b      	ldrh	r3, [r3, #2]
 8007aaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8007aac:	d828      	bhi.n	8007b00 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ab8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d104      	bne.n	8007ace <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f988 	bl	8007ddc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007acc:	e01d      	b.n	8007b0a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	7bfa      	ldrb	r2, [r7, #15]
 8007ad2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fe1d 	bl	800871a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa43 	bl	8007f6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af4:	e009      	b.n	8007b0a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007afe:	e004      	b.n	8007b0a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f96a 	bl	8007ddc <USBD_CtlError>
  }
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	885b      	ldrh	r3, [r3, #2]
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	4b41      	ldr	r3, [pc, #260]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007b26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b28:	4b40      	ldr	r3, [pc, #256]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d904      	bls.n	8007b3a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f952 	bl	8007ddc <USBD_CtlError>
 8007b38:	e075      	b.n	8007c26 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d002      	beq.n	8007b4a <USBD_SetConfig+0x36>
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d023      	beq.n	8007b90 <USBD_SetConfig+0x7c>
 8007b48:	e062      	b.n	8007c10 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007b4a:	4b38      	ldr	r3, [pc, #224]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d01a      	beq.n	8007b88 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b52:	4b36      	ldr	r3, [pc, #216]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2203      	movs	r2, #3
 8007b60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b64:	4b31      	ldr	r3, [pc, #196]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff f9e8 	bl	8006f40 <USBD_SetClassConfig>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d104      	bne.n	8007b80 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f92f 	bl	8007ddc <USBD_CtlError>
            return;
 8007b7e:	e052      	b.n	8007c26 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f9f3 	bl	8007f6c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b86:	e04e      	b.n	8007c26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9ef 	bl	8007f6c <USBD_CtlSendStatus>
        break;
 8007b8e:	e04a      	b.n	8007c26 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b90:	4b26      	ldr	r3, [pc, #152]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d112      	bne.n	8007bbe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007ba0:	4b22      	ldr	r3, [pc, #136]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007baa:	4b20      	ldr	r3, [pc, #128]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff f9e4 	bl	8006f7e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f9d8 	bl	8007f6c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007bbc:	e033      	b.n	8007c26 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d01d      	beq.n	8007c08 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff f9d2 	bl	8006f7e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007bda:	4b14      	ldr	r3, [pc, #80]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007be4:	4b11      	ldr	r3, [pc, #68]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff f9a8 	bl	8006f40 <USBD_SetClassConfig>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d104      	bne.n	8007c00 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f8ef 	bl	8007ddc <USBD_CtlError>
            return;
 8007bfe:	e012      	b.n	8007c26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f9b3 	bl	8007f6c <USBD_CtlSendStatus>
        break;
 8007c06:	e00e      	b.n	8007c26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f9af 	bl	8007f6c <USBD_CtlSendStatus>
        break;
 8007c0e:	e00a      	b.n	8007c26 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f8e2 	bl	8007ddc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c18:	4b04      	ldr	r3, [pc, #16]	@ (8007c2c <USBD_SetConfig+0x118>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff f9ad 	bl	8006f7e <USBD_ClrClassConfig>
        break;
 8007c24:	bf00      	nop
    }
  }
}
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20000238 	.word	0x20000238

08007c30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	88db      	ldrh	r3, [r3, #6]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d004      	beq.n	8007c4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f8c9 	bl	8007ddc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c4a:	e022      	b.n	8007c92 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	dc02      	bgt.n	8007c5c <USBD_GetConfig+0x2c>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dc03      	bgt.n	8007c62 <USBD_GetConfig+0x32>
 8007c5a:	e015      	b.n	8007c88 <USBD_GetConfig+0x58>
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetConfig+0x48>
 8007c60:	e012      	b.n	8007c88 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f91d 	bl	8007eb0 <USBD_CtlSendData>
        break;
 8007c76:	e00c      	b.n	8007c92 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f915 	bl	8007eb0 <USBD_CtlSendData>
        break;
 8007c86:	e004      	b.n	8007c92 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f8a6 	bl	8007ddc <USBD_CtlError>
        break;
 8007c90:	bf00      	nop
}
 8007c92:	bf00      	nop
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007caa:	3b01      	subs	r3, #1
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d81e      	bhi.n	8007cee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	88db      	ldrh	r3, [r3, #6]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d004      	beq.n	8007cc2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f88e 	bl	8007ddc <USBD_CtlError>
        break;
 8007cc0:	e01a      	b.n	8007cf8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f043 0202 	orr.w	r2, r3, #2
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f8e2 	bl	8007eb0 <USBD_CtlSendData>
      break;
 8007cec:	e004      	b.n	8007cf8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f873 	bl	8007ddc <USBD_CtlError>
      break;
 8007cf6:	bf00      	nop
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	885b      	ldrh	r3, [r3, #2]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d106      	bne.n	8007d20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f926 	bl	8007f6c <USBD_CtlSendStatus>
  }
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d80b      	bhi.n	8007d56 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	885b      	ldrh	r3, [r3, #2]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d10c      	bne.n	8007d60 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f90c 	bl	8007f6c <USBD_CtlSendStatus>
      }
      break;
 8007d54:	e004      	b.n	8007d60 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f83f 	bl	8007ddc <USBD_CtlError>
      break;
 8007d5e:	e000      	b.n	8007d62 <USBD_ClrFeature+0x3a>
      break;
 8007d60:	bf00      	nop
  }
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781a      	ldrb	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	785a      	ldrb	r2, [r3, #1]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	3302      	adds	r3, #2
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	3303      	adds	r3, #3
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	4413      	add	r3, r2
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	3304      	adds	r3, #4
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	461a      	mov	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	3305      	adds	r3, #5
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	4413      	add	r3, r2
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	3306      	adds	r3, #6
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	3307      	adds	r3, #7
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	021b      	lsls	r3, r3, #8
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	4413      	add	r3, r2
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	80da      	strh	r2, [r3, #6]

}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr

08007ddc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007de6:	2180      	movs	r1, #128	@ 0x80
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fc2d 	bl	8008648 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007dee:	2100      	movs	r1, #0
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fc29 	bl	8008648 <USBD_LL_StallEP>
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b086      	sub	sp, #24
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d032      	beq.n	8007e7a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f834 	bl	8007e82 <USBD_GetLen>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	75fa      	strb	r2, [r7, #23]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	4413      	add	r3, r2
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	7812      	ldrb	r2, [r2, #0]
 8007e38:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	75fa      	strb	r2, [r7, #23]
 8007e40:	461a      	mov	r2, r3
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	4413      	add	r3, r2
 8007e46:	2203      	movs	r2, #3
 8007e48:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e4a:	e012      	b.n	8007e72 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	60fa      	str	r2, [r7, #12]
 8007e52:	7dfa      	ldrb	r2, [r7, #23]
 8007e54:	1c51      	adds	r1, r2, #1
 8007e56:	75f9      	strb	r1, [r7, #23]
 8007e58:	4611      	mov	r1, r2
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	75fa      	strb	r2, [r7, #23]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e8      	bne.n	8007e4c <USBD_GetString+0x4e>
    }
  }
}
 8007e7a:	bf00      	nop
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e8e:	e005      	b.n	8007e9c <USBD_GetLen+0x1a>
  {
    len++;
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	3301      	adds	r3, #1
 8007e94:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1f5      	bne.n	8007e90 <USBD_GetLen+0xe>
  }

  return len;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr

08007eb0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007ec6:	88fa      	ldrh	r2, [r7, #6]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ecc:	88fa      	ldrh	r2, [r7, #6]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 fc3d 	bl	8008758 <USBD_LL_Transmit>

  return USBD_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	2100      	movs	r1, #0
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fc2b 	bl	8008758 <USBD_LL_Transmit>

  return USBD_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	4613      	mov	r3, r2
 8007f18:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2203      	movs	r2, #3
 8007f1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007f22:	88fa      	ldrh	r2, [r7, #6]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007f2a:	88fa      	ldrh	r2, [r7, #6]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	2100      	movs	r1, #0
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fc30 	bl	800879e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	4613      	mov	r3, r2
 8007f54:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f56:	88fb      	ldrh	r3, [r7, #6]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 fc1e 	bl	800879e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2204      	movs	r2, #4
 8007f78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2100      	movs	r1, #0
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fbe8 	bl	8008758 <USBD_LL_Transmit>

  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b082      	sub	sp, #8
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2205      	movs	r2, #5
 8007f9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fbf8 	bl	800879e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	4912      	ldr	r1, [pc, #72]	@ (8008008 <MX_USB_DEVICE_Init+0x50>)
 8007fc0:	4812      	ldr	r0, [pc, #72]	@ (800800c <MX_USB_DEVICE_Init+0x54>)
 8007fc2:	f7fe ff63 	bl	8006e8c <USBD_Init>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fcc:	f7f8 f996 	bl	80002fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fd0:	490f      	ldr	r1, [pc, #60]	@ (8008010 <MX_USB_DEVICE_Init+0x58>)
 8007fd2:	480e      	ldr	r0, [pc, #56]	@ (800800c <MX_USB_DEVICE_Init+0x54>)
 8007fd4:	f7fe ff85 	bl	8006ee2 <USBD_RegisterClass>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fde:	f7f8 f98d 	bl	80002fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fe2:	490c      	ldr	r1, [pc, #48]	@ (8008014 <MX_USB_DEVICE_Init+0x5c>)
 8007fe4:	4809      	ldr	r0, [pc, #36]	@ (800800c <MX_USB_DEVICE_Init+0x54>)
 8007fe6:	f7fe fee5 	bl	8006db4 <USBD_CDC_RegisterInterface>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ff0:	f7f8 f984 	bl	80002fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ff4:	4805      	ldr	r0, [pc, #20]	@ (800800c <MX_USB_DEVICE_Init+0x54>)
 8007ff6:	f7fe ff8d 	bl	8006f14 <USBD_Start>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008000:	f7f8 f97c 	bl	80002fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008004:	bf00      	nop
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000130 	.word	0x20000130
 800800c:	2000023c 	.word	0x2000023c
 8008010:	2000001c 	.word	0x2000001c
 8008014:	20000120 	.word	0x20000120

08008018 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800801c:	2200      	movs	r2, #0
 800801e:	4905      	ldr	r1, [pc, #20]	@ (8008034 <CDC_Init_FS+0x1c>)
 8008020:	4805      	ldr	r0, [pc, #20]	@ (8008038 <CDC_Init_FS+0x20>)
 8008022:	f7fe fedd 	bl	8006de0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008026:	4905      	ldr	r1, [pc, #20]	@ (800803c <CDC_Init_FS+0x24>)
 8008028:	4803      	ldr	r0, [pc, #12]	@ (8008038 <CDC_Init_FS+0x20>)
 800802a:	f7fe fef2 	bl	8006e12 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800802e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008030:	4618      	mov	r0, r3
 8008032:	bd80      	pop	{r7, pc}
 8008034:	20000900 	.word	0x20000900
 8008038:	2000023c 	.word	0x2000023c
 800803c:	20000500 	.word	0x20000500

08008040 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008044:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008046:	4618      	mov	r0, r3
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr
	...

08008050 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	71fb      	strb	r3, [r7, #7]
 800805c:	4613      	mov	r3, r2
 800805e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	2b23      	cmp	r3, #35	@ 0x23
 8008064:	d84a      	bhi.n	80080fc <CDC_Control_FS+0xac>
 8008066:	a201      	add	r2, pc, #4	@ (adr r2, 800806c <CDC_Control_FS+0x1c>)
 8008068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806c:	080080fd 	.word	0x080080fd
 8008070:	080080fd 	.word	0x080080fd
 8008074:	080080fd 	.word	0x080080fd
 8008078:	080080fd 	.word	0x080080fd
 800807c:	080080fd 	.word	0x080080fd
 8008080:	080080fd 	.word	0x080080fd
 8008084:	080080fd 	.word	0x080080fd
 8008088:	080080fd 	.word	0x080080fd
 800808c:	080080fd 	.word	0x080080fd
 8008090:	080080fd 	.word	0x080080fd
 8008094:	080080fd 	.word	0x080080fd
 8008098:	080080fd 	.word	0x080080fd
 800809c:	080080fd 	.word	0x080080fd
 80080a0:	080080fd 	.word	0x080080fd
 80080a4:	080080fd 	.word	0x080080fd
 80080a8:	080080fd 	.word	0x080080fd
 80080ac:	080080fd 	.word	0x080080fd
 80080b0:	080080fd 	.word	0x080080fd
 80080b4:	080080fd 	.word	0x080080fd
 80080b8:	080080fd 	.word	0x080080fd
 80080bc:	080080fd 	.word	0x080080fd
 80080c0:	080080fd 	.word	0x080080fd
 80080c4:	080080fd 	.word	0x080080fd
 80080c8:	080080fd 	.word	0x080080fd
 80080cc:	080080fd 	.word	0x080080fd
 80080d0:	080080fd 	.word	0x080080fd
 80080d4:	080080fd 	.word	0x080080fd
 80080d8:	080080fd 	.word	0x080080fd
 80080dc:	080080fd 	.word	0x080080fd
 80080e0:	080080fd 	.word	0x080080fd
 80080e4:	080080fd 	.word	0x080080fd
 80080e8:	080080fd 	.word	0x080080fd
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	080080fd 	.word	0x080080fd
 80080f4:	080080fd 	.word	0x080080fd
 80080f8:	080080fd 	.word	0x080080fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080fc:	bf00      	nop
  }

  return (USBD_OK);
 80080fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop

0800810c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	4805      	ldr	r0, [pc, #20]	@ (8008130 <CDC_Receive_FS+0x24>)
 800811a:	f7fe fe7a 	bl	8006e12 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800811e:	4804      	ldr	r0, [pc, #16]	@ (8008130 <CDC_Receive_FS+0x24>)
 8008120:	f7fe fe8a 	bl	8006e38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008124:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	2000023c 	.word	0x2000023c

08008134 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2212      	movs	r2, #18
 8008144:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008146:	4b03      	ldr	r3, [pc, #12]	@ (8008154 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	2000014c 	.word	0x2000014c

08008158 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2204      	movs	r2, #4
 8008168:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800816a:	4b03      	ldr	r3, [pc, #12]	@ (8008178 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	20000160 	.word	0x20000160

0800817c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	6039      	str	r1, [r7, #0]
 8008186:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d105      	bne.n	800819a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	4907      	ldr	r1, [pc, #28]	@ (80081b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008192:	4808      	ldr	r0, [pc, #32]	@ (80081b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008194:	f7ff fe33 	bl	8007dfe <USBD_GetString>
 8008198:	e004      	b.n	80081a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	4904      	ldr	r1, [pc, #16]	@ (80081b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800819e:	4805      	ldr	r0, [pc, #20]	@ (80081b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80081a0:	f7ff fe2d 	bl	8007dfe <USBD_GetString>
  }
  return USBD_StrDesc;
 80081a4:	4b02      	ldr	r3, [pc, #8]	@ (80081b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000d00 	.word	0x20000d00
 80081b4:	08008914 	.word	0x08008914

080081b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	6039      	str	r1, [r7, #0]
 80081c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	4904      	ldr	r1, [pc, #16]	@ (80081d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081c8:	4804      	ldr	r0, [pc, #16]	@ (80081dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081ca:	f7ff fe18 	bl	8007dfe <USBD_GetString>
  return USBD_StrDesc;
 80081ce:	4b02      	ldr	r3, [pc, #8]	@ (80081d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	20000d00 	.word	0x20000d00
 80081dc:	08008928 	.word	0x08008928

080081e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	6039      	str	r1, [r7, #0]
 80081ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	221a      	movs	r2, #26
 80081f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081f2:	f000 f843 	bl	800827c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081f6:	4b02      	ldr	r3, [pc, #8]	@ (8008200 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20000164 	.word	0x20000164

08008204 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	6039      	str	r1, [r7, #0]
 800820e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d105      	bne.n	8008222 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	4907      	ldr	r1, [pc, #28]	@ (8008238 <USBD_FS_ConfigStrDescriptor+0x34>)
 800821a:	4808      	ldr	r0, [pc, #32]	@ (800823c <USBD_FS_ConfigStrDescriptor+0x38>)
 800821c:	f7ff fdef 	bl	8007dfe <USBD_GetString>
 8008220:	e004      	b.n	800822c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4904      	ldr	r1, [pc, #16]	@ (8008238 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008226:	4805      	ldr	r0, [pc, #20]	@ (800823c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008228:	f7ff fde9 	bl	8007dfe <USBD_GetString>
  }
  return USBD_StrDesc;
 800822c:	4b02      	ldr	r3, [pc, #8]	@ (8008238 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000d00 	.word	0x20000d00
 800823c:	0800893c 	.word	0x0800893c

08008240 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d105      	bne.n	800825e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4907      	ldr	r1, [pc, #28]	@ (8008274 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008256:	4808      	ldr	r0, [pc, #32]	@ (8008278 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008258:	f7ff fdd1 	bl	8007dfe <USBD_GetString>
 800825c:	e004      	b.n	8008268 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	4904      	ldr	r1, [pc, #16]	@ (8008274 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008262:	4805      	ldr	r0, [pc, #20]	@ (8008278 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008264:	f7ff fdcb 	bl	8007dfe <USBD_GetString>
  }
  return USBD_StrDesc;
 8008268:	4b02      	ldr	r3, [pc, #8]	@ (8008274 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000d00 	.word	0x20000d00
 8008278:	08008948 	.word	0x08008948

0800827c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008282:	4b0f      	ldr	r3, [pc, #60]	@ (80082c0 <Get_SerialNum+0x44>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008288:	4b0e      	ldr	r3, [pc, #56]	@ (80082c4 <Get_SerialNum+0x48>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800828e:	4b0e      	ldr	r3, [pc, #56]	@ (80082c8 <Get_SerialNum+0x4c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4413      	add	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d009      	beq.n	80082b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082a2:	2208      	movs	r2, #8
 80082a4:	4909      	ldr	r1, [pc, #36]	@ (80082cc <Get_SerialNum+0x50>)
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f814 	bl	80082d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082ac:	2204      	movs	r2, #4
 80082ae:	4908      	ldr	r1, [pc, #32]	@ (80082d0 <Get_SerialNum+0x54>)
 80082b0:	68b8      	ldr	r0, [r7, #8]
 80082b2:	f000 f80f 	bl	80082d4 <IntToUnicode>
  }
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	1ffff7e8 	.word	0x1ffff7e8
 80082c4:	1ffff7ec 	.word	0x1ffff7ec
 80082c8:	1ffff7f0 	.word	0x1ffff7f0
 80082cc:	20000166 	.word	0x20000166
 80082d0:	20000176 	.word	0x20000176

080082d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	4613      	mov	r3, r2
 80082e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082e6:	2300      	movs	r3, #0
 80082e8:	75fb      	strb	r3, [r7, #23]
 80082ea:	e027      	b.n	800833c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	0f1b      	lsrs	r3, r3, #28
 80082f0:	2b09      	cmp	r3, #9
 80082f2:	d80b      	bhi.n	800830c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	0f1b      	lsrs	r3, r3, #28
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	4619      	mov	r1, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	440b      	add	r3, r1
 8008304:	3230      	adds	r2, #48	@ 0x30
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e00a      	b.n	8008322 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	0f1b      	lsrs	r3, r3, #28
 8008310:	b2da      	uxtb	r2, r3
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	4619      	mov	r1, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	440b      	add	r3, r1
 800831c:	3237      	adds	r2, #55	@ 0x37
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	3301      	adds	r3, #1
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	4413      	add	r3, r2
 8008332:	2200      	movs	r2, #0
 8008334:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008336:	7dfb      	ldrb	r3, [r7, #23]
 8008338:	3301      	adds	r3, #1
 800833a:	75fb      	strb	r3, [r7, #23]
 800833c:	7dfa      	ldrb	r2, [r7, #23]
 800833e:	79fb      	ldrb	r3, [r7, #7]
 8008340:	429a      	cmp	r2, r3
 8008342:	d3d3      	bcc.n	80082ec <IntToUnicode+0x18>
  }
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	bc80      	pop	{r7}
 800834e:	4770      	bx	lr

08008350 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a0d      	ldr	r2, [pc, #52]	@ (8008394 <HAL_PCD_MspInit+0x44>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d113      	bne.n	800838a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008362:	4b0d      	ldr	r3, [pc, #52]	@ (8008398 <HAL_PCD_MspInit+0x48>)
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	4a0c      	ldr	r2, [pc, #48]	@ (8008398 <HAL_PCD_MspInit+0x48>)
 8008368:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800836c:	61d3      	str	r3, [r2, #28]
 800836e:	4b0a      	ldr	r3, [pc, #40]	@ (8008398 <HAL_PCD_MspInit+0x48>)
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800837a:	2200      	movs	r2, #0
 800837c:	2100      	movs	r1, #0
 800837e:	2014      	movs	r0, #20
 8008380:	f7f8 fbb7 	bl	8000af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008384:	2014      	movs	r0, #20
 8008386:	f7f8 fbd0 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40005c00 	.word	0x40005c00
 8008398:	40021000 	.word	0x40021000

0800839c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7fe fdf6 	bl	8006fa4 <USBD_LL_SetupStage>
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80083d2:	78fa      	ldrb	r2, [r7, #3]
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	440b      	add	r3, r1
 80083e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	4619      	mov	r1, r3
 80083ea:	f7fe fe28 	bl	800703e <USBD_LL_DataOutStage>
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	440b      	add	r3, r1
 8008416:	3324      	adds	r3, #36	@ 0x24
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	4619      	mov	r1, r3
 800841e:	f7fe fe7f 	bl	8007120 <USBD_LL_DataInStage>
}
 8008422:	bf00      	nop
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008438:	4618      	mov	r0, r3
 800843a:	f7fe ff8f 	bl	800735c <USBD_LL_SOF>
}
 800843e:	bf00      	nop
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800844e:	2301      	movs	r3, #1
 8008450:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	799b      	ldrb	r3, [r3, #6]
 8008456:	2b02      	cmp	r3, #2
 8008458:	d001      	beq.n	800845e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800845a:	f7f7 ff4f 	bl	80002fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008464:	7bfa      	ldrb	r2, [r7, #15]
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe ff3f 	bl	80072ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fef8 	bl	800726a <USBD_LL_Reset>
}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe ff39 	bl	800730a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	7a9b      	ldrb	r3, [r3, #10]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084a0:	4b04      	ldr	r3, [pc, #16]	@ (80084b4 <HAL_PCD_SuspendCallback+0x30>)
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	4a03      	ldr	r2, [pc, #12]	@ (80084b4 <HAL_PCD_SuspendCallback+0x30>)
 80084a6:	f043 0306 	orr.w	r3, r3, #6
 80084aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	e000ed00 	.word	0xe000ed00

080084b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe ff33 	bl	8007332 <USBD_LL_Resume>
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80084dc:	4a28      	ldr	r2, [pc, #160]	@ (8008580 <USBD_LL_Init+0xac>)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a26      	ldr	r2, [pc, #152]	@ (8008580 <USBD_LL_Init+0xac>)
 80084e8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80084ec:	4b24      	ldr	r3, [pc, #144]	@ (8008580 <USBD_LL_Init+0xac>)
 80084ee:	4a25      	ldr	r2, [pc, #148]	@ (8008584 <USBD_LL_Init+0xb0>)
 80084f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80084f2:	4b23      	ldr	r3, [pc, #140]	@ (8008580 <USBD_LL_Init+0xac>)
 80084f4:	2208      	movs	r2, #8
 80084f6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80084f8:	4b21      	ldr	r3, [pc, #132]	@ (8008580 <USBD_LL_Init+0xac>)
 80084fa:	2202      	movs	r2, #2
 80084fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80084fe:	4b20      	ldr	r3, [pc, #128]	@ (8008580 <USBD_LL_Init+0xac>)
 8008500:	2200      	movs	r2, #0
 8008502:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008504:	4b1e      	ldr	r3, [pc, #120]	@ (8008580 <USBD_LL_Init+0xac>)
 8008506:	2200      	movs	r2, #0
 8008508:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800850a:	4b1d      	ldr	r3, [pc, #116]	@ (8008580 <USBD_LL_Init+0xac>)
 800850c:	2200      	movs	r2, #0
 800850e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008510:	481b      	ldr	r0, [pc, #108]	@ (8008580 <USBD_LL_Init+0xac>)
 8008512:	f7f8 fce3 	bl	8000edc <HAL_PCD_Init>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800851c:	f7f7 feee 	bl	80002fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008526:	2318      	movs	r3, #24
 8008528:	2200      	movs	r2, #0
 800852a:	2100      	movs	r1, #0
 800852c:	f7fa f9f4 	bl	8002918 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008536:	2358      	movs	r3, #88	@ 0x58
 8008538:	2200      	movs	r2, #0
 800853a:	2180      	movs	r1, #128	@ 0x80
 800853c:	f7fa f9ec 	bl	8002918 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008546:	23c0      	movs	r3, #192	@ 0xc0
 8008548:	2200      	movs	r2, #0
 800854a:	2181      	movs	r1, #129	@ 0x81
 800854c:	f7fa f9e4 	bl	8002918 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008556:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800855a:	2200      	movs	r2, #0
 800855c:	2101      	movs	r1, #1
 800855e:	f7fa f9db 	bl	8002918 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800856c:	2200      	movs	r2, #0
 800856e:	2182      	movs	r1, #130	@ 0x82
 8008570:	f7fa f9d2 	bl	8002918 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20000f00 	.word	0x20000f00
 8008584:	40005c00 	.word	0x40005c00

08008588 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800859e:	4618      	mov	r0, r3
 80085a0:	f7f8 fd92 	bl	80010c8 <HAL_PCD_Start>
 80085a4:	4603      	mov	r3, r0
 80085a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f94e 	bl	800884c <USBD_Get_USB_Status>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	4608      	mov	r0, r1
 80085c8:	4611      	mov	r1, r2
 80085ca:	461a      	mov	r2, r3
 80085cc:	4603      	mov	r3, r0
 80085ce:	70fb      	strb	r3, [r7, #3]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70bb      	strb	r3, [r7, #2]
 80085d4:	4613      	mov	r3, r2
 80085d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085e6:	78bb      	ldrb	r3, [r7, #2]
 80085e8:	883a      	ldrh	r2, [r7, #0]
 80085ea:	78f9      	ldrb	r1, [r7, #3]
 80085ec:	f7f8 fee6 	bl	80013bc <HAL_PCD_EP_Open>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f928 	bl	800884c <USBD_Get_USB_Status>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008600:	7bbb      	ldrb	r3, [r7, #14]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	4611      	mov	r1, r2
 8008628:	4618      	mov	r0, r3
 800862a:	f7f8 ff24 	bl	8001476 <HAL_PCD_EP_Close>
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	4618      	mov	r0, r3
 8008636:	f000 f909 	bl	800884c <USBD_Get_USB_Status>
 800863a:	4603      	mov	r3, r0
 800863c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800863e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f7f8 ffcc 	bl	8001604 <HAL_PCD_EP_SetStall>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f8ea 	bl	800884c <USBD_Get_USB_Status>
 8008678:	4603      	mov	r3, r0
 800867a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800867c:	7bbb      	ldrb	r3, [r7, #14]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7f9 f80d 	bl	80016c4 <HAL_PCD_EP_ClrStall>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 f8cb 	bl	800884c <USBD_Get_USB_Status>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	da0b      	bge.n	80086f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086e6:	68f9      	ldr	r1, [r7, #12]
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	440b      	add	r3, r1
 80086f2:	3312      	adds	r3, #18
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	e00b      	b.n	8008710 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	440b      	add	r3, r1
 800870a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800870e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr

0800871a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008734:	78fa      	ldrb	r2, [r7, #3]
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f7f8 fe1b 	bl	8001374 <HAL_PCD_SetAddress>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	4618      	mov	r0, r3
 8008746:	f000 f881 	bl	800884c <USBD_Get_USB_Status>
 800874a:	4603      	mov	r3, r0
 800874c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800874e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	607a      	str	r2, [r7, #4]
 8008762:	461a      	mov	r2, r3
 8008764:	460b      	mov	r3, r1
 8008766:	72fb      	strb	r3, [r7, #11]
 8008768:	4613      	mov	r3, r2
 800876a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800877a:	893b      	ldrh	r3, [r7, #8]
 800877c:	7af9      	ldrb	r1, [r7, #11]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	f7f8 ff09 	bl	8001596 <HAL_PCD_EP_Transmit>
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f85e 	bl	800884c <USBD_Get_USB_Status>
 8008790:	4603      	mov	r3, r0
 8008792:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008794:	7dbb      	ldrb	r3, [r7, #22]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b086      	sub	sp, #24
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	461a      	mov	r2, r3
 80087aa:	460b      	mov	r3, r1
 80087ac:	72fb      	strb	r3, [r7, #11]
 80087ae:	4613      	mov	r3, r2
 80087b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087c0:	893b      	ldrh	r3, [r7, #8]
 80087c2:	7af9      	ldrb	r1, [r7, #11]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	f7f8 fe9e 	bl	8001506 <HAL_PCD_EP_Receive>
 80087ca:	4603      	mov	r3, r0
 80087cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 f83b 	bl	800884c <USBD_Get_USB_Status>
 80087d6:	4603      	mov	r3, r0
 80087d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087da:	7dbb      	ldrb	r3, [r7, #22]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087f6:	78fa      	ldrb	r2, [r7, #3]
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f8 feb4 	bl	8001568 <HAL_PCD_EP_GetRxCount>
 8008800:	4603      	mov	r3, r0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008814:	4b02      	ldr	r3, [pc, #8]	@ (8008820 <USBD_static_malloc+0x14>)
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	bc80      	pop	{r7}
 800881e:	4770      	bx	lr
 8008820:	200011d8 	.word	0x200011d8

08008824 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]

}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr

08008836 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr

0800884c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	2b03      	cmp	r3, #3
 800885e:	d817      	bhi.n	8008890 <USBD_Get_USB_Status+0x44>
 8008860:	a201      	add	r2, pc, #4	@ (adr r2, 8008868 <USBD_Get_USB_Status+0x1c>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	08008879 	.word	0x08008879
 800886c:	0800887f 	.word	0x0800887f
 8008870:	08008885 	.word	0x08008885
 8008874:	0800888b 	.word	0x0800888b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]
    break;
 800887c:	e00b      	b.n	8008896 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800887e:	2302      	movs	r3, #2
 8008880:	73fb      	strb	r3, [r7, #15]
    break;
 8008882:	e008      	b.n	8008896 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008884:	2301      	movs	r3, #1
 8008886:	73fb      	strb	r3, [r7, #15]
    break;
 8008888:	e005      	b.n	8008896 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800888a:	2302      	movs	r3, #2
 800888c:	73fb      	strb	r3, [r7, #15]
    break;
 800888e:	e002      	b.n	8008896 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008890:	2302      	movs	r3, #2
 8008892:	73fb      	strb	r3, [r7, #15]
    break;
 8008894:	bf00      	nop
  }
  return usb_status;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	bc80      	pop	{r7}
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop

080088a4 <memset>:
 80088a4:	4603      	mov	r3, r0
 80088a6:	4402      	add	r2, r0
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d100      	bne.n	80088ae <memset+0xa>
 80088ac:	4770      	bx	lr
 80088ae:	f803 1b01 	strb.w	r1, [r3], #1
 80088b2:	e7f9      	b.n	80088a8 <memset+0x4>

080088b4 <__libc_init_array>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	2600      	movs	r6, #0
 80088b8:	4d0c      	ldr	r5, [pc, #48]	@ (80088ec <__libc_init_array+0x38>)
 80088ba:	4c0d      	ldr	r4, [pc, #52]	@ (80088f0 <__libc_init_array+0x3c>)
 80088bc:	1b64      	subs	r4, r4, r5
 80088be:	10a4      	asrs	r4, r4, #2
 80088c0:	42a6      	cmp	r6, r4
 80088c2:	d109      	bne.n	80088d8 <__libc_init_array+0x24>
 80088c4:	f000 f81a 	bl	80088fc <_init>
 80088c8:	2600      	movs	r6, #0
 80088ca:	4d0a      	ldr	r5, [pc, #40]	@ (80088f4 <__libc_init_array+0x40>)
 80088cc:	4c0a      	ldr	r4, [pc, #40]	@ (80088f8 <__libc_init_array+0x44>)
 80088ce:	1b64      	subs	r4, r4, r5
 80088d0:	10a4      	asrs	r4, r4, #2
 80088d2:	42a6      	cmp	r6, r4
 80088d4:	d105      	bne.n	80088e2 <__libc_init_array+0x2e>
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088dc:	4798      	blx	r3
 80088de:	3601      	adds	r6, #1
 80088e0:	e7ee      	b.n	80088c0 <__libc_init_array+0xc>
 80088e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e6:	4798      	blx	r3
 80088e8:	3601      	adds	r6, #1
 80088ea:	e7f2      	b.n	80088d2 <__libc_init_array+0x1e>
 80088ec:	0800897c 	.word	0x0800897c
 80088f0:	0800897c 	.word	0x0800897c
 80088f4:	0800897c 	.word	0x0800897c
 80088f8:	08008980 	.word	0x08008980

080088fc <_init>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	bf00      	nop
 8008900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008902:	bc08      	pop	{r3}
 8008904:	469e      	mov	lr, r3
 8008906:	4770      	bx	lr

08008908 <_fini>:
 8008908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890a:	bf00      	nop
 800890c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890e:	bc08      	pop	{r3}
 8008910:	469e      	mov	lr, r3
 8008912:	4770      	bx	lr
