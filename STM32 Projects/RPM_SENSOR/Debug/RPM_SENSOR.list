
RPM_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800b4b0  0800b4b0  0000c4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b88c  0800b88c  0000d344  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b88c  0800b88c  0000c88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b894  0800b894  0000d344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b894  0800b894  0000c894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b898  0800b898  0000c898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800b89c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001380  20000344  0800bbe0  0000d344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016c4  0800bbe0  0000d6c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d344  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115ce  00000000  00000000  0000d36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034af  00000000  00000000  0001e93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00021df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca9  00000000  00000000  00022ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b25c  00000000  00000000  00023b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152e3  00000000  00000000  0003edcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ece4  00000000  00000000  000540b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2d94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c8  00000000  00000000  000e2dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000e81a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b498 	.word	0x0800b498

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800b498 	.word	0x0800b498

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b28      	ldr	r3, [pc, #160]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a27      	ldr	r2, [pc, #156]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aea:	4816      	ldr	r0, [pc, #88]	@ (8000b44 <MX_GPIO_Init+0xbc>)
 8000aec:	f000 fe5c 	bl	80017a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <MX_GPIO_Init+0xbc>)
 8000b0a:	f000 fcc9 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <MX_GPIO_Init+0xc0>)
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480a      	ldr	r0, [pc, #40]	@ (8000b4c <MX_GPIO_Init+0xc4>)
 8000b22:	f000 fcbd 	bl	80014a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2006      	movs	r0, #6
 8000b2c:	f000 fc81 	bl	8001432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b30:	2006      	movs	r0, #6
 8000b32:	f000 fc9a 	bl	800146a <HAL_NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40011000 	.word	0x40011000
 8000b48:	10110000 	.word	0x10110000
 8000b4c:	40010800 	.word	0x40010800

08000b50 <PWM_SetDutyCycle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PWM_SetDutyCycle(uint8_t duty_percent) {
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
    if (duty_percent > 100) duty_percent = 100;            // Limitar a 100%
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b64      	cmp	r3, #100	@ 0x64
 8000b5e:	d901      	bls.n	8000b64 <PWM_SetDutyCycle+0x14>
 8000b60:	2364      	movs	r3, #100	@ 0x64
 8000b62:	71fb      	strb	r3, [r7, #7]
    uint32_t ARR = __HAL_TIM_GET_AUTORELOAD(&htim1);       // Obtener ARR actual (1439)
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <PWM_SetDutyCycle+0x50>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6a:	60bb      	str	r3, [r7, #8]
    // Calcular el nuevo valor de comparación:
    uint32_t new_pulse = (duty_percent * (ARR + 1)) / 100;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	3201      	adds	r2, #1
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba4 <PWM_SetDutyCycle+0x54>)
 8000b78:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7c:	095b      	lsrs	r3, r3, #5
 8000b7e:	60fb      	str	r3, [r7, #12]
    if (new_pulse > 0) new_pulse--;  // Ajuste: 100% debe dar CCR = ARR, 0% dará CCR = 0
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <PWM_SetDutyCycle+0x3c>
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, new_pulse);
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <PWM_SetDutyCycle+0x50>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2000036c 	.word	0x2000036c
 8000ba4:	51eb851f 	.word	0x51eb851f

08000ba8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Verifica que sea nuestro PA0
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d114      	bne.n	8000be2 <HAL_GPIO_EXTI_Callback+0x3a>
        uint32_t now = HAL_GetTick();              // Tiempo actual en ms
 8000bb8:	f000 fb36 	bl	8001228 <HAL_GetTick>
 8000bbc:	60f8      	str	r0, [r7, #12]
        uint32_t diff = now - lastTick;            // Tiempo desde el último pulso
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <HAL_GPIO_EXTI_Callback+0x44>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	60bb      	str	r3, [r7, #8]
        if (diff > 0) {
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d006      	beq.n	8000bdc <HAL_GPIO_EXTI_Callback+0x34>
            // Calcula RPM: 60000 ms (un minuto) dividido por el periodo de una vuelta
            rpm = 60000 / diff;  // rpm = 60*1000 / intervalo_en_ms :contentReference[oaicite:5]{index=5}
 8000bce:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd8:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000bda:	6013      	str	r3, [r2, #0]
        }
        lastTick = now;
 8000bdc:	4a03      	ldr	r2, [pc, #12]	@ (8000bec <HAL_GPIO_EXTI_Callback+0x44>)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6013      	str	r3, [r2, #0]
    }
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000360 	.word	0x20000360
 8000bf0:	20000364 	.word	0x20000364

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf8:	f000 fabe 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfc:	f000 f828 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c00:	f7ff ff42 	bl	8000a88 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c04:	f007 fb44 	bl	8008290 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000c08:	f000 f9ba 	bl	8000f80 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // INICAMOS LA GENERACION DE PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480f      	ldr	r0, [pc, #60]	@ (8000c4c <main+0x58>)
 8000c10:	f003 f83e 	bl	8003c90 <HAL_TIM_PWM_Start>
  {

//	  snprintf(msg, sizeof(msg), "RPM = %lu\r\n", rpm);
//	  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
//	  HAL_Delay(10);
	  HAL_Delay(1000);
 8000c14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c18:	f000 fb10 	bl	800123c <HAL_Delay>
	  PWM_SetDutyCycle(5);
 8000c1c:	2005      	movs	r0, #5
 8000c1e:	f7ff ff97 	bl	8000b50 <PWM_SetDutyCycle>
	  HAL_Delay(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c26:	f000 fb09 	bl	800123c <HAL_Delay>
	  PWM_SetDutyCycle(7.5);
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f7ff ff90 	bl	8000b50 <PWM_SetDutyCycle>
	  HAL_Delay(1000);
 8000c30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c34:	f000 fb02 	bl	800123c <HAL_Delay>
	  PWM_SetDutyCycle(10);
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f7ff ff89 	bl	8000b50 <PWM_SetDutyCycle>
	  HAL_Delay(1000);
 8000c3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c42:	f000 fafb 	bl	800123c <HAL_Delay>
	  HAL_Delay(1000);
 8000c46:	bf00      	nop
 8000c48:	e7e4      	b.n	8000c14 <main+0x20>
 8000c4a:	bf00      	nop
 8000c4c:	2000036c 	.word	0x2000036c

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	@ 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c5a:	2228      	movs	r2, #40	@ 0x28
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f008 fceb 	bl	800963a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	2302      	movs	r3, #2
 8000c94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c9c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fb0e 	bl	80032c8 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cb2:	f000 f827 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fd7a 	bl	80037cc <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cde:	f000 f811 	bl	8000d04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fec9 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000cf8:	f000 f804 	bl	8000d04 <Error_Handler>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3750      	adds	r7, #80	@ 0x50
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <Error_Handler+0x8>

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_MspInit+0x5c>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <HAL_MspInit+0x5c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_MspInit+0x5c>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <HAL_MspInit+0x5c>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a0e      	ldr	r2, [pc, #56]	@ (8000d6c <HAL_MspInit+0x5c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d38:	61d3      	str	r3, [r2, #28]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <HAL_MspInit+0x5c>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_MspInit+0x60>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <HAL_MspInit+0x60>)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <NMI_Handler+0x4>

08000d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 fa1e 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f000 fd01 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000de2:	f000 fe2d 	bl	8001a40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20001080 	.word	0x20001080

08000df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return 1;
 8000df4:	2301      	movs	r3, #1
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <_kill>:

int _kill(int pid, int sig)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e08:	f008 fc6a 	bl	80096e0 <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2216      	movs	r2, #22
 8000e10:	601a      	str	r2, [r3, #0]
  return -1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_exit>:

void _exit (int status)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e26:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffe7 	bl	8000dfe <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <_exit+0x12>

08000e34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e00a      	b.n	8000e5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e46:	f3af 8000 	nop.w
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	60ba      	str	r2, [r7, #8]
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf0      	blt.n	8000e46 <_read+0x12>
  }

  return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	e009      	b.n	8000e94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	60ba      	str	r2, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf1      	blt.n	8000e80 <_write+0x12>
  }
  return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_close>:

int _close(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ecc:	605a      	str	r2, [r3, #4]
  return 0;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <_isatty>:

int _isatty(int file)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b085      	sub	sp, #20
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
	...

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	@ (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f008 fbd2 	bl	80096e0 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20005000 	.word	0x20005000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	20000368 	.word	0x20000368
 8000f70:	200016c8 	.word	0x200016c8

08000f74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b092      	sub	sp, #72	@ 0x48
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	615a      	str	r2, [r3, #20]
 8000fa2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f008 fb45 	bl	800963a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb0:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <MX_TIM1_Init+0x100>)
 8000fb2:	4a34      	ldr	r2, [pc, #208]	@ (8001084 <MX_TIM1_Init+0x104>)
 8000fb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1439;
 8000fb6:	4b32      	ldr	r3, [pc, #200]	@ (8001080 <MX_TIM1_Init+0x100>)
 8000fb8:	f240 529f 	movw	r2, #1439	@ 0x59f
 8000fbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b30      	ldr	r3, [pc, #192]	@ (8001080 <MX_TIM1_Init+0x100>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001080 <MX_TIM1_Init+0x100>)
 8000fc6:	f240 529f 	movw	r2, #1439	@ 0x59f
 8000fca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001080 <MX_TIM1_Init+0x100>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001080 <MX_TIM1_Init+0x100>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b29      	ldr	r3, [pc, #164]	@ (8001080 <MX_TIM1_Init+0x100>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fde:	4828      	ldr	r0, [pc, #160]	@ (8001080 <MX_TIM1_Init+0x100>)
 8000fe0:	f002 fe06 	bl	8003bf0 <HAL_TIM_PWM_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f7ff fe8b 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4820      	ldr	r0, [pc, #128]	@ (8001080 <MX_TIM1_Init+0x100>)
 8000ffe:	f003 f9c5 	bl	800438c <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001008:	f7ff fe7c 	bl	8000d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100c:	2360      	movs	r3, #96	@ 0x60
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001018:	2300      	movs	r3, #0
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102c:	2200      	movs	r2, #0
 800102e:	4619      	mov	r1, r3
 8001030:	4813      	ldr	r0, [pc, #76]	@ (8001080 <MX_TIM1_Init+0x100>)
 8001032:	f002 fecf 	bl	8003dd4 <HAL_TIM_PWM_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800103c:	f7ff fe62 	bl	8000d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001058:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4619      	mov	r1, r3
 8001062:	4807      	ldr	r0, [pc, #28]	@ (8001080 <MX_TIM1_Init+0x100>)
 8001064:	f003 f9f0 	bl	8004448 <HAL_TIMEx_ConfigBreakDeadTime>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800106e:	f7ff fe49 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001072:	4803      	ldr	r0, [pc, #12]	@ (8001080 <MX_TIM1_Init+0x100>)
 8001074:	f000 f826 	bl	80010c4 <HAL_TIM_MspPostInit>

}
 8001078:	bf00      	nop
 800107a:	3748      	adds	r7, #72	@ 0x48
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000036c 	.word	0x2000036c
 8001084:	40012c00 	.word	0x40012c00

08001088 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a09      	ldr	r2, [pc, #36]	@ (80010bc <HAL_TIM_PWM_MspInit+0x34>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d10b      	bne.n	80010b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <HAL_TIM_PWM_MspInit+0x38>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <HAL_TIM_PWM_MspInit+0x38>)
 80010a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010a4:	6193      	str	r3, [r2, #24]
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_TIM_PWM_MspInit+0x38>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a10      	ldr	r2, [pc, #64]	@ (8001120 <HAL_TIM_MspPostInit+0x5c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d118      	bne.n	8001116 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_TIM_MspPostInit+0x60>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001124 <HAL_TIM_MspPostInit+0x60>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <HAL_TIM_MspPostInit+0x60>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2302      	movs	r3, #2
 8001108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <HAL_TIM_MspPostInit+0x64>)
 8001112:	f000 f9c5 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40012c00 	.word	0x40012c00
 8001124:	40021000 	.word	0x40021000
 8001128:	40010800 	.word	0x40010800

0800112c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800112c:	f7ff ff22 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480b      	ldr	r0, [pc, #44]	@ (8001160 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001132:	490c      	ldr	r1, [pc, #48]	@ (8001164 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001134:	4a0c      	ldr	r2, [pc, #48]	@ (8001168 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a09      	ldr	r2, [pc, #36]	@ (800116c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001148:	4c09      	ldr	r4, [pc, #36]	@ (8001170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f008 fac9 	bl	80096ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800115a:	f7ff fd4b 	bl	8000bf4 <main>
  bx lr
 800115e:	4770      	bx	lr
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001168:	0800b89c 	.word	0x0800b89c
  ldr r2, =_sbss
 800116c:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001170:	200016c4 	.word	0x200016c4

08001174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_2_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_Init+0x28>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_Init+0x28>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f947 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fdbc 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f95f 	bl	8001486 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 f927 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <HAL_IncTick+0x1c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_IncTick+0x20>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a03      	ldr	r2, [pc, #12]	@ (8001224 <HAL_IncTick+0x20>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	20000008 	.word	0x20000008
 8001224:	200003b4 	.word	0x200003b4

08001228 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b02      	ldr	r3, [pc, #8]	@ (8001238 <HAL_GetTick+0x10>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	200003b4 	.word	0x200003b4

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff fff0 	bl	8001228 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffe0 	bl	8001228 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4906      	ldr	r1, [pc, #24]	@ (800131c <__NVIC_EnableIRQ+0x34>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff90 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff2d 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff42 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff90 	bl	8001374 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5f 	bl	8001320 <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff35 	bl	80012e8 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b08b      	sub	sp, #44	@ 0x2c
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b2:	e169      	b.n	8001788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b4:	2201      	movs	r2, #1
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 8158 	bne.w	8001782 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4a9a      	ldr	r2, [pc, #616]	@ (8001740 <HAL_GPIO_Init+0x2a0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d05e      	beq.n	800159a <HAL_GPIO_Init+0xfa>
 80014dc:	4a98      	ldr	r2, [pc, #608]	@ (8001740 <HAL_GPIO_Init+0x2a0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d875      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 80014e2:	4a98      	ldr	r2, [pc, #608]	@ (8001744 <HAL_GPIO_Init+0x2a4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d058      	beq.n	800159a <HAL_GPIO_Init+0xfa>
 80014e8:	4a96      	ldr	r2, [pc, #600]	@ (8001744 <HAL_GPIO_Init+0x2a4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d86f      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 80014ee:	4a96      	ldr	r2, [pc, #600]	@ (8001748 <HAL_GPIO_Init+0x2a8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d052      	beq.n	800159a <HAL_GPIO_Init+0xfa>
 80014f4:	4a94      	ldr	r2, [pc, #592]	@ (8001748 <HAL_GPIO_Init+0x2a8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d869      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 80014fa:	4a94      	ldr	r2, [pc, #592]	@ (800174c <HAL_GPIO_Init+0x2ac>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d04c      	beq.n	800159a <HAL_GPIO_Init+0xfa>
 8001500:	4a92      	ldr	r2, [pc, #584]	@ (800174c <HAL_GPIO_Init+0x2ac>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d863      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 8001506:	4a92      	ldr	r2, [pc, #584]	@ (8001750 <HAL_GPIO_Init+0x2b0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d046      	beq.n	800159a <HAL_GPIO_Init+0xfa>
 800150c:	4a90      	ldr	r2, [pc, #576]	@ (8001750 <HAL_GPIO_Init+0x2b0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d85d      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 8001512:	2b12      	cmp	r3, #18
 8001514:	d82a      	bhi.n	800156c <HAL_GPIO_Init+0xcc>
 8001516:	2b12      	cmp	r3, #18
 8001518:	d859      	bhi.n	80015ce <HAL_GPIO_Init+0x12e>
 800151a:	a201      	add	r2, pc, #4	@ (adr r2, 8001520 <HAL_GPIO_Init+0x80>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	0800159b 	.word	0x0800159b
 8001524:	08001575 	.word	0x08001575
 8001528:	08001587 	.word	0x08001587
 800152c:	080015c9 	.word	0x080015c9
 8001530:	080015cf 	.word	0x080015cf
 8001534:	080015cf 	.word	0x080015cf
 8001538:	080015cf 	.word	0x080015cf
 800153c:	080015cf 	.word	0x080015cf
 8001540:	080015cf 	.word	0x080015cf
 8001544:	080015cf 	.word	0x080015cf
 8001548:	080015cf 	.word	0x080015cf
 800154c:	080015cf 	.word	0x080015cf
 8001550:	080015cf 	.word	0x080015cf
 8001554:	080015cf 	.word	0x080015cf
 8001558:	080015cf 	.word	0x080015cf
 800155c:	080015cf 	.word	0x080015cf
 8001560:	080015cf 	.word	0x080015cf
 8001564:	0800157d 	.word	0x0800157d
 8001568:	08001591 	.word	0x08001591
 800156c:	4a79      	ldr	r2, [pc, #484]	@ (8001754 <HAL_GPIO_Init+0x2b4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001572:	e02c      	b.n	80015ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	623b      	str	r3, [r7, #32]
          break;
 800157a:	e029      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	3304      	adds	r3, #4
 8001582:	623b      	str	r3, [r7, #32]
          break;
 8001584:	e024      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	3308      	adds	r3, #8
 800158c:	623b      	str	r3, [r7, #32]
          break;
 800158e:	e01f      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	330c      	adds	r3, #12
 8001596:	623b      	str	r3, [r7, #32]
          break;
 8001598:	e01a      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015a2:	2304      	movs	r3, #4
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e013      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b0:	2308      	movs	r3, #8
 80015b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	611a      	str	r2, [r3, #16]
          break;
 80015ba:	e009      	b.n	80015d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015bc:	2308      	movs	r3, #8
 80015be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	615a      	str	r2, [r3, #20]
          break;
 80015c6:	e003      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
          break;
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x130>
          break;
 80015ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2bff      	cmp	r3, #255	@ 0xff
 80015d4:	d801      	bhi.n	80015da <HAL_GPIO_Init+0x13a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	e001      	b.n	80015de <HAL_GPIO_Init+0x13e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3304      	adds	r3, #4
 80015de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2bff      	cmp	r3, #255	@ 0xff
 80015e4:	d802      	bhi.n	80015ec <HAL_GPIO_Init+0x14c>
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	e002      	b.n	80015f2 <HAL_GPIO_Init+0x152>
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	3b08      	subs	r3, #8
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	210f      	movs	r1, #15
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	401a      	ands	r2, r3
 8001604:	6a39      	ldr	r1, [r7, #32]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	431a      	orrs	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 80b1 	beq.w	8001782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001620:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <HAL_GPIO_Init+0x2b8>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a4c      	ldr	r2, [pc, #304]	@ (8001758 <HAL_GPIO_Init+0x2b8>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b4a      	ldr	r3, [pc, #296]	@ (8001758 <HAL_GPIO_Init+0x2b8>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001638:	4a48      	ldr	r2, [pc, #288]	@ (800175c <HAL_GPIO_Init+0x2bc>)
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001644:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a40      	ldr	r2, [pc, #256]	@ (8001760 <HAL_GPIO_Init+0x2c0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d013      	beq.n	800168c <HAL_GPIO_Init+0x1ec>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a3f      	ldr	r2, [pc, #252]	@ (8001764 <HAL_GPIO_Init+0x2c4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d00d      	beq.n	8001688 <HAL_GPIO_Init+0x1e8>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a3e      	ldr	r2, [pc, #248]	@ (8001768 <HAL_GPIO_Init+0x2c8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d007      	beq.n	8001684 <HAL_GPIO_Init+0x1e4>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a3d      	ldr	r2, [pc, #244]	@ (800176c <HAL_GPIO_Init+0x2cc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d101      	bne.n	8001680 <HAL_GPIO_Init+0x1e0>
 800167c:	2303      	movs	r3, #3
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 8001680:	2304      	movs	r3, #4
 8001682:	e004      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 8001684:	2302      	movs	r3, #2
 8001686:	e002      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 800168c:	2300      	movs	r3, #0
 800168e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001690:	f002 0203 	and.w	r2, r2, #3
 8001694:	0092      	lsls	r2, r2, #2
 8001696:	4093      	lsls	r3, r2
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800169e:	492f      	ldr	r1, [pc, #188]	@ (800175c <HAL_GPIO_Init+0x2bc>)
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	492c      	ldr	r1, [pc, #176]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4928      	ldr	r1, [pc, #160]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	4922      	ldr	r1, [pc, #136]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	491e      	ldr	r1, [pc, #120]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4918      	ldr	r1, [pc, #96]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001716:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	43db      	mvns	r3, r3
 800171e:	4914      	ldr	r1, [pc, #80]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 8001720:	4013      	ands	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d021      	beq.n	8001774 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	490e      	ldr	r1, [pc, #56]	@ (8001770 <HAL_GPIO_Init+0x2d0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e021      	b.n	8001782 <HAL_GPIO_Init+0x2e2>
 800173e:	bf00      	nop
 8001740:	10320000 	.word	0x10320000
 8001744:	10310000 	.word	0x10310000
 8001748:	10220000 	.word	0x10220000
 800174c:	10210000 	.word	0x10210000
 8001750:	10120000 	.word	0x10120000
 8001754:	10110000 	.word	0x10110000
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000
 8001760:	40010800 	.word	0x40010800
 8001764:	40010c00 	.word	0x40010c00
 8001768:	40011000 	.word	0x40011000
 800176c:	40011400 	.word	0x40011400
 8001770:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <HAL_GPIO_Init+0x304>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	43db      	mvns	r3, r3
 800177c:	4909      	ldr	r1, [pc, #36]	@ (80017a4 <HAL_GPIO_Init+0x304>)
 800177e:	4013      	ands	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	3301      	adds	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	fa22 f303 	lsr.w	r3, r2, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	f47f ae8e 	bne.w	80014b4 <HAL_GPIO_Init+0x14>
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	372c      	adds	r7, #44	@ 0x2c
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	40010400 	.word	0x40010400

080017a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]
 80017b4:	4613      	mov	r3, r2
 80017b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b8:	787b      	ldrb	r3, [r7, #1]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017c4:	e003      	b.n	80017ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	041a      	lsls	r2, r3, #16
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	611a      	str	r2, [r3, #16]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f9d6 	bl	8000ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0e8      	b.n	80019ec <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f006 fefa 	bl	8008628 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2203      	movs	r2, #3
 8001838:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fe72 	bl	8004530 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3304      	adds	r3, #4
 8001854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001856:	f002 fe48 	bl	80044ea <USB_CoreInit>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2202      	movs	r2, #2
 8001864:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0bf      	b.n	80019ec <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fe76 	bl	8004564 <USB_SetCurrentMode>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2202      	movs	r2, #2
 8001882:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0b0      	b.n	80019ec <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]
 800188e:	e03e      	b.n	800190e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	3311      	adds	r3, #17
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3310      	adds	r3, #16
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	3313      	adds	r3, #19
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	3320      	adds	r3, #32
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	3324      	adds	r3, #36	@ 0x24
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	3301      	adds	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	791b      	ldrb	r3, [r3, #4]
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	429a      	cmp	r2, r3
 8001916:	d3bb      	bcc.n	8001890 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e044      	b.n	80019a8 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	3301      	adds	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	791b      	ldrb	r3, [r3, #4]
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d3b5      	bcc.n	800191e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3304      	adds	r3, #4
 80019ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019bc:	f002 fdde 	bl	800457c <USB_DevInit>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00c      	b.n	80019ec <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f005 f85e 	bl	8006aa6 <USB_DevDisconnect>

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_PCD_Start+0x16>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e016      	b.n	8001a38 <HAL_PCD_Start+0x44>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 fd74 	bl	8004504 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f007 f875 	bl	8008b0e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f005 f832 	bl	8006a92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f005 f834 	bl	8006aba <USB_ReadInterrupts>
 8001a52:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fb1a 	bl	8002098 <PCD_EP_ISR_Handler>

    return;
 8001a64:	e119      	b.n	8001c9a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a82:	b292      	uxth	r2, r2
 8001a84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f006 fe48 	bl	800871e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f905 	bl	8001ca0 <HAL_PCD_SetAddress>

    return;
 8001a96:	e100      	b.n	8001c9a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00c      	beq.n	8001abc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ab4:	b292      	uxth	r2, r2
 8001ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001aba:	e0ee      	b.n	8001c9a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00c      	beq.n	8001ae0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ad8:	b292      	uxth	r2, r2
 8001ada:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ade:	e0dc      	b.n	8001c9a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d027      	beq.n	8001b3a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0204 	bic.w	r2, r2, #4
 8001afc:	b292      	uxth	r2, r2
 8001afe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0208 	bic.w	r2, r2, #8
 8001b14:	b292      	uxth	r2, r2
 8001b16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f006 fe38 	bl	8008790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b32:	b292      	uxth	r2, r2
 8001b34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b38:	e0af      	b.n	8001c9a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8083 	beq.w	8001c4c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	77fb      	strb	r3, [r7, #31]
 8001b4a:	e010      	b.n	8001b6e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	7ffb      	ldrb	r3, [r7, #31]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	441a      	add	r2, r3
 8001b58:	7ffb      	ldrb	r3, [r7, #31]
 8001b5a:	8812      	ldrh	r2, [r2, #0]
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	3320      	adds	r3, #32
 8001b62:	443b      	add	r3, r7
 8001b64:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001b68:	7ffb      	ldrb	r3, [r7, #31]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	77fb      	strb	r3, [r7, #31]
 8001b6e:	7ffb      	ldrb	r3, [r7, #31]
 8001b70:	2b07      	cmp	r3, #7
 8001b72:	d9eb      	bls.n	8001b4c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	b292      	uxth	r2, r2
 8001b88:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	b292      	uxth	r2, r2
 8001ba0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ba4:	bf00      	nop
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f6      	beq.n	8001ba6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	77fb      	strb	r3, [r7, #31]
 8001bd4:	e00f      	b.n	8001bf6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001bd6:	7ffb      	ldrb	r3, [r7, #31]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	7ffa      	ldrb	r2, [r7, #31]
 8001be0:	0092      	lsls	r2, r2, #2
 8001be2:	440a      	add	r2, r1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	3320      	adds	r3, #32
 8001be8:	443b      	add	r3, r7
 8001bea:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001bee:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bf0:	7ffb      	ldrb	r3, [r7, #31]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	77fb      	strb	r3, [r7, #31]
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	2b07      	cmp	r3, #7
 8001bfa:	d9ec      	bls.n	8001bd6 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0208 	orr.w	r2, r2, #8
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c26:	b292      	uxth	r2, r2
 8001c28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0204 	orr.w	r2, r2, #4
 8001c3e:	b292      	uxth	r2, r2
 8001c40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f006 fd89 	bl	800875c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001c4a:	e026      	b.n	8001c9a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00f      	beq.n	8001c76 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f006 fd47 	bl	8008702 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001c74:	e011      	b.n	8001c9a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00c      	beq.n	8001c9a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c92:	b292      	uxth	r2, r2
 8001c94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001c98:	bf00      	nop
  }
}
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_PCD_SetAddress+0x1a>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e012      	b.n	8001ce0 <HAL_PCD_SetAddress+0x40>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	78fa      	ldrb	r2, [r7, #3]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 fecb 	bl	8006a6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	70fb      	strb	r3, [r7, #3]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	803b      	strh	r3, [r7, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	da0e      	bge.n	8001d2c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 0207 	and.w	r2, r3, #7
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	3310      	adds	r3, #16
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	705a      	strb	r2, [r3, #1]
 8001d2a:	e00e      	b.n	8001d4a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 0207 	and.w	r2, r3, #7
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d56:	883a      	ldrh	r2, [r7, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	78ba      	ldrb	r2, [r7, #2]
 8001d60:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d62:	78bb      	ldrb	r3, [r7, #2]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d102      	bne.n	8001d6e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_PCD_EP_Open+0x94>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e00e      	b.n	8001d9a <HAL_PCD_EP_Open+0xb2>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 fc14 	bl	80045b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001d98:	7afb      	ldrb	r3, [r7, #11]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da0e      	bge.n	8001dd4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 0207 	and.w	r2, r3, #7
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	3310      	adds	r3, #16
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	705a      	strb	r2, [r3, #1]
 8001dd2:	e00e      	b.n	8001df2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	f003 0207 	and.w	r2, r3, #7
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_PCD_EP_Close+0x6a>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e00e      	b.n	8001e2a <HAL_PCD_EP_Close+0x88>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68f9      	ldr	r1, [r7, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 ff8c 	bl	8004d38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e42:	7afb      	ldrb	r3, [r7, #11]
 8001e44:	f003 0207 	and.w	r2, r3, #7
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e72:	7afb      	ldrb	r3, [r7, #11]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6979      	ldr	r1, [r7, #20]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 f943 	bl	8005110 <USB_EPStartXfer>

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 0207 	and.w	r2, r3, #7
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	f003 0207 	and.w	r2, r3, #7
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	3310      	adds	r3, #16
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2200      	movs	r2, #0
 8001f06:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0e:	7afb      	ldrb	r3, [r7, #11]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6979      	ldr	r1, [r7, #20]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 f8f5 	bl	8005110 <USB_EPStartXfer>

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	7912      	ldrb	r2, [r2, #4]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e04c      	b.n	8001fe8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	da0e      	bge.n	8001f74 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	f003 0207 	and.w	r2, r3, #7
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	3310      	adds	r3, #16
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	705a      	strb	r2, [r3, #1]
 8001f72:	e00c      	b.n	8001f8e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_PCD_EP_SetStall+0x7e>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e01c      	b.n	8001fe8 <HAL_PCD_EP_SetStall+0xb8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68f9      	ldr	r1, [r7, #12]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fc58 	bl	8006872 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d108      	bne.n	8001fde <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4610      	mov	r0, r2
 8001fda:	f004 fd7d 	bl	8006ad8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	7912      	ldrb	r2, [r2, #4]
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e040      	b.n	8002090 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800200e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002012:	2b00      	cmp	r3, #0
 8002014:	da0e      	bge.n	8002034 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	f003 0207 	and.w	r2, r3, #7
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	3310      	adds	r3, #16
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2201      	movs	r2, #1
 8002030:	705a      	strb	r2, [r3, #1]
 8002032:	e00e      	b.n	8002052 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 0207 	and.w	r2, r3, #7
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	b2da      	uxtb	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_PCD_EP_ClrStall+0x82>
 800206e:	2302      	movs	r3, #2
 8002070:	e00e      	b.n	8002090 <HAL_PCD_EP_ClrStall+0xa0>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68f9      	ldr	r1, [r7, #12]
 8002080:	4618      	mov	r0, r3
 8002082:	f004 fc46 	bl	8006912 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b096      	sub	sp, #88	@ 0x58
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020a0:	e3bb      	b.n	800281a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80020bc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f040 8175 	bne.w	80023b0 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d14e      	bne.n	8002170 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80020de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020e2:	81fb      	strh	r3, [r7, #14]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3310      	adds	r3, #16
 80020fa:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	3302      	adds	r3, #2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002126:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	441a      	add	r2, r3
 8002132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002134:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002136:	2100      	movs	r1, #0
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f006 fac8 	bl	80086ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7b5b      	ldrb	r3, [r3, #13]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8368 	beq.w	800281a <PCD_EP_ISR_Handler+0x782>
 800214a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 8363 	bne.w	800281a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7b5b      	ldrb	r3, [r3, #13]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800215e:	b2da      	uxtb	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	735a      	strb	r2, [r3, #13]
 800216e:	e354      	b.n	800281a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002176:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002182:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800218a:	2b00      	cmp	r3, #0
 800218c:	d034      	beq.n	80021f8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	3306      	adds	r3, #6
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80021c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80021c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f004 fcd4 	bl	8006b7a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	b29a      	uxth	r2, r3
 80021da:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80021de:	4013      	ands	r3, r2
 80021e0:	823b      	strh	r3, [r7, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	8a3a      	ldrh	r2, [r7, #16]
 80021e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021ec:	b292      	uxth	r2, r2
 80021ee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f006 fa3f 	bl	8008674 <HAL_PCD_SetupStageCallback>
 80021f6:	e310      	b.n	800281a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021f8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f280 830c 	bge.w	800281a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29a      	uxth	r2, r3
 800220a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800220e:	4013      	ands	r3, r2
 8002210:	83fb      	strh	r3, [r7, #30]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	8bfa      	ldrh	r2, [r7, #30]
 8002218:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800221c:	b292      	uxth	r2, r2
 800221e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4413      	add	r3, r2
 8002234:	3306      	adds	r3, #6
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	4413      	add	r3, r2
 800223e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800224a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800224c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d019      	beq.n	8002288 <PCD_EP_ISR_Handler+0x1f0>
 8002254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d015      	beq.n	8002288 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002262:	6959      	ldr	r1, [r3, #20]
 8002264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002266:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800226c:	b29b      	uxth	r3, r3
 800226e:	f004 fc84 	bl	8006b7a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	441a      	add	r2, r3
 800227c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002280:	2100      	movs	r1, #0
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f006 fa08 	bl	8008698 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002292:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 82bd 	bne.w	800281a <PCD_EP_ISR_Handler+0x782>
 80022a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022a4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80022a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80022ac:	f000 82b5 	beq.w	800281a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4413      	add	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022da:	b29a      	uxth	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	801a      	strh	r2, [r3, #0]
 80022e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80022e6:	d91d      	bls.n	8002324 <PCD_EP_ISR_Handler+0x28c>
 80022e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <PCD_EP_ISR_Handler+0x26a>
 80022fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022fe:	3b01      	subs	r3, #1
 8002300:	647b      	str	r3, [r7, #68]	@ 0x44
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	b29a      	uxth	r2, r3
 8002308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800230a:	b29b      	uxth	r3, r3
 800230c:	029b      	lsls	r3, r3, #10
 800230e:	b29b      	uxth	r3, r3
 8002310:	4313      	orrs	r3, r2
 8002312:	b29b      	uxth	r3, r3
 8002314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800231c:	b29a      	uxth	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	801a      	strh	r2, [r3, #0]
 8002322:	e026      	b.n	8002372 <PCD_EP_ISR_Handler+0x2da>
 8002324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <PCD_EP_ISR_Handler+0x2aa>
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800233a:	b29a      	uxth	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	e017      	b.n	8002372 <PCD_EP_ISR_Handler+0x2da>
 8002342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	647b      	str	r3, [r7, #68]	@ 0x44
 800234a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <PCD_EP_ISR_Handler+0x2c4>
 8002356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002358:	3301      	adds	r3, #1
 800235a:	647b      	str	r3, [r7, #68]	@ 0x44
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29a      	uxth	r2, r3
 8002362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002364:	b29b      	uxth	r3, r3
 8002366:	029b      	lsls	r3, r3, #10
 8002368:	b29b      	uxth	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b29a      	uxth	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800237e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002382:	827b      	strh	r3, [r7, #18]
 8002384:	8a7b      	ldrh	r3, [r7, #18]
 8002386:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800238a:	827b      	strh	r3, [r7, #18]
 800238c:	8a7b      	ldrh	r3, [r7, #18]
 800238e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002392:	827b      	strh	r3, [r7, #18]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	8a7b      	ldrh	r3, [r7, #18]
 800239a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800239e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	8013      	strh	r3, [r2, #0]
 80023ae:	e234      	b.n	800281a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023c4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f280 80fc 	bge.w	80025c6 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80023e4:	4013      	ands	r3, r2
 80023e6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80023fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002400:	b292      	uxth	r2, r2
 8002402:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002404:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800241a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241c:	7b1b      	ldrb	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d125      	bne.n	800246e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800242a:	b29b      	uxth	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	3306      	adds	r3, #6
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800244e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8092 	beq.w	800257c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800245e:	6959      	ldr	r1, [r3, #20]
 8002460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002462:	88da      	ldrh	r2, [r3, #6]
 8002464:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002468:	f004 fb87 	bl	8006b7a <USB_ReadPMA>
 800246c:	e086      	b.n	800257c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800246e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002470:	78db      	ldrb	r3, [r3, #3]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d10a      	bne.n	800248c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002476:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800247a:	461a      	mov	r2, r3
 800247c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9d9 	bl	8002836 <HAL_PCD_EP_DB_Receive>
 8002484:	4603      	mov	r3, r0
 8002486:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800248a:	e077      	b.n	800257c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024a6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	441a      	add	r2, r3
 80024b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80024bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d024      	beq.n	8002534 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	3302      	adds	r3, #2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002512:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002516:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800251a:	2b00      	cmp	r3, #0
 800251c:	d02e      	beq.n	800257c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002524:	6959      	ldr	r1, [r3, #20]
 8002526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002528:	891a      	ldrh	r2, [r3, #8]
 800252a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800252e:	f004 fb24 	bl	8006b7a <USB_ReadPMA>
 8002532:	e023      	b.n	800257c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	3306      	adds	r3, #6
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	4413      	add	r3, r2
 8002552:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002560:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002564:	2b00      	cmp	r3, #0
 8002566:	d009      	beq.n	800257c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256e:	6959      	ldr	r1, [r3, #20]
 8002570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002572:	895a      	ldrh	r2, [r3, #10]
 8002574:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002578:	f004 faff 	bl	8006b7a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800257c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002584:	441a      	add	r2, r3
 8002586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002588:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800258a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002592:	441a      	add	r2, r3
 8002594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002596:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <PCD_EP_ISR_Handler+0x514>
 80025a0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80025a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d206      	bcs.n	80025ba <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f006 f870 	bl	8008698 <HAL_PCD_DataOutStageCallback>
 80025b8:	e005      	b.n	80025c6 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 fda5 	bl	8005110 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8123 	beq.w	800281a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80025d4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	3310      	adds	r3, #16
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80025fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002602:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	441a      	add	r2, r3
 8002614:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800261c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002620:	b29b      	uxth	r3, r3
 8002622:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002626:	78db      	ldrb	r3, [r3, #3]
 8002628:	2b01      	cmp	r3, #1
 800262a:	f040 80a2 	bne.w	8002772 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800262e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002636:	7b1b      	ldrb	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8093 	beq.w	8002764 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800263e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d046      	beq.n	80026d8 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800264a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264c:	785b      	ldrb	r3, [r3, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d126      	bne.n	80026a0 <PCD_EP_ISR_Handler+0x608>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	4413      	add	r3, r2
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
 800266a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	011a      	lsls	r2, r3, #4
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	4413      	add	r3, r2
 8002674:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002678:	623b      	str	r3, [r7, #32]
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002684:	b29a      	uxth	r2, r3
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	801a      	strh	r2, [r3, #0]
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002698:	b29a      	uxth	r2, r3
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	801a      	strh	r2, [r3, #0]
 800269e:	e061      	b.n	8002764 <PCD_EP_ISR_Handler+0x6cc>
 80026a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a2:	785b      	ldrb	r3, [r3, #1]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d15d      	bne.n	8002764 <PCD_EP_ISR_Handler+0x6cc>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026bc:	4413      	add	r3, r2
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	011a      	lsls	r2, r3, #4
 80026c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c8:	4413      	add	r3, r2
 80026ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d2:	2200      	movs	r2, #0
 80026d4:	801a      	strh	r2, [r3, #0]
 80026d6:	e045      	b.n	8002764 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e0:	785b      	ldrb	r3, [r3, #1]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d126      	bne.n	8002734 <PCD_EP_ISR_Handler+0x69c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fa:	4413      	add	r3, r2
 80026fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80026fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	011a      	lsls	r2, r3, #4
 8002704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002706:	4413      	add	r3, r2
 8002708:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800270c:	633b      	str	r3, [r7, #48]	@ 0x30
 800270e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002718:	b29a      	uxth	r2, r3
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800272c:	b29a      	uxth	r2, r3
 800272e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	e017      	b.n	8002764 <PCD_EP_ISR_Handler+0x6cc>
 8002734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002736:	785b      	ldrb	r3, [r3, #1]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d113      	bne.n	8002764 <PCD_EP_ISR_Handler+0x6cc>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002744:	b29b      	uxth	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800274a:	4413      	add	r3, r2
 800274c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800274e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	011a      	lsls	r2, r3, #4
 8002754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002756:	4413      	add	r3, r2
 8002758:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800275c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800275e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002760:	2200      	movs	r2, #0
 8002762:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f005 ffaf 	bl	80086ce <HAL_PCD_DataInStageCallback>
 8002770:	e053      	b.n	800281a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002772:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d146      	bne.n	800280c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	3302      	adds	r3, #2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80027aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d907      	bls.n	80027c6 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80027b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80027be:	1ad2      	subs	r2, r2, r3
 80027c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c2:	619a      	str	r2, [r3, #24]
 80027c4:	e002      	b.n	80027cc <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80027c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80027cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f005 ff77 	bl	80086ce <HAL_PCD_DataInStageCallback>
 80027e0:	e01b      	b.n	800281a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80027e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80027ea:	441a      	add	r2, r3
 80027ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ee:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80027f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80027f8:	441a      	add	r2, r3
 80027fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027fc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002804:	4618      	mov	r0, r3
 8002806:	f002 fc83 	bl	8005110 <USB_EPStartXfer>
 800280a:	e006      	b.n	800281a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800280c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002810:	461a      	mov	r2, r3
 8002812:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f91b 	bl	8002a50 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002822:	b29b      	uxth	r3, r3
 8002824:	b21b      	sxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	f6ff ac3b 	blt.w	80020a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3758      	adds	r7, #88	@ 0x58
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b088      	sub	sp, #32
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	4613      	mov	r3, r2
 8002842:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d07e      	beq.n	800294c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	3302      	adds	r3, #2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002876:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	8b7b      	ldrh	r3, [r7, #26]
 800287e:	429a      	cmp	r2, r3
 8002880:	d306      	bcc.n	8002890 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	8b7b      	ldrh	r3, [r7, #26]
 8002888:	1ad2      	subs	r2, r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	619a      	str	r2, [r3, #24]
 800288e:	e002      	b.n	8002896 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d123      	bne.n	80028e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028b8:	833b      	strh	r3, [r7, #24]
 80028ba:	8b3b      	ldrh	r3, [r7, #24]
 80028bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028c0:	833b      	strh	r3, [r7, #24]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	441a      	add	r2, r3
 80028d0:	8b3b      	ldrh	r3, [r7, #24]
 80028d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01f      	beq.n	8002930 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290a:	82fb      	strh	r3, [r7, #22]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	8afb      	ldrh	r3, [r7, #22]
 800291c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002920:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002928:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800292c:	b29b      	uxth	r3, r3
 800292e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002930:	8b7b      	ldrh	r3, [r7, #26]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8087 	beq.w	8002a46 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	6959      	ldr	r1, [r3, #20]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	891a      	ldrh	r2, [r3, #8]
 8002944:	8b7b      	ldrh	r3, [r7, #26]
 8002946:	f004 f918 	bl	8006b7a <USB_ReadPMA>
 800294a:	e07c      	b.n	8002a46 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002954:	b29b      	uxth	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	3306      	adds	r3, #6
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002974:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	8b7b      	ldrh	r3, [r7, #26]
 800297c:	429a      	cmp	r2, r3
 800297e:	d306      	bcc.n	800298e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	8b7b      	ldrh	r3, [r7, #26]
 8002986:	1ad2      	subs	r2, r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	619a      	str	r2, [r3, #24]
 800298c:	e002      	b.n	8002994 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d123      	bne.n	80029e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b6:	83fb      	strh	r3, [r7, #30]
 80029b8:	8bfb      	ldrh	r3, [r7, #30]
 80029ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80029be:	83fb      	strh	r3, [r7, #30]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	8bfb      	ldrh	r3, [r7, #30]
 80029d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d11f      	bne.n	8002a2e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a08:	83bb      	strh	r3, [r7, #28]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	8bbb      	ldrh	r3, [r7, #28]
 8002a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a2e:	8b7b      	ldrh	r3, [r7, #26]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	6959      	ldr	r1, [r3, #20]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	895a      	ldrh	r2, [r3, #10]
 8002a40:	8b7b      	ldrh	r3, [r7, #26]
 8002a42:	f004 f89a 	bl	8006b7a <USB_ReadPMA>
    }
  }

  return count;
 8002a46:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b0a4      	sub	sp, #144	@ 0x90
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 81dd 	beq.w	8002e24 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a92:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d907      	bls.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	619a      	str	r2, [r3, #24]
 8002ab0:	e002      	b.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 80b9 	bne.w	8002c34 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	785b      	ldrb	r3, [r3, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d126      	bne.n	8002b18 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ade:	4413      	add	r3, r2
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	011a      	lsls	r2, r3, #4
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	4413      	add	r3, r2
 8002aec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b00:	801a      	strh	r2, [r3, #0]
 8002b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	e01a      	b.n	8002b4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	785b      	ldrb	r3, [r3, #1]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d116      	bne.n	8002b4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b34:	4413      	add	r3, r2
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	011a      	lsls	r2, r3, #4
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b40:	4413      	add	r3, r2
 8002b42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b46:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d126      	bne.n	8002baa <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	011a      	lsls	r2, r3, #4
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	801a      	strh	r2, [r3, #0]
 8002ba8:	e017      	b.n	8002bda <HAL_PCD_EP_DB_Transmit+0x18a>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d113      	bne.n	8002bda <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	4413      	add	r3, r2
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	011a      	lsls	r2, r3, #4
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	4413      	add	r3, r2
 8002bce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	4619      	mov	r1, r3
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f005 fd74 	bl	80086ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 82fc 	beq.w	80031ea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c0c:	82fb      	strh	r3, [r7, #22]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	441a      	add	r2, r3
 8002c1c:	8afb      	ldrh	r3, [r7, #22]
 8002c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	8013      	strh	r3, [r2, #0]
 8002c32:	e2da      	b.n	80031ea <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d021      	beq.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	441a      	add	r2, r3
 8002c6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	f040 82ae 	bne.w	80031ea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c96:	441a      	add	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ca4:	441a      	add	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d30b      	bcc.n	8002cce <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	6a1a      	ldr	r2, [r3, #32]
 8002cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cc6:	1ad2      	subs	r2, r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	621a      	str	r2, [r3, #32]
 8002ccc:	e017      	b.n	8002cfe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d108      	bne.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002cd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ce6:	e00a      	b.n	8002cfe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d165      	bne.n	8002dd2 <HAL_PCD_EP_DB_Transmit+0x382>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1a:	4413      	add	r3, r2
 8002d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	011a      	lsls	r2, r3, #4
 8002d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d26:	4413      	add	r3, r2
 8002d28:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d42:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d44:	d91d      	bls.n	8002d82 <HAL_PCD_EP_DB_Transmit+0x332>
 8002d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x310>
 8002d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	029b      	lsls	r3, r3, #10
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	e044      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <HAL_PCD_EP_DB_Transmit+0x350>
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	e035      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_PCD_EP_DB_Transmit+0x36a>
 8002db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002db6:	3301      	adds	r3, #1
 8002db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	029b      	lsls	r3, r3, #10
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	801a      	strh	r2, [r3, #0]
 8002dd0:	e01c      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	785b      	ldrb	r3, [r3, #1]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d118      	bne.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	647b      	str	r3, [r7, #68]	@ 0x44
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dee:	4413      	add	r3, r2
 8002df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	011a      	lsls	r2, r3, #4
 8002df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e0a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6959      	ldr	r1, [r3, #20]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	891a      	ldrh	r2, [r3, #8]
 8002e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f003 fe66 	bl	8006aee <USB_WritePMA>
 8002e22:	e1e2      	b.n	80031ea <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	3306      	adds	r3, #6
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d307      	bcc.n	8002e6c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e64:	1ad2      	subs	r2, r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	619a      	str	r2, [r3, #24]
 8002e6a:	e002      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f040 80c0 	bne.w	8002ffc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	785b      	ldrb	r3, [r3, #1]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d126      	bne.n	8002ed2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e98:	4413      	add	r3, r2
 8002e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	011a      	lsls	r2, r3, #4
 8002ea2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002eaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002eac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002eba:	801a      	strh	r2, [r3, #0]
 8002ebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ece:	801a      	strh	r2, [r3, #0]
 8002ed0:	e01a      	b.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d116      	bne.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002eee:	4413      	add	r3, r2
 8002ef0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	011a      	lsls	r2, r3, #4
 8002ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002efa:	4413      	add	r3, r2
 8002efc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f00:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f04:	2200      	movs	r2, #0
 8002f06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d12b      	bne.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x51e>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f2a:	4413      	add	r3, r2
 8002f2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	011a      	lsls	r2, r3, #4
 8002f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f36:	4413      	add	r3, r2
 8002f38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f52:	801a      	strh	r2, [r3, #0]
 8002f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	e017      	b.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x54e>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d113      	bne.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x54e>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f84:	4413      	add	r3, r2
 8002f86:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	011a      	lsls	r2, r3, #4
 8002f8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f90:	4413      	add	r3, r2
 8002f92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f96:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f005 fb92 	bl	80086ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 811a 	bne.w	80031ea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fd0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	8013      	strh	r3, [r2, #0]
 8002ffa:	e0f6      	b.n	80031ea <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d121      	bne.n	800304a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800301c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003020:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	441a      	add	r2, r3
 8003032:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003036:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800303a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800303e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003046:	b29b      	uxth	r3, r3
 8003048:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003050:	2b01      	cmp	r3, #1
 8003052:	f040 80ca 	bne.w	80031ea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800305e:	441a      	add	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800306c:	441a      	add	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6a1a      	ldr	r2, [r3, #32]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	429a      	cmp	r2, r3
 800307c:	d30b      	bcc.n	8003096 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800308e:	1ad2      	subs	r2, r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	621a      	str	r2, [r3, #32]
 8003094:	e017      	b.n	80030c6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800309e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80030ae:	e00a      	b.n	80030c6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2200      	movs	r2, #0
 80030bc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d165      	bne.n	80031a0 <HAL_PCD_EP_DB_Transmit+0x750>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030e8:	4413      	add	r3, r2
 80030ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	011a      	lsls	r2, r3, #4
 80030f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f4:	4413      	add	r3, r2
 80030f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003106:	b29a      	uxth	r2, r3
 8003108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003110:	2b3e      	cmp	r3, #62	@ 0x3e
 8003112:	d91d      	bls.n	8003150 <HAL_PCD_EP_DB_Transmit+0x700>
 8003114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800311c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003128:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800312a:	3b01      	subs	r3, #1
 800312c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800312e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29a      	uxth	r2, r3
 8003134:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003136:	b29b      	uxth	r3, r3
 8003138:	029b      	lsls	r3, r3, #10
 800313a:	b29b      	uxth	r3, r3
 800313c:	4313      	orrs	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003148:	b29a      	uxth	r2, r3
 800314a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800314c:	801a      	strh	r2, [r3, #0]
 800314e:	e041      	b.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003150:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10a      	bne.n	800316e <HAL_PCD_EP_DB_Transmit+0x71e>
 8003158:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003166:	b29a      	uxth	r2, r3
 8003168:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800316a:	801a      	strh	r2, [r3, #0]
 800316c:	e032      	b.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
 800316e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_PCD_EP_DB_Transmit+0x738>
 8003182:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003184:	3301      	adds	r3, #1
 8003186:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003188:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29a      	uxth	r2, r3
 800318e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003190:	b29b      	uxth	r3, r3
 8003192:	029b      	lsls	r3, r3, #10
 8003194:	b29b      	uxth	r3, r3
 8003196:	4313      	orrs	r3, r2
 8003198:	b29a      	uxth	r2, r3
 800319a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800319c:	801a      	strh	r2, [r3, #0]
 800319e:	e019      	b.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d115      	bne.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b6:	4413      	add	r3, r2
 80031b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	011a      	lsls	r2, r3, #4
 80031c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c2:	4413      	add	r3, r2
 80031c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80031ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	6959      	ldr	r1, [r3, #20]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	895a      	ldrh	r2, [r3, #10]
 80031e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f003 fc82 	bl	8006aee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003204:	82bb      	strh	r3, [r7, #20]
 8003206:	8abb      	ldrh	r3, [r7, #20]
 8003208:	f083 0310 	eor.w	r3, r3, #16
 800320c:	82bb      	strh	r3, [r7, #20]
 800320e:	8abb      	ldrh	r3, [r7, #20]
 8003210:	f083 0320 	eor.w	r3, r3, #32
 8003214:	82bb      	strh	r3, [r7, #20]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	441a      	add	r2, r3
 8003224:	8abb      	ldrh	r3, [r7, #20]
 8003226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800322a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800322e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003236:	b29b      	uxth	r3, r3
 8003238:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3790      	adds	r7, #144	@ 0x90
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	4613      	mov	r3, r2
 8003254:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	f003 0207 	and.w	r2, r3, #7
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	3310      	adds	r3, #16
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	e009      	b.n	800328e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800327a:	897a      	ldrh	r2, [r7, #10]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800328e:	893b      	ldrh	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d107      	bne.n	80032a4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2200      	movs	r2, #0
 8003298:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	b29a      	uxth	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	80da      	strh	r2, [r3, #6]
 80032a2:	e00b      	b.n	80032bc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2201      	movs	r2, #1
 80032a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e272      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8087 	beq.w	80033f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e8:	4b92      	ldr	r3, [pc, #584]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d00c      	beq.n	800330e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d112      	bne.n	8003326 <HAL_RCC_OscConfig+0x5e>
 8003300:	4b8c      	ldr	r3, [pc, #560]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800330c:	d10b      	bne.n	8003326 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330e:	4b89      	ldr	r3, [pc, #548]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d06c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x12c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d168      	bne.n	80033f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e24c      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x76>
 8003330:	4b80      	ldr	r3, [pc, #512]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a7f      	ldr	r2, [pc, #508]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e02e      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x98>
 8003346:	4b7b      	ldr	r3, [pc, #492]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7a      	ldr	r2, [pc, #488]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 800334c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b78      	ldr	r3, [pc, #480]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a77      	ldr	r2, [pc, #476]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003358:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01d      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0xbc>
 800336a:	4b72      	ldr	r3, [pc, #456]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a71      	ldr	r2, [pc, #452]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b6f      	ldr	r3, [pc, #444]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6e      	ldr	r2, [pc, #440]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 8003384:	4b6b      	ldr	r3, [pc, #428]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a6a      	ldr	r2, [pc, #424]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b68      	ldr	r3, [pc, #416]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a67      	ldr	r2, [pc, #412]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800339a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fd ff40 	bl	8001228 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fd ff3c 	bl	8001228 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	@ 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e200      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	4b5d      	ldr	r3, [pc, #372]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0xe4>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fd ff2c 	bl	8001228 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fd ff28 	bl	8001228 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	@ 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1ec      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	4b53      	ldr	r3, [pc, #332]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x10c>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003402:	4b4c      	ldr	r3, [pc, #304]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800340e:	4b49      	ldr	r3, [pc, #292]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b08      	cmp	r3, #8
 8003418:	d11c      	bne.n	8003454 <HAL_RCC_OscConfig+0x18c>
 800341a:	4b46      	ldr	r3, [pc, #280]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d116      	bne.n	8003454 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	4b43      	ldr	r3, [pc, #268]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x176>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e1c0      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b3d      	ldr	r3, [pc, #244]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4939      	ldr	r1, [pc, #228]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	e03a      	b.n	80034ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345c:	4b36      	ldr	r3, [pc, #216]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fd fee1 	bl	8001228 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346a:	f7fd fedd 	bl	8001228 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1a1      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	4b2d      	ldr	r3, [pc, #180]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b2a      	ldr	r3, [pc, #168]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4927      	ldr	r1, [pc, #156]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b26      	ldr	r3, [pc, #152]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fd fec0 	bl	8001228 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fd febc 	bl	8001228 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e180      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	4b1d      	ldr	r3, [pc, #116]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d03a      	beq.n	800354c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d019      	beq.n	8003512 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034de:	4b17      	ldr	r3, [pc, #92]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fd fea0 	bl	8001228 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fd fe9c 	bl	8001228 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e160      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800350a:	2001      	movs	r0, #1
 800350c:	f000 fa9c 	bl	8003a48 <RCC_Delay>
 8003510:	e01c      	b.n	800354c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003512:	4b0a      	ldr	r3, [pc, #40]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7fd fe86 	bl	8001228 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351e:	e00f      	b.n	8003540 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003520:	f7fd fe82 	bl	8001228 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d908      	bls.n	8003540 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e146      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	42420000 	.word	0x42420000
 800353c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	4b92      	ldr	r3, [pc, #584]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e9      	bne.n	8003520 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a6 	beq.w	80036a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b8b      	ldr	r3, [pc, #556]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	4b88      	ldr	r3, [pc, #544]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4a87      	ldr	r2, [pc, #540]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003574:	61d3      	str	r3, [r2, #28]
 8003576:	4b85      	ldr	r3, [pc, #532]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003586:	4b82      	ldr	r3, [pc, #520]	@ (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d118      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003592:	4b7f      	ldr	r3, [pc, #508]	@ (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7e      	ldr	r2, [pc, #504]	@ (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800359c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359e:	f7fd fe43 	bl	8001228 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a6:	f7fd fe3f 	bl	8001228 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b64      	cmp	r3, #100	@ 0x64
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e103      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	4b75      	ldr	r3, [pc, #468]	@ (8003790 <HAL_RCC_OscConfig+0x4c8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <HAL_RCC_OscConfig+0x312>
 80035cc:	4b6f      	ldr	r3, [pc, #444]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a6e      	ldr	r2, [pc, #440]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	e02d      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0x334>
 80035e2:	4b6a      	ldr	r3, [pc, #424]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4a69      	ldr	r2, [pc, #420]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6213      	str	r3, [r2, #32]
 80035ee:	4b67      	ldr	r3, [pc, #412]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4a66      	ldr	r2, [pc, #408]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6213      	str	r3, [r2, #32]
 80035fa:	e01c      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b05      	cmp	r3, #5
 8003602:	d10c      	bne.n	800361e <HAL_RCC_OscConfig+0x356>
 8003604:	4b61      	ldr	r3, [pc, #388]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4a60      	ldr	r2, [pc, #384]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	6213      	str	r3, [r2, #32]
 8003610:	4b5e      	ldr	r3, [pc, #376]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4a5d      	ldr	r2, [pc, #372]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6213      	str	r3, [r2, #32]
 800361c:	e00b      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 800361e:	4b5b      	ldr	r3, [pc, #364]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4a5a      	ldr	r2, [pc, #360]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6213      	str	r3, [r2, #32]
 800362a:	4b58      	ldr	r3, [pc, #352]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4a57      	ldr	r2, [pc, #348]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d015      	beq.n	800366a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7fd fdf3 	bl	8001228 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fd fdef 	bl	8001228 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0b1      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	4b4b      	ldr	r3, [pc, #300]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ee      	beq.n	8003646 <HAL_RCC_OscConfig+0x37e>
 8003668:	e014      	b.n	8003694 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366a:	f7fd fddd 	bl	8001228 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fd fdd9 	bl	8001228 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e09b      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003688:	4b40      	ldr	r3, [pc, #256]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ee      	bne.n	8003672 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b3c      	ldr	r3, [pc, #240]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4a3b      	ldr	r2, [pc, #236]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8087 	beq.w	80037be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b0:	4b36      	ldr	r3, [pc, #216]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d061      	beq.n	8003780 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d146      	bne.n	8003752 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c4:	4b33      	ldr	r3, [pc, #204]	@ (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fd fdad 	bl	8001228 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fd fda9 	bl	8001228 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e06d      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e4:	4b29      	ldr	r3, [pc, #164]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f8:	d108      	bne.n	800370c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036fa:	4b24      	ldr	r3, [pc, #144]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4921      	ldr	r1, [pc, #132]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370c:	4b1f      	ldr	r3, [pc, #124]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a19      	ldr	r1, [r3, #32]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	430b      	orrs	r3, r1
 800371e:	491b      	ldr	r1, [pc, #108]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003724:	4b1b      	ldr	r3, [pc, #108]	@ (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fd fd7d 	bl	8001228 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003732:	f7fd fd79 	bl	8001228 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e03d      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003744:	4b11      	ldr	r3, [pc, #68]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x46a>
 8003750:	e035      	b.n	80037be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fd fd66 	bl	8001228 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003760:	f7fd fd62 	bl	8001228 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e026      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x498>
 800377e:	e01e      	b.n	80037be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e019      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
 800378c:	40021000 	.word	0x40021000
 8003790:	40007000 	.word	0x40007000
 8003794:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <HAL_RCC_OscConfig+0x500>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000

080037cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0d0      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e0:	4b6a      	ldr	r3, [pc, #424]	@ (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d910      	bls.n	8003810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b67      	ldr	r3, [pc, #412]	@ (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 0207 	bic.w	r2, r3, #7
 80037f6:	4965      	ldr	r1, [pc, #404]	@ (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	@ (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a58      	ldr	r2, [pc, #352]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003832:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a52      	ldr	r2, [pc, #328]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800384a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d040      	beq.n	80038ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d115      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	4b41      	ldr	r3, [pc, #260]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e073      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	4b3d      	ldr	r3, [pc, #244]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06b      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038aa:	4b39      	ldr	r3, [pc, #228]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f023 0203 	bic.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4936      	ldr	r1, [pc, #216]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038bc:	f7fd fcb4 	bl	8001228 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	e00a      	b.n	80038da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c4:	f7fd fcb0 	bl	8001228 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e053      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	4b2d      	ldr	r3, [pc, #180]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 020c 	and.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d1eb      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ec:	4b27      	ldr	r3, [pc, #156]	@ (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d210      	bcs.n	800391c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b24      	ldr	r3, [pc, #144]	@ (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 0207 	bic.w	r2, r3, #7
 8003902:	4922      	ldr	r1, [pc, #136]	@ (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	@ (800398c <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003946:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f821 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	@ (8003994 <HAL_RCC_ClockConfig+0x1c8>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	@ (8003998 <HAL_RCC_ClockConfig+0x1cc>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	@ (800399c <HAL_RCC_ClockConfig+0x1d0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fc12 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40022000 	.word	0x40022000
 8003990:	40021000 	.word	0x40021000
 8003994:	0800b4f4 	.word	0x0800b4f4
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004

080039a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d002      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x30>
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d003      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x36>
 80039ce:	e027      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d0:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 80039d2:	613b      	str	r3, [r7, #16]
      break;
 80039d4:	e027      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0c9b      	lsrs	r3, r3, #18
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4a17      	ldr	r2, [pc, #92]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x9c>)
 80039e0:	5cd3      	ldrb	r3, [r2, r3]
 80039e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ee:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	0c5b      	lsrs	r3, r3, #17
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	4a11      	ldr	r2, [pc, #68]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a02:	fb03 f202 	mul.w	r2, r3, r2
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e004      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a0c      	ldr	r2, [pc, #48]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	613b      	str	r3, [r7, #16]
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a22:	613b      	str	r3, [r7, #16]
      break;
 8003a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a26:	693b      	ldr	r3, [r7, #16]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	007a1200 	.word	0x007a1200
 8003a3c:	0800b504 	.word	0x0800b504
 8003a40:	0800b514 	.word	0x0800b514
 8003a44:	003d0900 	.word	0x003d0900

08003a48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a50:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <RCC_Delay+0x34>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	@ (8003a80 <RCC_Delay+0x38>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	0a5b      	lsrs	r3, r3, #9
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a64:	bf00      	nop
  }
  while (Delay --);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1e5a      	subs	r2, r3, #1
 8003a6a:	60fa      	str	r2, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f9      	bne.n	8003a64 <RCC_Delay+0x1c>
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	10624dd3 	.word	0x10624dd3

08003a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d07d      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10d      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	4a4b      	ldr	r2, [pc, #300]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	61d3      	str	r3, [r2, #28]
 8003abc:	4b49      	ldr	r3, [pc, #292]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003acc:	4b46      	ldr	r3, [pc, #280]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d118      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad8:	4b43      	ldr	r3, [pc, #268]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a42      	ldr	r2, [pc, #264]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae4:	f7fd fba0 	bl	8001228 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aea:	e008      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aec:	f7fd fb9c 	bl	8001228 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	@ 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e06d      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b3a      	ldr	r3, [pc, #232]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b0a:	4b36      	ldr	r3, [pc, #216]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d02e      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d027      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b28:	4b2e      	ldr	r3, [pc, #184]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b32:	4b2e      	ldr	r3, [pc, #184]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b38:	4b2c      	ldr	r3, [pc, #176]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b3e:	4a29      	ldr	r2, [pc, #164]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d014      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fd fb6b 	bl	8001228 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fd fb67 	bl	8001228 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e036      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ee      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b78:	4b1a      	ldr	r3, [pc, #104]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4917      	ldr	r1, [pc, #92]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b90:	4b14      	ldr	r3, [pc, #80]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	4a13      	ldr	r2, [pc, #76]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	490b      	ldr	r1, [pc, #44]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bc6:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4904      	ldr	r1, [pc, #16]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40007000 	.word	0x40007000
 8003bec:	42420440 	.word	0x42420440

08003bf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e041      	b.n	8003c86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd fa36 	bl	8001088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f000 f992 	bl	8003f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <HAL_TIM_PWM_Start+0x24>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e022      	b.n	8003cfa <HAL_TIM_PWM_Start+0x6a>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d109      	bne.n	8003cce <HAL_TIM_PWM_Start+0x3e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e015      	b.n	8003cfa <HAL_TIM_PWM_Start+0x6a>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d109      	bne.n	8003ce8 <HAL_TIM_PWM_Start+0x58>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e008      	b.n	8003cfa <HAL_TIM_PWM_Start+0x6a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e05e      	b.n	8003dc0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_PWM_Start+0x82>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d10:	e013      	b.n	8003d3a <HAL_TIM_PWM_Start+0xaa>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_PWM_Start+0x92>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d20:	e00b      	b.n	8003d3a <HAL_TIM_PWM_Start+0xaa>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start+0xa2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d30:	e003      	b.n	8003d3a <HAL_TIM_PWM_Start+0xaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	6839      	ldr	r1, [r7, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fafe 	bl	8004344 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc8 <HAL_TIM_PWM_Start+0x138>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d107      	bne.n	8003d62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a18      	ldr	r2, [pc, #96]	@ (8003dc8 <HAL_TIM_PWM_Start+0x138>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_TIM_PWM_Start+0xfa>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d74:	d009      	beq.n	8003d8a <HAL_TIM_PWM_Start+0xfa>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a14      	ldr	r2, [pc, #80]	@ (8003dcc <HAL_TIM_PWM_Start+0x13c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_TIM_PWM_Start+0xfa>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a12      	ldr	r2, [pc, #72]	@ (8003dd0 <HAL_TIM_PWM_Start+0x140>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d111      	bne.n	8003dae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d010      	beq.n	8003dbe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dac:	e007      	b.n	8003dbe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40000800 	.word	0x40000800

08003dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e0ae      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	f200 809f 	bhi.w	8003f40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e02:	a201      	add	r2, pc, #4	@ (adr r2, 8003e08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e3d 	.word	0x08003e3d
 8003e0c:	08003f41 	.word	0x08003f41
 8003e10:	08003f41 	.word	0x08003f41
 8003e14:	08003f41 	.word	0x08003f41
 8003e18:	08003e7d 	.word	0x08003e7d
 8003e1c:	08003f41 	.word	0x08003f41
 8003e20:	08003f41 	.word	0x08003f41
 8003e24:	08003f41 	.word	0x08003f41
 8003e28:	08003ebf 	.word	0x08003ebf
 8003e2c:	08003f41 	.word	0x08003f41
 8003e30:	08003f41 	.word	0x08003f41
 8003e34:	08003f41 	.word	0x08003f41
 8003e38:	08003eff 	.word	0x08003eff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f8f6 	bl	8004034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0208 	orr.w	r2, r2, #8
 8003e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0204 	bic.w	r2, r2, #4
 8003e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6999      	ldr	r1, [r3, #24]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	619a      	str	r2, [r3, #24]
      break;
 8003e7a:	e064      	b.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f93c 	bl	8004100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6999      	ldr	r1, [r3, #24]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	021a      	lsls	r2, r3, #8
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	619a      	str	r2, [r3, #24]
      break;
 8003ebc:	e043      	b.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f985 	bl	80041d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0208 	orr.w	r2, r2, #8
 8003ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0204 	bic.w	r2, r2, #4
 8003ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69d9      	ldr	r1, [r3, #28]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	61da      	str	r2, [r3, #28]
      break;
 8003efc:	e023      	b.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f9cf 	bl	80042a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69da      	ldr	r2, [r3, #28]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69d9      	ldr	r1, [r3, #28]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	021a      	lsls	r2, r3, #8
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	61da      	str	r2, [r3, #28]
      break;
 8003f3e:	e002      	b.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
      break;
 8003f44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004028 <TIM_Base_SetConfig+0xd0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00b      	beq.n	8003f88 <TIM_Base_SetConfig+0x30>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d007      	beq.n	8003f88 <TIM_Base_SetConfig+0x30>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800402c <TIM_Base_SetConfig+0xd4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_Base_SetConfig+0x30>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a2b      	ldr	r2, [pc, #172]	@ (8004030 <TIM_Base_SetConfig+0xd8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d108      	bne.n	8003f9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a22      	ldr	r2, [pc, #136]	@ (8004028 <TIM_Base_SetConfig+0xd0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00b      	beq.n	8003fba <TIM_Base_SetConfig+0x62>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa8:	d007      	beq.n	8003fba <TIM_Base_SetConfig+0x62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1f      	ldr	r2, [pc, #124]	@ (800402c <TIM_Base_SetConfig+0xd4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d003      	beq.n	8003fba <TIM_Base_SetConfig+0x62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004030 <TIM_Base_SetConfig+0xd8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d108      	bne.n	8003fcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8004028 <TIM_Base_SetConfig+0xd0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d103      	bne.n	8004000 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	611a      	str	r2, [r3, #16]
  }
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	40012c00 	.word	0x40012c00
 800402c:	40000400 	.word	0x40000400
 8004030:	40000800 	.word	0x40000800

08004034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	f023 0201 	bic.w	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f023 0302 	bic.w	r3, r3, #2
 800407c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a1c      	ldr	r2, [pc, #112]	@ (80040fc <TIM_OC1_SetConfig+0xc8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10c      	bne.n	80040aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0308 	bic.w	r3, r3, #8
 8004096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a13      	ldr	r2, [pc, #76]	@ (80040fc <TIM_OC1_SetConfig+0xc8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d111      	bne.n	80040d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	621a      	str	r2, [r3, #32]
}
 80040f0:	bf00      	nop
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40012c00 	.word	0x40012c00

08004100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f023 0210 	bic.w	r2, r3, #16
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0320 	bic.w	r3, r3, #32
 800414a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a1d      	ldr	r2, [pc, #116]	@ (80041d0 <TIM_OC2_SetConfig+0xd0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10d      	bne.n	800417c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800417a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a14      	ldr	r2, [pc, #80]	@ (80041d0 <TIM_OC2_SetConfig+0xd0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d113      	bne.n	80041ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800418a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr
 80041d0:	40012c00 	.word	0x40012c00

080041d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800421c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1d      	ldr	r2, [pc, #116]	@ (80042a4 <TIM_OC3_SetConfig+0xd0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10d      	bne.n	800424e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004238:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800424c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a14      	ldr	r2, [pc, #80]	@ (80042a4 <TIM_OC3_SetConfig+0xd0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d113      	bne.n	800427e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800425c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	621a      	str	r2, [r3, #32]
}
 8004298:	bf00      	nop
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40012c00 	.word	0x40012c00

080042a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	031b      	lsls	r3, r3, #12
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0f      	ldr	r2, [pc, #60]	@ (8004340 <TIM_OC4_SetConfig+0x98>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d109      	bne.n	800431c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800430e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	019b      	lsls	r3, r3, #6
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	40012c00 	.word	0x40012c00

08004344 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2201      	movs	r2, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1a      	ldr	r2, [r3, #32]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	43db      	mvns	r3, r3
 8004366:	401a      	ands	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1a      	ldr	r2, [r3, #32]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e046      	b.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a16      	ldr	r2, [pc, #88]	@ (800443c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f0:	d009      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a12      	ldr	r2, [pc, #72]	@ (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a10      	ldr	r2, [pc, #64]	@ (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10c      	bne.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800

08004448 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004460:	2302      	movs	r3, #2
 8004462:	e03d      	b.n	80044e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr

080044ea <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	4638      	mov	r0, r7
 80044f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004514:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004518:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004538:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800453c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	b29b      	uxth	r3, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	b29b      	uxth	r3, r3
 800454e:	4013      	ands	r3, r2
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	4638      	mov	r0, r7
 8004586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
	...

080045b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b09d      	sub	sp, #116	@ 0x74
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80045da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045de:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	78db      	ldrb	r3, [r3, #3]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d81f      	bhi.n	800462a <USB_ActivateEndpoint+0x72>
 80045ea:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <USB_ActivateEndpoint+0x38>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004601 	.word	0x08004601
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004633 	.word	0x08004633
 80045fc:	0800460f 	.word	0x0800460f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004600:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004604:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004608:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800460c:	e012      	b.n	8004634 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800460e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004612:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004616:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800461a:	e00b      	b.n	8004634 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800461c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004620:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004624:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004628:	e004      	b.n	8004634 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004630:	e000      	b.n	8004634 <USB_ActivateEndpoint+0x7c>
      break;
 8004632:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800464a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800464e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466c:	b29b      	uxth	r3, r3
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	441a      	add	r2, r3
 8004682:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800468a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800468e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004696:	b29b      	uxth	r3, r3
 8004698:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	7b1b      	ldrb	r3, [r3, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 8178 	bne.w	8004994 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8084 	beq.w	80047b6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4413      	add	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	011a      	lsls	r2, r3, #4
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	88db      	ldrh	r3, [r3, #6]
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	b29b      	uxth	r3, r3
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	827b      	strh	r3, [r7, #18]
 80046f0:	8a7b      	ldrh	r3, [r7, #18]
 80046f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01b      	beq.n	8004732 <USB_ActivateEndpoint+0x17a>
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800470c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004710:	823b      	strh	r3, [r7, #16]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	441a      	add	r2, r3
 800471c:	8a3b      	ldrh	r3, [r7, #16]
 800471e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004722:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800472a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800472e:	b29b      	uxth	r3, r3
 8004730:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	78db      	ldrb	r3, [r3, #3]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d020      	beq.n	800477c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800474c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004750:	81bb      	strh	r3, [r7, #12]
 8004752:	89bb      	ldrh	r3, [r7, #12]
 8004754:	f083 0320 	eor.w	r3, r3, #32
 8004758:	81bb      	strh	r3, [r7, #12]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	89bb      	ldrh	r3, [r7, #12]
 8004766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800476a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800476e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004776:	b29b      	uxth	r3, r3
 8004778:	8013      	strh	r3, [r2, #0]
 800477a:	e2d5      	b.n	8004d28 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800478e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004792:	81fb      	strh	r3, [r7, #14]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	89fb      	ldrh	r3, [r7, #14]
 80047a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	8013      	strh	r3, [r2, #0]
 80047b4:	e2b8      	b.n	8004d28 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c6:	4413      	add	r3, r2
 80047c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	011a      	lsls	r2, r3, #4
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80047d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	88db      	ldrh	r3, [r3, #6]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fa:	4413      	add	r3, r2
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	011a      	lsls	r2, r3, #4
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	4413      	add	r3, r2
 8004808:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004818:	b29a      	uxth	r2, r3
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b3e      	cmp	r3, #62	@ 0x3e
 8004824:	d91d      	bls.n	8004862 <USB_ActivateEndpoint+0x2aa>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <USB_ActivateEndpoint+0x288>
 800483a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800483c:	3b01      	subs	r3, #1
 800483e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29a      	uxth	r2, r3
 8004846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004848:	b29b      	uxth	r3, r3
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	b29b      	uxth	r3, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	b29b      	uxth	r3, r3
 8004852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800485a:	b29a      	uxth	r2, r3
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	e026      	b.n	80048b0 <USB_ActivateEndpoint+0x2f8>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <USB_ActivateEndpoint+0x2c8>
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004878:	b29a      	uxth	r2, r3
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	801a      	strh	r2, [r3, #0]
 800487e:	e017      	b.n	80048b0 <USB_ActivateEndpoint+0x2f8>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <USB_ActivateEndpoint+0x2e2>
 8004894:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004896:	3301      	adds	r3, #1
 8004898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29a      	uxth	r2, r3
 80048a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	029b      	lsls	r3, r3, #10
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	4313      	orrs	r3, r2
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80048be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80048c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <USB_ActivateEndpoint+0x348>
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048de:	843b      	strh	r3, [r7, #32]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	8c3b      	ldrh	r3, [r7, #32]
 80048ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d124      	bne.n	8004952 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800491a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800491e:	83bb      	strh	r3, [r7, #28]
 8004920:	8bbb      	ldrh	r3, [r7, #28]
 8004922:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004926:	83bb      	strh	r3, [r7, #28]
 8004928:	8bbb      	ldrh	r3, [r7, #28]
 800492a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800492e:	83bb      	strh	r3, [r7, #28]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	8bbb      	ldrh	r3, [r7, #28]
 800493c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494c:	b29b      	uxth	r3, r3
 800494e:	8013      	strh	r3, [r2, #0]
 8004950:	e1ea      	b.n	8004d28 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	b29b      	uxth	r3, r3
 8004960:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004968:	83fb      	strh	r3, [r7, #30]
 800496a:	8bfb      	ldrh	r3, [r7, #30]
 800496c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004970:	83fb      	strh	r3, [r7, #30]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	441a      	add	r2, r3
 800497c:	8bfb      	ldrh	r3, [r7, #30]
 800497e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800498a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]
 8004992:	e1c9      	b.n	8004d28 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	78db      	ldrb	r3, [r3, #3]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d11e      	bne.n	80049da <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	441a      	add	r2, r3
 80049c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80049c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049cc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80049d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8013      	strh	r3, [r2, #0]
 80049d8:	e01d      	b.n	8004a16 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80049ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	441a      	add	r2, r3
 80049fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a26:	4413      	add	r3, r2
 8004a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	011a      	lsls	r2, r3, #4
 8004a30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	891b      	ldrh	r3, [r3, #8]
 8004a3e:	085b      	lsrs	r3, r3, #1
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a5a:	4413      	add	r3, r2
 8004a5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	011a      	lsls	r2, r3, #4
 8004a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004a6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	895b      	ldrh	r3, [r3, #10]
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a7c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	785b      	ldrb	r3, [r3, #1]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 8093 	bne.w	8004bae <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004a98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <USB_ActivateEndpoint+0x524>
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ad0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004aea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01b      	beq.n	8004b2c <USB_ActivateEndpoint+0x574>
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b42:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b44:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b46:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004b4a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b4c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b52:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	8013      	strh	r3, [r2, #0]
 8004bac:	e0bc      	b.n	8004d28 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004bbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01d      	beq.n	8004c06 <USB_ActivateEndpoint+0x64e>
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004c16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01d      	beq.n	8004c5e <USB_ActivateEndpoint+0x6a6>
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c38:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	441a      	add	r2, r3
 8004c46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	78db      	ldrb	r3, [r3, #3]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d024      	beq.n	8004cb0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c7c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c84:	f083 0320 	eor.w	r3, r3, #32
 8004c88:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	8013      	strh	r3, [r2, #0]
 8004cae:	e01d      	b.n	8004cec <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	441a      	add	r2, r3
 8004d10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d28:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3774      	adds	r7, #116	@ 0x74
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop

08004d38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b08d      	sub	sp, #52	@ 0x34
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	7b1b      	ldrb	r3, [r3, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f040 808e 	bne.w	8004e68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d044      	beq.n	8004dde <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	81bb      	strh	r3, [r7, #12]
 8004d62:	89bb      	ldrh	r3, [r7, #12]
 8004d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01b      	beq.n	8004da4 <USB_DeactivateEndpoint+0x6c>
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d82:	817b      	strh	r3, [r7, #10]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	441a      	add	r2, r3
 8004d8e:	897b      	ldrh	r3, [r7, #10]
 8004d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dba:	813b      	strh	r3, [r7, #8]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	441a      	add	r2, r3
 8004dc6:	893b      	ldrh	r3, [r7, #8]
 8004dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	8013      	strh	r3, [r2, #0]
 8004ddc:	e192      	b.n	8005104 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	827b      	strh	r3, [r7, #18]
 8004dec:	8a7b      	ldrh	r3, [r7, #18]
 8004dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01b      	beq.n	8004e2e <USB_DeactivateEndpoint+0xf6>
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0c:	823b      	strh	r3, [r7, #16]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	8a3b      	ldrh	r3, [r7, #16]
 8004e1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e44:	81fb      	strh	r3, [r7, #14]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	89fb      	ldrh	r3, [r7, #14]
 8004e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8013      	strh	r3, [r2, #0]
 8004e66:	e14d      	b.n	8005104 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 80a5 	bne.w	8004fbc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	843b      	strh	r3, [r7, #32]
 8004e80:	8c3b      	ldrh	r3, [r7, #32]
 8004e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01b      	beq.n	8004ec2 <USB_DeactivateEndpoint+0x18a>
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea0:	83fb      	strh	r3, [r7, #30]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	8bfb      	ldrh	r3, [r7, #30]
 8004eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	83bb      	strh	r3, [r7, #28]
 8004ed0:	8bbb      	ldrh	r3, [r7, #28]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01b      	beq.n	8004f12 <USB_DeactivateEndpoint+0x1da>
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef0:	837b      	strh	r3, [r7, #26]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	8b7b      	ldrh	r3, [r7, #26]
 8004efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f28:	833b      	strh	r3, [r7, #24]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	8b3b      	ldrh	r3, [r7, #24]
 8004f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f60:	82fb      	strh	r3, [r7, #22]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	441a      	add	r2, r3
 8004f6c:	8afb      	ldrh	r3, [r7, #22]
 8004f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f98:	82bb      	strh	r3, [r7, #20]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	441a      	add	r2, r3
 8004fa4:	8abb      	ldrh	r3, [r7, #20]
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]
 8004fba:	e0a3      	b.n	8005104 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004fca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01b      	beq.n	800500c <USB_DeactivateEndpoint+0x2d4>
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	441a      	add	r2, r3
 8004ff6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005000:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005008:	b29b      	uxth	r3, r3
 800500a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800501a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800501c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01b      	beq.n	800505c <USB_DeactivateEndpoint+0x324>
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800503a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005048:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800504c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005054:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005058:	b29b      	uxth	r3, r3
 800505a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800506e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005072:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005088:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800508c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	441a      	add	r2, r3
 80050b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	441a      	add	r2, r3
 80050ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005100:	b29b      	uxth	r3, r3
 8005102:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3734      	adds	r7, #52	@ 0x34
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b0c2      	sub	sp, #264	@ 0x108
 8005114:	af00      	add	r7, sp, #0
 8005116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800511e:	6018      	str	r0, [r3, #0]
 8005120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005128:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800512a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	785b      	ldrb	r3, [r3, #1]
 8005136:	2b01      	cmp	r3, #1
 8005138:	f040 86b7 	bne.w	8005eaa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800513c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d908      	bls.n	800516a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800515c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005168:	e007      	b.n	800517a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800516a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800516e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800517a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800517e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	7b1b      	ldrb	r3, [r3, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d13a      	bne.n	8005200 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800518a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6959      	ldr	r1, [r3, #20]
 8005196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	88da      	ldrh	r2, [r3, #6]
 80051a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80051ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80051b0:	6800      	ldr	r0, [r0, #0]
 80051b2:	f001 fc9c 	bl	8006aee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4413      	add	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	011a      	lsls	r2, r3, #4
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4413      	add	r3, r2
 80051ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	801a      	strh	r2, [r3, #0]
 80051fc:	f000 be1f 	b.w	8005e3e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	78db      	ldrb	r3, [r3, #3]
 800520c:	2b02      	cmp	r3, #2
 800520e:	f040 8462 	bne.w	8005ad6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	429a      	cmp	r2, r3
 800522c:	f240 83df 	bls.w	80059ee <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005256:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800525a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	441a      	add	r2, r3
 8005274:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800527c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005280:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005288:	b29b      	uxth	r3, r3
 800528a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800528c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a1a      	ldr	r2, [r3, #32]
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529c:	1ad2      	subs	r2, r2, r3
 800529e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 81c7 	beq.w	8005660 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80052de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	785b      	ldrb	r3, [r3, #1]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d177      	bne.n	80053de <USB_EPStartXfer+0x2ce>
 80052ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005308:	b29b      	uxth	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	4413      	add	r3, r2
 8005310:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	011a      	lsls	r2, r3, #4
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	4413      	add	r3, r2
 8005324:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005334:	b29a      	uxth	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800533e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005340:	d921      	bls.n	8005386 <USB_EPStartXfer+0x276>
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800534c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <USB_EPStartXfer+0x252>
 8005358:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800535c:	3b01      	subs	r3, #1
 800535e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29a      	uxth	r2, r3
 8005368:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800536c:	b29b      	uxth	r3, r3
 800536e:	029b      	lsls	r3, r3, #10
 8005370:	b29b      	uxth	r3, r3
 8005372:	4313      	orrs	r3, r2
 8005374:	b29b      	uxth	r3, r3
 8005376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537e:	b29a      	uxth	r2, r3
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	801a      	strh	r2, [r3, #0]
 8005384:	e050      	b.n	8005428 <USB_EPStartXfer+0x318>
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <USB_EPStartXfer+0x294>
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539c:	b29a      	uxth	r2, r3
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	e041      	b.n	8005428 <USB_EPStartXfer+0x318>
 80053a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80053ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <USB_EPStartXfer+0x2b4>
 80053ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80053be:	3301      	adds	r3, #1
 80053c0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	029b      	lsls	r3, r3, #10
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	4313      	orrs	r3, r2
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	e024      	b.n	8005428 <USB_EPStartXfer+0x318>
 80053de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	785b      	ldrb	r3, [r3, #1]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d11c      	bne.n	8005428 <USB_EPStartXfer+0x318>
 80053ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	4413      	add	r3, r2
 8005404:	633b      	str	r3, [r7, #48]	@ 0x30
 8005406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	011a      	lsls	r2, r3, #4
 8005414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005416:	4413      	add	r3, r2
 8005418:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800541c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800541e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005422:	b29a      	uxth	r2, r3
 8005424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005426:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	895b      	ldrh	r3, [r3, #10]
 8005434:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6959      	ldr	r1, [r3, #20]
 8005444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005448:	b29b      	uxth	r3, r3
 800544a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800544e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005452:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005456:	6800      	ldr	r0, [r0, #0]
 8005458:	f001 fb49 	bl	8006aee <USB_WritePMA>
            ep->xfer_buff += len;
 800545c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695a      	ldr	r2, [r3, #20]
 8005468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546c:	441a      	add	r2, r3
 800546e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800547a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6a1a      	ldr	r2, [r3, #32]
 8005486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	429a      	cmp	r2, r3
 8005494:	d90f      	bls.n	80054b6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800549a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a6:	1ad2      	subs	r2, r2, r3
 80054a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	621a      	str	r2, [r3, #32]
 80054b4:	e00e      	b.n	80054d4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80054b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80054c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2200      	movs	r2, #0
 80054d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d177      	bne.n	80055d4 <USB_EPStartXfer+0x4c4>
 80054e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054fe:	b29b      	uxth	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	4413      	add	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	011a      	lsls	r2, r3, #4
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	4413      	add	r3, r2
 800551a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552a:	b29a      	uxth	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005534:	2b3e      	cmp	r3, #62	@ 0x3e
 8005536:	d921      	bls.n	800557c <USB_EPStartXfer+0x46c>
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2b00      	cmp	r3, #0
 800554c:	d104      	bne.n	8005558 <USB_EPStartXfer+0x448>
 800554e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005552:	3b01      	subs	r3, #1
 8005554:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29a      	uxth	r2, r3
 800555e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005562:	b29b      	uxth	r3, r3
 8005564:	029b      	lsls	r3, r3, #10
 8005566:	b29b      	uxth	r3, r3
 8005568:	4313      	orrs	r3, r2
 800556a:	b29b      	uxth	r3, r3
 800556c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005574:	b29a      	uxth	r2, r3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	e056      	b.n	800562a <USB_EPStartXfer+0x51a>
 800557c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <USB_EPStartXfer+0x48a>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005592:	b29a      	uxth	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	e047      	b.n	800562a <USB_EPStartXfer+0x51a>
 800559a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <USB_EPStartXfer+0x4aa>
 80055b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b4:	3301      	adds	r3, #1
 80055b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29a      	uxth	r2, r3
 80055c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	029b      	lsls	r3, r3, #10
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	4313      	orrs	r3, r2
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	801a      	strh	r2, [r3, #0]
 80055d2:	e02a      	b.n	800562a <USB_EPStartXfer+0x51a>
 80055d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d122      	bne.n	800562a <USB_EPStartXfer+0x51a>
 80055e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	623b      	str	r3, [r7, #32]
 80055f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055fe:	b29b      	uxth	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	4413      	add	r3, r2
 8005606:	623b      	str	r3, [r7, #32]
 8005608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	011a      	lsls	r2, r3, #4
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	4413      	add	r3, r2
 800561a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800561e:	61fb      	str	r3, [r7, #28]
 8005620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005624:	b29a      	uxth	r2, r3
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800562a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	891b      	ldrh	r3, [r3, #8]
 8005636:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800563a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6959      	ldr	r1, [r3, #20]
 8005646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564a:	b29b      	uxth	r3, r3
 800564c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005650:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005654:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005658:	6800      	ldr	r0, [r0, #0]
 800565a:	f001 fa48 	bl	8006aee <USB_WritePMA>
 800565e:	e3ee      	b.n	8005e3e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d177      	bne.n	8005760 <USB_EPStartXfer+0x650>
 8005670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800567c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800568a:	b29b      	uxth	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005690:	4413      	add	r3, r2
 8005692:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	011a      	lsls	r2, r3, #4
 80056a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056a4:	4413      	add	r3, r2
 80056a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80056c2:	d921      	bls.n	8005708 <USB_EPStartXfer+0x5f8>
 80056c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <USB_EPStartXfer+0x5d4>
 80056da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056de:	3b01      	subs	r3, #1
 80056e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	029b      	lsls	r3, r3, #10
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	4313      	orrs	r3, r2
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005700:	b29a      	uxth	r2, r3
 8005702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	e056      	b.n	80057b6 <USB_EPStartXfer+0x6a6>
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <USB_EPStartXfer+0x616>
 8005710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571e:	b29a      	uxth	r2, r3
 8005720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	e047      	b.n	80057b6 <USB_EPStartXfer+0x6a6>
 8005726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <USB_EPStartXfer+0x636>
 800573c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005740:	3301      	adds	r3, #1
 8005742:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29a      	uxth	r2, r3
 800574c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005750:	b29b      	uxth	r3, r3
 8005752:	029b      	lsls	r3, r3, #10
 8005754:	b29b      	uxth	r3, r3
 8005756:	4313      	orrs	r3, r2
 8005758:	b29a      	uxth	r2, r3
 800575a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800575c:	801a      	strh	r2, [r3, #0]
 800575e:	e02a      	b.n	80057b6 <USB_EPStartXfer+0x6a6>
 8005760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d122      	bne.n	80057b6 <USB_EPStartXfer+0x6a6>
 8005770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	653b      	str	r3, [r7, #80]	@ 0x50
 800577c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800578a:	b29b      	uxth	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005790:	4413      	add	r3, r2
 8005792:	653b      	str	r3, [r7, #80]	@ 0x50
 8005794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	011a      	lsls	r2, r3, #4
 80057a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057a4:	4413      	add	r3, r2
 80057a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	891b      	ldrh	r3, [r3, #8]
 80057c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6959      	ldr	r1, [r3, #20]
 80057d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057e4:	6800      	ldr	r0, [r0, #0]
 80057e6:	f001 f982 	bl	8006aee <USB_WritePMA>
            ep->xfer_buff += len;
 80057ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fa:	441a      	add	r2, r3
 80057fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	429a      	cmp	r2, r3
 8005822:	d90f      	bls.n	8005844 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6a1a      	ldr	r2, [r3, #32]
 8005830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005834:	1ad2      	subs	r2, r2, r3
 8005836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	621a      	str	r2, [r3, #32]
 8005842:	e00e      	b.n	8005862 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2200      	movs	r2, #0
 8005860:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	643b      	str	r3, [r7, #64]	@ 0x40
 800586e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d177      	bne.n	800596e <USB_EPStartXfer+0x85e>
 800587e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	63bb      	str	r3, [r7, #56]	@ 0x38
 800588a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005898:	b29b      	uxth	r3, r3
 800589a:	461a      	mov	r2, r3
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	4413      	add	r3, r2
 80058a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	011a      	lsls	r2, r3, #4
 80058b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b2:	4413      	add	r3, r2
 80058b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80058d0:	d921      	bls.n	8005916 <USB_EPStartXfer+0x806>
 80058d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <USB_EPStartXfer+0x7e2>
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ec:	3b01      	subs	r3, #1
 80058ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	029b      	lsls	r3, r3, #10
 8005900:	b29b      	uxth	r3, r3
 8005902:	4313      	orrs	r3, r2
 8005904:	b29b      	uxth	r3, r3
 8005906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590e:	b29a      	uxth	r2, r3
 8005910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e050      	b.n	80059b8 <USB_EPStartXfer+0x8a8>
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <USB_EPStartXfer+0x824>
 800591e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592c:	b29a      	uxth	r2, r3
 800592e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	e041      	b.n	80059b8 <USB_EPStartXfer+0x8a8>
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800593e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <USB_EPStartXfer+0x844>
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594e:	3301      	adds	r3, #1
 8005950:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29a      	uxth	r2, r3
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595e:	b29b      	uxth	r3, r3
 8005960:	029b      	lsls	r3, r3, #10
 8005962:	b29b      	uxth	r3, r3
 8005964:	4313      	orrs	r3, r2
 8005966:	b29a      	uxth	r2, r3
 8005968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596a:	801a      	strh	r2, [r3, #0]
 800596c:	e024      	b.n	80059b8 <USB_EPStartXfer+0x8a8>
 800596e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d11c      	bne.n	80059b8 <USB_EPStartXfer+0x8a8>
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800598c:	b29b      	uxth	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005992:	4413      	add	r3, r2
 8005994:	643b      	str	r3, [r7, #64]	@ 0x40
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	011a      	lsls	r2, r3, #4
 80059a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a6:	4413      	add	r3, r2
 80059a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	895b      	ldrh	r3, [r3, #10]
 80059c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6959      	ldr	r1, [r3, #20]
 80059d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059e6:	6800      	ldr	r0, [r0, #0]
 80059e8:	f001 f881 	bl	8006aee <USB_WritePMA>
 80059ec:	e227      	b.n	8005e3e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80059fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a24:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	441a      	add	r2, r3
 8005a42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a7a:	4413      	add	r3, r2
 8005a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	011a      	lsls	r2, r3, #4
 8005a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a8e:	4413      	add	r3, r2
 8005a90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	891b      	ldrh	r3, [r3, #8]
 8005aac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6959      	ldr	r1, [r3, #20]
 8005abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005ac6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005aca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ace:	6800      	ldr	r0, [r0, #0]
 8005ad0:	f001 f80d 	bl	8006aee <USB_WritePMA>
 8005ad4:	e1b3      	b.n	8005e3e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6a1a      	ldr	r2, [r3, #32]
 8005ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae6:	1ad2      	subs	r2, r2, r3
 8005ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 80c6 	beq.w	8005ca8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d177      	bne.n	8005c28 <USB_EPStartXfer+0xb18>
 8005b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b58:	4413      	add	r3, r2
 8005b5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	011a      	lsls	r2, r3, #4
 8005b6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b72:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b88:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b8a:	d921      	bls.n	8005bd0 <USB_EPStartXfer+0xac0>
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	f003 031f 	and.w	r3, r3, #31
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d104      	bne.n	8005bac <USB_EPStartXfer+0xa9c>
 8005ba2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	029b      	lsls	r3, r3, #10
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e050      	b.n	8005c72 <USB_EPStartXfer+0xb62>
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <USB_EPStartXfer+0xade>
 8005bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bea:	801a      	strh	r2, [r3, #0]
 8005bec:	e041      	b.n	8005c72 <USB_EPStartXfer+0xb62>
 8005bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <USB_EPStartXfer+0xafe>
 8005c04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c08:	3301      	adds	r3, #1
 8005c0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	029b      	lsls	r3, r3, #10
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	e024      	b.n	8005c72 <USB_EPStartXfer+0xb62>
 8005c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d11c      	bne.n	8005c72 <USB_EPStartXfer+0xb62>
 8005c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c4c:	4413      	add	r3, r2
 8005c4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	011a      	lsls	r2, r3, #4
 8005c5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c60:	4413      	add	r3, r2
 8005c62:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	895b      	ldrh	r3, [r3, #10]
 8005c7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6959      	ldr	r1, [r3, #20]
 8005c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ca0:	6800      	ldr	r0, [r0, #0]
 8005ca2:	f000 ff24 	bl	8006aee <USB_WritePMA>
 8005ca6:	e0ca      	b.n	8005e3e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d177      	bne.n	8005da8 <USB_EPStartXfer+0xc98>
 8005cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cd8:	4413      	add	r3, r2
 8005cda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	011a      	lsls	r2, r3, #4
 8005cea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cec:	4413      	add	r3, r2
 8005cee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d08:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d0a:	d921      	bls.n	8005d50 <USB_EPStartXfer+0xc40>
 8005d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d1a:	f003 031f 	and.w	r3, r3, #31
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d104      	bne.n	8005d2c <USB_EPStartXfer+0xc1c>
 8005d22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d26:	3b01      	subs	r3, #1
 8005d28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d4c:	801a      	strh	r2, [r3, #0]
 8005d4e:	e05c      	b.n	8005e0a <USB_EPStartXfer+0xcfa>
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <USB_EPStartXfer+0xc5e>
 8005d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	e04d      	b.n	8005e0a <USB_EPStartXfer+0xcfa>
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d72:	085b      	lsrs	r3, r3, #1
 8005d74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d004      	beq.n	8005d8e <USB_EPStartXfer+0xc7e>
 8005d84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d88:	3301      	adds	r3, #1
 8005d8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	029b      	lsls	r3, r3, #10
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	e030      	b.n	8005e0a <USB_EPStartXfer+0xcfa>
 8005da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d128      	bne.n	8005e0a <USB_EPStartXfer+0xcfa>
 8005db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ddc:	4413      	add	r3, r2
 8005dde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	011a      	lsls	r2, r3, #4
 8005df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	891b      	ldrh	r3, [r3, #8]
 8005e16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6959      	ldr	r1, [r3, #20]
 8005e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e38:	6800      	ldr	r0, [r0, #0]
 8005e3a:	f000 fe58 	bl	8006aee <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e64:	817b      	strh	r3, [r7, #10]
 8005e66:	897b      	ldrh	r3, [r7, #10]
 8005e68:	f083 0310 	eor.w	r3, r3, #16
 8005e6c:	817b      	strh	r3, [r7, #10]
 8005e6e:	897b      	ldrh	r3, [r7, #10]
 8005e70:	f083 0320 	eor.w	r3, r3, #32
 8005e74:	817b      	strh	r3, [r7, #10]
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	441a      	add	r2, r3
 8005e90:	897b      	ldrh	r3, [r7, #10]
 8005e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8013      	strh	r3, [r2, #0]
 8005ea6:	f000 bcde 	b.w	8006866 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	7b1b      	ldrb	r3, [r3, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f040 80bb 	bne.w	8006032 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d917      	bls.n	8005f08 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef8:	1ad2      	subs	r2, r2, r3
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	619a      	str	r2, [r3, #24]
 8005f06:	e00e      	b.n	8005f26 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2200      	movs	r2, #0
 8005f24:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	011a      	lsls	r2, r3, #4
 8005f5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f62:	4413      	add	r3, r2
 8005f64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f7e:	801a      	strh	r2, [r3, #0]
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f84:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f86:	d924      	bls.n	8005fd2 <USB_EPStartXfer+0xec2>
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <USB_EPStartXfer+0xe98>
 8005f9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	029b      	lsls	r3, r3, #10
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	f000 bc10 	b.w	80067f2 <USB_EPStartXfer+0x16e2>
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10c      	bne.n	8005ff4 <USB_EPStartXfer+0xee4>
 8005fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ff0:	801a      	strh	r2, [r3, #0]
 8005ff2:	e3fe      	b.n	80067f2 <USB_EPStartXfer+0x16e2>
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <USB_EPStartXfer+0xf04>
 800600a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800600e:	3301      	adds	r3, #1
 8006010:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006014:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006020:	b29b      	uxth	r3, r3
 8006022:	029b      	lsls	r3, r3, #10
 8006024:	b29b      	uxth	r3, r3
 8006026:	4313      	orrs	r3, r2
 8006028:	b29a      	uxth	r2, r3
 800602a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	e3df      	b.n	80067f2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	78db      	ldrb	r3, [r3, #3]
 800603e:	2b02      	cmp	r3, #2
 8006040:	f040 8218 	bne.w	8006474 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 809d 	bne.w	8006190 <USB_EPStartXfer+0x1080>
 8006056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800607a:	4413      	add	r3, r2
 800607c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	011a      	lsls	r2, r3, #4
 800608e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006092:	4413      	add	r3, r2
 8006094:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006098:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800609c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80060be:	d92b      	bls.n	8006118 <USB_EPStartXfer+0x1008>
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <USB_EPStartXfer+0xfe0>
 80060e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ea:	3b01      	subs	r3, #1
 80060ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	029b      	lsls	r3, r3, #10
 8006100:	b29b      	uxth	r3, r3
 8006102:	4313      	orrs	r3, r2
 8006104:	b29b      	uxth	r3, r3
 8006106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610e:	b29a      	uxth	r2, r3
 8006110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006114:	801a      	strh	r2, [r3, #0]
 8006116:	e070      	b.n	80061fa <USB_EPStartXfer+0x10ea>
 8006118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10c      	bne.n	8006142 <USB_EPStartXfer+0x1032>
 8006128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006138:	b29a      	uxth	r2, r3
 800613a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	e05b      	b.n	80061fa <USB_EPStartXfer+0x10ea>
 8006142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <USB_EPStartXfer+0x1062>
 8006168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616c:	3301      	adds	r3, #1
 800616e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617e:	b29b      	uxth	r3, r3
 8006180:	029b      	lsls	r3, r3, #10
 8006182:	b29b      	uxth	r3, r3
 8006184:	4313      	orrs	r3, r2
 8006186:	b29a      	uxth	r2, r3
 8006188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	e034      	b.n	80061fa <USB_EPStartXfer+0x10ea>
 8006190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d12c      	bne.n	80061fa <USB_EPStartXfer+0x10ea>
 80061a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061bc:	b29b      	uxth	r3, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80061c4:	4413      	add	r3, r2
 80061c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	011a      	lsls	r2, r3, #4
 80061d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80061dc:	4413      	add	r3, r2
 80061de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f040 809d 	bne.w	8006354 <USB_EPStartXfer+0x1244>
 800621a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006236:	b29b      	uxth	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800623e:	4413      	add	r3, r2
 8006240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	011a      	lsls	r2, r3, #4
 8006252:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006256:	4413      	add	r3, r2
 8006258:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800625c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800626c:	b29a      	uxth	r2, r3
 800626e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b3e      	cmp	r3, #62	@ 0x3e
 8006282:	d92b      	bls.n	80062dc <USB_EPStartXfer+0x11cc>
 8006284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	095b      	lsrs	r3, r3, #5
 8006292:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <USB_EPStartXfer+0x11a4>
 80062aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ae:	3b01      	subs	r3, #1
 80062b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	029b      	lsls	r3, r3, #10
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	4313      	orrs	r3, r2
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	e069      	b.n	80063b0 <USB_EPStartXfer+0x12a0>
 80062dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10c      	bne.n	8006306 <USB_EPStartXfer+0x11f6>
 80062ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006302:	801a      	strh	r2, [r3, #0]
 8006304:	e054      	b.n	80063b0 <USB_EPStartXfer+0x12a0>
 8006306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <USB_EPStartXfer+0x1226>
 800632c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006330:	3301      	adds	r3, #1
 8006332:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006336:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29a      	uxth	r2, r3
 800633e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006342:	b29b      	uxth	r3, r3
 8006344:	029b      	lsls	r3, r3, #10
 8006346:	b29b      	uxth	r3, r3
 8006348:	4313      	orrs	r3, r2
 800634a:	b29a      	uxth	r2, r3
 800634c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	e02d      	b.n	80063b0 <USB_EPStartXfer+0x12a0>
 8006354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	785b      	ldrb	r3, [r3, #1]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d125      	bne.n	80063b0 <USB_EPStartXfer+0x12a0>
 8006364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006372:	b29b      	uxth	r3, r3
 8006374:	461a      	mov	r2, r3
 8006376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800637a:	4413      	add	r3, r2
 800637c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	011a      	lsls	r2, r3, #4
 800638e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006392:	4413      	add	r3, r2
 8006394:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006398:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063ae:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8218 	beq.w	80067f2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <USB_EPStartXfer+0x12ea>
 80063ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10d      	bne.n	8006416 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 81f5 	bne.w	80067f2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006408:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800640c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	f040 81ee 	bne.w	80067f2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	441a      	add	r2, r3
 800645a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800645e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800646a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800646e:	b29b      	uxth	r3, r3
 8006470:	8013      	strh	r3, [r2, #0]
 8006472:	e1be      	b.n	80067f2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	78db      	ldrb	r3, [r3, #3]
 8006480:	2b01      	cmp	r3, #1
 8006482:	f040 81b4 	bne.w	80067ee <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d917      	bls.n	80064d2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80064b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c2:	1ad2      	subs	r2, r2, r3
 80064c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	619a      	str	r2, [r3, #24]
 80064d0:	e00e      	b.n	80064f0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80064e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2200      	movs	r2, #0
 80064ee:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f040 8085 	bne.w	800660c <USB_EPStartXfer+0x14fc>
 8006502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800651e:	b29b      	uxth	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006526:	4413      	add	r3, r2
 8006528:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800652c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	011a      	lsls	r2, r3, #4
 800653a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800653e:	4413      	add	r3, r2
 8006540:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006544:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006554:	b29a      	uxth	r2, r3
 8006556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006560:	2b3e      	cmp	r3, #62	@ 0x3e
 8006562:	d923      	bls.n	80065ac <USB_EPStartXfer+0x149c>
 8006564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <USB_EPStartXfer+0x1474>
 800657a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800657e:	3b01      	subs	r3, #1
 8006580:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29a      	uxth	r2, r3
 800658c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006590:	b29b      	uxth	r3, r3
 8006592:	029b      	lsls	r3, r3, #10
 8006594:	b29b      	uxth	r3, r3
 8006596:	4313      	orrs	r3, r2
 8006598:	b29b      	uxth	r3, r3
 800659a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065a8:	801a      	strh	r2, [r3, #0]
 80065aa:	e060      	b.n	800666e <USB_EPStartXfer+0x155e>
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10c      	bne.n	80065ce <USB_EPStartXfer+0x14be>
 80065b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065ca:	801a      	strh	r2, [r3, #0]
 80065cc:	e04f      	b.n	800666e <USB_EPStartXfer+0x155e>
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d2:	085b      	lsrs	r3, r3, #1
 80065d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d004      	beq.n	80065ee <USB_EPStartXfer+0x14de>
 80065e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065e8:	3301      	adds	r3, #1
 80065ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	029b      	lsls	r3, r3, #10
 80065fe:	b29b      	uxth	r3, r3
 8006600:	4313      	orrs	r3, r2
 8006602:	b29a      	uxth	r2, r3
 8006604:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	e030      	b.n	800666e <USB_EPStartXfer+0x155e>
 800660c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d128      	bne.n	800666e <USB_EPStartXfer+0x155e>
 800661c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006620:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800662a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006638:	b29b      	uxth	r3, r3
 800663a:	461a      	mov	r2, r3
 800663c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006640:	4413      	add	r3, r2
 8006642:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	011a      	lsls	r2, r3, #4
 8006654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006658:	4413      	add	r3, r2
 800665a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800665e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006666:	b29a      	uxth	r2, r3
 8006668:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	785b      	ldrb	r3, [r3, #1]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f040 8085 	bne.w	8006798 <USB_EPStartXfer+0x1688>
 800668e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800669c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80066b2:	4413      	add	r3, r2
 80066b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80066b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	011a      	lsls	r2, r3, #4
 80066c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80066ca:	4413      	add	r3, r2
 80066cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80066ee:	d923      	bls.n	8006738 <USB_EPStartXfer+0x1628>
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fe:	f003 031f 	and.w	r3, r3, #31
 8006702:	2b00      	cmp	r3, #0
 8006704:	d104      	bne.n	8006710 <USB_EPStartXfer+0x1600>
 8006706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800670a:	3b01      	subs	r3, #1
 800670c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29a      	uxth	r2, r3
 8006718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800671c:	b29b      	uxth	r3, r3
 800671e:	029b      	lsls	r3, r3, #10
 8006720:	b29b      	uxth	r3, r3
 8006722:	4313      	orrs	r3, r2
 8006724:	b29b      	uxth	r3, r3
 8006726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800672a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672e:	b29a      	uxth	r2, r3
 8006730:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	e05c      	b.n	80067f2 <USB_EPStartXfer+0x16e2>
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10c      	bne.n	800675a <USB_EPStartXfer+0x164a>
 8006740:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800674c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e04b      	b.n	80067f2 <USB_EPStartXfer+0x16e2>
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <USB_EPStartXfer+0x166a>
 8006770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006774:	3301      	adds	r3, #1
 8006776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800677a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29a      	uxth	r2, r3
 8006782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006786:	b29b      	uxth	r3, r3
 8006788:	029b      	lsls	r3, r3, #10
 800678a:	b29b      	uxth	r3, r3
 800678c:	4313      	orrs	r3, r2
 800678e:	b29a      	uxth	r2, r3
 8006790:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006794:	801a      	strh	r2, [r3, #0]
 8006796:	e02c      	b.n	80067f2 <USB_EPStartXfer+0x16e2>
 8006798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d124      	bne.n	80067f2 <USB_EPStartXfer+0x16e2>
 80067a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067be:	4413      	add	r3, r2
 80067c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	011a      	lsls	r2, r3, #4
 80067d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067d6:	4413      	add	r3, r2
 80067d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	e001      	b.n	80067f2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e03a      	b.n	8006868 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006818:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800681c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006820:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006824:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006828:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800682c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006830:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	441a      	add	r2, r3
 800684e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800685a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800685e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006862:	b29b      	uxth	r3, r3
 8006864:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d020      	beq.n	80068c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800689a:	81bb      	strh	r3, [r7, #12]
 800689c:	89bb      	ldrh	r3, [r7, #12]
 800689e:	f083 0310 	eor.w	r3, r3, #16
 80068a2:	81bb      	strh	r3, [r7, #12]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	89bb      	ldrh	r3, [r7, #12]
 80068b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8013      	strh	r3, [r2, #0]
 80068c4:	e01f      	b.n	8006906 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068dc:	81fb      	strh	r3, [r7, #14]
 80068de:	89fb      	ldrh	r3, [r7, #14]
 80068e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068e4:	81fb      	strh	r3, [r7, #14]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	89fb      	ldrh	r3, [r7, #14]
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr

08006912 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006912:	b480      	push	{r7}
 8006914:	b087      	sub	sp, #28
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	7b1b      	ldrb	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f040 809d 	bne.w	8006a60 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d04c      	beq.n	80069c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	823b      	strh	r3, [r7, #16]
 800693c:	8a3b      	ldrh	r3, [r7, #16]
 800693e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01b      	beq.n	800697e <USB_EPClearStall+0x6c>
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695c:	81fb      	strh	r3, [r7, #14]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	441a      	add	r2, r3
 8006968:	89fb      	ldrh	r3, [r7, #14]
 800696a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800696e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006976:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800697a:	b29b      	uxth	r3, r3
 800697c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	78db      	ldrb	r3, [r3, #3]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d06c      	beq.n	8006a60 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800699c:	81bb      	strh	r3, [r7, #12]
 800699e:	89bb      	ldrh	r3, [r7, #12]
 80069a0:	f083 0320 	eor.w	r3, r3, #32
 80069a4:	81bb      	strh	r3, [r7, #12]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	441a      	add	r2, r3
 80069b0:	89bb      	ldrh	r3, [r7, #12]
 80069b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]
 80069c6:	e04b      	b.n	8006a60 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	82fb      	strh	r3, [r7, #22]
 80069d6:	8afb      	ldrh	r3, [r7, #22]
 80069d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01b      	beq.n	8006a18 <USB_EPClearStall+0x106>
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f6:	82bb      	strh	r3, [r7, #20]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	441a      	add	r2, r3
 8006a02:	8abb      	ldrh	r3, [r7, #20]
 8006a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2e:	827b      	strh	r3, [r7, #18]
 8006a30:	8a7b      	ldrh	r3, [r7, #18]
 8006a32:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a36:	827b      	strh	r3, [r7, #18]
 8006a38:	8a7b      	ldrh	r3, [r7, #18]
 8006a3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a3e:	827b      	strh	r3, [r7, #18]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	441a      	add	r2, r3
 8006a4a:	8a7b      	ldrh	r3, [r7, #18]
 8006a4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2280      	movs	r2, #128	@ 0x80
 8006a82:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr

08006a92 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr

08006aa6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr

08006aba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006acc:	68fb      	ldr	r3, [r7, #12]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr

08006aee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b08b      	sub	sp, #44	@ 0x2c
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	4611      	mov	r1, r2
 8006afa:	461a      	mov	r2, r3
 8006afc:	460b      	mov	r3, r1
 8006afe:	80fb      	strh	r3, [r7, #6]
 8006b00:	4613      	mov	r3, r2
 8006b02:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b04:	88bb      	ldrh	r3, [r7, #4]
 8006b06:	3301      	adds	r3, #1
 8006b08:	085b      	lsrs	r3, r3, #1
 8006b0a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	005a      	lsls	r2, r3, #1
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b20:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b26:	e01f      	b.n	8006b68 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	3301      	adds	r3, #1
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	b21b      	sxth	r3, r3
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	b21a      	sxth	r2, r3
 8006b3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	8a7a      	ldrh	r2, [r7, #18]
 8006b48:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	3302      	adds	r3, #2
 8006b54:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	3b01      	subs	r3, #1
 8006b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1dc      	bne.n	8006b28 <USB_WritePMA+0x3a>
  }
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	372c      	adds	r7, #44	@ 0x2c
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b08b      	sub	sp, #44	@ 0x2c
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	4611      	mov	r1, r2
 8006b86:	461a      	mov	r2, r3
 8006b88:	460b      	mov	r3, r1
 8006b8a:	80fb      	strh	r3, [r7, #6]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b90:	88bb      	ldrh	r3, [r7, #4]
 8006b92:	085b      	lsrs	r3, r3, #1
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ba0:	88fb      	ldrh	r3, [r7, #6]
 8006ba2:	005a      	lsls	r2, r3, #1
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb2:	e01b      	b.n	8006bec <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	3302      	adds	r3, #2
 8006bc0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	0a1b      	lsrs	r3, r3, #8
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	3302      	adds	r3, #2
 8006be4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	3b01      	subs	r3, #1
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e0      	bne.n	8006bb4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006bf2:	88bb      	ldrh	r3, [r7, #4]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	701a      	strb	r2, [r3, #0]
  }
}
 8006c0e:	bf00      	nop
 8006c10:	372c      	adds	r7, #44	@ 0x2c
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	7c1b      	ldrb	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d115      	bne.n	8006c5c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c34:	2202      	movs	r2, #2
 8006c36:	2181      	movs	r1, #129	@ 0x81
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 fe2c 	bl	8008896 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c48:	2202      	movs	r2, #2
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 fe22 	bl	8008896 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006c5a:	e012      	b.n	8006c82 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c5c:	2340      	movs	r3, #64	@ 0x40
 8006c5e:	2202      	movs	r2, #2
 8006c60:	2181      	movs	r1, #129	@ 0x81
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fe17 	bl	8008896 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c6e:	2340      	movs	r3, #64	@ 0x40
 8006c70:	2202      	movs	r2, #2
 8006c72:	2101      	movs	r1, #1
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fe0e 	bl	8008896 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c82:	2308      	movs	r3, #8
 8006c84:	2203      	movs	r2, #3
 8006c86:	2182      	movs	r1, #130	@ 0x82
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fe04 	bl	8008896 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006c98:	f001 ff24 	bl	8008ae4 <USBD_static_malloc>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d102      	bne.n	8006cb4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	73fb      	strb	r3, [r7, #15]
 8006cb2:	e026      	b.n	8006d02 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cba:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	7c1b      	ldrb	r3, [r3, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d109      	bne.n	8006cf2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ce8:	2101      	movs	r1, #1
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fec3 	bl	8008a76 <USBD_LL_PrepareReceive>
 8006cf0:	e007      	b.n	8006d02 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cf8:	2340      	movs	r3, #64	@ 0x40
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 feba 	bl	8008a76 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d1c:	2181      	movs	r1, #129	@ 0x81
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 fddf 	bl	80088e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 fdd8 	bl	80088e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d3a:	2182      	movs	r1, #130	@ 0x82
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 fdd0 	bl	80088e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00e      	beq.n	8006d70 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 feca 	bl	8008afc <USBD_static_free>
    pdev->pClassData = NULL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b086      	sub	sp, #24
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d8a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d039      	beq.n	8006e18 <USBD_CDC_Setup+0x9e>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d17f      	bne.n	8006ea8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	88db      	ldrh	r3, [r3, #6]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d029      	beq.n	8006e04 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	b25b      	sxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da11      	bge.n	8006dde <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006dc6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	88d2      	ldrh	r2, [r2, #6]
 8006dcc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006dce:	6939      	ldr	r1, [r7, #16]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	88db      	ldrh	r3, [r3, #6]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 f9d6 	bl	8008188 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006ddc:	e06b      	b.n	8006eb6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	785a      	ldrb	r2, [r3, #1]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	88db      	ldrh	r3, [r3, #6]
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006df4:	6939      	ldr	r1, [r7, #16]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	88db      	ldrh	r3, [r3, #6]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f9f1 	bl	80081e4 <USBD_CtlPrepareRx>
      break;
 8006e02:	e058      	b.n	8006eb6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	7850      	ldrb	r0, [r2, #1]
 8006e10:	2200      	movs	r2, #0
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	4798      	blx	r3
      break;
 8006e16:	e04e      	b.n	8006eb6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	2b0b      	cmp	r3, #11
 8006e1e:	d02e      	beq.n	8006e7e <USBD_CDC_Setup+0x104>
 8006e20:	2b0b      	cmp	r3, #11
 8006e22:	dc38      	bgt.n	8006e96 <USBD_CDC_Setup+0x11c>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <USBD_CDC_Setup+0xb4>
 8006e28:	2b0a      	cmp	r3, #10
 8006e2a:	d014      	beq.n	8006e56 <USBD_CDC_Setup+0xdc>
 8006e2c:	e033      	b.n	8006e96 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d107      	bne.n	8006e48 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e38:	f107 030c 	add.w	r3, r7, #12
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f9a1 	bl	8008188 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e46:	e02e      	b.n	8006ea6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 f932 	bl	80080b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e50:	2302      	movs	r3, #2
 8006e52:	75fb      	strb	r3, [r7, #23]
          break;
 8006e54:	e027      	b.n	8006ea6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d107      	bne.n	8006e70 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e60:	f107 030f 	add.w	r3, r7, #15
 8006e64:	2201      	movs	r2, #1
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 f98d 	bl	8008188 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e6e:	e01a      	b.n	8006ea6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 f91e 	bl	80080b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e78:	2302      	movs	r3, #2
 8006e7a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e7c:	e013      	b.n	8006ea6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d00d      	beq.n	8006ea4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 f912 	bl	80080b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e90:	2302      	movs	r3, #2
 8006e92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e94:	e006      	b.n	8006ea4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 f90b 	bl	80080b4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea2:	e000      	b.n	8006ea6 <USBD_CDC_Setup+0x12c>
          break;
 8006ea4:	bf00      	nop
      }
      break;
 8006ea6:	e006      	b.n	8006eb6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 f902 	bl	80080b4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb4:	bf00      	nop
  }

  return ret;
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ed2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006eda:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d03a      	beq.n	8006f5c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ee6:	78fa      	ldrb	r2, [r7, #3]
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	331c      	adds	r3, #28
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d029      	beq.n	8006f50 <USBD_CDC_DataIn+0x90>
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	331c      	adds	r3, #28
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	78f9      	ldrb	r1, [r7, #3]
 8006f10:	68b8      	ldr	r0, [r7, #8]
 8006f12:	460b      	mov	r3, r1
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	4403      	add	r3, r0
 8006f1c:	3320      	adds	r3, #32
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f24:	fb01 f303 	mul.w	r3, r1, r3
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d110      	bne.n	8006f50 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f2e:	78fa      	ldrb	r2, [r7, #3]
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	331c      	adds	r3, #28
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f42:	78f9      	ldrb	r1, [r7, #3]
 8006f44:	2300      	movs	r3, #0
 8006f46:	2200      	movs	r2, #0
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fd71 	bl	8008a30 <USBD_LL_Transmit>
 8006f4e:	e003      	b.n	8006f58 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e000      	b.n	8006f5e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f5c:	2302      	movs	r3, #2
  }
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f78:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 fd9c 	bl	8008abc <USBD_LL_GetRxDataSize>
 8006f84:	4602      	mov	r2, r0
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00d      	beq.n	8006fb2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006faa:	4611      	mov	r1, r2
 8006fac:	4798      	blx	r3

    return USBD_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e000      	b.n	8006fb4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006fb2:	2302      	movs	r3, #2
  }
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d014      	beq.n	8007000 <USBD_CDC_EP0_RxReady+0x44>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006fdc:	2bff      	cmp	r3, #255	@ 0xff
 8006fde:	d00f      	beq.n	8007000 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006fee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ff6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	22ff      	movs	r2, #255	@ 0xff
 8006ffc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2243      	movs	r2, #67	@ 0x43
 8007018:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800701a:	4b03      	ldr	r3, [pc, #12]	@ (8007028 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000094 	.word	0x20000094

0800702c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2243      	movs	r2, #67	@ 0x43
 8007038:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800703a:	4b03      	ldr	r3, [pc, #12]	@ (8007048 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	bc80      	pop	{r7}
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20000050 	.word	0x20000050

0800704c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2243      	movs	r2, #67	@ 0x43
 8007058:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800705a:	4b03      	ldr	r3, [pc, #12]	@ (8007068 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	200000d8 	.word	0x200000d8

0800706c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	220a      	movs	r2, #10
 8007078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800707a:	4b03      	ldr	r3, [pc, #12]	@ (8007088 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	2000000c 	.word	0x2000000c

0800708c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007096:	2302      	movs	r3, #2
 8007098:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr

080070b8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bc80      	pop	{r7}
 80070e8:	4770      	bx	lr

080070ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b085      	sub	sp, #20
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr

08007110 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800711e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007126:	2b00      	cmp	r3, #0
 8007128:	d017      	beq.n	800715a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7c1b      	ldrb	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d109      	bne.n	8007146 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800713c:	2101      	movs	r1, #1
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 fc99 	bl	8008a76 <USBD_LL_PrepareReceive>
 8007144:	e007      	b.n	8007156 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800714c:	2340      	movs	r3, #64	@ 0x40
 800714e:	2101      	movs	r1, #1
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 fc90 	bl	8008a76 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	e000      	b.n	800715c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800715a:	2302      	movs	r3, #2
  }
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	4613      	mov	r3, r2
 8007170:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007178:	2302      	movs	r3, #2
 800717a:	e01a      	b.n	80071b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	79fa      	ldrb	r2, [r7, #7]
 80071a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f001 fafe 	bl	80087ac <USBD_LL_Init>

  return USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d006      	beq.n	80071dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
 80071da:	e001      	b.n	80071e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071dc:	2302      	movs	r3, #2
 80071de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr

080071ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fb33 	bl	8008860 <USBD_LL_Start>

  return USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007224:	2302      	movs	r3, #2
 8007226:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	78fa      	ldrb	r2, [r7, #3]
 800723c:	4611      	mov	r1, r2
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	78fa      	ldrb	r2, [r7, #3]
 800726c:	4611      	mov	r1, r2
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	4798      	blx	r3

  return USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fed7 	bl	8008042 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80072b0:	f003 031f 	and.w	r3, r3, #31
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d016      	beq.n	80072e6 <USBD_LL_SetupStage+0x6a>
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d81c      	bhi.n	80072f6 <USBD_LL_SetupStage+0x7a>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <USBD_LL_SetupStage+0x4a>
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d008      	beq.n	80072d6 <USBD_LL_SetupStage+0x5a>
 80072c4:	e017      	b.n	80072f6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f9ca 	bl	8007668 <USBD_StdDevReq>
      break;
 80072d4:	e01a      	b.n	800730c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa2c 	bl	800773c <USBD_StdItfReq>
      break;
 80072e4:	e012      	b.n	800730c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa6c 	bl	80077cc <USBD_StdEPReq>
      break;
 80072f4:	e00a      	b.n	800730c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80072fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007300:	b2db      	uxtb	r3, r3
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 fb0b 	bl	8008920 <USBD_LL_StallEP>
      break;
 800730a:	bf00      	nop
  }

  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	460b      	mov	r3, r1
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007324:	7afb      	ldrb	r3, [r7, #11]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d14b      	bne.n	80073c2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007330:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007338:	2b03      	cmp	r3, #3
 800733a:	d134      	bne.n	80073a6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	429a      	cmp	r2, r3
 8007346:	d919      	bls.n	800737c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	1ad2      	subs	r2, r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800735e:	429a      	cmp	r2, r3
 8007360:	d203      	bcs.n	800736a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007366:	b29b      	uxth	r3, r3
 8007368:	e002      	b.n	8007370 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800736e:	b29b      	uxth	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 ff53 	bl	8008220 <USBD_CtlContinueRx>
 800737a:	e038      	b.n	80073ee <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800738e:	2b03      	cmp	r3, #3
 8007390:	d105      	bne.n	800739e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 ff50 	bl	8008244 <USBD_CtlSendStatus>
 80073a4:	e023      	b.n	80073ee <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80073ac:	2b05      	cmp	r3, #5
 80073ae:	d11e      	bne.n	80073ee <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80073b8:	2100      	movs	r1, #0
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f001 fab0 	bl	8008920 <USBD_LL_StallEP>
 80073c0:	e015      	b.n	80073ee <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00d      	beq.n	80073ea <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d108      	bne.n	80073ea <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	7afa      	ldrb	r2, [r7, #11]
 80073e2:	4611      	mov	r1, r2
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	4798      	blx	r3
 80073e8:	e001      	b.n	80073ee <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	e000      	b.n	80073f0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	460b      	mov	r3, r1
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007406:	7afb      	ldrb	r3, [r7, #11]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d17f      	bne.n	800750c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3314      	adds	r3, #20
 8007410:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007418:	2b02      	cmp	r3, #2
 800741a:	d15c      	bne.n	80074d6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	429a      	cmp	r2, r3
 8007426:	d915      	bls.n	8007454 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	1ad2      	subs	r2, r2, r3
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	b29b      	uxth	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 febd 	bl	80081c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007446:	2300      	movs	r3, #0
 8007448:	2200      	movs	r2, #0
 800744a:	2100      	movs	r1, #0
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f001 fb12 	bl	8008a76 <USBD_LL_PrepareReceive>
 8007452:	e04e      	b.n	80074f2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	6912      	ldr	r2, [r2, #16]
 800745c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007460:	fb01 f202 	mul.w	r2, r1, r2
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d11c      	bne.n	80074a4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007472:	429a      	cmp	r2, r3
 8007474:	d316      	bcc.n	80074a4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007480:	429a      	cmp	r2, r3
 8007482:	d20f      	bcs.n	80074a4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007484:	2200      	movs	r2, #0
 8007486:	2100      	movs	r1, #0
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fe99 	bl	80081c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007496:	2300      	movs	r3, #0
 8007498:	2200      	movs	r2, #0
 800749a:	2100      	movs	r1, #0
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f001 faea 	bl	8008a76 <USBD_LL_PrepareReceive>
 80074a2:	e026      	b.n	80074f2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d105      	bne.n	80074c6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80074c6:	2180      	movs	r1, #128	@ 0x80
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f001 fa29 	bl	8008920 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fecb 	bl	800826a <USBD_CtlReceiveStatus>
 80074d4:	e00d      	b.n	80074f2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074dc:	2b04      	cmp	r3, #4
 80074de:	d004      	beq.n	80074ea <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d103      	bne.n	80074f2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074ea:	2180      	movs	r1, #128	@ 0x80
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f001 fa17 	bl	8008920 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d11d      	bne.n	8007538 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff fe81 	bl	8007204 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800750a:	e015      	b.n	8007538 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00d      	beq.n	8007534 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800751e:	2b03      	cmp	r3, #3
 8007520:	d108      	bne.n	8007534 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	7afa      	ldrb	r2, [r7, #11]
 800752c:	4611      	mov	r1, r2
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	4798      	blx	r3
 8007532:	e001      	b.n	8007538 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007534:	2302      	movs	r3, #2
 8007536:	e000      	b.n	800753a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800754a:	2340      	movs	r3, #64	@ 0x40
 800754c:	2200      	movs	r2, #0
 800754e:	2100      	movs	r1, #0
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 f9a0 	bl	8008896 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2240      	movs	r2, #64	@ 0x40
 8007562:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007566:	2340      	movs	r3, #64	@ 0x40
 8007568:	2200      	movs	r2, #0
 800756a:	2180      	movs	r1, #128	@ 0x80
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 f992 	bl	8008896 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2240      	movs	r2, #64	@ 0x40
 800757c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6852      	ldr	r2, [r2, #4]
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	4611      	mov	r1, r2
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
  }

  return USBD_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	78fa      	ldrb	r2, [r7, #3]
 80075d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr

080075e2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2204      	movs	r2, #4
 80075fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007618:	2b04      	cmp	r3, #4
 800761a:	d105      	bne.n	8007628 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	bc80      	pop	{r7}
 8007632:	4770      	bx	lr

08007634 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007642:	2b03      	cmp	r3, #3
 8007644:	d10b      	bne.n	800765e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d005      	beq.n	800765e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800767e:	2b40      	cmp	r3, #64	@ 0x40
 8007680:	d005      	beq.n	800768e <USBD_StdDevReq+0x26>
 8007682:	2b40      	cmp	r3, #64	@ 0x40
 8007684:	d84f      	bhi.n	8007726 <USBD_StdDevReq+0xbe>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <USBD_StdDevReq+0x36>
 800768a:	2b20      	cmp	r3, #32
 800768c:	d14b      	bne.n	8007726 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	4798      	blx	r3
      break;
 800769c:	e048      	b.n	8007730 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	785b      	ldrb	r3, [r3, #1]
 80076a2:	2b09      	cmp	r3, #9
 80076a4:	d839      	bhi.n	800771a <USBD_StdDevReq+0xb2>
 80076a6:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <USBD_StdDevReq+0x44>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076fd 	.word	0x080076fd
 80076b0:	08007711 	.word	0x08007711
 80076b4:	0800771b 	.word	0x0800771b
 80076b8:	08007707 	.word	0x08007707
 80076bc:	0800771b 	.word	0x0800771b
 80076c0:	080076df 	.word	0x080076df
 80076c4:	080076d5 	.word	0x080076d5
 80076c8:	0800771b 	.word	0x0800771b
 80076cc:	080076f3 	.word	0x080076f3
 80076d0:	080076e9 	.word	0x080076e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f9dc 	bl	8007a94 <USBD_GetDescriptor>
          break;
 80076dc:	e022      	b.n	8007724 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fb3f 	bl	8007d64 <USBD_SetAddress>
          break;
 80076e6:	e01d      	b.n	8007724 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fb7e 	bl	8007dec <USBD_SetConfig>
          break;
 80076f0:	e018      	b.n	8007724 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fc07 	bl	8007f08 <USBD_GetConfig>
          break;
 80076fa:	e013      	b.n	8007724 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fc37 	bl	8007f72 <USBD_GetStatus>
          break;
 8007704:	e00e      	b.n	8007724 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fc65 	bl	8007fd8 <USBD_SetFeature>
          break;
 800770e:	e009      	b.n	8007724 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fc74 	bl	8008000 <USBD_ClrFeature>
          break;
 8007718:	e004      	b.n	8007724 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fcc9 	bl	80080b4 <USBD_CtlError>
          break;
 8007722:	bf00      	nop
      }
      break;
 8007724:	e004      	b.n	8007730 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fcc3 	bl	80080b4 <USBD_CtlError>
      break;
 800772e:	bf00      	nop
  }

  return ret;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop

0800773c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007752:	2b40      	cmp	r3, #64	@ 0x40
 8007754:	d005      	beq.n	8007762 <USBD_StdItfReq+0x26>
 8007756:	2b40      	cmp	r3, #64	@ 0x40
 8007758:	d82e      	bhi.n	80077b8 <USBD_StdItfReq+0x7c>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <USBD_StdItfReq+0x26>
 800775e:	2b20      	cmp	r3, #32
 8007760:	d12a      	bne.n	80077b8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007768:	3b01      	subs	r3, #1
 800776a:	2b02      	cmp	r3, #2
 800776c:	d81d      	bhi.n	80077aa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	889b      	ldrh	r3, [r3, #4]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b01      	cmp	r3, #1
 8007776:	d813      	bhi.n	80077a0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
 8007786:	4603      	mov	r3, r0
 8007788:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	88db      	ldrh	r3, [r3, #6]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d110      	bne.n	80077b4 <USBD_StdItfReq+0x78>
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10d      	bne.n	80077b4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fd53 	bl	8008244 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800779e:	e009      	b.n	80077b4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fc86 	bl	80080b4 <USBD_CtlError>
          break;
 80077a8:	e004      	b.n	80077b4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fc81 	bl	80080b4 <USBD_CtlError>
          break;
 80077b2:	e000      	b.n	80077b6 <USBD_StdItfReq+0x7a>
          break;
 80077b4:	bf00      	nop
      }
      break;
 80077b6:	e004      	b.n	80077c2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fc7a 	bl	80080b4 <USBD_CtlError>
      break;
 80077c0:	bf00      	nop
  }

  return USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	889b      	ldrh	r3, [r3, #4]
 80077de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077e8:	2b40      	cmp	r3, #64	@ 0x40
 80077ea:	d007      	beq.n	80077fc <USBD_StdEPReq+0x30>
 80077ec:	2b40      	cmp	r3, #64	@ 0x40
 80077ee:	f200 8146 	bhi.w	8007a7e <USBD_StdEPReq+0x2b2>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <USBD_StdEPReq+0x40>
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	f040 8141 	bne.w	8007a7e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
      break;
 800780a:	e13d      	b.n	8007a88 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007814:	2b20      	cmp	r3, #32
 8007816:	d10a      	bne.n	800782e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]

        return ret;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	e12d      	b.n	8007a8a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d007      	beq.n	8007846 <USBD_StdEPReq+0x7a>
 8007836:	2b03      	cmp	r3, #3
 8007838:	f300 811b 	bgt.w	8007a72 <USBD_StdEPReq+0x2a6>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d072      	beq.n	8007926 <USBD_StdEPReq+0x15a>
 8007840:	2b01      	cmp	r3, #1
 8007842:	d03a      	beq.n	80078ba <USBD_StdEPReq+0xee>
 8007844:	e115      	b.n	8007a72 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800784c:	2b02      	cmp	r3, #2
 800784e:	d002      	beq.n	8007856 <USBD_StdEPReq+0x8a>
 8007850:	2b03      	cmp	r3, #3
 8007852:	d015      	beq.n	8007880 <USBD_StdEPReq+0xb4>
 8007854:	e02b      	b.n	80078ae <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00c      	beq.n	8007876 <USBD_StdEPReq+0xaa>
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b80      	cmp	r3, #128	@ 0x80
 8007860:	d009      	beq.n	8007876 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 f85a 	bl	8008920 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800786c:	2180      	movs	r1, #128	@ 0x80
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 f856 	bl	8008920 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007874:	e020      	b.n	80078b8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fc1b 	bl	80080b4 <USBD_CtlError>
              break;
 800787e:	e01b      	b.n	80078b8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	885b      	ldrh	r3, [r3, #2]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10e      	bne.n	80078a6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00b      	beq.n	80078a6 <USBD_StdEPReq+0xda>
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b80      	cmp	r3, #128	@ 0x80
 8007892:	d008      	beq.n	80078a6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	88db      	ldrh	r3, [r3, #6]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 f83d 	bl	8008920 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fccc 	bl	8008244 <USBD_CtlSendStatus>

              break;
 80078ac:	e004      	b.n	80078b8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fbff 	bl	80080b4 <USBD_CtlError>
              break;
 80078b6:	bf00      	nop
          }
          break;
 80078b8:	e0e0      	b.n	8007a7c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d002      	beq.n	80078ca <USBD_StdEPReq+0xfe>
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d015      	beq.n	80078f4 <USBD_StdEPReq+0x128>
 80078c8:	e026      	b.n	8007918 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00c      	beq.n	80078ea <USBD_StdEPReq+0x11e>
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b80      	cmp	r3, #128	@ 0x80
 80078d4:	d009      	beq.n	80078ea <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f001 f820 	bl	8008920 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078e0:	2180      	movs	r1, #128	@ 0x80
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 f81c 	bl	8008920 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078e8:	e01c      	b.n	8007924 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fbe1 	bl	80080b4 <USBD_CtlError>
              break;
 80078f2:	e017      	b.n	8007924 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	885b      	ldrh	r3, [r3, #2]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d112      	bne.n	8007922 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 f827 	bl	800895e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fc97 	bl	8008244 <USBD_CtlSendStatus>
              }
              break;
 8007916:	e004      	b.n	8007922 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fbca 	bl	80080b4 <USBD_CtlError>
              break;
 8007920:	e000      	b.n	8007924 <USBD_StdEPReq+0x158>
              break;
 8007922:	bf00      	nop
          }
          break;
 8007924:	e0aa      	b.n	8007a7c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800792c:	2b02      	cmp	r3, #2
 800792e:	d002      	beq.n	8007936 <USBD_StdEPReq+0x16a>
 8007930:	2b03      	cmp	r3, #3
 8007932:	d032      	beq.n	800799a <USBD_StdEPReq+0x1ce>
 8007934:	e097      	b.n	8007a66 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d007      	beq.n	800794c <USBD_StdEPReq+0x180>
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	2b80      	cmp	r3, #128	@ 0x80
 8007940:	d004      	beq.n	800794c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fbb5 	bl	80080b4 <USBD_CtlError>
                break;
 800794a:	e091      	b.n	8007a70 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800794c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007950:	2b00      	cmp	r3, #0
 8007952:	da0b      	bge.n	800796c <USBD_StdEPReq+0x1a0>
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	3310      	adds	r3, #16
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	4413      	add	r3, r2
 8007968:	3304      	adds	r3, #4
 800796a:	e00b      	b.n	8007984 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	4413      	add	r3, r2
 8007982:	3304      	adds	r3, #4
 8007984:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2202      	movs	r2, #2
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fbf8 	bl	8008188 <USBD_CtlSendData>
              break;
 8007998:	e06a      	b.n	8007a70 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800799a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	da11      	bge.n	80079c6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	f003 020f 	and.w	r2, r3, #15
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	440b      	add	r3, r1
 80079b4:	3318      	adds	r3, #24
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d117      	bne.n	80079ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fb78 	bl	80080b4 <USBD_CtlError>
                  break;
 80079c4:	e054      	b.n	8007a70 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	440b      	add	r3, r1
 80079d8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d104      	bne.n	80079ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fb65 	bl	80080b4 <USBD_CtlError>
                  break;
 80079ea:	e041      	b.n	8007a70 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	da0b      	bge.n	8007a0c <USBD_StdEPReq+0x240>
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	3310      	adds	r3, #16
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	4413      	add	r3, r2
 8007a08:	3304      	adds	r3, #4
 8007a0a:	e00b      	b.n	8007a24 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	4413      	add	r3, r2
 8007a22:	3304      	adds	r3, #4
 8007a24:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <USBD_StdEPReq+0x266>
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b80      	cmp	r3, #128	@ 0x80
 8007a30:	d103      	bne.n	8007a3a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	e00e      	b.n	8007a58 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 ffac 	bl	800899c <USBD_LL_IsStallEP>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	e002      	b.n	8007a58 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fb92 	bl	8008188 <USBD_CtlSendData>
              break;
 8007a64:	e004      	b.n	8007a70 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fb23 	bl	80080b4 <USBD_CtlError>
              break;
 8007a6e:	bf00      	nop
          }
          break;
 8007a70:	e004      	b.n	8007a7c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fb1d 	bl	80080b4 <USBD_CtlError>
          break;
 8007a7a:	bf00      	nop
      }
      break;
 8007a7c:	e004      	b.n	8007a88 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fb17 	bl	80080b4 <USBD_CtlError>
      break;
 8007a86:	bf00      	nop
  }

  return ret;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	2b06      	cmp	r3, #6
 8007ab6:	f200 8128 	bhi.w	8007d0a <USBD_GetDescriptor+0x276>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <USBD_GetDescriptor+0x2c>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007add 	.word	0x08007add
 8007ac4:	08007af5 	.word	0x08007af5
 8007ac8:	08007b35 	.word	0x08007b35
 8007acc:	08007d0b 	.word	0x08007d0b
 8007ad0:	08007d0b 	.word	0x08007d0b
 8007ad4:	08007cab 	.word	0x08007cab
 8007ad8:	08007cd7 	.word	0x08007cd7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	7c12      	ldrb	r2, [r2, #16]
 8007ae8:	f107 0108 	add.w	r1, r7, #8
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
 8007af0:	60f8      	str	r0, [r7, #12]
      break;
 8007af2:	e112      	b.n	8007d1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	7c1b      	ldrb	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10d      	bne.n	8007b18 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b04:	f107 0208 	add.w	r2, r7, #8
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4798      	blx	r3
 8007b0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3301      	adds	r3, #1
 8007b12:	2202      	movs	r2, #2
 8007b14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b16:	e100      	b.n	8007d1a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b20:	f107 0208 	add.w	r2, r7, #8
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	2202      	movs	r2, #2
 8007b30:	701a      	strb	r2, [r3, #0]
      break;
 8007b32:	e0f2      	b.n	8007d1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	885b      	ldrh	r3, [r3, #2]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b05      	cmp	r3, #5
 8007b3c:	f200 80ac 	bhi.w	8007c98 <USBD_GetDescriptor+0x204>
 8007b40:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <USBD_GetDescriptor+0xb4>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007b61 	.word	0x08007b61
 8007b4c:	08007b95 	.word	0x08007b95
 8007b50:	08007bc9 	.word	0x08007bc9
 8007b54:	08007bfd 	.word	0x08007bfd
 8007b58:	08007c31 	.word	0x08007c31
 8007b5c:	08007c65 	.word	0x08007c65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	7c12      	ldrb	r2, [r2, #16]
 8007b78:	f107 0108 	add.w	r1, r7, #8
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b82:	e091      	b.n	8007ca8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa94 	bl	80080b4 <USBD_CtlError>
            err++;
 8007b8c:	7afb      	ldrb	r3, [r7, #11]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	72fb      	strb	r3, [r7, #11]
          break;
 8007b92:	e089      	b.n	8007ca8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	7c12      	ldrb	r2, [r2, #16]
 8007bac:	f107 0108 	add.w	r1, r7, #8
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bb6:	e077      	b.n	8007ca8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa7a 	bl	80080b4 <USBD_CtlError>
            err++;
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bc6:	e06f      	b.n	8007ca8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7c12      	ldrb	r2, [r2, #16]
 8007be0:	f107 0108 	add.w	r1, r7, #8
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
 8007be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bea:	e05d      	b.n	8007ca8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fa60 	bl	80080b4 <USBD_CtlError>
            err++;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bfa:	e055      	b.n	8007ca8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7c12      	ldrb	r2, [r2, #16]
 8007c14:	f107 0108 	add.w	r1, r7, #8
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
 8007c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1e:	e043      	b.n	8007ca8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa46 	bl	80080b4 <USBD_CtlError>
            err++;
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2e:	e03b      	b.n	8007ca8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00b      	beq.n	8007c54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	7c12      	ldrb	r2, [r2, #16]
 8007c48:	f107 0108 	add.w	r1, r7, #8
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c52:	e029      	b.n	8007ca8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa2c 	bl	80080b4 <USBD_CtlError>
            err++;
 8007c5c:	7afb      	ldrb	r3, [r7, #11]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	72fb      	strb	r3, [r7, #11]
          break;
 8007c62:	e021      	b.n	8007ca8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7c12      	ldrb	r2, [r2, #16]
 8007c7c:	f107 0108 	add.w	r1, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c86:	e00f      	b.n	8007ca8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa12 	bl	80080b4 <USBD_CtlError>
            err++;
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	3301      	adds	r3, #1
 8007c94:	72fb      	strb	r3, [r7, #11]
          break;
 8007c96:	e007      	b.n	8007ca8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa0a 	bl	80080b4 <USBD_CtlError>
          err++;
 8007ca0:	7afb      	ldrb	r3, [r7, #11]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007ca6:	e038      	b.n	8007d1a <USBD_GetDescriptor+0x286>
 8007ca8:	e037      	b.n	8007d1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	7c1b      	ldrb	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d109      	bne.n	8007cc6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cba:	f107 0208 	add.w	r2, r7, #8
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4798      	blx	r3
 8007cc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cc4:	e029      	b.n	8007d1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f9f3 	bl	80080b4 <USBD_CtlError>
        err++;
 8007cce:	7afb      	ldrb	r3, [r7, #11]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd4:	e021      	b.n	8007d1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7c1b      	ldrb	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10d      	bne.n	8007cfa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce6:	f107 0208 	add.w	r2, r7, #8
 8007cea:	4610      	mov	r0, r2
 8007cec:	4798      	blx	r3
 8007cee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	2207      	movs	r2, #7
 8007cf6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cf8:	e00f      	b.n	8007d1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f9d9 	bl	80080b4 <USBD_CtlError>
        err++;
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	3301      	adds	r3, #1
 8007d06:	72fb      	strb	r3, [r7, #11]
      break;
 8007d08:	e007      	b.n	8007d1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f9d1 	bl	80080b4 <USBD_CtlError>
      err++;
 8007d12:	7afb      	ldrb	r3, [r7, #11]
 8007d14:	3301      	adds	r3, #1
 8007d16:	72fb      	strb	r3, [r7, #11]
      break;
 8007d18:	bf00      	nop
  }

  if (err != 0U)
 8007d1a:	7afb      	ldrb	r3, [r7, #11]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d11c      	bne.n	8007d5a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d20:	893b      	ldrh	r3, [r7, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d011      	beq.n	8007d4a <USBD_GetDescriptor+0x2b6>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	88db      	ldrh	r3, [r3, #6]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00d      	beq.n	8007d4a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	88da      	ldrh	r2, [r3, #6]
 8007d32:	893b      	ldrh	r3, [r7, #8]
 8007d34:	4293      	cmp	r3, r2
 8007d36:	bf28      	it	cs
 8007d38:	4613      	movcs	r3, r2
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d3e:	893b      	ldrh	r3, [r7, #8]
 8007d40:	461a      	mov	r2, r3
 8007d42:	68f9      	ldr	r1, [r7, #12]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa1f 	bl	8008188 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	88db      	ldrh	r3, [r3, #6]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d104      	bne.n	8007d5c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa76 	bl	8008244 <USBD_CtlSendStatus>
 8007d58:	e000      	b.n	8007d5c <USBD_GetDescriptor+0x2c8>
    return;
 8007d5a:	bf00      	nop
    }
  }
}
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop

08007d64 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	889b      	ldrh	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d130      	bne.n	8007dd8 <USBD_SetAddress+0x74>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	88db      	ldrh	r3, [r3, #6]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d12c      	bne.n	8007dd8 <USBD_SetAddress+0x74>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	885b      	ldrh	r3, [r3, #2]
 8007d82:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d84:	d828      	bhi.n	8007dd8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	885b      	ldrh	r3, [r3, #2]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d104      	bne.n	8007da6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f988 	bl	80080b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da4:	e01d      	b.n	8007de2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	7bfa      	ldrb	r2, [r7, #15]
 8007daa:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fe1d 	bl	80089f2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fa43 	bl	8008244 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dcc:	e009      	b.n	8007de2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd6:	e004      	b.n	8007de2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f96a 	bl	80080b4 <USBD_CtlError>
  }
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	885b      	ldrh	r3, [r3, #2]
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	4b41      	ldr	r3, [pc, #260]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007dfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e00:	4b40      	ldr	r3, [pc, #256]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d904      	bls.n	8007e12 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f952 	bl	80080b4 <USBD_CtlError>
 8007e10:	e075      	b.n	8007efe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d002      	beq.n	8007e22 <USBD_SetConfig+0x36>
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d023      	beq.n	8007e68 <USBD_SetConfig+0x7c>
 8007e20:	e062      	b.n	8007ee8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e22:	4b38      	ldr	r3, [pc, #224]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d01a      	beq.n	8007e60 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e2a:	4b36      	ldr	r3, [pc, #216]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2203      	movs	r2, #3
 8007e38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e3c:	4b31      	ldr	r3, [pc, #196]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff f9e8 	bl	8007218 <USBD_SetClassConfig>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d104      	bne.n	8007e58 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f92f 	bl	80080b4 <USBD_CtlError>
            return;
 8007e56:	e052      	b.n	8007efe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f9f3 	bl	8008244 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e5e:	e04e      	b.n	8007efe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f9ef 	bl	8008244 <USBD_CtlSendStatus>
        break;
 8007e66:	e04a      	b.n	8007efe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e68:	4b26      	ldr	r3, [pc, #152]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d112      	bne.n	8007e96 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007e78:	4b22      	ldr	r3, [pc, #136]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e82:	4b20      	ldr	r3, [pc, #128]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff f9e4 	bl	8007256 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9d8 	bl	8008244 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e94:	e033      	b.n	8007efe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e96:	4b1b      	ldr	r3, [pc, #108]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d01d      	beq.n	8007ee0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff f9d2 	bl	8007256 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007eb2:	4b14      	ldr	r3, [pc, #80]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ebc:	4b11      	ldr	r3, [pc, #68]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff f9a8 	bl	8007218 <USBD_SetClassConfig>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d104      	bne.n	8007ed8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f8ef 	bl	80080b4 <USBD_CtlError>
            return;
 8007ed6:	e012      	b.n	8007efe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9b3 	bl	8008244 <USBD_CtlSendStatus>
        break;
 8007ede:	e00e      	b.n	8007efe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f9af 	bl	8008244 <USBD_CtlSendStatus>
        break;
 8007ee6:	e00a      	b.n	8007efe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f8e2 	bl	80080b4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ef0:	4b04      	ldr	r3, [pc, #16]	@ (8007f04 <USBD_SetConfig+0x118>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff f9ad 	bl	8007256 <USBD_ClrClassConfig>
        break;
 8007efc:	bf00      	nop
    }
  }
}
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	200003b8 	.word	0x200003b8

08007f08 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	88db      	ldrh	r3, [r3, #6]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d004      	beq.n	8007f24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f8c9 	bl	80080b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f22:	e022      	b.n	8007f6a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	dc02      	bgt.n	8007f34 <USBD_GetConfig+0x2c>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dc03      	bgt.n	8007f3a <USBD_GetConfig+0x32>
 8007f32:	e015      	b.n	8007f60 <USBD_GetConfig+0x58>
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d00b      	beq.n	8007f50 <USBD_GetConfig+0x48>
 8007f38:	e012      	b.n	8007f60 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3308      	adds	r3, #8
 8007f44:	2201      	movs	r2, #1
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f91d 	bl	8008188 <USBD_CtlSendData>
        break;
 8007f4e:	e00c      	b.n	8007f6a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3304      	adds	r3, #4
 8007f54:	2201      	movs	r2, #1
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f915 	bl	8008188 <USBD_CtlSendData>
        break;
 8007f5e:	e004      	b.n	8007f6a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f8a6 	bl	80080b4 <USBD_CtlError>
        break;
 8007f68:	bf00      	nop
}
 8007f6a:	bf00      	nop
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f82:	3b01      	subs	r3, #1
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d81e      	bhi.n	8007fc6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	88db      	ldrh	r3, [r3, #6]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d004      	beq.n	8007f9a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f88e 	bl	80080b4 <USBD_CtlError>
        break;
 8007f98:	e01a      	b.n	8007fd0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f043 0202 	orr.w	r2, r3, #2
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	330c      	adds	r3, #12
 8007fba:	2202      	movs	r2, #2
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f8e2 	bl	8008188 <USBD_CtlSendData>
      break;
 8007fc4:	e004      	b.n	8007fd0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f873 	bl	80080b4 <USBD_CtlError>
      break;
 8007fce:	bf00      	nop
  }
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	885b      	ldrh	r3, [r3, #2]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d106      	bne.n	8007ff8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f926 	bl	8008244 <USBD_CtlSendStatus>
  }
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008010:	3b01      	subs	r3, #1
 8008012:	2b02      	cmp	r3, #2
 8008014:	d80b      	bhi.n	800802e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	885b      	ldrh	r3, [r3, #2]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d10c      	bne.n	8008038 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f90c 	bl	8008244 <USBD_CtlSendStatus>
      }
      break;
 800802c:	e004      	b.n	8008038 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f83f 	bl	80080b4 <USBD_CtlError>
      break;
 8008036:	e000      	b.n	800803a <USBD_ClrFeature+0x3a>
      break;
 8008038:	bf00      	nop
  }
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781a      	ldrb	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	785a      	ldrb	r2, [r3, #1]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	3302      	adds	r3, #2
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	3303      	adds	r3, #3
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	021b      	lsls	r3, r3, #8
 800806c:	b29b      	uxth	r3, r3
 800806e:	4413      	add	r3, r2
 8008070:	b29a      	uxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	3304      	adds	r3, #4
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	3305      	adds	r3, #5
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	b29b      	uxth	r3, r3
 8008088:	4413      	add	r3, r2
 800808a:	b29a      	uxth	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	3306      	adds	r3, #6
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	3307      	adds	r3, #7
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	4413      	add	r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	80da      	strh	r2, [r3, #6]

}
 80080aa:	bf00      	nop
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bc80      	pop	{r7}
 80080b2:	4770      	bx	lr

080080b4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80080be:	2180      	movs	r1, #128	@ 0x80
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fc2d 	bl	8008920 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80080c6:	2100      	movs	r1, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fc29 	bl	8008920 <USBD_LL_StallEP>
}
 80080ce:	bf00      	nop
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b086      	sub	sp, #24
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d032      	beq.n	8008152 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 f834 	bl	800815a <USBD_GetLen>
 80080f2:	4603      	mov	r3, r0
 80080f4:	3301      	adds	r3, #1
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	75fa      	strb	r2, [r7, #23]
 8008106:	461a      	mov	r2, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4413      	add	r3, r2
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	7812      	ldrb	r2, [r2, #0]
 8008110:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	75fa      	strb	r2, [r7, #23]
 8008118:	461a      	mov	r2, r3
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	4413      	add	r3, r2
 800811e:	2203      	movs	r2, #3
 8008120:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008122:	e012      	b.n	800814a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	60fa      	str	r2, [r7, #12]
 800812a:	7dfa      	ldrb	r2, [r7, #23]
 800812c:	1c51      	adds	r1, r2, #1
 800812e:	75f9      	strb	r1, [r7, #23]
 8008130:	4611      	mov	r1, r2
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	440a      	add	r2, r1
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	75fa      	strb	r2, [r7, #23]
 8008140:	461a      	mov	r2, r3
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	4413      	add	r3, r2
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e8      	bne.n	8008124 <USBD_GetString+0x4e>
    }
  }
}
 8008152:	bf00      	nop
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008166:	e005      	b.n	8008174 <USBD_GetLen+0x1a>
  {
    len++;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	3301      	adds	r3, #1
 800816c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3301      	adds	r3, #1
 8008172:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1f5      	bne.n	8008168 <USBD_GetLen+0xe>
  }

  return len;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	bc80      	pop	{r7}
 8008186:	4770      	bx	lr

08008188 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2202      	movs	r2, #2
 800819a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800819e:	88fa      	ldrh	r2, [r7, #6]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80081a4:	88fa      	ldrh	r2, [r7, #6]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	2100      	movs	r1, #0
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 fc3d 	bl	8008a30 <USBD_LL_Transmit>

  return USBD_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	2100      	movs	r1, #0
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 fc2b 	bl	8008a30 <USBD_LL_Transmit>

  return USBD_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2203      	movs	r2, #3
 80081f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80081fa:	88fa      	ldrh	r2, [r7, #6]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008202:	88fa      	ldrh	r2, [r7, #6]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	2100      	movs	r1, #0
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 fc30 	bl	8008a76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	4613      	mov	r3, r2
 800822c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	2100      	movs	r1, #0
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 fc1e 	bl	8008a76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2204      	movs	r2, #4
 8008250:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008254:	2300      	movs	r3, #0
 8008256:	2200      	movs	r2, #0
 8008258:	2100      	movs	r1, #0
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fbe8 	bl	8008a30 <USBD_LL_Transmit>

  return USBD_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2205      	movs	r2, #5
 8008276:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800827a:	2300      	movs	r3, #0
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fbf8 	bl	8008a76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008294:	2200      	movs	r2, #0
 8008296:	4912      	ldr	r1, [pc, #72]	@ (80082e0 <MX_USB_DEVICE_Init+0x50>)
 8008298:	4812      	ldr	r0, [pc, #72]	@ (80082e4 <MX_USB_DEVICE_Init+0x54>)
 800829a:	f7fe ff63 	bl	8007164 <USBD_Init>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082a4:	f7f8 fd2e 	bl	8000d04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082a8:	490f      	ldr	r1, [pc, #60]	@ (80082e8 <MX_USB_DEVICE_Init+0x58>)
 80082aa:	480e      	ldr	r0, [pc, #56]	@ (80082e4 <MX_USB_DEVICE_Init+0x54>)
 80082ac:	f7fe ff85 	bl	80071ba <USBD_RegisterClass>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082b6:	f7f8 fd25 	bl	8000d04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082ba:	490c      	ldr	r1, [pc, #48]	@ (80082ec <MX_USB_DEVICE_Init+0x5c>)
 80082bc:	4809      	ldr	r0, [pc, #36]	@ (80082e4 <MX_USB_DEVICE_Init+0x54>)
 80082be:	f7fe fee5 	bl	800708c <USBD_CDC_RegisterInterface>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082c8:	f7f8 fd1c 	bl	8000d04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082cc:	4805      	ldr	r0, [pc, #20]	@ (80082e4 <MX_USB_DEVICE_Init+0x54>)
 80082ce:	f7fe ff8d 	bl	80071ec <USBD_Start>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082d8:	f7f8 fd14 	bl	8000d04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082dc:	bf00      	nop
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	2000012c 	.word	0x2000012c
 80082e4:	200003bc 	.word	0x200003bc
 80082e8:	20000018 	.word	0x20000018
 80082ec:	2000011c 	.word	0x2000011c

080082f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082f4:	2200      	movs	r2, #0
 80082f6:	4905      	ldr	r1, [pc, #20]	@ (800830c <CDC_Init_FS+0x1c>)
 80082f8:	4805      	ldr	r0, [pc, #20]	@ (8008310 <CDC_Init_FS+0x20>)
 80082fa:	f7fe fedd 	bl	80070b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082fe:	4905      	ldr	r1, [pc, #20]	@ (8008314 <CDC_Init_FS+0x24>)
 8008300:	4803      	ldr	r0, [pc, #12]	@ (8008310 <CDC_Init_FS+0x20>)
 8008302:	f7fe fef2 	bl	80070ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008306:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008308:	4618      	mov	r0, r3
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20000a80 	.word	0x20000a80
 8008310:	200003bc 	.word	0x200003bc
 8008314:	20000680 	.word	0x20000680

08008318 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008318:	b480      	push	{r7}
 800831a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800831c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800831e:	4618      	mov	r0, r3
 8008320:	46bd      	mov	sp, r7
 8008322:	bc80      	pop	{r7}
 8008324:	4770      	bx	lr
	...

08008328 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	71fb      	strb	r3, [r7, #7]
 8008334:	4613      	mov	r3, r2
 8008336:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	2b23      	cmp	r3, #35	@ 0x23
 800833c:	d84a      	bhi.n	80083d4 <CDC_Control_FS+0xac>
 800833e:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <CDC_Control_FS+0x1c>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	080083d5 	.word	0x080083d5
 8008348:	080083d5 	.word	0x080083d5
 800834c:	080083d5 	.word	0x080083d5
 8008350:	080083d5 	.word	0x080083d5
 8008354:	080083d5 	.word	0x080083d5
 8008358:	080083d5 	.word	0x080083d5
 800835c:	080083d5 	.word	0x080083d5
 8008360:	080083d5 	.word	0x080083d5
 8008364:	080083d5 	.word	0x080083d5
 8008368:	080083d5 	.word	0x080083d5
 800836c:	080083d5 	.word	0x080083d5
 8008370:	080083d5 	.word	0x080083d5
 8008374:	080083d5 	.word	0x080083d5
 8008378:	080083d5 	.word	0x080083d5
 800837c:	080083d5 	.word	0x080083d5
 8008380:	080083d5 	.word	0x080083d5
 8008384:	080083d5 	.word	0x080083d5
 8008388:	080083d5 	.word	0x080083d5
 800838c:	080083d5 	.word	0x080083d5
 8008390:	080083d5 	.word	0x080083d5
 8008394:	080083d5 	.word	0x080083d5
 8008398:	080083d5 	.word	0x080083d5
 800839c:	080083d5 	.word	0x080083d5
 80083a0:	080083d5 	.word	0x080083d5
 80083a4:	080083d5 	.word	0x080083d5
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	080083d5 	.word	0x080083d5
 80083b0:	080083d5 	.word	0x080083d5
 80083b4:	080083d5 	.word	0x080083d5
 80083b8:	080083d5 	.word	0x080083d5
 80083bc:	080083d5 	.word	0x080083d5
 80083c0:	080083d5 	.word	0x080083d5
 80083c4:	080083d5 	.word	0x080083d5
 80083c8:	080083d5 	.word	0x080083d5
 80083cc:	080083d5 	.word	0x080083d5
 80083d0:	080083d5 	.word	0x080083d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083d4:	bf00      	nop
  }

  return (USBD_OK);
 80083d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop

080083e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4805      	ldr	r0, [pc, #20]	@ (8008408 <CDC_Receive_FS+0x24>)
 80083f2:	f7fe fe7a 	bl	80070ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083f6:	4804      	ldr	r0, [pc, #16]	@ (8008408 <CDC_Receive_FS+0x24>)
 80083f8:	f7fe fe8a 	bl	8007110 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	200003bc 	.word	0x200003bc

0800840c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2212      	movs	r2, #18
 800841c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800841e:	4b03      	ldr	r3, [pc, #12]	@ (800842c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	20000148 	.word	0x20000148

08008430 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	6039      	str	r1, [r7, #0]
 800843a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2204      	movs	r2, #4
 8008440:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008442:	4b03      	ldr	r3, [pc, #12]	@ (8008450 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008444:	4618      	mov	r0, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	2000015c 	.word	0x2000015c

08008454 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d105      	bne.n	8008472 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	4907      	ldr	r1, [pc, #28]	@ (8008488 <USBD_FS_ProductStrDescriptor+0x34>)
 800846a:	4808      	ldr	r0, [pc, #32]	@ (800848c <USBD_FS_ProductStrDescriptor+0x38>)
 800846c:	f7ff fe33 	bl	80080d6 <USBD_GetString>
 8008470:	e004      	b.n	800847c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	4904      	ldr	r1, [pc, #16]	@ (8008488 <USBD_FS_ProductStrDescriptor+0x34>)
 8008476:	4805      	ldr	r0, [pc, #20]	@ (800848c <USBD_FS_ProductStrDescriptor+0x38>)
 8008478:	f7ff fe2d 	bl	80080d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800847c:	4b02      	ldr	r3, [pc, #8]	@ (8008488 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000e80 	.word	0x20000e80
 800848c:	0800b4b0 	.word	0x0800b4b0

08008490 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	4904      	ldr	r1, [pc, #16]	@ (80084b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084a0:	4804      	ldr	r0, [pc, #16]	@ (80084b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084a2:	f7ff fe18 	bl	80080d6 <USBD_GetString>
  return USBD_StrDesc;
 80084a6:	4b02      	ldr	r3, [pc, #8]	@ (80084b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000e80 	.word	0x20000e80
 80084b4:	0800b4c4 	.word	0x0800b4c4

080084b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	221a      	movs	r2, #26
 80084c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084ca:	f000 f843 	bl	8008554 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084ce:	4b02      	ldr	r3, [pc, #8]	@ (80084d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20000160 	.word	0x20000160

080084dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	6039      	str	r1, [r7, #0]
 80084e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	4907      	ldr	r1, [pc, #28]	@ (8008510 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084f2:	4808      	ldr	r0, [pc, #32]	@ (8008514 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084f4:	f7ff fdef 	bl	80080d6 <USBD_GetString>
 80084f8:	e004      	b.n	8008504 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	4904      	ldr	r1, [pc, #16]	@ (8008510 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084fe:	4805      	ldr	r0, [pc, #20]	@ (8008514 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008500:	f7ff fde9 	bl	80080d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008504:	4b02      	ldr	r3, [pc, #8]	@ (8008510 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000e80 	.word	0x20000e80
 8008514:	0800b4d8 	.word	0x0800b4d8

08008518 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	4603      	mov	r3, r0
 8008520:	6039      	str	r1, [r7, #0]
 8008522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d105      	bne.n	8008536 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	4907      	ldr	r1, [pc, #28]	@ (800854c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800852e:	4808      	ldr	r0, [pc, #32]	@ (8008550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008530:	f7ff fdd1 	bl	80080d6 <USBD_GetString>
 8008534:	e004      	b.n	8008540 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4904      	ldr	r1, [pc, #16]	@ (800854c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800853a:	4805      	ldr	r0, [pc, #20]	@ (8008550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800853c:	f7ff fdcb 	bl	80080d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008540:	4b02      	ldr	r3, [pc, #8]	@ (800854c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000e80 	.word	0x20000e80
 8008550:	0800b4e4 	.word	0x0800b4e4

08008554 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800855a:	4b0f      	ldr	r3, [pc, #60]	@ (8008598 <Get_SerialNum+0x44>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008560:	4b0e      	ldr	r3, [pc, #56]	@ (800859c <Get_SerialNum+0x48>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008566:	4b0e      	ldr	r3, [pc, #56]	@ (80085a0 <Get_SerialNum+0x4c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4413      	add	r3, r2
 8008572:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d009      	beq.n	800858e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800857a:	2208      	movs	r2, #8
 800857c:	4909      	ldr	r1, [pc, #36]	@ (80085a4 <Get_SerialNum+0x50>)
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 f814 	bl	80085ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008584:	2204      	movs	r2, #4
 8008586:	4908      	ldr	r1, [pc, #32]	@ (80085a8 <Get_SerialNum+0x54>)
 8008588:	68b8      	ldr	r0, [r7, #8]
 800858a:	f000 f80f 	bl	80085ac <IntToUnicode>
  }
}
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	1ffff7e8 	.word	0x1ffff7e8
 800859c:	1ffff7ec 	.word	0x1ffff7ec
 80085a0:	1ffff7f0 	.word	0x1ffff7f0
 80085a4:	20000162 	.word	0x20000162
 80085a8:	20000172 	.word	0x20000172

080085ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	4613      	mov	r3, r2
 80085b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085be:	2300      	movs	r3, #0
 80085c0:	75fb      	strb	r3, [r7, #23]
 80085c2:	e027      	b.n	8008614 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	0f1b      	lsrs	r3, r3, #28
 80085c8:	2b09      	cmp	r3, #9
 80085ca:	d80b      	bhi.n	80085e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	0f1b      	lsrs	r3, r3, #28
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	4619      	mov	r1, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	440b      	add	r3, r1
 80085dc:	3230      	adds	r2, #48	@ 0x30
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	e00a      	b.n	80085fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	0f1b      	lsrs	r3, r3, #28
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	4619      	mov	r1, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	440b      	add	r3, r1
 80085f4:	3237      	adds	r2, #55	@ 0x37
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	3301      	adds	r3, #1
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	4413      	add	r3, r2
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	3301      	adds	r3, #1
 8008612:	75fb      	strb	r3, [r7, #23]
 8008614:	7dfa      	ldrb	r2, [r7, #23]
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	429a      	cmp	r2, r3
 800861a:	d3d3      	bcc.n	80085c4 <IntToUnicode+0x18>
  }
}
 800861c:	bf00      	nop
 800861e:	bf00      	nop
 8008620:	371c      	adds	r7, #28
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr

08008628 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a0d      	ldr	r2, [pc, #52]	@ (800866c <HAL_PCD_MspInit+0x44>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d113      	bne.n	8008662 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800863a:	4b0d      	ldr	r3, [pc, #52]	@ (8008670 <HAL_PCD_MspInit+0x48>)
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	4a0c      	ldr	r2, [pc, #48]	@ (8008670 <HAL_PCD_MspInit+0x48>)
 8008640:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008644:	61d3      	str	r3, [r2, #28]
 8008646:	4b0a      	ldr	r3, [pc, #40]	@ (8008670 <HAL_PCD_MspInit+0x48>)
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008652:	2200      	movs	r2, #0
 8008654:	2100      	movs	r1, #0
 8008656:	2014      	movs	r0, #20
 8008658:	f7f8 feeb 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800865c:	2014      	movs	r0, #20
 800865e:	f7f8 ff04 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	40005c00 	.word	0x40005c00
 8008670:	40021000 	.word	0x40021000

08008674 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f7fe fdf6 	bl	800727c <USBD_LL_SetupStage>
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	6879      	ldr	r1, [r7, #4]
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	440b      	add	r3, r1
 80086b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	4619      	mov	r1, r3
 80086c2:	f7fe fe28 	bl	8007316 <USBD_LL_DataOutStage>
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80086e0:	78fa      	ldrb	r2, [r7, #3]
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	440b      	add	r3, r1
 80086ee:	3324      	adds	r3, #36	@ 0x24
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	4619      	mov	r1, r3
 80086f6:	f7fe fe7f 	bl	80073f8 <USBD_LL_DataInStage>
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe ff8f 	bl	8007634 <USBD_LL_SOF>
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008726:	2301      	movs	r3, #1
 8008728:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	799b      	ldrb	r3, [r3, #6]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d001      	beq.n	8008736 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008732:	f7f8 fae7 	bl	8000d04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800873c:	7bfa      	ldrb	r2, [r7, #15]
 800873e:	4611      	mov	r1, r2
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe ff3f 	bl	80075c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe fef8 	bl	8007542 <USBD_LL_Reset>
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800876a:	4618      	mov	r0, r3
 800876c:	f7fe ff39 	bl	80075e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7a9b      	ldrb	r3, [r3, #10]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008778:	4b04      	ldr	r3, [pc, #16]	@ (800878c <HAL_PCD_SuspendCallback+0x30>)
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	4a03      	ldr	r2, [pc, #12]	@ (800878c <HAL_PCD_SuspendCallback+0x30>)
 800877e:	f043 0306 	orr.w	r3, r3, #6
 8008782:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	e000ed00 	.word	0xe000ed00

08008790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe ff33 	bl	800760a <USBD_LL_Resume>
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80087b4:	4a28      	ldr	r2, [pc, #160]	@ (8008858 <USBD_LL_Init+0xac>)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a26      	ldr	r2, [pc, #152]	@ (8008858 <USBD_LL_Init+0xac>)
 80087c0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087c4:	4b24      	ldr	r3, [pc, #144]	@ (8008858 <USBD_LL_Init+0xac>)
 80087c6:	4a25      	ldr	r2, [pc, #148]	@ (800885c <USBD_LL_Init+0xb0>)
 80087c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087ca:	4b23      	ldr	r3, [pc, #140]	@ (8008858 <USBD_LL_Init+0xac>)
 80087cc:	2208      	movs	r2, #8
 80087ce:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087d0:	4b21      	ldr	r3, [pc, #132]	@ (8008858 <USBD_LL_Init+0xac>)
 80087d2:	2202      	movs	r2, #2
 80087d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087d6:	4b20      	ldr	r3, [pc, #128]	@ (8008858 <USBD_LL_Init+0xac>)
 80087d8:	2200      	movs	r2, #0
 80087da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087dc:	4b1e      	ldr	r3, [pc, #120]	@ (8008858 <USBD_LL_Init+0xac>)
 80087de:	2200      	movs	r2, #0
 80087e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008858 <USBD_LL_Init+0xac>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087e8:	481b      	ldr	r0, [pc, #108]	@ (8008858 <USBD_LL_Init+0xac>)
 80087ea:	f7f9 f80d 	bl	8001808 <HAL_PCD_Init>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087f4:	f7f8 fa86 	bl	8000d04 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087fe:	2318      	movs	r3, #24
 8008800:	2200      	movs	r2, #0
 8008802:	2100      	movs	r1, #0
 8008804:	f7fa fd1e 	bl	8003244 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800880e:	2358      	movs	r3, #88	@ 0x58
 8008810:	2200      	movs	r2, #0
 8008812:	2180      	movs	r1, #128	@ 0x80
 8008814:	f7fa fd16 	bl	8003244 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800881e:	23c0      	movs	r3, #192	@ 0xc0
 8008820:	2200      	movs	r2, #0
 8008822:	2181      	movs	r1, #129	@ 0x81
 8008824:	f7fa fd0e 	bl	8003244 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800882e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008832:	2200      	movs	r2, #0
 8008834:	2101      	movs	r1, #1
 8008836:	f7fa fd05 	bl	8003244 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008844:	2200      	movs	r2, #0
 8008846:	2182      	movs	r1, #130	@ 0x82
 8008848:	f7fa fcfc 	bl	8003244 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20001080 	.word	0x20001080
 800885c:	40005c00 	.word	0x40005c00

08008860 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008876:	4618      	mov	r0, r3
 8008878:	f7f9 f8bc 	bl	80019f4 <HAL_PCD_Start>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f94e 	bl	8008b24 <USBD_Get_USB_Status>
 8008888:	4603      	mov	r3, r0
 800888a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800888c:	7bbb      	ldrb	r3, [r7, #14]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	4608      	mov	r0, r1
 80088a0:	4611      	mov	r1, r2
 80088a2:	461a      	mov	r2, r3
 80088a4:	4603      	mov	r3, r0
 80088a6:	70fb      	strb	r3, [r7, #3]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70bb      	strb	r3, [r7, #2]
 80088ac:	4613      	mov	r3, r2
 80088ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088be:	78bb      	ldrb	r3, [r7, #2]
 80088c0:	883a      	ldrh	r2, [r7, #0]
 80088c2:	78f9      	ldrb	r1, [r7, #3]
 80088c4:	f7f9 fa10 	bl	8001ce8 <HAL_PCD_EP_Open>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f928 	bl	8008b24 <USBD_Get_USB_Status>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7f9 fa4e 	bl	8001da2 <HAL_PCD_EP_Close>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f909 	bl	8008b24 <USBD_Get_USB_Status>
 8008912:	4603      	mov	r3, r0
 8008914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008916:	7bbb      	ldrb	r3, [r7, #14]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	4611      	mov	r1, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f7f9 faf6 	bl	8001f30 <HAL_PCD_EP_SetStall>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 f8ea 	bl	8008b24 <USBD_Get_USB_Status>
 8008950:	4603      	mov	r3, r0
 8008952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008954:	7bbb      	ldrb	r3, [r7, #14]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f7f9 fb37 	bl	8001ff0 <HAL_PCD_EP_ClrStall>
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 f8cb 	bl	8008b24 <USBD_Get_USB_Status>
 800898e:	4603      	mov	r3, r0
 8008990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008992:	7bbb      	ldrb	r3, [r7, #14]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80089ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da0b      	bge.n	80089d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089be:	68f9      	ldr	r1, [r7, #12]
 80089c0:	4613      	mov	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	440b      	add	r3, r1
 80089ca:	3312      	adds	r3, #18
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	e00b      	b.n	80089e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089d6:	68f9      	ldr	r1, [r7, #12]
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	440b      	add	r3, r1
 80089e2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80089e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr

080089f2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	460b      	mov	r3, r1
 80089fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a0c:	78fa      	ldrb	r2, [r7, #3]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7f9 f945 	bl	8001ca0 <HAL_PCD_SetAddress>
 8008a16:	4603      	mov	r3, r0
 8008a18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 f881 	bl	8008b24 <USBD_Get_USB_Status>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	607a      	str	r2, [r7, #4]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	72fb      	strb	r3, [r7, #11]
 8008a40:	4613      	mov	r3, r2
 8008a42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a52:	893b      	ldrh	r3, [r7, #8]
 8008a54:	7af9      	ldrb	r1, [r7, #11]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	f7f9 fa33 	bl	8001ec2 <HAL_PCD_EP_Transmit>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 f85e 	bl	8008b24 <USBD_Get_USB_Status>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b086      	sub	sp, #24
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	461a      	mov	r2, r3
 8008a82:	460b      	mov	r3, r1
 8008a84:	72fb      	strb	r3, [r7, #11]
 8008a86:	4613      	mov	r3, r2
 8008a88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a98:	893b      	ldrh	r3, [r7, #8]
 8008a9a:	7af9      	ldrb	r1, [r7, #11]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	f7f9 f9c8 	bl	8001e32 <HAL_PCD_EP_Receive>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f83b 	bl	8008b24 <USBD_Get_USB_Status>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ab2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7f9 f9de 	bl	8001e94 <HAL_PCD_EP_GetRxCount>
 8008ad8:	4603      	mov	r3, r0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008aec:	4b02      	ldr	r3, [pc, #8]	@ (8008af8 <USBD_static_malloc+0x14>)
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bc80      	pop	{r7}
 8008af6:	4770      	bx	lr
 8008af8:	20001358 	.word	0x20001358

08008afc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]

}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bc80      	pop	{r7}
 8008b0c:	4770      	bx	lr

08008b0e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b083      	sub	sp, #12
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bc80      	pop	{r7}
 8008b22:	4770      	bx	lr

08008b24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d817      	bhi.n	8008b68 <USBD_Get_USB_Status+0x44>
 8008b38:	a201      	add	r2, pc, #4	@ (adr r2, 8008b40 <USBD_Get_USB_Status+0x1c>)
 8008b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008b51 	.word	0x08008b51
 8008b44:	08008b57 	.word	0x08008b57
 8008b48:	08008b5d 	.word	0x08008b5d
 8008b4c:	08008b63 	.word	0x08008b63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73fb      	strb	r3, [r7, #15]
    break;
 8008b54:	e00b      	b.n	8008b6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b56:	2302      	movs	r3, #2
 8008b58:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5a:	e008      	b.n	8008b6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b60:	e005      	b.n	8008b6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b62:	2302      	movs	r3, #2
 8008b64:	73fb      	strb	r3, [r7, #15]
    break;
 8008b66:	e002      	b.n	8008b6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b68:	2302      	movs	r3, #2
 8008b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6c:	bf00      	nop
  }
  return usb_status;
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop

08008b7c <__cvt>:
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b82:	461d      	mov	r5, r3
 8008b84:	bfbb      	ittet	lt
 8008b86:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008b8a:	461d      	movlt	r5, r3
 8008b8c:	2300      	movge	r3, #0
 8008b8e:	232d      	movlt	r3, #45	@ 0x2d
 8008b90:	b088      	sub	sp, #32
 8008b92:	4614      	mov	r4, r2
 8008b94:	bfb8      	it	lt
 8008b96:	4614      	movlt	r4, r2
 8008b98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008b9a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008b9c:	7013      	strb	r3, [r2, #0]
 8008b9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ba0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008ba4:	f023 0820 	bic.w	r8, r3, #32
 8008ba8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008bac:	d005      	beq.n	8008bba <__cvt+0x3e>
 8008bae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008bb2:	d100      	bne.n	8008bb6 <__cvt+0x3a>
 8008bb4:	3601      	adds	r6, #1
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e000      	b.n	8008bbc <__cvt+0x40>
 8008bba:	2303      	movs	r3, #3
 8008bbc:	aa07      	add	r2, sp, #28
 8008bbe:	9204      	str	r2, [sp, #16]
 8008bc0:	aa06      	add	r2, sp, #24
 8008bc2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008bc6:	e9cd 3600 	strd	r3, r6, [sp]
 8008bca:	4622      	mov	r2, r4
 8008bcc:	462b      	mov	r3, r5
 8008bce:	f000 fe4b 	bl	8009868 <_dtoa_r>
 8008bd2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008bd6:	4607      	mov	r7, r0
 8008bd8:	d119      	bne.n	8008c0e <__cvt+0x92>
 8008bda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008bdc:	07db      	lsls	r3, r3, #31
 8008bde:	d50e      	bpl.n	8008bfe <__cvt+0x82>
 8008be0:	eb00 0906 	add.w	r9, r0, r6
 8008be4:	2200      	movs	r2, #0
 8008be6:	2300      	movs	r3, #0
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	f7f7 fedc 	bl	80009a8 <__aeabi_dcmpeq>
 8008bf0:	b108      	cbz	r0, 8008bf6 <__cvt+0x7a>
 8008bf2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008bf6:	2230      	movs	r2, #48	@ 0x30
 8008bf8:	9b07      	ldr	r3, [sp, #28]
 8008bfa:	454b      	cmp	r3, r9
 8008bfc:	d31e      	bcc.n	8008c3c <__cvt+0xc0>
 8008bfe:	4638      	mov	r0, r7
 8008c00:	9b07      	ldr	r3, [sp, #28]
 8008c02:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008c04:	1bdb      	subs	r3, r3, r7
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	b008      	add	sp, #32
 8008c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c12:	eb00 0906 	add.w	r9, r0, r6
 8008c16:	d1e5      	bne.n	8008be4 <__cvt+0x68>
 8008c18:	7803      	ldrb	r3, [r0, #0]
 8008c1a:	2b30      	cmp	r3, #48	@ 0x30
 8008c1c:	d10a      	bne.n	8008c34 <__cvt+0xb8>
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2300      	movs	r3, #0
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 febf 	bl	80009a8 <__aeabi_dcmpeq>
 8008c2a:	b918      	cbnz	r0, 8008c34 <__cvt+0xb8>
 8008c2c:	f1c6 0601 	rsb	r6, r6, #1
 8008c30:	f8ca 6000 	str.w	r6, [sl]
 8008c34:	f8da 3000 	ldr.w	r3, [sl]
 8008c38:	4499      	add	r9, r3
 8008c3a:	e7d3      	b.n	8008be4 <__cvt+0x68>
 8008c3c:	1c59      	adds	r1, r3, #1
 8008c3e:	9107      	str	r1, [sp, #28]
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	e7d9      	b.n	8008bf8 <__cvt+0x7c>

08008c44 <__exponent>:
 8008c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c46:	2900      	cmp	r1, #0
 8008c48:	bfb6      	itet	lt
 8008c4a:	232d      	movlt	r3, #45	@ 0x2d
 8008c4c:	232b      	movge	r3, #43	@ 0x2b
 8008c4e:	4249      	neglt	r1, r1
 8008c50:	2909      	cmp	r1, #9
 8008c52:	7002      	strb	r2, [r0, #0]
 8008c54:	7043      	strb	r3, [r0, #1]
 8008c56:	dd29      	ble.n	8008cac <__exponent+0x68>
 8008c58:	f10d 0307 	add.w	r3, sp, #7
 8008c5c:	461d      	mov	r5, r3
 8008c5e:	270a      	movs	r7, #10
 8008c60:	fbb1 f6f7 	udiv	r6, r1, r7
 8008c64:	461a      	mov	r2, r3
 8008c66:	fb07 1416 	mls	r4, r7, r6, r1
 8008c6a:	3430      	adds	r4, #48	@ 0x30
 8008c6c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008c70:	460c      	mov	r4, r1
 8008c72:	2c63      	cmp	r4, #99	@ 0x63
 8008c74:	4631      	mov	r1, r6
 8008c76:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c7a:	dcf1      	bgt.n	8008c60 <__exponent+0x1c>
 8008c7c:	3130      	adds	r1, #48	@ 0x30
 8008c7e:	1e94      	subs	r4, r2, #2
 8008c80:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c84:	4623      	mov	r3, r4
 8008c86:	1c41      	adds	r1, r0, #1
 8008c88:	42ab      	cmp	r3, r5
 8008c8a:	d30a      	bcc.n	8008ca2 <__exponent+0x5e>
 8008c8c:	f10d 0309 	add.w	r3, sp, #9
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	42ac      	cmp	r4, r5
 8008c94:	bf88      	it	hi
 8008c96:	2300      	movhi	r3, #0
 8008c98:	3302      	adds	r3, #2
 8008c9a:	4403      	add	r3, r0
 8008c9c:	1a18      	subs	r0, r3, r0
 8008c9e:	b003      	add	sp, #12
 8008ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ca2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ca6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008caa:	e7ed      	b.n	8008c88 <__exponent+0x44>
 8008cac:	2330      	movs	r3, #48	@ 0x30
 8008cae:	3130      	adds	r1, #48	@ 0x30
 8008cb0:	7083      	strb	r3, [r0, #2]
 8008cb2:	70c1      	strb	r1, [r0, #3]
 8008cb4:	1d03      	adds	r3, r0, #4
 8008cb6:	e7f1      	b.n	8008c9c <__exponent+0x58>

08008cb8 <_printf_float>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	b091      	sub	sp, #68	@ 0x44
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008cc4:	4616      	mov	r6, r2
 8008cc6:	461f      	mov	r7, r3
 8008cc8:	4605      	mov	r5, r0
 8008cca:	f000 fcbf 	bl	800964c <_localeconv_r>
 8008cce:	6803      	ldr	r3, [r0, #0]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	9308      	str	r3, [sp, #32]
 8008cd4:	f7f7 fa3c 	bl	8000150 <strlen>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	930e      	str	r3, [sp, #56]	@ 0x38
 8008cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce0:	9009      	str	r0, [sp, #36]	@ 0x24
 8008ce2:	3307      	adds	r3, #7
 8008ce4:	f023 0307 	bic.w	r3, r3, #7
 8008ce8:	f103 0208 	add.w	r2, r3, #8
 8008cec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008cf0:	f8d4 b000 	ldr.w	fp, [r4]
 8008cf4:	f8c8 2000 	str.w	r2, [r8]
 8008cf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d02:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008d06:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d12:	4b9c      	ldr	r3, [pc, #624]	@ (8008f84 <_printf_float+0x2cc>)
 8008d14:	f7f7 fe7a 	bl	8000a0c <__aeabi_dcmpun>
 8008d18:	bb70      	cbnz	r0, 8008d78 <_printf_float+0xc0>
 8008d1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d22:	4b98      	ldr	r3, [pc, #608]	@ (8008f84 <_printf_float+0x2cc>)
 8008d24:	f7f7 fe54 	bl	80009d0 <__aeabi_dcmple>
 8008d28:	bb30      	cbnz	r0, 8008d78 <_printf_float+0xc0>
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4649      	mov	r1, r9
 8008d32:	f7f7 fe43 	bl	80009bc <__aeabi_dcmplt>
 8008d36:	b110      	cbz	r0, 8008d3e <_printf_float+0x86>
 8008d38:	232d      	movs	r3, #45	@ 0x2d
 8008d3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d3e:	4a92      	ldr	r2, [pc, #584]	@ (8008f88 <_printf_float+0x2d0>)
 8008d40:	4b92      	ldr	r3, [pc, #584]	@ (8008f8c <_printf_float+0x2d4>)
 8008d42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d46:	bf8c      	ite	hi
 8008d48:	4690      	movhi	r8, r2
 8008d4a:	4698      	movls	r8, r3
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	f04f 0900 	mov.w	r9, #0
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	f02b 0304 	bic.w	r3, fp, #4
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	4633      	mov	r3, r6
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	4628      	mov	r0, r5
 8008d60:	9700      	str	r7, [sp, #0]
 8008d62:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008d64:	f000 f9d4 	bl	8009110 <_printf_common>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	f040 8090 	bne.w	8008e8e <_printf_float+0x1d6>
 8008d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d72:	b011      	add	sp, #68	@ 0x44
 8008d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d78:	4642      	mov	r2, r8
 8008d7a:	464b      	mov	r3, r9
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	4649      	mov	r1, r9
 8008d80:	f7f7 fe44 	bl	8000a0c <__aeabi_dcmpun>
 8008d84:	b148      	cbz	r0, 8008d9a <_printf_float+0xe2>
 8008d86:	464b      	mov	r3, r9
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bfb8      	it	lt
 8008d8c:	232d      	movlt	r3, #45	@ 0x2d
 8008d8e:	4a80      	ldr	r2, [pc, #512]	@ (8008f90 <_printf_float+0x2d8>)
 8008d90:	bfb8      	it	lt
 8008d92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008d96:	4b7f      	ldr	r3, [pc, #508]	@ (8008f94 <_printf_float+0x2dc>)
 8008d98:	e7d3      	b.n	8008d42 <_printf_float+0x8a>
 8008d9a:	6863      	ldr	r3, [r4, #4]
 8008d9c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	d13f      	bne.n	8008e24 <_printf_float+0x16c>
 8008da4:	2306      	movs	r3, #6
 8008da6:	6063      	str	r3, [r4, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	9206      	str	r2, [sp, #24]
 8008db2:	aa0e      	add	r2, sp, #56	@ 0x38
 8008db4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008db8:	aa0d      	add	r2, sp, #52	@ 0x34
 8008dba:	9203      	str	r2, [sp, #12]
 8008dbc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008dc0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008dc4:	6863      	ldr	r3, [r4, #4]
 8008dc6:	4642      	mov	r2, r8
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	4628      	mov	r0, r5
 8008dcc:	464b      	mov	r3, r9
 8008dce:	910a      	str	r1, [sp, #40]	@ 0x28
 8008dd0:	f7ff fed4 	bl	8008b7c <__cvt>
 8008dd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dd6:	4680      	mov	r8, r0
 8008dd8:	2947      	cmp	r1, #71	@ 0x47
 8008dda:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008ddc:	d128      	bne.n	8008e30 <_printf_float+0x178>
 8008dde:	1cc8      	adds	r0, r1, #3
 8008de0:	db02      	blt.n	8008de8 <_printf_float+0x130>
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	4299      	cmp	r1, r3
 8008de6:	dd40      	ble.n	8008e6a <_printf_float+0x1b2>
 8008de8:	f1aa 0a02 	sub.w	sl, sl, #2
 8008dec:	fa5f fa8a 	uxtb.w	sl, sl
 8008df0:	4652      	mov	r2, sl
 8008df2:	3901      	subs	r1, #1
 8008df4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008df8:	910d      	str	r1, [sp, #52]	@ 0x34
 8008dfa:	f7ff ff23 	bl	8008c44 <__exponent>
 8008dfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e00:	4681      	mov	r9, r0
 8008e02:	1813      	adds	r3, r2, r0
 8008e04:	2a01      	cmp	r2, #1
 8008e06:	6123      	str	r3, [r4, #16]
 8008e08:	dc02      	bgt.n	8008e10 <_printf_float+0x158>
 8008e0a:	6822      	ldr	r2, [r4, #0]
 8008e0c:	07d2      	lsls	r2, r2, #31
 8008e0e:	d501      	bpl.n	8008e14 <_printf_float+0x15c>
 8008e10:	3301      	adds	r3, #1
 8008e12:	6123      	str	r3, [r4, #16]
 8008e14:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d09e      	beq.n	8008d5a <_printf_float+0xa2>
 8008e1c:	232d      	movs	r3, #45	@ 0x2d
 8008e1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e22:	e79a      	b.n	8008d5a <_printf_float+0xa2>
 8008e24:	2947      	cmp	r1, #71	@ 0x47
 8008e26:	d1bf      	bne.n	8008da8 <_printf_float+0xf0>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1bd      	bne.n	8008da8 <_printf_float+0xf0>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e7ba      	b.n	8008da6 <_printf_float+0xee>
 8008e30:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e34:	d9dc      	bls.n	8008df0 <_printf_float+0x138>
 8008e36:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e3a:	d118      	bne.n	8008e6e <_printf_float+0x1b6>
 8008e3c:	2900      	cmp	r1, #0
 8008e3e:	6863      	ldr	r3, [r4, #4]
 8008e40:	dd0b      	ble.n	8008e5a <_printf_float+0x1a2>
 8008e42:	6121      	str	r1, [r4, #16]
 8008e44:	b913      	cbnz	r3, 8008e4c <_printf_float+0x194>
 8008e46:	6822      	ldr	r2, [r4, #0]
 8008e48:	07d0      	lsls	r0, r2, #31
 8008e4a:	d502      	bpl.n	8008e52 <_printf_float+0x19a>
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	440b      	add	r3, r1
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	f04f 0900 	mov.w	r9, #0
 8008e56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e58:	e7dc      	b.n	8008e14 <_printf_float+0x15c>
 8008e5a:	b913      	cbnz	r3, 8008e62 <_printf_float+0x1aa>
 8008e5c:	6822      	ldr	r2, [r4, #0]
 8008e5e:	07d2      	lsls	r2, r2, #31
 8008e60:	d501      	bpl.n	8008e66 <_printf_float+0x1ae>
 8008e62:	3302      	adds	r3, #2
 8008e64:	e7f4      	b.n	8008e50 <_printf_float+0x198>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e7f2      	b.n	8008e50 <_printf_float+0x198>
 8008e6a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008e6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e70:	4299      	cmp	r1, r3
 8008e72:	db05      	blt.n	8008e80 <_printf_float+0x1c8>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	6121      	str	r1, [r4, #16]
 8008e78:	07d8      	lsls	r0, r3, #31
 8008e7a:	d5ea      	bpl.n	8008e52 <_printf_float+0x19a>
 8008e7c:	1c4b      	adds	r3, r1, #1
 8008e7e:	e7e7      	b.n	8008e50 <_printf_float+0x198>
 8008e80:	2900      	cmp	r1, #0
 8008e82:	bfcc      	ite	gt
 8008e84:	2201      	movgt	r2, #1
 8008e86:	f1c1 0202 	rsble	r2, r1, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	e7e0      	b.n	8008e50 <_printf_float+0x198>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	055a      	lsls	r2, r3, #21
 8008e92:	d407      	bmi.n	8008ea4 <_printf_float+0x1ec>
 8008e94:	6923      	ldr	r3, [r4, #16]
 8008e96:	4642      	mov	r2, r8
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	47b8      	blx	r7
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d12b      	bne.n	8008efa <_printf_float+0x242>
 8008ea2:	e764      	b.n	8008d6e <_printf_float+0xb6>
 8008ea4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ea8:	f240 80dc 	bls.w	8009064 <_printf_float+0x3ac>
 8008eac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f7f7 fd78 	bl	80009a8 <__aeabi_dcmpeq>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d033      	beq.n	8008f24 <_printf_float+0x26c>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4631      	mov	r1, r6
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	4a35      	ldr	r2, [pc, #212]	@ (8008f98 <_printf_float+0x2e0>)
 8008ec4:	47b8      	blx	r7
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	f43f af51 	beq.w	8008d6e <_printf_float+0xb6>
 8008ecc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008ed0:	4543      	cmp	r3, r8
 8008ed2:	db02      	blt.n	8008eda <_printf_float+0x222>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	07d8      	lsls	r0, r3, #31
 8008ed8:	d50f      	bpl.n	8008efa <_printf_float+0x242>
 8008eda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b8      	blx	r7
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f43f af42 	beq.w	8008d6e <_printf_float+0xb6>
 8008eea:	f04f 0900 	mov.w	r9, #0
 8008eee:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ef2:	f104 0a1a 	add.w	sl, r4, #26
 8008ef6:	45c8      	cmp	r8, r9
 8008ef8:	dc09      	bgt.n	8008f0e <_printf_float+0x256>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	079b      	lsls	r3, r3, #30
 8008efe:	f100 8102 	bmi.w	8009106 <_printf_float+0x44e>
 8008f02:	68e0      	ldr	r0, [r4, #12]
 8008f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f06:	4298      	cmp	r0, r3
 8008f08:	bfb8      	it	lt
 8008f0a:	4618      	movlt	r0, r3
 8008f0c:	e731      	b.n	8008d72 <_printf_float+0xba>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4652      	mov	r2, sl
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	f43f af28 	beq.w	8008d6e <_printf_float+0xb6>
 8008f1e:	f109 0901 	add.w	r9, r9, #1
 8008f22:	e7e8      	b.n	8008ef6 <_printf_float+0x23e>
 8008f24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	dc38      	bgt.n	8008f9c <_printf_float+0x2e4>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4628      	mov	r0, r5
 8008f30:	4a19      	ldr	r2, [pc, #100]	@ (8008f98 <_printf_float+0x2e0>)
 8008f32:	47b8      	blx	r7
 8008f34:	3001      	adds	r0, #1
 8008f36:	f43f af1a 	beq.w	8008d6e <_printf_float+0xb6>
 8008f3a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008f3e:	ea59 0303 	orrs.w	r3, r9, r3
 8008f42:	d102      	bne.n	8008f4a <_printf_float+0x292>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	07d9      	lsls	r1, r3, #31
 8008f48:	d5d7      	bpl.n	8008efa <_printf_float+0x242>
 8008f4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4628      	mov	r0, r5
 8008f52:	47b8      	blx	r7
 8008f54:	3001      	adds	r0, #1
 8008f56:	f43f af0a 	beq.w	8008d6e <_printf_float+0xb6>
 8008f5a:	f04f 0a00 	mov.w	sl, #0
 8008f5e:	f104 0b1a 	add.w	fp, r4, #26
 8008f62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f64:	425b      	negs	r3, r3
 8008f66:	4553      	cmp	r3, sl
 8008f68:	dc01      	bgt.n	8008f6e <_printf_float+0x2b6>
 8008f6a:	464b      	mov	r3, r9
 8008f6c:	e793      	b.n	8008e96 <_printf_float+0x1de>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	465a      	mov	r2, fp
 8008f72:	4631      	mov	r1, r6
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b8      	blx	r7
 8008f78:	3001      	adds	r0, #1
 8008f7a:	f43f aef8 	beq.w	8008d6e <_printf_float+0xb6>
 8008f7e:	f10a 0a01 	add.w	sl, sl, #1
 8008f82:	e7ee      	b.n	8008f62 <_printf_float+0x2aa>
 8008f84:	7fefffff 	.word	0x7fefffff
 8008f88:	0800b51a 	.word	0x0800b51a
 8008f8c:	0800b516 	.word	0x0800b516
 8008f90:	0800b522 	.word	0x0800b522
 8008f94:	0800b51e 	.word	0x0800b51e
 8008f98:	0800b526 	.word	0x0800b526
 8008f9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f9e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008fa2:	4553      	cmp	r3, sl
 8008fa4:	bfa8      	it	ge
 8008fa6:	4653      	movge	r3, sl
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	4699      	mov	r9, r3
 8008fac:	dc36      	bgt.n	800901c <_printf_float+0x364>
 8008fae:	f04f 0b00 	mov.w	fp, #0
 8008fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fb6:	f104 021a 	add.w	r2, r4, #26
 8008fba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fbe:	eba3 0309 	sub.w	r3, r3, r9
 8008fc2:	455b      	cmp	r3, fp
 8008fc4:	dc31      	bgt.n	800902a <_printf_float+0x372>
 8008fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fc8:	459a      	cmp	sl, r3
 8008fca:	dc3a      	bgt.n	8009042 <_printf_float+0x38a>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	07da      	lsls	r2, r3, #31
 8008fd0:	d437      	bmi.n	8009042 <_printf_float+0x38a>
 8008fd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fd4:	ebaa 0903 	sub.w	r9, sl, r3
 8008fd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fda:	ebaa 0303 	sub.w	r3, sl, r3
 8008fde:	4599      	cmp	r9, r3
 8008fe0:	bfa8      	it	ge
 8008fe2:	4699      	movge	r9, r3
 8008fe4:	f1b9 0f00 	cmp.w	r9, #0
 8008fe8:	dc33      	bgt.n	8009052 <_printf_float+0x39a>
 8008fea:	f04f 0800 	mov.w	r8, #0
 8008fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ff2:	f104 0b1a 	add.w	fp, r4, #26
 8008ff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ff8:	ebaa 0303 	sub.w	r3, sl, r3
 8008ffc:	eba3 0309 	sub.w	r3, r3, r9
 8009000:	4543      	cmp	r3, r8
 8009002:	f77f af7a 	ble.w	8008efa <_printf_float+0x242>
 8009006:	2301      	movs	r3, #1
 8009008:	465a      	mov	r2, fp
 800900a:	4631      	mov	r1, r6
 800900c:	4628      	mov	r0, r5
 800900e:	47b8      	blx	r7
 8009010:	3001      	adds	r0, #1
 8009012:	f43f aeac 	beq.w	8008d6e <_printf_float+0xb6>
 8009016:	f108 0801 	add.w	r8, r8, #1
 800901a:	e7ec      	b.n	8008ff6 <_printf_float+0x33e>
 800901c:	4642      	mov	r2, r8
 800901e:	4631      	mov	r1, r6
 8009020:	4628      	mov	r0, r5
 8009022:	47b8      	blx	r7
 8009024:	3001      	adds	r0, #1
 8009026:	d1c2      	bne.n	8008fae <_printf_float+0x2f6>
 8009028:	e6a1      	b.n	8008d6e <_printf_float+0xb6>
 800902a:	2301      	movs	r3, #1
 800902c:	4631      	mov	r1, r6
 800902e:	4628      	mov	r0, r5
 8009030:	920a      	str	r2, [sp, #40]	@ 0x28
 8009032:	47b8      	blx	r7
 8009034:	3001      	adds	r0, #1
 8009036:	f43f ae9a 	beq.w	8008d6e <_printf_float+0xb6>
 800903a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800903c:	f10b 0b01 	add.w	fp, fp, #1
 8009040:	e7bb      	b.n	8008fba <_printf_float+0x302>
 8009042:	4631      	mov	r1, r6
 8009044:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009048:	4628      	mov	r0, r5
 800904a:	47b8      	blx	r7
 800904c:	3001      	adds	r0, #1
 800904e:	d1c0      	bne.n	8008fd2 <_printf_float+0x31a>
 8009050:	e68d      	b.n	8008d6e <_printf_float+0xb6>
 8009052:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009054:	464b      	mov	r3, r9
 8009056:	4631      	mov	r1, r6
 8009058:	4628      	mov	r0, r5
 800905a:	4442      	add	r2, r8
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	d1c3      	bne.n	8008fea <_printf_float+0x332>
 8009062:	e684      	b.n	8008d6e <_printf_float+0xb6>
 8009064:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009068:	f1ba 0f01 	cmp.w	sl, #1
 800906c:	dc01      	bgt.n	8009072 <_printf_float+0x3ba>
 800906e:	07db      	lsls	r3, r3, #31
 8009070:	d536      	bpl.n	80090e0 <_printf_float+0x428>
 8009072:	2301      	movs	r3, #1
 8009074:	4642      	mov	r2, r8
 8009076:	4631      	mov	r1, r6
 8009078:	4628      	mov	r0, r5
 800907a:	47b8      	blx	r7
 800907c:	3001      	adds	r0, #1
 800907e:	f43f ae76 	beq.w	8008d6e <_printf_float+0xb6>
 8009082:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009086:	4631      	mov	r1, r6
 8009088:	4628      	mov	r0, r5
 800908a:	47b8      	blx	r7
 800908c:	3001      	adds	r0, #1
 800908e:	f43f ae6e 	beq.w	8008d6e <_printf_float+0xb6>
 8009092:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009096:	2200      	movs	r2, #0
 8009098:	2300      	movs	r3, #0
 800909a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800909e:	f7f7 fc83 	bl	80009a8 <__aeabi_dcmpeq>
 80090a2:	b9c0      	cbnz	r0, 80090d6 <_printf_float+0x41e>
 80090a4:	4653      	mov	r3, sl
 80090a6:	f108 0201 	add.w	r2, r8, #1
 80090aa:	4631      	mov	r1, r6
 80090ac:	4628      	mov	r0, r5
 80090ae:	47b8      	blx	r7
 80090b0:	3001      	adds	r0, #1
 80090b2:	d10c      	bne.n	80090ce <_printf_float+0x416>
 80090b4:	e65b      	b.n	8008d6e <_printf_float+0xb6>
 80090b6:	2301      	movs	r3, #1
 80090b8:	465a      	mov	r2, fp
 80090ba:	4631      	mov	r1, r6
 80090bc:	4628      	mov	r0, r5
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	f43f ae54 	beq.w	8008d6e <_printf_float+0xb6>
 80090c6:	f108 0801 	add.w	r8, r8, #1
 80090ca:	45d0      	cmp	r8, sl
 80090cc:	dbf3      	blt.n	80090b6 <_printf_float+0x3fe>
 80090ce:	464b      	mov	r3, r9
 80090d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80090d4:	e6e0      	b.n	8008e98 <_printf_float+0x1e0>
 80090d6:	f04f 0800 	mov.w	r8, #0
 80090da:	f104 0b1a 	add.w	fp, r4, #26
 80090de:	e7f4      	b.n	80090ca <_printf_float+0x412>
 80090e0:	2301      	movs	r3, #1
 80090e2:	4642      	mov	r2, r8
 80090e4:	e7e1      	b.n	80090aa <_printf_float+0x3f2>
 80090e6:	2301      	movs	r3, #1
 80090e8:	464a      	mov	r2, r9
 80090ea:	4631      	mov	r1, r6
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b8      	blx	r7
 80090f0:	3001      	adds	r0, #1
 80090f2:	f43f ae3c 	beq.w	8008d6e <_printf_float+0xb6>
 80090f6:	f108 0801 	add.w	r8, r8, #1
 80090fa:	68e3      	ldr	r3, [r4, #12]
 80090fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80090fe:	1a5b      	subs	r3, r3, r1
 8009100:	4543      	cmp	r3, r8
 8009102:	dcf0      	bgt.n	80090e6 <_printf_float+0x42e>
 8009104:	e6fd      	b.n	8008f02 <_printf_float+0x24a>
 8009106:	f04f 0800 	mov.w	r8, #0
 800910a:	f104 0919 	add.w	r9, r4, #25
 800910e:	e7f4      	b.n	80090fa <_printf_float+0x442>

08009110 <_printf_common>:
 8009110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	4616      	mov	r6, r2
 8009116:	4698      	mov	r8, r3
 8009118:	688a      	ldr	r2, [r1, #8]
 800911a:	690b      	ldr	r3, [r1, #16]
 800911c:	4607      	mov	r7, r0
 800911e:	4293      	cmp	r3, r2
 8009120:	bfb8      	it	lt
 8009122:	4613      	movlt	r3, r2
 8009124:	6033      	str	r3, [r6, #0]
 8009126:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800912a:	460c      	mov	r4, r1
 800912c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009130:	b10a      	cbz	r2, 8009136 <_printf_common+0x26>
 8009132:	3301      	adds	r3, #1
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	0699      	lsls	r1, r3, #26
 800913a:	bf42      	ittt	mi
 800913c:	6833      	ldrmi	r3, [r6, #0]
 800913e:	3302      	addmi	r3, #2
 8009140:	6033      	strmi	r3, [r6, #0]
 8009142:	6825      	ldr	r5, [r4, #0]
 8009144:	f015 0506 	ands.w	r5, r5, #6
 8009148:	d106      	bne.n	8009158 <_printf_common+0x48>
 800914a:	f104 0a19 	add.w	sl, r4, #25
 800914e:	68e3      	ldr	r3, [r4, #12]
 8009150:	6832      	ldr	r2, [r6, #0]
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	42ab      	cmp	r3, r5
 8009156:	dc2b      	bgt.n	80091b0 <_printf_common+0xa0>
 8009158:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800915c:	6822      	ldr	r2, [r4, #0]
 800915e:	3b00      	subs	r3, #0
 8009160:	bf18      	it	ne
 8009162:	2301      	movne	r3, #1
 8009164:	0692      	lsls	r2, r2, #26
 8009166:	d430      	bmi.n	80091ca <_printf_common+0xba>
 8009168:	4641      	mov	r1, r8
 800916a:	4638      	mov	r0, r7
 800916c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009170:	47c8      	blx	r9
 8009172:	3001      	adds	r0, #1
 8009174:	d023      	beq.n	80091be <_printf_common+0xae>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	6922      	ldr	r2, [r4, #16]
 800917a:	f003 0306 	and.w	r3, r3, #6
 800917e:	2b04      	cmp	r3, #4
 8009180:	bf14      	ite	ne
 8009182:	2500      	movne	r5, #0
 8009184:	6833      	ldreq	r3, [r6, #0]
 8009186:	f04f 0600 	mov.w	r6, #0
 800918a:	bf08      	it	eq
 800918c:	68e5      	ldreq	r5, [r4, #12]
 800918e:	f104 041a 	add.w	r4, r4, #26
 8009192:	bf08      	it	eq
 8009194:	1aed      	subeq	r5, r5, r3
 8009196:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800919a:	bf08      	it	eq
 800919c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a0:	4293      	cmp	r3, r2
 80091a2:	bfc4      	itt	gt
 80091a4:	1a9b      	subgt	r3, r3, r2
 80091a6:	18ed      	addgt	r5, r5, r3
 80091a8:	42b5      	cmp	r5, r6
 80091aa:	d11a      	bne.n	80091e2 <_printf_common+0xd2>
 80091ac:	2000      	movs	r0, #0
 80091ae:	e008      	b.n	80091c2 <_printf_common+0xb2>
 80091b0:	2301      	movs	r3, #1
 80091b2:	4652      	mov	r2, sl
 80091b4:	4641      	mov	r1, r8
 80091b6:	4638      	mov	r0, r7
 80091b8:	47c8      	blx	r9
 80091ba:	3001      	adds	r0, #1
 80091bc:	d103      	bne.n	80091c6 <_printf_common+0xb6>
 80091be:	f04f 30ff 	mov.w	r0, #4294967295
 80091c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c6:	3501      	adds	r5, #1
 80091c8:	e7c1      	b.n	800914e <_printf_common+0x3e>
 80091ca:	2030      	movs	r0, #48	@ 0x30
 80091cc:	18e1      	adds	r1, r4, r3
 80091ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091d8:	4422      	add	r2, r4
 80091da:	3302      	adds	r3, #2
 80091dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091e0:	e7c2      	b.n	8009168 <_printf_common+0x58>
 80091e2:	2301      	movs	r3, #1
 80091e4:	4622      	mov	r2, r4
 80091e6:	4641      	mov	r1, r8
 80091e8:	4638      	mov	r0, r7
 80091ea:	47c8      	blx	r9
 80091ec:	3001      	adds	r0, #1
 80091ee:	d0e6      	beq.n	80091be <_printf_common+0xae>
 80091f0:	3601      	adds	r6, #1
 80091f2:	e7d9      	b.n	80091a8 <_printf_common+0x98>

080091f4 <_printf_i>:
 80091f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	7e0f      	ldrb	r7, [r1, #24]
 80091fa:	4691      	mov	r9, r2
 80091fc:	2f78      	cmp	r7, #120	@ 0x78
 80091fe:	4680      	mov	r8, r0
 8009200:	460c      	mov	r4, r1
 8009202:	469a      	mov	sl, r3
 8009204:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009206:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800920a:	d807      	bhi.n	800921c <_printf_i+0x28>
 800920c:	2f62      	cmp	r7, #98	@ 0x62
 800920e:	d80a      	bhi.n	8009226 <_printf_i+0x32>
 8009210:	2f00      	cmp	r7, #0
 8009212:	f000 80d1 	beq.w	80093b8 <_printf_i+0x1c4>
 8009216:	2f58      	cmp	r7, #88	@ 0x58
 8009218:	f000 80b8 	beq.w	800938c <_printf_i+0x198>
 800921c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009220:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009224:	e03a      	b.n	800929c <_printf_i+0xa8>
 8009226:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800922a:	2b15      	cmp	r3, #21
 800922c:	d8f6      	bhi.n	800921c <_printf_i+0x28>
 800922e:	a101      	add	r1, pc, #4	@ (adr r1, 8009234 <_printf_i+0x40>)
 8009230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009234:	0800928d 	.word	0x0800928d
 8009238:	080092a1 	.word	0x080092a1
 800923c:	0800921d 	.word	0x0800921d
 8009240:	0800921d 	.word	0x0800921d
 8009244:	0800921d 	.word	0x0800921d
 8009248:	0800921d 	.word	0x0800921d
 800924c:	080092a1 	.word	0x080092a1
 8009250:	0800921d 	.word	0x0800921d
 8009254:	0800921d 	.word	0x0800921d
 8009258:	0800921d 	.word	0x0800921d
 800925c:	0800921d 	.word	0x0800921d
 8009260:	0800939f 	.word	0x0800939f
 8009264:	080092cb 	.word	0x080092cb
 8009268:	08009359 	.word	0x08009359
 800926c:	0800921d 	.word	0x0800921d
 8009270:	0800921d 	.word	0x0800921d
 8009274:	080093c1 	.word	0x080093c1
 8009278:	0800921d 	.word	0x0800921d
 800927c:	080092cb 	.word	0x080092cb
 8009280:	0800921d 	.word	0x0800921d
 8009284:	0800921d 	.word	0x0800921d
 8009288:	08009361 	.word	0x08009361
 800928c:	6833      	ldr	r3, [r6, #0]
 800928e:	1d1a      	adds	r2, r3, #4
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6032      	str	r2, [r6, #0]
 8009294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009298:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800929c:	2301      	movs	r3, #1
 800929e:	e09c      	b.n	80093da <_printf_i+0x1e6>
 80092a0:	6833      	ldr	r3, [r6, #0]
 80092a2:	6820      	ldr	r0, [r4, #0]
 80092a4:	1d19      	adds	r1, r3, #4
 80092a6:	6031      	str	r1, [r6, #0]
 80092a8:	0606      	lsls	r6, r0, #24
 80092aa:	d501      	bpl.n	80092b0 <_printf_i+0xbc>
 80092ac:	681d      	ldr	r5, [r3, #0]
 80092ae:	e003      	b.n	80092b8 <_printf_i+0xc4>
 80092b0:	0645      	lsls	r5, r0, #25
 80092b2:	d5fb      	bpl.n	80092ac <_printf_i+0xb8>
 80092b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092b8:	2d00      	cmp	r5, #0
 80092ba:	da03      	bge.n	80092c4 <_printf_i+0xd0>
 80092bc:	232d      	movs	r3, #45	@ 0x2d
 80092be:	426d      	negs	r5, r5
 80092c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092c4:	230a      	movs	r3, #10
 80092c6:	4858      	ldr	r0, [pc, #352]	@ (8009428 <_printf_i+0x234>)
 80092c8:	e011      	b.n	80092ee <_printf_i+0xfa>
 80092ca:	6821      	ldr	r1, [r4, #0]
 80092cc:	6833      	ldr	r3, [r6, #0]
 80092ce:	0608      	lsls	r0, r1, #24
 80092d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80092d4:	d402      	bmi.n	80092dc <_printf_i+0xe8>
 80092d6:	0649      	lsls	r1, r1, #25
 80092d8:	bf48      	it	mi
 80092da:	b2ad      	uxthmi	r5, r5
 80092dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80092de:	6033      	str	r3, [r6, #0]
 80092e0:	bf14      	ite	ne
 80092e2:	230a      	movne	r3, #10
 80092e4:	2308      	moveq	r3, #8
 80092e6:	4850      	ldr	r0, [pc, #320]	@ (8009428 <_printf_i+0x234>)
 80092e8:	2100      	movs	r1, #0
 80092ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092ee:	6866      	ldr	r6, [r4, #4]
 80092f0:	2e00      	cmp	r6, #0
 80092f2:	60a6      	str	r6, [r4, #8]
 80092f4:	db05      	blt.n	8009302 <_printf_i+0x10e>
 80092f6:	6821      	ldr	r1, [r4, #0]
 80092f8:	432e      	orrs	r6, r5
 80092fa:	f021 0104 	bic.w	r1, r1, #4
 80092fe:	6021      	str	r1, [r4, #0]
 8009300:	d04b      	beq.n	800939a <_printf_i+0x1a6>
 8009302:	4616      	mov	r6, r2
 8009304:	fbb5 f1f3 	udiv	r1, r5, r3
 8009308:	fb03 5711 	mls	r7, r3, r1, r5
 800930c:	5dc7      	ldrb	r7, [r0, r7]
 800930e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009312:	462f      	mov	r7, r5
 8009314:	42bb      	cmp	r3, r7
 8009316:	460d      	mov	r5, r1
 8009318:	d9f4      	bls.n	8009304 <_printf_i+0x110>
 800931a:	2b08      	cmp	r3, #8
 800931c:	d10b      	bne.n	8009336 <_printf_i+0x142>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	07df      	lsls	r7, r3, #31
 8009322:	d508      	bpl.n	8009336 <_printf_i+0x142>
 8009324:	6923      	ldr	r3, [r4, #16]
 8009326:	6861      	ldr	r1, [r4, #4]
 8009328:	4299      	cmp	r1, r3
 800932a:	bfde      	ittt	le
 800932c:	2330      	movle	r3, #48	@ 0x30
 800932e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009332:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009336:	1b92      	subs	r2, r2, r6
 8009338:	6122      	str	r2, [r4, #16]
 800933a:	464b      	mov	r3, r9
 800933c:	4621      	mov	r1, r4
 800933e:	4640      	mov	r0, r8
 8009340:	f8cd a000 	str.w	sl, [sp]
 8009344:	aa03      	add	r2, sp, #12
 8009346:	f7ff fee3 	bl	8009110 <_printf_common>
 800934a:	3001      	adds	r0, #1
 800934c:	d14a      	bne.n	80093e4 <_printf_i+0x1f0>
 800934e:	f04f 30ff 	mov.w	r0, #4294967295
 8009352:	b004      	add	sp, #16
 8009354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	f043 0320 	orr.w	r3, r3, #32
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	2778      	movs	r7, #120	@ 0x78
 8009362:	4832      	ldr	r0, [pc, #200]	@ (800942c <_printf_i+0x238>)
 8009364:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	6831      	ldr	r1, [r6, #0]
 800936c:	061f      	lsls	r7, r3, #24
 800936e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009372:	d402      	bmi.n	800937a <_printf_i+0x186>
 8009374:	065f      	lsls	r7, r3, #25
 8009376:	bf48      	it	mi
 8009378:	b2ad      	uxthmi	r5, r5
 800937a:	6031      	str	r1, [r6, #0]
 800937c:	07d9      	lsls	r1, r3, #31
 800937e:	bf44      	itt	mi
 8009380:	f043 0320 	orrmi.w	r3, r3, #32
 8009384:	6023      	strmi	r3, [r4, #0]
 8009386:	b11d      	cbz	r5, 8009390 <_printf_i+0x19c>
 8009388:	2310      	movs	r3, #16
 800938a:	e7ad      	b.n	80092e8 <_printf_i+0xf4>
 800938c:	4826      	ldr	r0, [pc, #152]	@ (8009428 <_printf_i+0x234>)
 800938e:	e7e9      	b.n	8009364 <_printf_i+0x170>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	f023 0320 	bic.w	r3, r3, #32
 8009396:	6023      	str	r3, [r4, #0]
 8009398:	e7f6      	b.n	8009388 <_printf_i+0x194>
 800939a:	4616      	mov	r6, r2
 800939c:	e7bd      	b.n	800931a <_printf_i+0x126>
 800939e:	6833      	ldr	r3, [r6, #0]
 80093a0:	6825      	ldr	r5, [r4, #0]
 80093a2:	1d18      	adds	r0, r3, #4
 80093a4:	6961      	ldr	r1, [r4, #20]
 80093a6:	6030      	str	r0, [r6, #0]
 80093a8:	062e      	lsls	r6, r5, #24
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	d501      	bpl.n	80093b2 <_printf_i+0x1be>
 80093ae:	6019      	str	r1, [r3, #0]
 80093b0:	e002      	b.n	80093b8 <_printf_i+0x1c4>
 80093b2:	0668      	lsls	r0, r5, #25
 80093b4:	d5fb      	bpl.n	80093ae <_printf_i+0x1ba>
 80093b6:	8019      	strh	r1, [r3, #0]
 80093b8:	2300      	movs	r3, #0
 80093ba:	4616      	mov	r6, r2
 80093bc:	6123      	str	r3, [r4, #16]
 80093be:	e7bc      	b.n	800933a <_printf_i+0x146>
 80093c0:	6833      	ldr	r3, [r6, #0]
 80093c2:	2100      	movs	r1, #0
 80093c4:	1d1a      	adds	r2, r3, #4
 80093c6:	6032      	str	r2, [r6, #0]
 80093c8:	681e      	ldr	r6, [r3, #0]
 80093ca:	6862      	ldr	r2, [r4, #4]
 80093cc:	4630      	mov	r0, r6
 80093ce:	f000 f9b4 	bl	800973a <memchr>
 80093d2:	b108      	cbz	r0, 80093d8 <_printf_i+0x1e4>
 80093d4:	1b80      	subs	r0, r0, r6
 80093d6:	6060      	str	r0, [r4, #4]
 80093d8:	6863      	ldr	r3, [r4, #4]
 80093da:	6123      	str	r3, [r4, #16]
 80093dc:	2300      	movs	r3, #0
 80093de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093e2:	e7aa      	b.n	800933a <_printf_i+0x146>
 80093e4:	4632      	mov	r2, r6
 80093e6:	4649      	mov	r1, r9
 80093e8:	4640      	mov	r0, r8
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	47d0      	blx	sl
 80093ee:	3001      	adds	r0, #1
 80093f0:	d0ad      	beq.n	800934e <_printf_i+0x15a>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	079b      	lsls	r3, r3, #30
 80093f6:	d413      	bmi.n	8009420 <_printf_i+0x22c>
 80093f8:	68e0      	ldr	r0, [r4, #12]
 80093fa:	9b03      	ldr	r3, [sp, #12]
 80093fc:	4298      	cmp	r0, r3
 80093fe:	bfb8      	it	lt
 8009400:	4618      	movlt	r0, r3
 8009402:	e7a6      	b.n	8009352 <_printf_i+0x15e>
 8009404:	2301      	movs	r3, #1
 8009406:	4632      	mov	r2, r6
 8009408:	4649      	mov	r1, r9
 800940a:	4640      	mov	r0, r8
 800940c:	47d0      	blx	sl
 800940e:	3001      	adds	r0, #1
 8009410:	d09d      	beq.n	800934e <_printf_i+0x15a>
 8009412:	3501      	adds	r5, #1
 8009414:	68e3      	ldr	r3, [r4, #12]
 8009416:	9903      	ldr	r1, [sp, #12]
 8009418:	1a5b      	subs	r3, r3, r1
 800941a:	42ab      	cmp	r3, r5
 800941c:	dcf2      	bgt.n	8009404 <_printf_i+0x210>
 800941e:	e7eb      	b.n	80093f8 <_printf_i+0x204>
 8009420:	2500      	movs	r5, #0
 8009422:	f104 0619 	add.w	r6, r4, #25
 8009426:	e7f5      	b.n	8009414 <_printf_i+0x220>
 8009428:	0800b528 	.word	0x0800b528
 800942c:	0800b539 	.word	0x0800b539

08009430 <std>:
 8009430:	2300      	movs	r3, #0
 8009432:	b510      	push	{r4, lr}
 8009434:	4604      	mov	r4, r0
 8009436:	e9c0 3300 	strd	r3, r3, [r0]
 800943a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800943e:	6083      	str	r3, [r0, #8]
 8009440:	8181      	strh	r1, [r0, #12]
 8009442:	6643      	str	r3, [r0, #100]	@ 0x64
 8009444:	81c2      	strh	r2, [r0, #14]
 8009446:	6183      	str	r3, [r0, #24]
 8009448:	4619      	mov	r1, r3
 800944a:	2208      	movs	r2, #8
 800944c:	305c      	adds	r0, #92	@ 0x5c
 800944e:	f000 f8f4 	bl	800963a <memset>
 8009452:	4b0d      	ldr	r3, [pc, #52]	@ (8009488 <std+0x58>)
 8009454:	6224      	str	r4, [r4, #32]
 8009456:	6263      	str	r3, [r4, #36]	@ 0x24
 8009458:	4b0c      	ldr	r3, [pc, #48]	@ (800948c <std+0x5c>)
 800945a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800945c:	4b0c      	ldr	r3, [pc, #48]	@ (8009490 <std+0x60>)
 800945e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009460:	4b0c      	ldr	r3, [pc, #48]	@ (8009494 <std+0x64>)
 8009462:	6323      	str	r3, [r4, #48]	@ 0x30
 8009464:	4b0c      	ldr	r3, [pc, #48]	@ (8009498 <std+0x68>)
 8009466:	429c      	cmp	r4, r3
 8009468:	d006      	beq.n	8009478 <std+0x48>
 800946a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800946e:	4294      	cmp	r4, r2
 8009470:	d002      	beq.n	8009478 <std+0x48>
 8009472:	33d0      	adds	r3, #208	@ 0xd0
 8009474:	429c      	cmp	r4, r3
 8009476:	d105      	bne.n	8009484 <std+0x54>
 8009478:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800947c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009480:	f000 b958 	b.w	8009734 <__retarget_lock_init_recursive>
 8009484:	bd10      	pop	{r4, pc}
 8009486:	bf00      	nop
 8009488:	080095b5 	.word	0x080095b5
 800948c:	080095d7 	.word	0x080095d7
 8009490:	0800960f 	.word	0x0800960f
 8009494:	08009633 	.word	0x08009633
 8009498:	20001578 	.word	0x20001578

0800949c <stdio_exit_handler>:
 800949c:	4a02      	ldr	r2, [pc, #8]	@ (80094a8 <stdio_exit_handler+0xc>)
 800949e:	4903      	ldr	r1, [pc, #12]	@ (80094ac <stdio_exit_handler+0x10>)
 80094a0:	4803      	ldr	r0, [pc, #12]	@ (80094b0 <stdio_exit_handler+0x14>)
 80094a2:	f000 b869 	b.w	8009578 <_fwalk_sglue>
 80094a6:	bf00      	nop
 80094a8:	2000017c 	.word	0x2000017c
 80094ac:	0800ae01 	.word	0x0800ae01
 80094b0:	2000018c 	.word	0x2000018c

080094b4 <cleanup_stdio>:
 80094b4:	6841      	ldr	r1, [r0, #4]
 80094b6:	4b0c      	ldr	r3, [pc, #48]	@ (80094e8 <cleanup_stdio+0x34>)
 80094b8:	b510      	push	{r4, lr}
 80094ba:	4299      	cmp	r1, r3
 80094bc:	4604      	mov	r4, r0
 80094be:	d001      	beq.n	80094c4 <cleanup_stdio+0x10>
 80094c0:	f001 fc9e 	bl	800ae00 <_fflush_r>
 80094c4:	68a1      	ldr	r1, [r4, #8]
 80094c6:	4b09      	ldr	r3, [pc, #36]	@ (80094ec <cleanup_stdio+0x38>)
 80094c8:	4299      	cmp	r1, r3
 80094ca:	d002      	beq.n	80094d2 <cleanup_stdio+0x1e>
 80094cc:	4620      	mov	r0, r4
 80094ce:	f001 fc97 	bl	800ae00 <_fflush_r>
 80094d2:	68e1      	ldr	r1, [r4, #12]
 80094d4:	4b06      	ldr	r3, [pc, #24]	@ (80094f0 <cleanup_stdio+0x3c>)
 80094d6:	4299      	cmp	r1, r3
 80094d8:	d004      	beq.n	80094e4 <cleanup_stdio+0x30>
 80094da:	4620      	mov	r0, r4
 80094dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e0:	f001 bc8e 	b.w	800ae00 <_fflush_r>
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	bf00      	nop
 80094e8:	20001578 	.word	0x20001578
 80094ec:	200015e0 	.word	0x200015e0
 80094f0:	20001648 	.word	0x20001648

080094f4 <global_stdio_init.part.0>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009524 <global_stdio_init.part.0+0x30>)
 80094f8:	4c0b      	ldr	r4, [pc, #44]	@ (8009528 <global_stdio_init.part.0+0x34>)
 80094fa:	4a0c      	ldr	r2, [pc, #48]	@ (800952c <global_stdio_init.part.0+0x38>)
 80094fc:	4620      	mov	r0, r4
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	2104      	movs	r1, #4
 8009502:	2200      	movs	r2, #0
 8009504:	f7ff ff94 	bl	8009430 <std>
 8009508:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800950c:	2201      	movs	r2, #1
 800950e:	2109      	movs	r1, #9
 8009510:	f7ff ff8e 	bl	8009430 <std>
 8009514:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009518:	2202      	movs	r2, #2
 800951a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800951e:	2112      	movs	r1, #18
 8009520:	f7ff bf86 	b.w	8009430 <std>
 8009524:	200016b0 	.word	0x200016b0
 8009528:	20001578 	.word	0x20001578
 800952c:	0800949d 	.word	0x0800949d

08009530 <__sfp_lock_acquire>:
 8009530:	4801      	ldr	r0, [pc, #4]	@ (8009538 <__sfp_lock_acquire+0x8>)
 8009532:	f000 b900 	b.w	8009736 <__retarget_lock_acquire_recursive>
 8009536:	bf00      	nop
 8009538:	200016b9 	.word	0x200016b9

0800953c <__sfp_lock_release>:
 800953c:	4801      	ldr	r0, [pc, #4]	@ (8009544 <__sfp_lock_release+0x8>)
 800953e:	f000 b8fb 	b.w	8009738 <__retarget_lock_release_recursive>
 8009542:	bf00      	nop
 8009544:	200016b9 	.word	0x200016b9

08009548 <__sinit>:
 8009548:	b510      	push	{r4, lr}
 800954a:	4604      	mov	r4, r0
 800954c:	f7ff fff0 	bl	8009530 <__sfp_lock_acquire>
 8009550:	6a23      	ldr	r3, [r4, #32]
 8009552:	b11b      	cbz	r3, 800955c <__sinit+0x14>
 8009554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009558:	f7ff bff0 	b.w	800953c <__sfp_lock_release>
 800955c:	4b04      	ldr	r3, [pc, #16]	@ (8009570 <__sinit+0x28>)
 800955e:	6223      	str	r3, [r4, #32]
 8009560:	4b04      	ldr	r3, [pc, #16]	@ (8009574 <__sinit+0x2c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1f5      	bne.n	8009554 <__sinit+0xc>
 8009568:	f7ff ffc4 	bl	80094f4 <global_stdio_init.part.0>
 800956c:	e7f2      	b.n	8009554 <__sinit+0xc>
 800956e:	bf00      	nop
 8009570:	080094b5 	.word	0x080094b5
 8009574:	200016b0 	.word	0x200016b0

08009578 <_fwalk_sglue>:
 8009578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800957c:	4607      	mov	r7, r0
 800957e:	4688      	mov	r8, r1
 8009580:	4614      	mov	r4, r2
 8009582:	2600      	movs	r6, #0
 8009584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009588:	f1b9 0901 	subs.w	r9, r9, #1
 800958c:	d505      	bpl.n	800959a <_fwalk_sglue+0x22>
 800958e:	6824      	ldr	r4, [r4, #0]
 8009590:	2c00      	cmp	r4, #0
 8009592:	d1f7      	bne.n	8009584 <_fwalk_sglue+0xc>
 8009594:	4630      	mov	r0, r6
 8009596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800959a:	89ab      	ldrh	r3, [r5, #12]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d907      	bls.n	80095b0 <_fwalk_sglue+0x38>
 80095a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095a4:	3301      	adds	r3, #1
 80095a6:	d003      	beq.n	80095b0 <_fwalk_sglue+0x38>
 80095a8:	4629      	mov	r1, r5
 80095aa:	4638      	mov	r0, r7
 80095ac:	47c0      	blx	r8
 80095ae:	4306      	orrs	r6, r0
 80095b0:	3568      	adds	r5, #104	@ 0x68
 80095b2:	e7e9      	b.n	8009588 <_fwalk_sglue+0x10>

080095b4 <__sread>:
 80095b4:	b510      	push	{r4, lr}
 80095b6:	460c      	mov	r4, r1
 80095b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095bc:	f000 f86c 	bl	8009698 <_read_r>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	bfab      	itete	ge
 80095c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80095c6:	89a3      	ldrhlt	r3, [r4, #12]
 80095c8:	181b      	addge	r3, r3, r0
 80095ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80095ce:	bfac      	ite	ge
 80095d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80095d2:	81a3      	strhlt	r3, [r4, #12]
 80095d4:	bd10      	pop	{r4, pc}

080095d6 <__swrite>:
 80095d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095da:	461f      	mov	r7, r3
 80095dc:	898b      	ldrh	r3, [r1, #12]
 80095de:	4605      	mov	r5, r0
 80095e0:	05db      	lsls	r3, r3, #23
 80095e2:	460c      	mov	r4, r1
 80095e4:	4616      	mov	r6, r2
 80095e6:	d505      	bpl.n	80095f4 <__swrite+0x1e>
 80095e8:	2302      	movs	r3, #2
 80095ea:	2200      	movs	r2, #0
 80095ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f0:	f000 f840 	bl	8009674 <_lseek_r>
 80095f4:	89a3      	ldrh	r3, [r4, #12]
 80095f6:	4632      	mov	r2, r6
 80095f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095fc:	81a3      	strh	r3, [r4, #12]
 80095fe:	4628      	mov	r0, r5
 8009600:	463b      	mov	r3, r7
 8009602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800960a:	f000 b857 	b.w	80096bc <_write_r>

0800960e <__sseek>:
 800960e:	b510      	push	{r4, lr}
 8009610:	460c      	mov	r4, r1
 8009612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009616:	f000 f82d 	bl	8009674 <_lseek_r>
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	bf15      	itete	ne
 8009620:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009622:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009626:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800962a:	81a3      	strheq	r3, [r4, #12]
 800962c:	bf18      	it	ne
 800962e:	81a3      	strhne	r3, [r4, #12]
 8009630:	bd10      	pop	{r4, pc}

08009632 <__sclose>:
 8009632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009636:	f000 b80d 	b.w	8009654 <_close_r>

0800963a <memset>:
 800963a:	4603      	mov	r3, r0
 800963c:	4402      	add	r2, r0
 800963e:	4293      	cmp	r3, r2
 8009640:	d100      	bne.n	8009644 <memset+0xa>
 8009642:	4770      	bx	lr
 8009644:	f803 1b01 	strb.w	r1, [r3], #1
 8009648:	e7f9      	b.n	800963e <memset+0x4>
	...

0800964c <_localeconv_r>:
 800964c:	4800      	ldr	r0, [pc, #0]	@ (8009650 <_localeconv_r+0x4>)
 800964e:	4770      	bx	lr
 8009650:	200002c8 	.word	0x200002c8

08009654 <_close_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	2300      	movs	r3, #0
 8009658:	4d05      	ldr	r5, [pc, #20]	@ (8009670 <_close_r+0x1c>)
 800965a:	4604      	mov	r4, r0
 800965c:	4608      	mov	r0, r1
 800965e:	602b      	str	r3, [r5, #0]
 8009660:	f7f7 fc21 	bl	8000ea6 <_close>
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	d102      	bne.n	800966e <_close_r+0x1a>
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	b103      	cbz	r3, 800966e <_close_r+0x1a>
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	200016b4 	.word	0x200016b4

08009674 <_lseek_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	4611      	mov	r1, r2
 800967c:	2200      	movs	r2, #0
 800967e:	4d05      	ldr	r5, [pc, #20]	@ (8009694 <_lseek_r+0x20>)
 8009680:	602a      	str	r2, [r5, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	f7f7 fc33 	bl	8000eee <_lseek>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_lseek_r+0x1e>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_lseek_r+0x1e>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	200016b4 	.word	0x200016b4

08009698 <_read_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4604      	mov	r4, r0
 800969c:	4608      	mov	r0, r1
 800969e:	4611      	mov	r1, r2
 80096a0:	2200      	movs	r2, #0
 80096a2:	4d05      	ldr	r5, [pc, #20]	@ (80096b8 <_read_r+0x20>)
 80096a4:	602a      	str	r2, [r5, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f7f7 fbc4 	bl	8000e34 <_read>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_read_r+0x1e>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_read_r+0x1e>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	200016b4 	.word	0x200016b4

080096bc <_write_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4604      	mov	r4, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	4611      	mov	r1, r2
 80096c4:	2200      	movs	r2, #0
 80096c6:	4d05      	ldr	r5, [pc, #20]	@ (80096dc <_write_r+0x20>)
 80096c8:	602a      	str	r2, [r5, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	f7f7 fbcf 	bl	8000e6e <_write>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_write_r+0x1e>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_write_r+0x1e>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	200016b4 	.word	0x200016b4

080096e0 <__errno>:
 80096e0:	4b01      	ldr	r3, [pc, #4]	@ (80096e8 <__errno+0x8>)
 80096e2:	6818      	ldr	r0, [r3, #0]
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	20000188 	.word	0x20000188

080096ec <__libc_init_array>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	2600      	movs	r6, #0
 80096f0:	4d0c      	ldr	r5, [pc, #48]	@ (8009724 <__libc_init_array+0x38>)
 80096f2:	4c0d      	ldr	r4, [pc, #52]	@ (8009728 <__libc_init_array+0x3c>)
 80096f4:	1b64      	subs	r4, r4, r5
 80096f6:	10a4      	asrs	r4, r4, #2
 80096f8:	42a6      	cmp	r6, r4
 80096fa:	d109      	bne.n	8009710 <__libc_init_array+0x24>
 80096fc:	f001 fecc 	bl	800b498 <_init>
 8009700:	2600      	movs	r6, #0
 8009702:	4d0a      	ldr	r5, [pc, #40]	@ (800972c <__libc_init_array+0x40>)
 8009704:	4c0a      	ldr	r4, [pc, #40]	@ (8009730 <__libc_init_array+0x44>)
 8009706:	1b64      	subs	r4, r4, r5
 8009708:	10a4      	asrs	r4, r4, #2
 800970a:	42a6      	cmp	r6, r4
 800970c:	d105      	bne.n	800971a <__libc_init_array+0x2e>
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	f855 3b04 	ldr.w	r3, [r5], #4
 8009714:	4798      	blx	r3
 8009716:	3601      	adds	r6, #1
 8009718:	e7ee      	b.n	80096f8 <__libc_init_array+0xc>
 800971a:	f855 3b04 	ldr.w	r3, [r5], #4
 800971e:	4798      	blx	r3
 8009720:	3601      	adds	r6, #1
 8009722:	e7f2      	b.n	800970a <__libc_init_array+0x1e>
 8009724:	0800b894 	.word	0x0800b894
 8009728:	0800b894 	.word	0x0800b894
 800972c:	0800b894 	.word	0x0800b894
 8009730:	0800b898 	.word	0x0800b898

08009734 <__retarget_lock_init_recursive>:
 8009734:	4770      	bx	lr

08009736 <__retarget_lock_acquire_recursive>:
 8009736:	4770      	bx	lr

08009738 <__retarget_lock_release_recursive>:
 8009738:	4770      	bx	lr

0800973a <memchr>:
 800973a:	4603      	mov	r3, r0
 800973c:	b510      	push	{r4, lr}
 800973e:	b2c9      	uxtb	r1, r1
 8009740:	4402      	add	r2, r0
 8009742:	4293      	cmp	r3, r2
 8009744:	4618      	mov	r0, r3
 8009746:	d101      	bne.n	800974c <memchr+0x12>
 8009748:	2000      	movs	r0, #0
 800974a:	e003      	b.n	8009754 <memchr+0x1a>
 800974c:	7804      	ldrb	r4, [r0, #0]
 800974e:	3301      	adds	r3, #1
 8009750:	428c      	cmp	r4, r1
 8009752:	d1f6      	bne.n	8009742 <memchr+0x8>
 8009754:	bd10      	pop	{r4, pc}

08009756 <quorem>:
 8009756:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975a:	6903      	ldr	r3, [r0, #16]
 800975c:	690c      	ldr	r4, [r1, #16]
 800975e:	4607      	mov	r7, r0
 8009760:	42a3      	cmp	r3, r4
 8009762:	db7e      	blt.n	8009862 <quorem+0x10c>
 8009764:	3c01      	subs	r4, #1
 8009766:	00a3      	lsls	r3, r4, #2
 8009768:	f100 0514 	add.w	r5, r0, #20
 800976c:	f101 0814 	add.w	r8, r1, #20
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009776:	9301      	str	r3, [sp, #4]
 8009778:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800977c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009780:	3301      	adds	r3, #1
 8009782:	429a      	cmp	r2, r3
 8009784:	fbb2 f6f3 	udiv	r6, r2, r3
 8009788:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800978c:	d32e      	bcc.n	80097ec <quorem+0x96>
 800978e:	f04f 0a00 	mov.w	sl, #0
 8009792:	46c4      	mov	ip, r8
 8009794:	46ae      	mov	lr, r5
 8009796:	46d3      	mov	fp, sl
 8009798:	f85c 3b04 	ldr.w	r3, [ip], #4
 800979c:	b298      	uxth	r0, r3
 800979e:	fb06 a000 	mla	r0, r6, r0, sl
 80097a2:	0c1b      	lsrs	r3, r3, #16
 80097a4:	0c02      	lsrs	r2, r0, #16
 80097a6:	fb06 2303 	mla	r3, r6, r3, r2
 80097aa:	f8de 2000 	ldr.w	r2, [lr]
 80097ae:	b280      	uxth	r0, r0
 80097b0:	b292      	uxth	r2, r2
 80097b2:	1a12      	subs	r2, r2, r0
 80097b4:	445a      	add	r2, fp
 80097b6:	f8de 0000 	ldr.w	r0, [lr]
 80097ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097be:	b29b      	uxth	r3, r3
 80097c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80097c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80097c8:	b292      	uxth	r2, r2
 80097ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80097ce:	45e1      	cmp	r9, ip
 80097d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80097d4:	f84e 2b04 	str.w	r2, [lr], #4
 80097d8:	d2de      	bcs.n	8009798 <quorem+0x42>
 80097da:	9b00      	ldr	r3, [sp, #0]
 80097dc:	58eb      	ldr	r3, [r5, r3]
 80097de:	b92b      	cbnz	r3, 80097ec <quorem+0x96>
 80097e0:	9b01      	ldr	r3, [sp, #4]
 80097e2:	3b04      	subs	r3, #4
 80097e4:	429d      	cmp	r5, r3
 80097e6:	461a      	mov	r2, r3
 80097e8:	d32f      	bcc.n	800984a <quorem+0xf4>
 80097ea:	613c      	str	r4, [r7, #16]
 80097ec:	4638      	mov	r0, r7
 80097ee:	f001 f97f 	bl	800aaf0 <__mcmp>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	db25      	blt.n	8009842 <quorem+0xec>
 80097f6:	4629      	mov	r1, r5
 80097f8:	2000      	movs	r0, #0
 80097fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80097fe:	f8d1 c000 	ldr.w	ip, [r1]
 8009802:	fa1f fe82 	uxth.w	lr, r2
 8009806:	fa1f f38c 	uxth.w	r3, ip
 800980a:	eba3 030e 	sub.w	r3, r3, lr
 800980e:	4403      	add	r3, r0
 8009810:	0c12      	lsrs	r2, r2, #16
 8009812:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009816:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800981a:	b29b      	uxth	r3, r3
 800981c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009820:	45c1      	cmp	r9, r8
 8009822:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009826:	f841 3b04 	str.w	r3, [r1], #4
 800982a:	d2e6      	bcs.n	80097fa <quorem+0xa4>
 800982c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009830:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009834:	b922      	cbnz	r2, 8009840 <quorem+0xea>
 8009836:	3b04      	subs	r3, #4
 8009838:	429d      	cmp	r5, r3
 800983a:	461a      	mov	r2, r3
 800983c:	d30b      	bcc.n	8009856 <quorem+0x100>
 800983e:	613c      	str	r4, [r7, #16]
 8009840:	3601      	adds	r6, #1
 8009842:	4630      	mov	r0, r6
 8009844:	b003      	add	sp, #12
 8009846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984a:	6812      	ldr	r2, [r2, #0]
 800984c:	3b04      	subs	r3, #4
 800984e:	2a00      	cmp	r2, #0
 8009850:	d1cb      	bne.n	80097ea <quorem+0x94>
 8009852:	3c01      	subs	r4, #1
 8009854:	e7c6      	b.n	80097e4 <quorem+0x8e>
 8009856:	6812      	ldr	r2, [r2, #0]
 8009858:	3b04      	subs	r3, #4
 800985a:	2a00      	cmp	r2, #0
 800985c:	d1ef      	bne.n	800983e <quorem+0xe8>
 800985e:	3c01      	subs	r4, #1
 8009860:	e7ea      	b.n	8009838 <quorem+0xe2>
 8009862:	2000      	movs	r0, #0
 8009864:	e7ee      	b.n	8009844 <quorem+0xee>
	...

08009868 <_dtoa_r>:
 8009868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	4614      	mov	r4, r2
 800986e:	461d      	mov	r5, r3
 8009870:	69c7      	ldr	r7, [r0, #28]
 8009872:	b097      	sub	sp, #92	@ 0x5c
 8009874:	4681      	mov	r9, r0
 8009876:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800987a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800987c:	b97f      	cbnz	r7, 800989e <_dtoa_r+0x36>
 800987e:	2010      	movs	r0, #16
 8009880:	f000 fe0e 	bl	800a4a0 <malloc>
 8009884:	4602      	mov	r2, r0
 8009886:	f8c9 001c 	str.w	r0, [r9, #28]
 800988a:	b920      	cbnz	r0, 8009896 <_dtoa_r+0x2e>
 800988c:	21ef      	movs	r1, #239	@ 0xef
 800988e:	4bac      	ldr	r3, [pc, #688]	@ (8009b40 <_dtoa_r+0x2d8>)
 8009890:	48ac      	ldr	r0, [pc, #688]	@ (8009b44 <_dtoa_r+0x2dc>)
 8009892:	f001 fafb 	bl	800ae8c <__assert_func>
 8009896:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800989a:	6007      	str	r7, [r0, #0]
 800989c:	60c7      	str	r7, [r0, #12]
 800989e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098a2:	6819      	ldr	r1, [r3, #0]
 80098a4:	b159      	cbz	r1, 80098be <_dtoa_r+0x56>
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	2301      	movs	r3, #1
 80098aa:	4093      	lsls	r3, r2
 80098ac:	604a      	str	r2, [r1, #4]
 80098ae:	608b      	str	r3, [r1, #8]
 80098b0:	4648      	mov	r0, r9
 80098b2:	f000 feeb 	bl	800a68c <_Bfree>
 80098b6:	2200      	movs	r2, #0
 80098b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	1e2b      	subs	r3, r5, #0
 80098c0:	bfaf      	iteee	ge
 80098c2:	2300      	movge	r3, #0
 80098c4:	2201      	movlt	r2, #1
 80098c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80098ca:	9307      	strlt	r3, [sp, #28]
 80098cc:	bfa8      	it	ge
 80098ce:	6033      	strge	r3, [r6, #0]
 80098d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80098d4:	4b9c      	ldr	r3, [pc, #624]	@ (8009b48 <_dtoa_r+0x2e0>)
 80098d6:	bfb8      	it	lt
 80098d8:	6032      	strlt	r2, [r6, #0]
 80098da:	ea33 0308 	bics.w	r3, r3, r8
 80098de:	d112      	bne.n	8009906 <_dtoa_r+0x9e>
 80098e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80098e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80098ec:	4323      	orrs	r3, r4
 80098ee:	f000 855e 	beq.w	800a3ae <_dtoa_r+0xb46>
 80098f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80098f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009b4c <_dtoa_r+0x2e4>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8560 	beq.w	800a3be <_dtoa_r+0xb56>
 80098fe:	f10a 0303 	add.w	r3, sl, #3
 8009902:	f000 bd5a 	b.w	800a3ba <_dtoa_r+0xb52>
 8009906:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800990a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800990e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009912:	2200      	movs	r2, #0
 8009914:	2300      	movs	r3, #0
 8009916:	f7f7 f847 	bl	80009a8 <__aeabi_dcmpeq>
 800991a:	4607      	mov	r7, r0
 800991c:	b158      	cbz	r0, 8009936 <_dtoa_r+0xce>
 800991e:	2301      	movs	r3, #1
 8009920:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009922:	6013      	str	r3, [r2, #0]
 8009924:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009926:	b113      	cbz	r3, 800992e <_dtoa_r+0xc6>
 8009928:	4b89      	ldr	r3, [pc, #548]	@ (8009b50 <_dtoa_r+0x2e8>)
 800992a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009b54 <_dtoa_r+0x2ec>
 8009932:	f000 bd44 	b.w	800a3be <_dtoa_r+0xb56>
 8009936:	ab14      	add	r3, sp, #80	@ 0x50
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	ab15      	add	r3, sp, #84	@ 0x54
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	4648      	mov	r0, r9
 8009940:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009944:	f001 f984 	bl	800ac50 <__d2b>
 8009948:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800994c:	9003      	str	r0, [sp, #12]
 800994e:	2e00      	cmp	r6, #0
 8009950:	d078      	beq.n	8009a44 <_dtoa_r+0x1dc>
 8009952:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009958:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800995c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009960:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009964:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009968:	9712      	str	r7, [sp, #72]	@ 0x48
 800996a:	4619      	mov	r1, r3
 800996c:	2200      	movs	r2, #0
 800996e:	4b7a      	ldr	r3, [pc, #488]	@ (8009b58 <_dtoa_r+0x2f0>)
 8009970:	f7f6 fbfa 	bl	8000168 <__aeabi_dsub>
 8009974:	a36c      	add	r3, pc, #432	@ (adr r3, 8009b28 <_dtoa_r+0x2c0>)
 8009976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997a:	f7f6 fdad 	bl	80004d8 <__aeabi_dmul>
 800997e:	a36c      	add	r3, pc, #432	@ (adr r3, 8009b30 <_dtoa_r+0x2c8>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f7f6 fbf2 	bl	800016c <__adddf3>
 8009988:	4604      	mov	r4, r0
 800998a:	4630      	mov	r0, r6
 800998c:	460d      	mov	r5, r1
 800998e:	f7f6 fd39 	bl	8000404 <__aeabi_i2d>
 8009992:	a369      	add	r3, pc, #420	@ (adr r3, 8009b38 <_dtoa_r+0x2d0>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7f6 fd9e 	bl	80004d8 <__aeabi_dmul>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4620      	mov	r0, r4
 80099a2:	4629      	mov	r1, r5
 80099a4:	f7f6 fbe2 	bl	800016c <__adddf3>
 80099a8:	4604      	mov	r4, r0
 80099aa:	460d      	mov	r5, r1
 80099ac:	f7f7 f844 	bl	8000a38 <__aeabi_d2iz>
 80099b0:	2200      	movs	r2, #0
 80099b2:	4607      	mov	r7, r0
 80099b4:	2300      	movs	r3, #0
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f6 ffff 	bl	80009bc <__aeabi_dcmplt>
 80099be:	b140      	cbz	r0, 80099d2 <_dtoa_r+0x16a>
 80099c0:	4638      	mov	r0, r7
 80099c2:	f7f6 fd1f 	bl	8000404 <__aeabi_i2d>
 80099c6:	4622      	mov	r2, r4
 80099c8:	462b      	mov	r3, r5
 80099ca:	f7f6 ffed 	bl	80009a8 <__aeabi_dcmpeq>
 80099ce:	b900      	cbnz	r0, 80099d2 <_dtoa_r+0x16a>
 80099d0:	3f01      	subs	r7, #1
 80099d2:	2f16      	cmp	r7, #22
 80099d4:	d854      	bhi.n	8009a80 <_dtoa_r+0x218>
 80099d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099da:	4b60      	ldr	r3, [pc, #384]	@ (8009b5c <_dtoa_r+0x2f4>)
 80099dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e4:	f7f6 ffea 	bl	80009bc <__aeabi_dcmplt>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d04b      	beq.n	8009a84 <_dtoa_r+0x21c>
 80099ec:	2300      	movs	r3, #0
 80099ee:	3f01      	subs	r7, #1
 80099f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099f4:	1b9b      	subs	r3, r3, r6
 80099f6:	1e5a      	subs	r2, r3, #1
 80099f8:	bf49      	itett	mi
 80099fa:	f1c3 0301 	rsbmi	r3, r3, #1
 80099fe:	2300      	movpl	r3, #0
 8009a00:	9304      	strmi	r3, [sp, #16]
 8009a02:	2300      	movmi	r3, #0
 8009a04:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a06:	bf54      	ite	pl
 8009a08:	9304      	strpl	r3, [sp, #16]
 8009a0a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	db3b      	blt.n	8009a88 <_dtoa_r+0x220>
 8009a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a12:	970e      	str	r7, [sp, #56]	@ 0x38
 8009a14:	443b      	add	r3, r7
 8009a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a18:	2300      	movs	r3, #0
 8009a1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009a1e:	2b09      	cmp	r3, #9
 8009a20:	d865      	bhi.n	8009aee <_dtoa_r+0x286>
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	bfc4      	itt	gt
 8009a26:	3b04      	subgt	r3, #4
 8009a28:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009a2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009a2c:	bfc8      	it	gt
 8009a2e:	2400      	movgt	r4, #0
 8009a30:	f1a3 0302 	sub.w	r3, r3, #2
 8009a34:	bfd8      	it	le
 8009a36:	2401      	movle	r4, #1
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	d864      	bhi.n	8009b06 <_dtoa_r+0x29e>
 8009a3c:	e8df f003 	tbb	[pc, r3]
 8009a40:	2c385553 	.word	0x2c385553
 8009a44:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009a48:	441e      	add	r6, r3
 8009a4a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009a4e:	2b20      	cmp	r3, #32
 8009a50:	bfc1      	itttt	gt
 8009a52:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009a56:	fa08 f803 	lslgt.w	r8, r8, r3
 8009a5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009a5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009a62:	bfd6      	itet	le
 8009a64:	f1c3 0320 	rsble	r3, r3, #32
 8009a68:	ea48 0003 	orrgt.w	r0, r8, r3
 8009a6c:	fa04 f003 	lslle.w	r0, r4, r3
 8009a70:	f7f6 fcb8 	bl	80003e4 <__aeabi_ui2d>
 8009a74:	2201      	movs	r2, #1
 8009a76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009a7a:	3e01      	subs	r6, #1
 8009a7c:	9212      	str	r2, [sp, #72]	@ 0x48
 8009a7e:	e774      	b.n	800996a <_dtoa_r+0x102>
 8009a80:	2301      	movs	r3, #1
 8009a82:	e7b5      	b.n	80099f0 <_dtoa_r+0x188>
 8009a84:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009a86:	e7b4      	b.n	80099f2 <_dtoa_r+0x18a>
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	1bdb      	subs	r3, r3, r7
 8009a8c:	9304      	str	r3, [sp, #16]
 8009a8e:	427b      	negs	r3, r7
 8009a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a92:	2300      	movs	r3, #0
 8009a94:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a96:	e7c1      	b.n	8009a1c <_dtoa_r+0x1b4>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a9e:	eb07 0b03 	add.w	fp, r7, r3
 8009aa2:	f10b 0301 	add.w	r3, fp, #1
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	9308      	str	r3, [sp, #32]
 8009aaa:	bfb8      	it	lt
 8009aac:	2301      	movlt	r3, #1
 8009aae:	e006      	b.n	8009abe <_dtoa_r+0x256>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ab4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dd28      	ble.n	8009b0c <_dtoa_r+0x2a4>
 8009aba:	469b      	mov	fp, r3
 8009abc:	9308      	str	r3, [sp, #32]
 8009abe:	2100      	movs	r1, #0
 8009ac0:	2204      	movs	r2, #4
 8009ac2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009ac6:	f102 0514 	add.w	r5, r2, #20
 8009aca:	429d      	cmp	r5, r3
 8009acc:	d926      	bls.n	8009b1c <_dtoa_r+0x2b4>
 8009ace:	6041      	str	r1, [r0, #4]
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	f000 fd9b 	bl	800a60c <_Balloc>
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d143      	bne.n	8009b64 <_dtoa_r+0x2fc>
 8009adc:	4602      	mov	r2, r0
 8009ade:	f240 11af 	movw	r1, #431	@ 0x1af
 8009ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8009b60 <_dtoa_r+0x2f8>)
 8009ae4:	e6d4      	b.n	8009890 <_dtoa_r+0x28>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e7e3      	b.n	8009ab2 <_dtoa_r+0x24a>
 8009aea:	2300      	movs	r3, #0
 8009aec:	e7d5      	b.n	8009a9a <_dtoa_r+0x232>
 8009aee:	2401      	movs	r4, #1
 8009af0:	2300      	movs	r3, #0
 8009af2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009af4:	9320      	str	r3, [sp, #128]	@ 0x80
 8009af6:	f04f 3bff 	mov.w	fp, #4294967295
 8009afa:	2200      	movs	r2, #0
 8009afc:	2312      	movs	r3, #18
 8009afe:	f8cd b020 	str.w	fp, [sp, #32]
 8009b02:	9221      	str	r2, [sp, #132]	@ 0x84
 8009b04:	e7db      	b.n	8009abe <_dtoa_r+0x256>
 8009b06:	2301      	movs	r3, #1
 8009b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b0a:	e7f4      	b.n	8009af6 <_dtoa_r+0x28e>
 8009b0c:	f04f 0b01 	mov.w	fp, #1
 8009b10:	465b      	mov	r3, fp
 8009b12:	f8cd b020 	str.w	fp, [sp, #32]
 8009b16:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8009b1a:	e7d0      	b.n	8009abe <_dtoa_r+0x256>
 8009b1c:	3101      	adds	r1, #1
 8009b1e:	0052      	lsls	r2, r2, #1
 8009b20:	e7d1      	b.n	8009ac6 <_dtoa_r+0x25e>
 8009b22:	bf00      	nop
 8009b24:	f3af 8000 	nop.w
 8009b28:	636f4361 	.word	0x636f4361
 8009b2c:	3fd287a7 	.word	0x3fd287a7
 8009b30:	8b60c8b3 	.word	0x8b60c8b3
 8009b34:	3fc68a28 	.word	0x3fc68a28
 8009b38:	509f79fb 	.word	0x509f79fb
 8009b3c:	3fd34413 	.word	0x3fd34413
 8009b40:	0800b557 	.word	0x0800b557
 8009b44:	0800b56e 	.word	0x0800b56e
 8009b48:	7ff00000 	.word	0x7ff00000
 8009b4c:	0800b553 	.word	0x0800b553
 8009b50:	0800b527 	.word	0x0800b527
 8009b54:	0800b526 	.word	0x0800b526
 8009b58:	3ff80000 	.word	0x3ff80000
 8009b5c:	0800b6c0 	.word	0x0800b6c0
 8009b60:	0800b5c6 	.word	0x0800b5c6
 8009b64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009b68:	6018      	str	r0, [r3, #0]
 8009b6a:	9b08      	ldr	r3, [sp, #32]
 8009b6c:	2b0e      	cmp	r3, #14
 8009b6e:	f200 80a1 	bhi.w	8009cb4 <_dtoa_r+0x44c>
 8009b72:	2c00      	cmp	r4, #0
 8009b74:	f000 809e 	beq.w	8009cb4 <_dtoa_r+0x44c>
 8009b78:	2f00      	cmp	r7, #0
 8009b7a:	dd33      	ble.n	8009be4 <_dtoa_r+0x37c>
 8009b7c:	4b9c      	ldr	r3, [pc, #624]	@ (8009df0 <_dtoa_r+0x588>)
 8009b7e:	f007 020f 	and.w	r2, r7, #15
 8009b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b86:	05f8      	lsls	r0, r7, #23
 8009b88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009b90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009b94:	d516      	bpl.n	8009bc4 <_dtoa_r+0x35c>
 8009b96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b9a:	4b96      	ldr	r3, [pc, #600]	@ (8009df4 <_dtoa_r+0x58c>)
 8009b9c:	2603      	movs	r6, #3
 8009b9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ba2:	f7f6 fdc3 	bl	800072c <__aeabi_ddiv>
 8009ba6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009baa:	f004 040f 	and.w	r4, r4, #15
 8009bae:	4d91      	ldr	r5, [pc, #580]	@ (8009df4 <_dtoa_r+0x58c>)
 8009bb0:	b954      	cbnz	r4, 8009bc8 <_dtoa_r+0x360>
 8009bb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bba:	f7f6 fdb7 	bl	800072c <__aeabi_ddiv>
 8009bbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bc2:	e028      	b.n	8009c16 <_dtoa_r+0x3ae>
 8009bc4:	2602      	movs	r6, #2
 8009bc6:	e7f2      	b.n	8009bae <_dtoa_r+0x346>
 8009bc8:	07e1      	lsls	r1, r4, #31
 8009bca:	d508      	bpl.n	8009bde <_dtoa_r+0x376>
 8009bcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bd4:	f7f6 fc80 	bl	80004d8 <__aeabi_dmul>
 8009bd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bdc:	3601      	adds	r6, #1
 8009bde:	1064      	asrs	r4, r4, #1
 8009be0:	3508      	adds	r5, #8
 8009be2:	e7e5      	b.n	8009bb0 <_dtoa_r+0x348>
 8009be4:	f000 80af 	beq.w	8009d46 <_dtoa_r+0x4de>
 8009be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bec:	427c      	negs	r4, r7
 8009bee:	4b80      	ldr	r3, [pc, #512]	@ (8009df0 <_dtoa_r+0x588>)
 8009bf0:	f004 020f 	and.w	r2, r4, #15
 8009bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	f7f6 fc6c 	bl	80004d8 <__aeabi_dmul>
 8009c00:	2602      	movs	r6, #2
 8009c02:	2300      	movs	r3, #0
 8009c04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c08:	4d7a      	ldr	r5, [pc, #488]	@ (8009df4 <_dtoa_r+0x58c>)
 8009c0a:	1124      	asrs	r4, r4, #4
 8009c0c:	2c00      	cmp	r4, #0
 8009c0e:	f040 808f 	bne.w	8009d30 <_dtoa_r+0x4c8>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1d3      	bne.n	8009bbe <_dtoa_r+0x356>
 8009c16:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009c1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 8094 	beq.w	8009d4a <_dtoa_r+0x4e2>
 8009c22:	2200      	movs	r2, #0
 8009c24:	4620      	mov	r0, r4
 8009c26:	4629      	mov	r1, r5
 8009c28:	4b73      	ldr	r3, [pc, #460]	@ (8009df8 <_dtoa_r+0x590>)
 8009c2a:	f7f6 fec7 	bl	80009bc <__aeabi_dcmplt>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f000 808b 	beq.w	8009d4a <_dtoa_r+0x4e2>
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 8087 	beq.w	8009d4a <_dtoa_r+0x4e2>
 8009c3c:	f1bb 0f00 	cmp.w	fp, #0
 8009c40:	dd34      	ble.n	8009cac <_dtoa_r+0x444>
 8009c42:	4620      	mov	r0, r4
 8009c44:	2200      	movs	r2, #0
 8009c46:	4629      	mov	r1, r5
 8009c48:	4b6c      	ldr	r3, [pc, #432]	@ (8009dfc <_dtoa_r+0x594>)
 8009c4a:	f7f6 fc45 	bl	80004d8 <__aeabi_dmul>
 8009c4e:	465c      	mov	r4, fp
 8009c50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c54:	f107 38ff 	add.w	r8, r7, #4294967295
 8009c58:	3601      	adds	r6, #1
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7f6 fbd2 	bl	8000404 <__aeabi_i2d>
 8009c60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c64:	f7f6 fc38 	bl	80004d8 <__aeabi_dmul>
 8009c68:	2200      	movs	r2, #0
 8009c6a:	4b65      	ldr	r3, [pc, #404]	@ (8009e00 <_dtoa_r+0x598>)
 8009c6c:	f7f6 fa7e 	bl	800016c <__adddf3>
 8009c70:	4605      	mov	r5, r0
 8009c72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009c76:	2c00      	cmp	r4, #0
 8009c78:	d16a      	bne.n	8009d50 <_dtoa_r+0x4e8>
 8009c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	4b60      	ldr	r3, [pc, #384]	@ (8009e04 <_dtoa_r+0x59c>)
 8009c82:	f7f6 fa71 	bl	8000168 <__aeabi_dsub>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c8e:	462a      	mov	r2, r5
 8009c90:	4633      	mov	r3, r6
 8009c92:	f7f6 feb1 	bl	80009f8 <__aeabi_dcmpgt>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f040 8298 	bne.w	800a1cc <_dtoa_r+0x964>
 8009c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ca0:	462a      	mov	r2, r5
 8009ca2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009ca6:	f7f6 fe89 	bl	80009bc <__aeabi_dcmplt>
 8009caa:	bb38      	cbnz	r0, 8009cfc <_dtoa_r+0x494>
 8009cac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009cb0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009cb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f2c0 8157 	blt.w	8009f6a <_dtoa_r+0x702>
 8009cbc:	2f0e      	cmp	r7, #14
 8009cbe:	f300 8154 	bgt.w	8009f6a <_dtoa_r+0x702>
 8009cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8009df0 <_dtoa_r+0x588>)
 8009cc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ccc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009cd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f280 80e5 	bge.w	8009ea2 <_dtoa_r+0x63a>
 8009cd8:	9b08      	ldr	r3, [sp, #32]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f300 80e1 	bgt.w	8009ea2 <_dtoa_r+0x63a>
 8009ce0:	d10c      	bne.n	8009cfc <_dtoa_r+0x494>
 8009ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	4b46      	ldr	r3, [pc, #280]	@ (8009e04 <_dtoa_r+0x59c>)
 8009cea:	f7f6 fbf5 	bl	80004d8 <__aeabi_dmul>
 8009cee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cf2:	f7f6 fe77 	bl	80009e4 <__aeabi_dcmpge>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f000 8266 	beq.w	800a1c8 <_dtoa_r+0x960>
 8009cfc:	2400      	movs	r4, #0
 8009cfe:	4625      	mov	r5, r4
 8009d00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d02:	4656      	mov	r6, sl
 8009d04:	ea6f 0803 	mvn.w	r8, r3
 8009d08:	2700      	movs	r7, #0
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	f000 fcbd 	bl	800a68c <_Bfree>
 8009d12:	2d00      	cmp	r5, #0
 8009d14:	f000 80bd 	beq.w	8009e92 <_dtoa_r+0x62a>
 8009d18:	b12f      	cbz	r7, 8009d26 <_dtoa_r+0x4be>
 8009d1a:	42af      	cmp	r7, r5
 8009d1c:	d003      	beq.n	8009d26 <_dtoa_r+0x4be>
 8009d1e:	4639      	mov	r1, r7
 8009d20:	4648      	mov	r0, r9
 8009d22:	f000 fcb3 	bl	800a68c <_Bfree>
 8009d26:	4629      	mov	r1, r5
 8009d28:	4648      	mov	r0, r9
 8009d2a:	f000 fcaf 	bl	800a68c <_Bfree>
 8009d2e:	e0b0      	b.n	8009e92 <_dtoa_r+0x62a>
 8009d30:	07e2      	lsls	r2, r4, #31
 8009d32:	d505      	bpl.n	8009d40 <_dtoa_r+0x4d8>
 8009d34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d38:	f7f6 fbce 	bl	80004d8 <__aeabi_dmul>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	3601      	adds	r6, #1
 8009d40:	1064      	asrs	r4, r4, #1
 8009d42:	3508      	adds	r5, #8
 8009d44:	e762      	b.n	8009c0c <_dtoa_r+0x3a4>
 8009d46:	2602      	movs	r6, #2
 8009d48:	e765      	b.n	8009c16 <_dtoa_r+0x3ae>
 8009d4a:	46b8      	mov	r8, r7
 8009d4c:	9c08      	ldr	r4, [sp, #32]
 8009d4e:	e784      	b.n	8009c5a <_dtoa_r+0x3f2>
 8009d50:	4b27      	ldr	r3, [pc, #156]	@ (8009df0 <_dtoa_r+0x588>)
 8009d52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d5c:	4454      	add	r4, sl
 8009d5e:	2900      	cmp	r1, #0
 8009d60:	d054      	beq.n	8009e0c <_dtoa_r+0x5a4>
 8009d62:	2000      	movs	r0, #0
 8009d64:	4928      	ldr	r1, [pc, #160]	@ (8009e08 <_dtoa_r+0x5a0>)
 8009d66:	f7f6 fce1 	bl	800072c <__aeabi_ddiv>
 8009d6a:	4633      	mov	r3, r6
 8009d6c:	462a      	mov	r2, r5
 8009d6e:	f7f6 f9fb 	bl	8000168 <__aeabi_dsub>
 8009d72:	4656      	mov	r6, sl
 8009d74:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d7c:	f7f6 fe5c 	bl	8000a38 <__aeabi_d2iz>
 8009d80:	4605      	mov	r5, r0
 8009d82:	f7f6 fb3f 	bl	8000404 <__aeabi_i2d>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d8e:	f7f6 f9eb 	bl	8000168 <__aeabi_dsub>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	3530      	adds	r5, #48	@ 0x30
 8009d98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009da0:	f806 5b01 	strb.w	r5, [r6], #1
 8009da4:	f7f6 fe0a 	bl	80009bc <__aeabi_dcmplt>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d172      	bne.n	8009e92 <_dtoa_r+0x62a>
 8009dac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009db0:	2000      	movs	r0, #0
 8009db2:	4911      	ldr	r1, [pc, #68]	@ (8009df8 <_dtoa_r+0x590>)
 8009db4:	f7f6 f9d8 	bl	8000168 <__aeabi_dsub>
 8009db8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009dbc:	f7f6 fdfe 	bl	80009bc <__aeabi_dcmplt>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f040 80b4 	bne.w	8009f2e <_dtoa_r+0x6c6>
 8009dc6:	42a6      	cmp	r6, r4
 8009dc8:	f43f af70 	beq.w	8009cac <_dtoa_r+0x444>
 8009dcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8009dfc <_dtoa_r+0x594>)
 8009dd4:	f7f6 fb80 	bl	80004d8 <__aeabi_dmul>
 8009dd8:	2200      	movs	r2, #0
 8009dda:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009de2:	4b06      	ldr	r3, [pc, #24]	@ (8009dfc <_dtoa_r+0x594>)
 8009de4:	f7f6 fb78 	bl	80004d8 <__aeabi_dmul>
 8009de8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009dec:	e7c4      	b.n	8009d78 <_dtoa_r+0x510>
 8009dee:	bf00      	nop
 8009df0:	0800b6c0 	.word	0x0800b6c0
 8009df4:	0800b698 	.word	0x0800b698
 8009df8:	3ff00000 	.word	0x3ff00000
 8009dfc:	40240000 	.word	0x40240000
 8009e00:	401c0000 	.word	0x401c0000
 8009e04:	40140000 	.word	0x40140000
 8009e08:	3fe00000 	.word	0x3fe00000
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f7f6 fb62 	bl	80004d8 <__aeabi_dmul>
 8009e14:	4656      	mov	r6, sl
 8009e16:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e1a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009e1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e20:	f7f6 fe0a 	bl	8000a38 <__aeabi_d2iz>
 8009e24:	4605      	mov	r5, r0
 8009e26:	f7f6 faed 	bl	8000404 <__aeabi_i2d>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e32:	f7f6 f999 	bl	8000168 <__aeabi_dsub>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	3530      	adds	r5, #48	@ 0x30
 8009e3c:	f806 5b01 	strb.w	r5, [r6], #1
 8009e40:	42a6      	cmp	r6, r4
 8009e42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e46:	f04f 0200 	mov.w	r2, #0
 8009e4a:	d124      	bne.n	8009e96 <_dtoa_r+0x62e>
 8009e4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009e50:	4bae      	ldr	r3, [pc, #696]	@ (800a10c <_dtoa_r+0x8a4>)
 8009e52:	f7f6 f98b 	bl	800016c <__adddf3>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e5e:	f7f6 fdcb 	bl	80009f8 <__aeabi_dcmpgt>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d163      	bne.n	8009f2e <_dtoa_r+0x6c6>
 8009e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	49a7      	ldr	r1, [pc, #668]	@ (800a10c <_dtoa_r+0x8a4>)
 8009e6e:	f7f6 f97b 	bl	8000168 <__aeabi_dsub>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e7a:	f7f6 fd9f 	bl	80009bc <__aeabi_dcmplt>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f43f af14 	beq.w	8009cac <_dtoa_r+0x444>
 8009e84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009e86:	1e73      	subs	r3, r6, #1
 8009e88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e8e:	2b30      	cmp	r3, #48	@ 0x30
 8009e90:	d0f8      	beq.n	8009e84 <_dtoa_r+0x61c>
 8009e92:	4647      	mov	r7, r8
 8009e94:	e03b      	b.n	8009f0e <_dtoa_r+0x6a6>
 8009e96:	4b9e      	ldr	r3, [pc, #632]	@ (800a110 <_dtoa_r+0x8a8>)
 8009e98:	f7f6 fb1e 	bl	80004d8 <__aeabi_dmul>
 8009e9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009ea0:	e7bc      	b.n	8009e1c <_dtoa_r+0x5b4>
 8009ea2:	4656      	mov	r6, sl
 8009ea4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 fc3c 	bl	800072c <__aeabi_ddiv>
 8009eb4:	f7f6 fdc0 	bl	8000a38 <__aeabi_d2iz>
 8009eb8:	4680      	mov	r8, r0
 8009eba:	f7f6 faa3 	bl	8000404 <__aeabi_i2d>
 8009ebe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ec2:	f7f6 fb09 	bl	80004d8 <__aeabi_dmul>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4620      	mov	r0, r4
 8009ecc:	4629      	mov	r1, r5
 8009ece:	f7f6 f94b 	bl	8000168 <__aeabi_dsub>
 8009ed2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ed6:	9d08      	ldr	r5, [sp, #32]
 8009ed8:	f806 4b01 	strb.w	r4, [r6], #1
 8009edc:	eba6 040a 	sub.w	r4, r6, sl
 8009ee0:	42a5      	cmp	r5, r4
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	d133      	bne.n	8009f50 <_dtoa_r+0x6e8>
 8009ee8:	f7f6 f940 	bl	800016c <__adddf3>
 8009eec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	f7f6 fd80 	bl	80009f8 <__aeabi_dcmpgt>
 8009ef8:	b9c0      	cbnz	r0, 8009f2c <_dtoa_r+0x6c4>
 8009efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009efe:	4620      	mov	r0, r4
 8009f00:	4629      	mov	r1, r5
 8009f02:	f7f6 fd51 	bl	80009a8 <__aeabi_dcmpeq>
 8009f06:	b110      	cbz	r0, 8009f0e <_dtoa_r+0x6a6>
 8009f08:	f018 0f01 	tst.w	r8, #1
 8009f0c:	d10e      	bne.n	8009f2c <_dtoa_r+0x6c4>
 8009f0e:	4648      	mov	r0, r9
 8009f10:	9903      	ldr	r1, [sp, #12]
 8009f12:	f000 fbbb 	bl	800a68c <_Bfree>
 8009f16:	2300      	movs	r3, #0
 8009f18:	7033      	strb	r3, [r6, #0]
 8009f1a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009f1c:	3701      	adds	r7, #1
 8009f1e:	601f      	str	r7, [r3, #0]
 8009f20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 824b 	beq.w	800a3be <_dtoa_r+0xb56>
 8009f28:	601e      	str	r6, [r3, #0]
 8009f2a:	e248      	b.n	800a3be <_dtoa_r+0xb56>
 8009f2c:	46b8      	mov	r8, r7
 8009f2e:	4633      	mov	r3, r6
 8009f30:	461e      	mov	r6, r3
 8009f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f36:	2a39      	cmp	r2, #57	@ 0x39
 8009f38:	d106      	bne.n	8009f48 <_dtoa_r+0x6e0>
 8009f3a:	459a      	cmp	sl, r3
 8009f3c:	d1f8      	bne.n	8009f30 <_dtoa_r+0x6c8>
 8009f3e:	2230      	movs	r2, #48	@ 0x30
 8009f40:	f108 0801 	add.w	r8, r8, #1
 8009f44:	f88a 2000 	strb.w	r2, [sl]
 8009f48:	781a      	ldrb	r2, [r3, #0]
 8009f4a:	3201      	adds	r2, #1
 8009f4c:	701a      	strb	r2, [r3, #0]
 8009f4e:	e7a0      	b.n	8009e92 <_dtoa_r+0x62a>
 8009f50:	2200      	movs	r2, #0
 8009f52:	4b6f      	ldr	r3, [pc, #444]	@ (800a110 <_dtoa_r+0x8a8>)
 8009f54:	f7f6 fac0 	bl	80004d8 <__aeabi_dmul>
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	460d      	mov	r5, r1
 8009f60:	f7f6 fd22 	bl	80009a8 <__aeabi_dcmpeq>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d09f      	beq.n	8009ea8 <_dtoa_r+0x640>
 8009f68:	e7d1      	b.n	8009f0e <_dtoa_r+0x6a6>
 8009f6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f6c:	2a00      	cmp	r2, #0
 8009f6e:	f000 80ea 	beq.w	800a146 <_dtoa_r+0x8de>
 8009f72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009f74:	2a01      	cmp	r2, #1
 8009f76:	f300 80cd 	bgt.w	800a114 <_dtoa_r+0x8ac>
 8009f7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009f7c:	2a00      	cmp	r2, #0
 8009f7e:	f000 80c1 	beq.w	800a104 <_dtoa_r+0x89c>
 8009f82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009f86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f88:	9e04      	ldr	r6, [sp, #16]
 8009f8a:	9a04      	ldr	r2, [sp, #16]
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	441a      	add	r2, r3
 8009f90:	9204      	str	r2, [sp, #16]
 8009f92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f94:	4648      	mov	r0, r9
 8009f96:	441a      	add	r2, r3
 8009f98:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f9a:	f000 fc2b 	bl	800a7f4 <__i2b>
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	b166      	cbz	r6, 8009fbc <_dtoa_r+0x754>
 8009fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	dd09      	ble.n	8009fbc <_dtoa_r+0x754>
 8009fa8:	42b3      	cmp	r3, r6
 8009faa:	bfa8      	it	ge
 8009fac:	4633      	movge	r3, r6
 8009fae:	9a04      	ldr	r2, [sp, #16]
 8009fb0:	1af6      	subs	r6, r6, r3
 8009fb2:	1ad2      	subs	r2, r2, r3
 8009fb4:	9204      	str	r2, [sp, #16]
 8009fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fbe:	b30b      	cbz	r3, 800a004 <_dtoa_r+0x79c>
 8009fc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 80c6 	beq.w	800a154 <_dtoa_r+0x8ec>
 8009fc8:	2c00      	cmp	r4, #0
 8009fca:	f000 80c0 	beq.w	800a14e <_dtoa_r+0x8e6>
 8009fce:	4629      	mov	r1, r5
 8009fd0:	4622      	mov	r2, r4
 8009fd2:	4648      	mov	r0, r9
 8009fd4:	f000 fcc6 	bl	800a964 <__pow5mult>
 8009fd8:	9a03      	ldr	r2, [sp, #12]
 8009fda:	4601      	mov	r1, r0
 8009fdc:	4605      	mov	r5, r0
 8009fde:	4648      	mov	r0, r9
 8009fe0:	f000 fc1e 	bl	800a820 <__multiply>
 8009fe4:	9903      	ldr	r1, [sp, #12]
 8009fe6:	4680      	mov	r8, r0
 8009fe8:	4648      	mov	r0, r9
 8009fea:	f000 fb4f 	bl	800a68c <_Bfree>
 8009fee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ff0:	1b1b      	subs	r3, r3, r4
 8009ff2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ff4:	f000 80b1 	beq.w	800a15a <_dtoa_r+0x8f2>
 8009ff8:	4641      	mov	r1, r8
 8009ffa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ffc:	4648      	mov	r0, r9
 8009ffe:	f000 fcb1 	bl	800a964 <__pow5mult>
 800a002:	9003      	str	r0, [sp, #12]
 800a004:	2101      	movs	r1, #1
 800a006:	4648      	mov	r0, r9
 800a008:	f000 fbf4 	bl	800a7f4 <__i2b>
 800a00c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a00e:	4604      	mov	r4, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 81d8 	beq.w	800a3c6 <_dtoa_r+0xb5e>
 800a016:	461a      	mov	r2, r3
 800a018:	4601      	mov	r1, r0
 800a01a:	4648      	mov	r0, r9
 800a01c:	f000 fca2 	bl	800a964 <__pow5mult>
 800a020:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a022:	4604      	mov	r4, r0
 800a024:	2b01      	cmp	r3, #1
 800a026:	f300 809f 	bgt.w	800a168 <_dtoa_r+0x900>
 800a02a:	9b06      	ldr	r3, [sp, #24]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f040 8097 	bne.w	800a160 <_dtoa_r+0x8f8>
 800a032:	9b07      	ldr	r3, [sp, #28]
 800a034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f040 8093 	bne.w	800a164 <_dtoa_r+0x8fc>
 800a03e:	9b07      	ldr	r3, [sp, #28]
 800a040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a044:	0d1b      	lsrs	r3, r3, #20
 800a046:	051b      	lsls	r3, r3, #20
 800a048:	b133      	cbz	r3, 800a058 <_dtoa_r+0x7f0>
 800a04a:	9b04      	ldr	r3, [sp, #16]
 800a04c:	3301      	adds	r3, #1
 800a04e:	9304      	str	r3, [sp, #16]
 800a050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a052:	3301      	adds	r3, #1
 800a054:	9309      	str	r3, [sp, #36]	@ 0x24
 800a056:	2301      	movs	r3, #1
 800a058:	930a      	str	r3, [sp, #40]	@ 0x28
 800a05a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 81b8 	beq.w	800a3d2 <_dtoa_r+0xb6a>
 800a062:	6923      	ldr	r3, [r4, #16]
 800a064:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a068:	6918      	ldr	r0, [r3, #16]
 800a06a:	f000 fb77 	bl	800a75c <__hi0bits>
 800a06e:	f1c0 0020 	rsb	r0, r0, #32
 800a072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a074:	4418      	add	r0, r3
 800a076:	f010 001f 	ands.w	r0, r0, #31
 800a07a:	f000 8082 	beq.w	800a182 <_dtoa_r+0x91a>
 800a07e:	f1c0 0320 	rsb	r3, r0, #32
 800a082:	2b04      	cmp	r3, #4
 800a084:	dd73      	ble.n	800a16e <_dtoa_r+0x906>
 800a086:	9b04      	ldr	r3, [sp, #16]
 800a088:	f1c0 001c 	rsb	r0, r0, #28
 800a08c:	4403      	add	r3, r0
 800a08e:	9304      	str	r3, [sp, #16]
 800a090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a092:	4406      	add	r6, r0
 800a094:	4403      	add	r3, r0
 800a096:	9309      	str	r3, [sp, #36]	@ 0x24
 800a098:	9b04      	ldr	r3, [sp, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	dd05      	ble.n	800a0aa <_dtoa_r+0x842>
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4648      	mov	r0, r9
 800a0a2:	9903      	ldr	r1, [sp, #12]
 800a0a4:	f000 fcb8 	bl	800aa18 <__lshift>
 800a0a8:	9003      	str	r0, [sp, #12]
 800a0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dd05      	ble.n	800a0bc <_dtoa_r+0x854>
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	4648      	mov	r0, r9
 800a0b6:	f000 fcaf 	bl	800aa18 <__lshift>
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d061      	beq.n	800a186 <_dtoa_r+0x91e>
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	9803      	ldr	r0, [sp, #12]
 800a0c6:	f000 fd13 	bl	800aaf0 <__mcmp>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	da5b      	bge.n	800a186 <_dtoa_r+0x91e>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	220a      	movs	r2, #10
 800a0d2:	4648      	mov	r0, r9
 800a0d4:	9903      	ldr	r1, [sp, #12]
 800a0d6:	f000 fafb 	bl	800a6d0 <__multadd>
 800a0da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0dc:	f107 38ff 	add.w	r8, r7, #4294967295
 800a0e0:	9003      	str	r0, [sp, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 8177 	beq.w	800a3d6 <_dtoa_r+0xb6e>
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	220a      	movs	r2, #10
 800a0ee:	4648      	mov	r0, r9
 800a0f0:	f000 faee 	bl	800a6d0 <__multadd>
 800a0f4:	f1bb 0f00 	cmp.w	fp, #0
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	dc6f      	bgt.n	800a1dc <_dtoa_r+0x974>
 800a0fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	dc49      	bgt.n	800a196 <_dtoa_r+0x92e>
 800a102:	e06b      	b.n	800a1dc <_dtoa_r+0x974>
 800a104:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a106:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a10a:	e73c      	b.n	8009f86 <_dtoa_r+0x71e>
 800a10c:	3fe00000 	.word	0x3fe00000
 800a110:	40240000 	.word	0x40240000
 800a114:	9b08      	ldr	r3, [sp, #32]
 800a116:	1e5c      	subs	r4, r3, #1
 800a118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a11a:	42a3      	cmp	r3, r4
 800a11c:	db09      	blt.n	800a132 <_dtoa_r+0x8ca>
 800a11e:	1b1c      	subs	r4, r3, r4
 800a120:	9b08      	ldr	r3, [sp, #32]
 800a122:	2b00      	cmp	r3, #0
 800a124:	f6bf af30 	bge.w	8009f88 <_dtoa_r+0x720>
 800a128:	9b04      	ldr	r3, [sp, #16]
 800a12a:	9a08      	ldr	r2, [sp, #32]
 800a12c:	1a9e      	subs	r6, r3, r2
 800a12e:	2300      	movs	r3, #0
 800a130:	e72b      	b.n	8009f8a <_dtoa_r+0x722>
 800a132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a134:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a136:	1ae3      	subs	r3, r4, r3
 800a138:	441a      	add	r2, r3
 800a13a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a13c:	9e04      	ldr	r6, [sp, #16]
 800a13e:	2400      	movs	r4, #0
 800a140:	9b08      	ldr	r3, [sp, #32]
 800a142:	920e      	str	r2, [sp, #56]	@ 0x38
 800a144:	e721      	b.n	8009f8a <_dtoa_r+0x722>
 800a146:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a148:	9e04      	ldr	r6, [sp, #16]
 800a14a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a14c:	e728      	b.n	8009fa0 <_dtoa_r+0x738>
 800a14e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a152:	e751      	b.n	8009ff8 <_dtoa_r+0x790>
 800a154:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a156:	9903      	ldr	r1, [sp, #12]
 800a158:	e750      	b.n	8009ffc <_dtoa_r+0x794>
 800a15a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a15e:	e751      	b.n	800a004 <_dtoa_r+0x79c>
 800a160:	2300      	movs	r3, #0
 800a162:	e779      	b.n	800a058 <_dtoa_r+0x7f0>
 800a164:	9b06      	ldr	r3, [sp, #24]
 800a166:	e777      	b.n	800a058 <_dtoa_r+0x7f0>
 800a168:	2300      	movs	r3, #0
 800a16a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a16c:	e779      	b.n	800a062 <_dtoa_r+0x7fa>
 800a16e:	d093      	beq.n	800a098 <_dtoa_r+0x830>
 800a170:	9a04      	ldr	r2, [sp, #16]
 800a172:	331c      	adds	r3, #28
 800a174:	441a      	add	r2, r3
 800a176:	9204      	str	r2, [sp, #16]
 800a178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a17a:	441e      	add	r6, r3
 800a17c:	441a      	add	r2, r3
 800a17e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a180:	e78a      	b.n	800a098 <_dtoa_r+0x830>
 800a182:	4603      	mov	r3, r0
 800a184:	e7f4      	b.n	800a170 <_dtoa_r+0x908>
 800a186:	9b08      	ldr	r3, [sp, #32]
 800a188:	46b8      	mov	r8, r7
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	dc20      	bgt.n	800a1d0 <_dtoa_r+0x968>
 800a18e:	469b      	mov	fp, r3
 800a190:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a192:	2b02      	cmp	r3, #2
 800a194:	dd1e      	ble.n	800a1d4 <_dtoa_r+0x96c>
 800a196:	f1bb 0f00 	cmp.w	fp, #0
 800a19a:	f47f adb1 	bne.w	8009d00 <_dtoa_r+0x498>
 800a19e:	4621      	mov	r1, r4
 800a1a0:	465b      	mov	r3, fp
 800a1a2:	2205      	movs	r2, #5
 800a1a4:	4648      	mov	r0, r9
 800a1a6:	f000 fa93 	bl	800a6d0 <__multadd>
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	9803      	ldr	r0, [sp, #12]
 800a1b0:	f000 fc9e 	bl	800aaf0 <__mcmp>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	f77f ada3 	ble.w	8009d00 <_dtoa_r+0x498>
 800a1ba:	4656      	mov	r6, sl
 800a1bc:	2331      	movs	r3, #49	@ 0x31
 800a1be:	f108 0801 	add.w	r8, r8, #1
 800a1c2:	f806 3b01 	strb.w	r3, [r6], #1
 800a1c6:	e59f      	b.n	8009d08 <_dtoa_r+0x4a0>
 800a1c8:	46b8      	mov	r8, r7
 800a1ca:	9c08      	ldr	r4, [sp, #32]
 800a1cc:	4625      	mov	r5, r4
 800a1ce:	e7f4      	b.n	800a1ba <_dtoa_r+0x952>
 800a1d0:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a1d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 8101 	beq.w	800a3de <_dtoa_r+0xb76>
 800a1dc:	2e00      	cmp	r6, #0
 800a1de:	dd05      	ble.n	800a1ec <_dtoa_r+0x984>
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	4632      	mov	r2, r6
 800a1e4:	4648      	mov	r0, r9
 800a1e6:	f000 fc17 	bl	800aa18 <__lshift>
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d05c      	beq.n	800a2ac <_dtoa_r+0xa44>
 800a1f2:	4648      	mov	r0, r9
 800a1f4:	6869      	ldr	r1, [r5, #4]
 800a1f6:	f000 fa09 	bl	800a60c <_Balloc>
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	b928      	cbnz	r0, 800a20a <_dtoa_r+0x9a2>
 800a1fe:	4602      	mov	r2, r0
 800a200:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a204:	4b80      	ldr	r3, [pc, #512]	@ (800a408 <_dtoa_r+0xba0>)
 800a206:	f7ff bb43 	b.w	8009890 <_dtoa_r+0x28>
 800a20a:	692a      	ldr	r2, [r5, #16]
 800a20c:	f105 010c 	add.w	r1, r5, #12
 800a210:	3202      	adds	r2, #2
 800a212:	0092      	lsls	r2, r2, #2
 800a214:	300c      	adds	r0, #12
 800a216:	f000 fe2b 	bl	800ae70 <memcpy>
 800a21a:	2201      	movs	r2, #1
 800a21c:	4631      	mov	r1, r6
 800a21e:	4648      	mov	r0, r9
 800a220:	f000 fbfa 	bl	800aa18 <__lshift>
 800a224:	462f      	mov	r7, r5
 800a226:	4605      	mov	r5, r0
 800a228:	f10a 0301 	add.w	r3, sl, #1
 800a22c:	9304      	str	r3, [sp, #16]
 800a22e:	eb0a 030b 	add.w	r3, sl, fp
 800a232:	930a      	str	r3, [sp, #40]	@ 0x28
 800a234:	9b06      	ldr	r3, [sp, #24]
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a23c:	9b04      	ldr	r3, [sp, #16]
 800a23e:	4621      	mov	r1, r4
 800a240:	9803      	ldr	r0, [sp, #12]
 800a242:	f103 3bff 	add.w	fp, r3, #4294967295
 800a246:	f7ff fa86 	bl	8009756 <quorem>
 800a24a:	4603      	mov	r3, r0
 800a24c:	4639      	mov	r1, r7
 800a24e:	3330      	adds	r3, #48	@ 0x30
 800a250:	9006      	str	r0, [sp, #24]
 800a252:	9803      	ldr	r0, [sp, #12]
 800a254:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a256:	f000 fc4b 	bl	800aaf0 <__mcmp>
 800a25a:	462a      	mov	r2, r5
 800a25c:	9008      	str	r0, [sp, #32]
 800a25e:	4621      	mov	r1, r4
 800a260:	4648      	mov	r0, r9
 800a262:	f000 fc61 	bl	800ab28 <__mdiff>
 800a266:	68c2      	ldr	r2, [r0, #12]
 800a268:	4606      	mov	r6, r0
 800a26a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a26c:	bb02      	cbnz	r2, 800a2b0 <_dtoa_r+0xa48>
 800a26e:	4601      	mov	r1, r0
 800a270:	9803      	ldr	r0, [sp, #12]
 800a272:	f000 fc3d 	bl	800aaf0 <__mcmp>
 800a276:	4602      	mov	r2, r0
 800a278:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a27a:	4631      	mov	r1, r6
 800a27c:	4648      	mov	r0, r9
 800a27e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800a282:	f000 fa03 	bl	800a68c <_Bfree>
 800a286:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a288:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a28a:	9e04      	ldr	r6, [sp, #16]
 800a28c:	ea42 0103 	orr.w	r1, r2, r3
 800a290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a292:	4319      	orrs	r1, r3
 800a294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a296:	d10d      	bne.n	800a2b4 <_dtoa_r+0xa4c>
 800a298:	2b39      	cmp	r3, #57	@ 0x39
 800a29a:	d027      	beq.n	800a2ec <_dtoa_r+0xa84>
 800a29c:	9a08      	ldr	r2, [sp, #32]
 800a29e:	2a00      	cmp	r2, #0
 800a2a0:	dd01      	ble.n	800a2a6 <_dtoa_r+0xa3e>
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	3331      	adds	r3, #49	@ 0x31
 800a2a6:	f88b 3000 	strb.w	r3, [fp]
 800a2aa:	e52e      	b.n	8009d0a <_dtoa_r+0x4a2>
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	e7b9      	b.n	800a224 <_dtoa_r+0x9bc>
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	e7e2      	b.n	800a27a <_dtoa_r+0xa12>
 800a2b4:	9908      	ldr	r1, [sp, #32]
 800a2b6:	2900      	cmp	r1, #0
 800a2b8:	db04      	blt.n	800a2c4 <_dtoa_r+0xa5c>
 800a2ba:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800a2bc:	4301      	orrs	r1, r0
 800a2be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2c0:	4301      	orrs	r1, r0
 800a2c2:	d120      	bne.n	800a306 <_dtoa_r+0xa9e>
 800a2c4:	2a00      	cmp	r2, #0
 800a2c6:	ddee      	ble.n	800a2a6 <_dtoa_r+0xa3e>
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	9903      	ldr	r1, [sp, #12]
 800a2cc:	4648      	mov	r0, r9
 800a2ce:	9304      	str	r3, [sp, #16]
 800a2d0:	f000 fba2 	bl	800aa18 <__lshift>
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	9003      	str	r0, [sp, #12]
 800a2d8:	f000 fc0a 	bl	800aaf0 <__mcmp>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	9b04      	ldr	r3, [sp, #16]
 800a2e0:	dc02      	bgt.n	800a2e8 <_dtoa_r+0xa80>
 800a2e2:	d1e0      	bne.n	800a2a6 <_dtoa_r+0xa3e>
 800a2e4:	07da      	lsls	r2, r3, #31
 800a2e6:	d5de      	bpl.n	800a2a6 <_dtoa_r+0xa3e>
 800a2e8:	2b39      	cmp	r3, #57	@ 0x39
 800a2ea:	d1da      	bne.n	800a2a2 <_dtoa_r+0xa3a>
 800a2ec:	2339      	movs	r3, #57	@ 0x39
 800a2ee:	f88b 3000 	strb.w	r3, [fp]
 800a2f2:	4633      	mov	r3, r6
 800a2f4:	461e      	mov	r6, r3
 800a2f6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	2a39      	cmp	r2, #57	@ 0x39
 800a2fe:	d04e      	beq.n	800a39e <_dtoa_r+0xb36>
 800a300:	3201      	adds	r2, #1
 800a302:	701a      	strb	r2, [r3, #0]
 800a304:	e501      	b.n	8009d0a <_dtoa_r+0x4a2>
 800a306:	2a00      	cmp	r2, #0
 800a308:	dd03      	ble.n	800a312 <_dtoa_r+0xaaa>
 800a30a:	2b39      	cmp	r3, #57	@ 0x39
 800a30c:	d0ee      	beq.n	800a2ec <_dtoa_r+0xa84>
 800a30e:	3301      	adds	r3, #1
 800a310:	e7c9      	b.n	800a2a6 <_dtoa_r+0xa3e>
 800a312:	9a04      	ldr	r2, [sp, #16]
 800a314:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a316:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a31a:	428a      	cmp	r2, r1
 800a31c:	d028      	beq.n	800a370 <_dtoa_r+0xb08>
 800a31e:	2300      	movs	r3, #0
 800a320:	220a      	movs	r2, #10
 800a322:	9903      	ldr	r1, [sp, #12]
 800a324:	4648      	mov	r0, r9
 800a326:	f000 f9d3 	bl	800a6d0 <__multadd>
 800a32a:	42af      	cmp	r7, r5
 800a32c:	9003      	str	r0, [sp, #12]
 800a32e:	f04f 0300 	mov.w	r3, #0
 800a332:	f04f 020a 	mov.w	r2, #10
 800a336:	4639      	mov	r1, r7
 800a338:	4648      	mov	r0, r9
 800a33a:	d107      	bne.n	800a34c <_dtoa_r+0xae4>
 800a33c:	f000 f9c8 	bl	800a6d0 <__multadd>
 800a340:	4607      	mov	r7, r0
 800a342:	4605      	mov	r5, r0
 800a344:	9b04      	ldr	r3, [sp, #16]
 800a346:	3301      	adds	r3, #1
 800a348:	9304      	str	r3, [sp, #16]
 800a34a:	e777      	b.n	800a23c <_dtoa_r+0x9d4>
 800a34c:	f000 f9c0 	bl	800a6d0 <__multadd>
 800a350:	4629      	mov	r1, r5
 800a352:	4607      	mov	r7, r0
 800a354:	2300      	movs	r3, #0
 800a356:	220a      	movs	r2, #10
 800a358:	4648      	mov	r0, r9
 800a35a:	f000 f9b9 	bl	800a6d0 <__multadd>
 800a35e:	4605      	mov	r5, r0
 800a360:	e7f0      	b.n	800a344 <_dtoa_r+0xadc>
 800a362:	f1bb 0f00 	cmp.w	fp, #0
 800a366:	bfcc      	ite	gt
 800a368:	465e      	movgt	r6, fp
 800a36a:	2601      	movle	r6, #1
 800a36c:	2700      	movs	r7, #0
 800a36e:	4456      	add	r6, sl
 800a370:	2201      	movs	r2, #1
 800a372:	9903      	ldr	r1, [sp, #12]
 800a374:	4648      	mov	r0, r9
 800a376:	9304      	str	r3, [sp, #16]
 800a378:	f000 fb4e 	bl	800aa18 <__lshift>
 800a37c:	4621      	mov	r1, r4
 800a37e:	9003      	str	r0, [sp, #12]
 800a380:	f000 fbb6 	bl	800aaf0 <__mcmp>
 800a384:	2800      	cmp	r0, #0
 800a386:	dcb4      	bgt.n	800a2f2 <_dtoa_r+0xa8a>
 800a388:	d102      	bne.n	800a390 <_dtoa_r+0xb28>
 800a38a:	9b04      	ldr	r3, [sp, #16]
 800a38c:	07db      	lsls	r3, r3, #31
 800a38e:	d4b0      	bmi.n	800a2f2 <_dtoa_r+0xa8a>
 800a390:	4633      	mov	r3, r6
 800a392:	461e      	mov	r6, r3
 800a394:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a398:	2a30      	cmp	r2, #48	@ 0x30
 800a39a:	d0fa      	beq.n	800a392 <_dtoa_r+0xb2a>
 800a39c:	e4b5      	b.n	8009d0a <_dtoa_r+0x4a2>
 800a39e:	459a      	cmp	sl, r3
 800a3a0:	d1a8      	bne.n	800a2f4 <_dtoa_r+0xa8c>
 800a3a2:	2331      	movs	r3, #49	@ 0x31
 800a3a4:	f108 0801 	add.w	r8, r8, #1
 800a3a8:	f88a 3000 	strb.w	r3, [sl]
 800a3ac:	e4ad      	b.n	8009d0a <_dtoa_r+0x4a2>
 800a3ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a3b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a40c <_dtoa_r+0xba4>
 800a3b4:	b11b      	cbz	r3, 800a3be <_dtoa_r+0xb56>
 800a3b6:	f10a 0308 	add.w	r3, sl, #8
 800a3ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a3bc:	6013      	str	r3, [r2, #0]
 800a3be:	4650      	mov	r0, sl
 800a3c0:	b017      	add	sp, #92	@ 0x5c
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	f77f ae2e 	ble.w	800a02a <_dtoa_r+0x7c2>
 800a3ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e64d      	b.n	800a072 <_dtoa_r+0x80a>
 800a3d6:	f1bb 0f00 	cmp.w	fp, #0
 800a3da:	f77f aed9 	ble.w	800a190 <_dtoa_r+0x928>
 800a3de:	4656      	mov	r6, sl
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	9803      	ldr	r0, [sp, #12]
 800a3e4:	f7ff f9b7 	bl	8009756 <quorem>
 800a3e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a3ec:	f806 3b01 	strb.w	r3, [r6], #1
 800a3f0:	eba6 020a 	sub.w	r2, r6, sl
 800a3f4:	4593      	cmp	fp, r2
 800a3f6:	ddb4      	ble.n	800a362 <_dtoa_r+0xafa>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	220a      	movs	r2, #10
 800a3fc:	4648      	mov	r0, r9
 800a3fe:	9903      	ldr	r1, [sp, #12]
 800a400:	f000 f966 	bl	800a6d0 <__multadd>
 800a404:	9003      	str	r0, [sp, #12]
 800a406:	e7eb      	b.n	800a3e0 <_dtoa_r+0xb78>
 800a408:	0800b5c6 	.word	0x0800b5c6
 800a40c:	0800b54a 	.word	0x0800b54a

0800a410 <_free_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	4605      	mov	r5, r0
 800a414:	2900      	cmp	r1, #0
 800a416:	d040      	beq.n	800a49a <_free_r+0x8a>
 800a418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a41c:	1f0c      	subs	r4, r1, #4
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bfb8      	it	lt
 800a422:	18e4      	addlt	r4, r4, r3
 800a424:	f000 f8e6 	bl	800a5f4 <__malloc_lock>
 800a428:	4a1c      	ldr	r2, [pc, #112]	@ (800a49c <_free_r+0x8c>)
 800a42a:	6813      	ldr	r3, [r2, #0]
 800a42c:	b933      	cbnz	r3, 800a43c <_free_r+0x2c>
 800a42e:	6063      	str	r3, [r4, #4]
 800a430:	6014      	str	r4, [r2, #0]
 800a432:	4628      	mov	r0, r5
 800a434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a438:	f000 b8e2 	b.w	800a600 <__malloc_unlock>
 800a43c:	42a3      	cmp	r3, r4
 800a43e:	d908      	bls.n	800a452 <_free_r+0x42>
 800a440:	6820      	ldr	r0, [r4, #0]
 800a442:	1821      	adds	r1, r4, r0
 800a444:	428b      	cmp	r3, r1
 800a446:	bf01      	itttt	eq
 800a448:	6819      	ldreq	r1, [r3, #0]
 800a44a:	685b      	ldreq	r3, [r3, #4]
 800a44c:	1809      	addeq	r1, r1, r0
 800a44e:	6021      	streq	r1, [r4, #0]
 800a450:	e7ed      	b.n	800a42e <_free_r+0x1e>
 800a452:	461a      	mov	r2, r3
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	b10b      	cbz	r3, 800a45c <_free_r+0x4c>
 800a458:	42a3      	cmp	r3, r4
 800a45a:	d9fa      	bls.n	800a452 <_free_r+0x42>
 800a45c:	6811      	ldr	r1, [r2, #0]
 800a45e:	1850      	adds	r0, r2, r1
 800a460:	42a0      	cmp	r0, r4
 800a462:	d10b      	bne.n	800a47c <_free_r+0x6c>
 800a464:	6820      	ldr	r0, [r4, #0]
 800a466:	4401      	add	r1, r0
 800a468:	1850      	adds	r0, r2, r1
 800a46a:	4283      	cmp	r3, r0
 800a46c:	6011      	str	r1, [r2, #0]
 800a46e:	d1e0      	bne.n	800a432 <_free_r+0x22>
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	4408      	add	r0, r1
 800a476:	6010      	str	r0, [r2, #0]
 800a478:	6053      	str	r3, [r2, #4]
 800a47a:	e7da      	b.n	800a432 <_free_r+0x22>
 800a47c:	d902      	bls.n	800a484 <_free_r+0x74>
 800a47e:	230c      	movs	r3, #12
 800a480:	602b      	str	r3, [r5, #0]
 800a482:	e7d6      	b.n	800a432 <_free_r+0x22>
 800a484:	6820      	ldr	r0, [r4, #0]
 800a486:	1821      	adds	r1, r4, r0
 800a488:	428b      	cmp	r3, r1
 800a48a:	bf01      	itttt	eq
 800a48c:	6819      	ldreq	r1, [r3, #0]
 800a48e:	685b      	ldreq	r3, [r3, #4]
 800a490:	1809      	addeq	r1, r1, r0
 800a492:	6021      	streq	r1, [r4, #0]
 800a494:	6063      	str	r3, [r4, #4]
 800a496:	6054      	str	r4, [r2, #4]
 800a498:	e7cb      	b.n	800a432 <_free_r+0x22>
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	200016c0 	.word	0x200016c0

0800a4a0 <malloc>:
 800a4a0:	4b02      	ldr	r3, [pc, #8]	@ (800a4ac <malloc+0xc>)
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	6818      	ldr	r0, [r3, #0]
 800a4a6:	f000 b825 	b.w	800a4f4 <_malloc_r>
 800a4aa:	bf00      	nop
 800a4ac:	20000188 	.word	0x20000188

0800a4b0 <sbrk_aligned>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	4e0f      	ldr	r6, [pc, #60]	@ (800a4f0 <sbrk_aligned+0x40>)
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	6831      	ldr	r1, [r6, #0]
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	b911      	cbnz	r1, 800a4c2 <sbrk_aligned+0x12>
 800a4bc:	f000 fcc8 	bl	800ae50 <_sbrk_r>
 800a4c0:	6030      	str	r0, [r6, #0]
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f000 fcc3 	bl	800ae50 <_sbrk_r>
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	d103      	bne.n	800a4d6 <sbrk_aligned+0x26>
 800a4ce:	f04f 34ff 	mov.w	r4, #4294967295
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	bd70      	pop	{r4, r5, r6, pc}
 800a4d6:	1cc4      	adds	r4, r0, #3
 800a4d8:	f024 0403 	bic.w	r4, r4, #3
 800a4dc:	42a0      	cmp	r0, r4
 800a4de:	d0f8      	beq.n	800a4d2 <sbrk_aligned+0x22>
 800a4e0:	1a21      	subs	r1, r4, r0
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f000 fcb4 	bl	800ae50 <_sbrk_r>
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d1f2      	bne.n	800a4d2 <sbrk_aligned+0x22>
 800a4ec:	e7ef      	b.n	800a4ce <sbrk_aligned+0x1e>
 800a4ee:	bf00      	nop
 800a4f0:	200016bc 	.word	0x200016bc

0800a4f4 <_malloc_r>:
 800a4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f8:	1ccd      	adds	r5, r1, #3
 800a4fa:	f025 0503 	bic.w	r5, r5, #3
 800a4fe:	3508      	adds	r5, #8
 800a500:	2d0c      	cmp	r5, #12
 800a502:	bf38      	it	cc
 800a504:	250c      	movcc	r5, #12
 800a506:	2d00      	cmp	r5, #0
 800a508:	4606      	mov	r6, r0
 800a50a:	db01      	blt.n	800a510 <_malloc_r+0x1c>
 800a50c:	42a9      	cmp	r1, r5
 800a50e:	d904      	bls.n	800a51a <_malloc_r+0x26>
 800a510:	230c      	movs	r3, #12
 800a512:	6033      	str	r3, [r6, #0]
 800a514:	2000      	movs	r0, #0
 800a516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a51a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a5f0 <_malloc_r+0xfc>
 800a51e:	f000 f869 	bl	800a5f4 <__malloc_lock>
 800a522:	f8d8 3000 	ldr.w	r3, [r8]
 800a526:	461c      	mov	r4, r3
 800a528:	bb44      	cbnz	r4, 800a57c <_malloc_r+0x88>
 800a52a:	4629      	mov	r1, r5
 800a52c:	4630      	mov	r0, r6
 800a52e:	f7ff ffbf 	bl	800a4b0 <sbrk_aligned>
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	4604      	mov	r4, r0
 800a536:	d158      	bne.n	800a5ea <_malloc_r+0xf6>
 800a538:	f8d8 4000 	ldr.w	r4, [r8]
 800a53c:	4627      	mov	r7, r4
 800a53e:	2f00      	cmp	r7, #0
 800a540:	d143      	bne.n	800a5ca <_malloc_r+0xd6>
 800a542:	2c00      	cmp	r4, #0
 800a544:	d04b      	beq.n	800a5de <_malloc_r+0xea>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	4639      	mov	r1, r7
 800a54a:	4630      	mov	r0, r6
 800a54c:	eb04 0903 	add.w	r9, r4, r3
 800a550:	f000 fc7e 	bl	800ae50 <_sbrk_r>
 800a554:	4581      	cmp	r9, r0
 800a556:	d142      	bne.n	800a5de <_malloc_r+0xea>
 800a558:	6821      	ldr	r1, [r4, #0]
 800a55a:	4630      	mov	r0, r6
 800a55c:	1a6d      	subs	r5, r5, r1
 800a55e:	4629      	mov	r1, r5
 800a560:	f7ff ffa6 	bl	800a4b0 <sbrk_aligned>
 800a564:	3001      	adds	r0, #1
 800a566:	d03a      	beq.n	800a5de <_malloc_r+0xea>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	442b      	add	r3, r5
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	f8d8 3000 	ldr.w	r3, [r8]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	bb62      	cbnz	r2, 800a5d0 <_malloc_r+0xdc>
 800a576:	f8c8 7000 	str.w	r7, [r8]
 800a57a:	e00f      	b.n	800a59c <_malloc_r+0xa8>
 800a57c:	6822      	ldr	r2, [r4, #0]
 800a57e:	1b52      	subs	r2, r2, r5
 800a580:	d420      	bmi.n	800a5c4 <_malloc_r+0xd0>
 800a582:	2a0b      	cmp	r2, #11
 800a584:	d917      	bls.n	800a5b6 <_malloc_r+0xc2>
 800a586:	1961      	adds	r1, r4, r5
 800a588:	42a3      	cmp	r3, r4
 800a58a:	6025      	str	r5, [r4, #0]
 800a58c:	bf18      	it	ne
 800a58e:	6059      	strne	r1, [r3, #4]
 800a590:	6863      	ldr	r3, [r4, #4]
 800a592:	bf08      	it	eq
 800a594:	f8c8 1000 	streq.w	r1, [r8]
 800a598:	5162      	str	r2, [r4, r5]
 800a59a:	604b      	str	r3, [r1, #4]
 800a59c:	4630      	mov	r0, r6
 800a59e:	f000 f82f 	bl	800a600 <__malloc_unlock>
 800a5a2:	f104 000b 	add.w	r0, r4, #11
 800a5a6:	1d23      	adds	r3, r4, #4
 800a5a8:	f020 0007 	bic.w	r0, r0, #7
 800a5ac:	1ac2      	subs	r2, r0, r3
 800a5ae:	bf1c      	itt	ne
 800a5b0:	1a1b      	subne	r3, r3, r0
 800a5b2:	50a3      	strne	r3, [r4, r2]
 800a5b4:	e7af      	b.n	800a516 <_malloc_r+0x22>
 800a5b6:	6862      	ldr	r2, [r4, #4]
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	bf0c      	ite	eq
 800a5bc:	f8c8 2000 	streq.w	r2, [r8]
 800a5c0:	605a      	strne	r2, [r3, #4]
 800a5c2:	e7eb      	b.n	800a59c <_malloc_r+0xa8>
 800a5c4:	4623      	mov	r3, r4
 800a5c6:	6864      	ldr	r4, [r4, #4]
 800a5c8:	e7ae      	b.n	800a528 <_malloc_r+0x34>
 800a5ca:	463c      	mov	r4, r7
 800a5cc:	687f      	ldr	r7, [r7, #4]
 800a5ce:	e7b6      	b.n	800a53e <_malloc_r+0x4a>
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	d1fb      	bne.n	800a5d0 <_malloc_r+0xdc>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	6053      	str	r3, [r2, #4]
 800a5dc:	e7de      	b.n	800a59c <_malloc_r+0xa8>
 800a5de:	230c      	movs	r3, #12
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	6033      	str	r3, [r6, #0]
 800a5e4:	f000 f80c 	bl	800a600 <__malloc_unlock>
 800a5e8:	e794      	b.n	800a514 <_malloc_r+0x20>
 800a5ea:	6005      	str	r5, [r0, #0]
 800a5ec:	e7d6      	b.n	800a59c <_malloc_r+0xa8>
 800a5ee:	bf00      	nop
 800a5f0:	200016c0 	.word	0x200016c0

0800a5f4 <__malloc_lock>:
 800a5f4:	4801      	ldr	r0, [pc, #4]	@ (800a5fc <__malloc_lock+0x8>)
 800a5f6:	f7ff b89e 	b.w	8009736 <__retarget_lock_acquire_recursive>
 800a5fa:	bf00      	nop
 800a5fc:	200016b8 	.word	0x200016b8

0800a600 <__malloc_unlock>:
 800a600:	4801      	ldr	r0, [pc, #4]	@ (800a608 <__malloc_unlock+0x8>)
 800a602:	f7ff b899 	b.w	8009738 <__retarget_lock_release_recursive>
 800a606:	bf00      	nop
 800a608:	200016b8 	.word	0x200016b8

0800a60c <_Balloc>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	69c6      	ldr	r6, [r0, #28]
 800a610:	4604      	mov	r4, r0
 800a612:	460d      	mov	r5, r1
 800a614:	b976      	cbnz	r6, 800a634 <_Balloc+0x28>
 800a616:	2010      	movs	r0, #16
 800a618:	f7ff ff42 	bl	800a4a0 <malloc>
 800a61c:	4602      	mov	r2, r0
 800a61e:	61e0      	str	r0, [r4, #28]
 800a620:	b920      	cbnz	r0, 800a62c <_Balloc+0x20>
 800a622:	216b      	movs	r1, #107	@ 0x6b
 800a624:	4b17      	ldr	r3, [pc, #92]	@ (800a684 <_Balloc+0x78>)
 800a626:	4818      	ldr	r0, [pc, #96]	@ (800a688 <_Balloc+0x7c>)
 800a628:	f000 fc30 	bl	800ae8c <__assert_func>
 800a62c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a630:	6006      	str	r6, [r0, #0]
 800a632:	60c6      	str	r6, [r0, #12]
 800a634:	69e6      	ldr	r6, [r4, #28]
 800a636:	68f3      	ldr	r3, [r6, #12]
 800a638:	b183      	cbz	r3, 800a65c <_Balloc+0x50>
 800a63a:	69e3      	ldr	r3, [r4, #28]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a642:	b9b8      	cbnz	r0, 800a674 <_Balloc+0x68>
 800a644:	2101      	movs	r1, #1
 800a646:	fa01 f605 	lsl.w	r6, r1, r5
 800a64a:	1d72      	adds	r2, r6, #5
 800a64c:	4620      	mov	r0, r4
 800a64e:	0092      	lsls	r2, r2, #2
 800a650:	f000 fc3a 	bl	800aec8 <_calloc_r>
 800a654:	b160      	cbz	r0, 800a670 <_Balloc+0x64>
 800a656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a65a:	e00e      	b.n	800a67a <_Balloc+0x6e>
 800a65c:	2221      	movs	r2, #33	@ 0x21
 800a65e:	2104      	movs	r1, #4
 800a660:	4620      	mov	r0, r4
 800a662:	f000 fc31 	bl	800aec8 <_calloc_r>
 800a666:	69e3      	ldr	r3, [r4, #28]
 800a668:	60f0      	str	r0, [r6, #12]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1e4      	bne.n	800a63a <_Balloc+0x2e>
 800a670:	2000      	movs	r0, #0
 800a672:	bd70      	pop	{r4, r5, r6, pc}
 800a674:	6802      	ldr	r2, [r0, #0]
 800a676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a67a:	2300      	movs	r3, #0
 800a67c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a680:	e7f7      	b.n	800a672 <_Balloc+0x66>
 800a682:	bf00      	nop
 800a684:	0800b557 	.word	0x0800b557
 800a688:	0800b5d7 	.word	0x0800b5d7

0800a68c <_Bfree>:
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	69c6      	ldr	r6, [r0, #28]
 800a690:	4605      	mov	r5, r0
 800a692:	460c      	mov	r4, r1
 800a694:	b976      	cbnz	r6, 800a6b4 <_Bfree+0x28>
 800a696:	2010      	movs	r0, #16
 800a698:	f7ff ff02 	bl	800a4a0 <malloc>
 800a69c:	4602      	mov	r2, r0
 800a69e:	61e8      	str	r0, [r5, #28]
 800a6a0:	b920      	cbnz	r0, 800a6ac <_Bfree+0x20>
 800a6a2:	218f      	movs	r1, #143	@ 0x8f
 800a6a4:	4b08      	ldr	r3, [pc, #32]	@ (800a6c8 <_Bfree+0x3c>)
 800a6a6:	4809      	ldr	r0, [pc, #36]	@ (800a6cc <_Bfree+0x40>)
 800a6a8:	f000 fbf0 	bl	800ae8c <__assert_func>
 800a6ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6b0:	6006      	str	r6, [r0, #0]
 800a6b2:	60c6      	str	r6, [r0, #12]
 800a6b4:	b13c      	cbz	r4, 800a6c6 <_Bfree+0x3a>
 800a6b6:	69eb      	ldr	r3, [r5, #28]
 800a6b8:	6862      	ldr	r2, [r4, #4]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6c0:	6021      	str	r1, [r4, #0]
 800a6c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}
 800a6c8:	0800b557 	.word	0x0800b557
 800a6cc:	0800b5d7 	.word	0x0800b5d7

0800a6d0 <__multadd>:
 800a6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	461e      	mov	r6, r3
 800a6da:	2000      	movs	r0, #0
 800a6dc:	690d      	ldr	r5, [r1, #16]
 800a6de:	f101 0c14 	add.w	ip, r1, #20
 800a6e2:	f8dc 3000 	ldr.w	r3, [ip]
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	b299      	uxth	r1, r3
 800a6ea:	fb02 6101 	mla	r1, r2, r1, r6
 800a6ee:	0c1e      	lsrs	r6, r3, #16
 800a6f0:	0c0b      	lsrs	r3, r1, #16
 800a6f2:	fb02 3306 	mla	r3, r2, r6, r3
 800a6f6:	b289      	uxth	r1, r1
 800a6f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6fc:	4285      	cmp	r5, r0
 800a6fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a702:	f84c 1b04 	str.w	r1, [ip], #4
 800a706:	dcec      	bgt.n	800a6e2 <__multadd+0x12>
 800a708:	b30e      	cbz	r6, 800a74e <__multadd+0x7e>
 800a70a:	68a3      	ldr	r3, [r4, #8]
 800a70c:	42ab      	cmp	r3, r5
 800a70e:	dc19      	bgt.n	800a744 <__multadd+0x74>
 800a710:	6861      	ldr	r1, [r4, #4]
 800a712:	4638      	mov	r0, r7
 800a714:	3101      	adds	r1, #1
 800a716:	f7ff ff79 	bl	800a60c <_Balloc>
 800a71a:	4680      	mov	r8, r0
 800a71c:	b928      	cbnz	r0, 800a72a <__multadd+0x5a>
 800a71e:	4602      	mov	r2, r0
 800a720:	21ba      	movs	r1, #186	@ 0xba
 800a722:	4b0c      	ldr	r3, [pc, #48]	@ (800a754 <__multadd+0x84>)
 800a724:	480c      	ldr	r0, [pc, #48]	@ (800a758 <__multadd+0x88>)
 800a726:	f000 fbb1 	bl	800ae8c <__assert_func>
 800a72a:	6922      	ldr	r2, [r4, #16]
 800a72c:	f104 010c 	add.w	r1, r4, #12
 800a730:	3202      	adds	r2, #2
 800a732:	0092      	lsls	r2, r2, #2
 800a734:	300c      	adds	r0, #12
 800a736:	f000 fb9b 	bl	800ae70 <memcpy>
 800a73a:	4621      	mov	r1, r4
 800a73c:	4638      	mov	r0, r7
 800a73e:	f7ff ffa5 	bl	800a68c <_Bfree>
 800a742:	4644      	mov	r4, r8
 800a744:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a748:	3501      	adds	r5, #1
 800a74a:	615e      	str	r6, [r3, #20]
 800a74c:	6125      	str	r5, [r4, #16]
 800a74e:	4620      	mov	r0, r4
 800a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a754:	0800b5c6 	.word	0x0800b5c6
 800a758:	0800b5d7 	.word	0x0800b5d7

0800a75c <__hi0bits>:
 800a75c:	4603      	mov	r3, r0
 800a75e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a762:	bf3a      	itte	cc
 800a764:	0403      	lslcc	r3, r0, #16
 800a766:	2010      	movcc	r0, #16
 800a768:	2000      	movcs	r0, #0
 800a76a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a76e:	bf3c      	itt	cc
 800a770:	021b      	lslcc	r3, r3, #8
 800a772:	3008      	addcc	r0, #8
 800a774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a778:	bf3c      	itt	cc
 800a77a:	011b      	lslcc	r3, r3, #4
 800a77c:	3004      	addcc	r0, #4
 800a77e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a782:	bf3c      	itt	cc
 800a784:	009b      	lslcc	r3, r3, #2
 800a786:	3002      	addcc	r0, #2
 800a788:	2b00      	cmp	r3, #0
 800a78a:	db05      	blt.n	800a798 <__hi0bits+0x3c>
 800a78c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a790:	f100 0001 	add.w	r0, r0, #1
 800a794:	bf08      	it	eq
 800a796:	2020      	moveq	r0, #32
 800a798:	4770      	bx	lr

0800a79a <__lo0bits>:
 800a79a:	6803      	ldr	r3, [r0, #0]
 800a79c:	4602      	mov	r2, r0
 800a79e:	f013 0007 	ands.w	r0, r3, #7
 800a7a2:	d00b      	beq.n	800a7bc <__lo0bits+0x22>
 800a7a4:	07d9      	lsls	r1, r3, #31
 800a7a6:	d421      	bmi.n	800a7ec <__lo0bits+0x52>
 800a7a8:	0798      	lsls	r0, r3, #30
 800a7aa:	bf49      	itett	mi
 800a7ac:	085b      	lsrmi	r3, r3, #1
 800a7ae:	089b      	lsrpl	r3, r3, #2
 800a7b0:	2001      	movmi	r0, #1
 800a7b2:	6013      	strmi	r3, [r2, #0]
 800a7b4:	bf5c      	itt	pl
 800a7b6:	2002      	movpl	r0, #2
 800a7b8:	6013      	strpl	r3, [r2, #0]
 800a7ba:	4770      	bx	lr
 800a7bc:	b299      	uxth	r1, r3
 800a7be:	b909      	cbnz	r1, 800a7c4 <__lo0bits+0x2a>
 800a7c0:	2010      	movs	r0, #16
 800a7c2:	0c1b      	lsrs	r3, r3, #16
 800a7c4:	b2d9      	uxtb	r1, r3
 800a7c6:	b909      	cbnz	r1, 800a7cc <__lo0bits+0x32>
 800a7c8:	3008      	adds	r0, #8
 800a7ca:	0a1b      	lsrs	r3, r3, #8
 800a7cc:	0719      	lsls	r1, r3, #28
 800a7ce:	bf04      	itt	eq
 800a7d0:	091b      	lsreq	r3, r3, #4
 800a7d2:	3004      	addeq	r0, #4
 800a7d4:	0799      	lsls	r1, r3, #30
 800a7d6:	bf04      	itt	eq
 800a7d8:	089b      	lsreq	r3, r3, #2
 800a7da:	3002      	addeq	r0, #2
 800a7dc:	07d9      	lsls	r1, r3, #31
 800a7de:	d403      	bmi.n	800a7e8 <__lo0bits+0x4e>
 800a7e0:	085b      	lsrs	r3, r3, #1
 800a7e2:	f100 0001 	add.w	r0, r0, #1
 800a7e6:	d003      	beq.n	800a7f0 <__lo0bits+0x56>
 800a7e8:	6013      	str	r3, [r2, #0]
 800a7ea:	4770      	bx	lr
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	4770      	bx	lr
 800a7f0:	2020      	movs	r0, #32
 800a7f2:	4770      	bx	lr

0800a7f4 <__i2b>:
 800a7f4:	b510      	push	{r4, lr}
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	f7ff ff07 	bl	800a60c <_Balloc>
 800a7fe:	4602      	mov	r2, r0
 800a800:	b928      	cbnz	r0, 800a80e <__i2b+0x1a>
 800a802:	f240 1145 	movw	r1, #325	@ 0x145
 800a806:	4b04      	ldr	r3, [pc, #16]	@ (800a818 <__i2b+0x24>)
 800a808:	4804      	ldr	r0, [pc, #16]	@ (800a81c <__i2b+0x28>)
 800a80a:	f000 fb3f 	bl	800ae8c <__assert_func>
 800a80e:	2301      	movs	r3, #1
 800a810:	6144      	str	r4, [r0, #20]
 800a812:	6103      	str	r3, [r0, #16]
 800a814:	bd10      	pop	{r4, pc}
 800a816:	bf00      	nop
 800a818:	0800b5c6 	.word	0x0800b5c6
 800a81c:	0800b5d7 	.word	0x0800b5d7

0800a820 <__multiply>:
 800a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	4617      	mov	r7, r2
 800a826:	690a      	ldr	r2, [r1, #16]
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	4689      	mov	r9, r1
 800a82c:	429a      	cmp	r2, r3
 800a82e:	bfa2      	ittt	ge
 800a830:	463b      	movge	r3, r7
 800a832:	460f      	movge	r7, r1
 800a834:	4699      	movge	r9, r3
 800a836:	693d      	ldr	r5, [r7, #16]
 800a838:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	eb05 060a 	add.w	r6, r5, sl
 800a844:	42b3      	cmp	r3, r6
 800a846:	b085      	sub	sp, #20
 800a848:	bfb8      	it	lt
 800a84a:	3101      	addlt	r1, #1
 800a84c:	f7ff fede 	bl	800a60c <_Balloc>
 800a850:	b930      	cbnz	r0, 800a860 <__multiply+0x40>
 800a852:	4602      	mov	r2, r0
 800a854:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a858:	4b40      	ldr	r3, [pc, #256]	@ (800a95c <__multiply+0x13c>)
 800a85a:	4841      	ldr	r0, [pc, #260]	@ (800a960 <__multiply+0x140>)
 800a85c:	f000 fb16 	bl	800ae8c <__assert_func>
 800a860:	f100 0414 	add.w	r4, r0, #20
 800a864:	4623      	mov	r3, r4
 800a866:	2200      	movs	r2, #0
 800a868:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a86c:	4573      	cmp	r3, lr
 800a86e:	d320      	bcc.n	800a8b2 <__multiply+0x92>
 800a870:	f107 0814 	add.w	r8, r7, #20
 800a874:	f109 0114 	add.w	r1, r9, #20
 800a878:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a87c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a880:	9302      	str	r3, [sp, #8]
 800a882:	1beb      	subs	r3, r5, r7
 800a884:	3b15      	subs	r3, #21
 800a886:	f023 0303 	bic.w	r3, r3, #3
 800a88a:	3304      	adds	r3, #4
 800a88c:	3715      	adds	r7, #21
 800a88e:	42bd      	cmp	r5, r7
 800a890:	bf38      	it	cc
 800a892:	2304      	movcc	r3, #4
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	9b02      	ldr	r3, [sp, #8]
 800a898:	9103      	str	r1, [sp, #12]
 800a89a:	428b      	cmp	r3, r1
 800a89c:	d80c      	bhi.n	800a8b8 <__multiply+0x98>
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	dd03      	ble.n	800a8aa <__multiply+0x8a>
 800a8a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d055      	beq.n	800a956 <__multiply+0x136>
 800a8aa:	6106      	str	r6, [r0, #16]
 800a8ac:	b005      	add	sp, #20
 800a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b2:	f843 2b04 	str.w	r2, [r3], #4
 800a8b6:	e7d9      	b.n	800a86c <__multiply+0x4c>
 800a8b8:	f8b1 a000 	ldrh.w	sl, [r1]
 800a8bc:	f1ba 0f00 	cmp.w	sl, #0
 800a8c0:	d01f      	beq.n	800a902 <__multiply+0xe2>
 800a8c2:	46c4      	mov	ip, r8
 800a8c4:	46a1      	mov	r9, r4
 800a8c6:	2700      	movs	r7, #0
 800a8c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a8cc:	f8d9 3000 	ldr.w	r3, [r9]
 800a8d0:	fa1f fb82 	uxth.w	fp, r2
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	fb0a 330b 	mla	r3, sl, fp, r3
 800a8da:	443b      	add	r3, r7
 800a8dc:	f8d9 7000 	ldr.w	r7, [r9]
 800a8e0:	0c12      	lsrs	r2, r2, #16
 800a8e2:	0c3f      	lsrs	r7, r7, #16
 800a8e4:	fb0a 7202 	mla	r2, sl, r2, r7
 800a8e8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8f2:	4565      	cmp	r5, ip
 800a8f4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a8f8:	f849 3b04 	str.w	r3, [r9], #4
 800a8fc:	d8e4      	bhi.n	800a8c8 <__multiply+0xa8>
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	50e7      	str	r7, [r4, r3]
 800a902:	9b03      	ldr	r3, [sp, #12]
 800a904:	3104      	adds	r1, #4
 800a906:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a90a:	f1b9 0f00 	cmp.w	r9, #0
 800a90e:	d020      	beq.n	800a952 <__multiply+0x132>
 800a910:	4647      	mov	r7, r8
 800a912:	46a4      	mov	ip, r4
 800a914:	f04f 0a00 	mov.w	sl, #0
 800a918:	6823      	ldr	r3, [r4, #0]
 800a91a:	f8b7 b000 	ldrh.w	fp, [r7]
 800a91e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a922:	b29b      	uxth	r3, r3
 800a924:	fb09 220b 	mla	r2, r9, fp, r2
 800a928:	4452      	add	r2, sl
 800a92a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a92e:	f84c 3b04 	str.w	r3, [ip], #4
 800a932:	f857 3b04 	ldr.w	r3, [r7], #4
 800a936:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a93a:	f8bc 3000 	ldrh.w	r3, [ip]
 800a93e:	42bd      	cmp	r5, r7
 800a940:	fb09 330a 	mla	r3, r9, sl, r3
 800a944:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a94c:	d8e5      	bhi.n	800a91a <__multiply+0xfa>
 800a94e:	9a01      	ldr	r2, [sp, #4]
 800a950:	50a3      	str	r3, [r4, r2]
 800a952:	3404      	adds	r4, #4
 800a954:	e79f      	b.n	800a896 <__multiply+0x76>
 800a956:	3e01      	subs	r6, #1
 800a958:	e7a1      	b.n	800a89e <__multiply+0x7e>
 800a95a:	bf00      	nop
 800a95c:	0800b5c6 	.word	0x0800b5c6
 800a960:	0800b5d7 	.word	0x0800b5d7

0800a964 <__pow5mult>:
 800a964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a968:	4615      	mov	r5, r2
 800a96a:	f012 0203 	ands.w	r2, r2, #3
 800a96e:	4607      	mov	r7, r0
 800a970:	460e      	mov	r6, r1
 800a972:	d007      	beq.n	800a984 <__pow5mult+0x20>
 800a974:	4c25      	ldr	r4, [pc, #148]	@ (800aa0c <__pow5mult+0xa8>)
 800a976:	3a01      	subs	r2, #1
 800a978:	2300      	movs	r3, #0
 800a97a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a97e:	f7ff fea7 	bl	800a6d0 <__multadd>
 800a982:	4606      	mov	r6, r0
 800a984:	10ad      	asrs	r5, r5, #2
 800a986:	d03d      	beq.n	800aa04 <__pow5mult+0xa0>
 800a988:	69fc      	ldr	r4, [r7, #28]
 800a98a:	b97c      	cbnz	r4, 800a9ac <__pow5mult+0x48>
 800a98c:	2010      	movs	r0, #16
 800a98e:	f7ff fd87 	bl	800a4a0 <malloc>
 800a992:	4602      	mov	r2, r0
 800a994:	61f8      	str	r0, [r7, #28]
 800a996:	b928      	cbnz	r0, 800a9a4 <__pow5mult+0x40>
 800a998:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a99c:	4b1c      	ldr	r3, [pc, #112]	@ (800aa10 <__pow5mult+0xac>)
 800a99e:	481d      	ldr	r0, [pc, #116]	@ (800aa14 <__pow5mult+0xb0>)
 800a9a0:	f000 fa74 	bl	800ae8c <__assert_func>
 800a9a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9a8:	6004      	str	r4, [r0, #0]
 800a9aa:	60c4      	str	r4, [r0, #12]
 800a9ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a9b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9b4:	b94c      	cbnz	r4, 800a9ca <__pow5mult+0x66>
 800a9b6:	f240 2171 	movw	r1, #625	@ 0x271
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	f7ff ff1a 	bl	800a7f4 <__i2b>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9c8:	6003      	str	r3, [r0, #0]
 800a9ca:	f04f 0900 	mov.w	r9, #0
 800a9ce:	07eb      	lsls	r3, r5, #31
 800a9d0:	d50a      	bpl.n	800a9e8 <__pow5mult+0x84>
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f7ff ff22 	bl	800a820 <__multiply>
 800a9dc:	4680      	mov	r8, r0
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	f7ff fe53 	bl	800a68c <_Bfree>
 800a9e6:	4646      	mov	r6, r8
 800a9e8:	106d      	asrs	r5, r5, #1
 800a9ea:	d00b      	beq.n	800aa04 <__pow5mult+0xa0>
 800a9ec:	6820      	ldr	r0, [r4, #0]
 800a9ee:	b938      	cbnz	r0, 800aa00 <__pow5mult+0x9c>
 800a9f0:	4622      	mov	r2, r4
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff ff13 	bl	800a820 <__multiply>
 800a9fa:	6020      	str	r0, [r4, #0]
 800a9fc:	f8c0 9000 	str.w	r9, [r0]
 800aa00:	4604      	mov	r4, r0
 800aa02:	e7e4      	b.n	800a9ce <__pow5mult+0x6a>
 800aa04:	4630      	mov	r0, r6
 800aa06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0800b688 	.word	0x0800b688
 800aa10:	0800b557 	.word	0x0800b557
 800aa14:	0800b5d7 	.word	0x0800b5d7

0800aa18 <__lshift>:
 800aa18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	4607      	mov	r7, r0
 800aa20:	4691      	mov	r9, r2
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	6849      	ldr	r1, [r1, #4]
 800aa26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa30:	f108 0601 	add.w	r6, r8, #1
 800aa34:	42b3      	cmp	r3, r6
 800aa36:	db0b      	blt.n	800aa50 <__lshift+0x38>
 800aa38:	4638      	mov	r0, r7
 800aa3a:	f7ff fde7 	bl	800a60c <_Balloc>
 800aa3e:	4605      	mov	r5, r0
 800aa40:	b948      	cbnz	r0, 800aa56 <__lshift+0x3e>
 800aa42:	4602      	mov	r2, r0
 800aa44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa48:	4b27      	ldr	r3, [pc, #156]	@ (800aae8 <__lshift+0xd0>)
 800aa4a:	4828      	ldr	r0, [pc, #160]	@ (800aaec <__lshift+0xd4>)
 800aa4c:	f000 fa1e 	bl	800ae8c <__assert_func>
 800aa50:	3101      	adds	r1, #1
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	e7ee      	b.n	800aa34 <__lshift+0x1c>
 800aa56:	2300      	movs	r3, #0
 800aa58:	f100 0114 	add.w	r1, r0, #20
 800aa5c:	f100 0210 	add.w	r2, r0, #16
 800aa60:	4618      	mov	r0, r3
 800aa62:	4553      	cmp	r3, sl
 800aa64:	db33      	blt.n	800aace <__lshift+0xb6>
 800aa66:	6920      	ldr	r0, [r4, #16]
 800aa68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa6c:	f104 0314 	add.w	r3, r4, #20
 800aa70:	f019 091f 	ands.w	r9, r9, #31
 800aa74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa7c:	d02b      	beq.n	800aad6 <__lshift+0xbe>
 800aa7e:	468a      	mov	sl, r1
 800aa80:	2200      	movs	r2, #0
 800aa82:	f1c9 0e20 	rsb	lr, r9, #32
 800aa86:	6818      	ldr	r0, [r3, #0]
 800aa88:	fa00 f009 	lsl.w	r0, r0, r9
 800aa8c:	4310      	orrs	r0, r2
 800aa8e:	f84a 0b04 	str.w	r0, [sl], #4
 800aa92:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa96:	459c      	cmp	ip, r3
 800aa98:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa9c:	d8f3      	bhi.n	800aa86 <__lshift+0x6e>
 800aa9e:	ebac 0304 	sub.w	r3, ip, r4
 800aaa2:	3b15      	subs	r3, #21
 800aaa4:	f023 0303 	bic.w	r3, r3, #3
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	f104 0015 	add.w	r0, r4, #21
 800aaae:	4560      	cmp	r0, ip
 800aab0:	bf88      	it	hi
 800aab2:	2304      	movhi	r3, #4
 800aab4:	50ca      	str	r2, [r1, r3]
 800aab6:	b10a      	cbz	r2, 800aabc <__lshift+0xa4>
 800aab8:	f108 0602 	add.w	r6, r8, #2
 800aabc:	3e01      	subs	r6, #1
 800aabe:	4638      	mov	r0, r7
 800aac0:	4621      	mov	r1, r4
 800aac2:	612e      	str	r6, [r5, #16]
 800aac4:	f7ff fde2 	bl	800a68c <_Bfree>
 800aac8:	4628      	mov	r0, r5
 800aaca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aace:	f842 0f04 	str.w	r0, [r2, #4]!
 800aad2:	3301      	adds	r3, #1
 800aad4:	e7c5      	b.n	800aa62 <__lshift+0x4a>
 800aad6:	3904      	subs	r1, #4
 800aad8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aadc:	459c      	cmp	ip, r3
 800aade:	f841 2f04 	str.w	r2, [r1, #4]!
 800aae2:	d8f9      	bhi.n	800aad8 <__lshift+0xc0>
 800aae4:	e7ea      	b.n	800aabc <__lshift+0xa4>
 800aae6:	bf00      	nop
 800aae8:	0800b5c6 	.word	0x0800b5c6
 800aaec:	0800b5d7 	.word	0x0800b5d7

0800aaf0 <__mcmp>:
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	690a      	ldr	r2, [r1, #16]
 800aaf4:	6900      	ldr	r0, [r0, #16]
 800aaf6:	b530      	push	{r4, r5, lr}
 800aaf8:	1a80      	subs	r0, r0, r2
 800aafa:	d10e      	bne.n	800ab1a <__mcmp+0x2a>
 800aafc:	3314      	adds	r3, #20
 800aafe:	3114      	adds	r1, #20
 800ab00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab10:	4295      	cmp	r5, r2
 800ab12:	d003      	beq.n	800ab1c <__mcmp+0x2c>
 800ab14:	d205      	bcs.n	800ab22 <__mcmp+0x32>
 800ab16:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1a:	bd30      	pop	{r4, r5, pc}
 800ab1c:	42a3      	cmp	r3, r4
 800ab1e:	d3f3      	bcc.n	800ab08 <__mcmp+0x18>
 800ab20:	e7fb      	b.n	800ab1a <__mcmp+0x2a>
 800ab22:	2001      	movs	r0, #1
 800ab24:	e7f9      	b.n	800ab1a <__mcmp+0x2a>
	...

0800ab28 <__mdiff>:
 800ab28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	4689      	mov	r9, r1
 800ab2e:	4606      	mov	r6, r0
 800ab30:	4611      	mov	r1, r2
 800ab32:	4648      	mov	r0, r9
 800ab34:	4614      	mov	r4, r2
 800ab36:	f7ff ffdb 	bl	800aaf0 <__mcmp>
 800ab3a:	1e05      	subs	r5, r0, #0
 800ab3c:	d112      	bne.n	800ab64 <__mdiff+0x3c>
 800ab3e:	4629      	mov	r1, r5
 800ab40:	4630      	mov	r0, r6
 800ab42:	f7ff fd63 	bl	800a60c <_Balloc>
 800ab46:	4602      	mov	r2, r0
 800ab48:	b928      	cbnz	r0, 800ab56 <__mdiff+0x2e>
 800ab4a:	f240 2137 	movw	r1, #567	@ 0x237
 800ab4e:	4b3e      	ldr	r3, [pc, #248]	@ (800ac48 <__mdiff+0x120>)
 800ab50:	483e      	ldr	r0, [pc, #248]	@ (800ac4c <__mdiff+0x124>)
 800ab52:	f000 f99b 	bl	800ae8c <__assert_func>
 800ab56:	2301      	movs	r3, #1
 800ab58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	b003      	add	sp, #12
 800ab60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab64:	bfbc      	itt	lt
 800ab66:	464b      	movlt	r3, r9
 800ab68:	46a1      	movlt	r9, r4
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab70:	bfba      	itte	lt
 800ab72:	461c      	movlt	r4, r3
 800ab74:	2501      	movlt	r5, #1
 800ab76:	2500      	movge	r5, #0
 800ab78:	f7ff fd48 	bl	800a60c <_Balloc>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	b918      	cbnz	r0, 800ab88 <__mdiff+0x60>
 800ab80:	f240 2145 	movw	r1, #581	@ 0x245
 800ab84:	4b30      	ldr	r3, [pc, #192]	@ (800ac48 <__mdiff+0x120>)
 800ab86:	e7e3      	b.n	800ab50 <__mdiff+0x28>
 800ab88:	f100 0b14 	add.w	fp, r0, #20
 800ab8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ab90:	f109 0310 	add.w	r3, r9, #16
 800ab94:	60c5      	str	r5, [r0, #12]
 800ab96:	f04f 0c00 	mov.w	ip, #0
 800ab9a:	f109 0514 	add.w	r5, r9, #20
 800ab9e:	46d9      	mov	r9, fp
 800aba0:	6926      	ldr	r6, [r4, #16]
 800aba2:	f104 0e14 	add.w	lr, r4, #20
 800aba6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800abaa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	9b01      	ldr	r3, [sp, #4]
 800abb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800abb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800abba:	b281      	uxth	r1, r0
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	fa1f f38a 	uxth.w	r3, sl
 800abc2:	1a5b      	subs	r3, r3, r1
 800abc4:	0c00      	lsrs	r0, r0, #16
 800abc6:	4463      	add	r3, ip
 800abc8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800abcc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800abd6:	4576      	cmp	r6, lr
 800abd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abdc:	f849 3b04 	str.w	r3, [r9], #4
 800abe0:	d8e6      	bhi.n	800abb0 <__mdiff+0x88>
 800abe2:	1b33      	subs	r3, r6, r4
 800abe4:	3b15      	subs	r3, #21
 800abe6:	f023 0303 	bic.w	r3, r3, #3
 800abea:	3415      	adds	r4, #21
 800abec:	3304      	adds	r3, #4
 800abee:	42a6      	cmp	r6, r4
 800abf0:	bf38      	it	cc
 800abf2:	2304      	movcc	r3, #4
 800abf4:	441d      	add	r5, r3
 800abf6:	445b      	add	r3, fp
 800abf8:	461e      	mov	r6, r3
 800abfa:	462c      	mov	r4, r5
 800abfc:	4544      	cmp	r4, r8
 800abfe:	d30e      	bcc.n	800ac1e <__mdiff+0xf6>
 800ac00:	f108 0103 	add.w	r1, r8, #3
 800ac04:	1b49      	subs	r1, r1, r5
 800ac06:	f021 0103 	bic.w	r1, r1, #3
 800ac0a:	3d03      	subs	r5, #3
 800ac0c:	45a8      	cmp	r8, r5
 800ac0e:	bf38      	it	cc
 800ac10:	2100      	movcc	r1, #0
 800ac12:	440b      	add	r3, r1
 800ac14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac18:	b199      	cbz	r1, 800ac42 <__mdiff+0x11a>
 800ac1a:	6117      	str	r7, [r2, #16]
 800ac1c:	e79e      	b.n	800ab5c <__mdiff+0x34>
 800ac1e:	46e6      	mov	lr, ip
 800ac20:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac24:	fa1f fc81 	uxth.w	ip, r1
 800ac28:	44f4      	add	ip, lr
 800ac2a:	0c08      	lsrs	r0, r1, #16
 800ac2c:	4471      	add	r1, lr
 800ac2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac32:	b289      	uxth	r1, r1
 800ac34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac3c:	f846 1b04 	str.w	r1, [r6], #4
 800ac40:	e7dc      	b.n	800abfc <__mdiff+0xd4>
 800ac42:	3f01      	subs	r7, #1
 800ac44:	e7e6      	b.n	800ac14 <__mdiff+0xec>
 800ac46:	bf00      	nop
 800ac48:	0800b5c6 	.word	0x0800b5c6
 800ac4c:	0800b5d7 	.word	0x0800b5d7

0800ac50 <__d2b>:
 800ac50:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ac54:	2101      	movs	r1, #1
 800ac56:	4690      	mov	r8, r2
 800ac58:	4699      	mov	r9, r3
 800ac5a:	9e08      	ldr	r6, [sp, #32]
 800ac5c:	f7ff fcd6 	bl	800a60c <_Balloc>
 800ac60:	4604      	mov	r4, r0
 800ac62:	b930      	cbnz	r0, 800ac72 <__d2b+0x22>
 800ac64:	4602      	mov	r2, r0
 800ac66:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac6a:	4b23      	ldr	r3, [pc, #140]	@ (800acf8 <__d2b+0xa8>)
 800ac6c:	4823      	ldr	r0, [pc, #140]	@ (800acfc <__d2b+0xac>)
 800ac6e:	f000 f90d 	bl	800ae8c <__assert_func>
 800ac72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac7a:	b10d      	cbz	r5, 800ac80 <__d2b+0x30>
 800ac7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	f1b8 0300 	subs.w	r3, r8, #0
 800ac86:	d024      	beq.n	800acd2 <__d2b+0x82>
 800ac88:	4668      	mov	r0, sp
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	f7ff fd85 	bl	800a79a <__lo0bits>
 800ac90:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac94:	b1d8      	cbz	r0, 800acce <__d2b+0x7e>
 800ac96:	f1c0 0320 	rsb	r3, r0, #32
 800ac9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	40c2      	lsrs	r2, r0
 800aca2:	6163      	str	r3, [r4, #20]
 800aca4:	9201      	str	r2, [sp, #4]
 800aca6:	9b01      	ldr	r3, [sp, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	bf0c      	ite	eq
 800acac:	2201      	moveq	r2, #1
 800acae:	2202      	movne	r2, #2
 800acb0:	61a3      	str	r3, [r4, #24]
 800acb2:	6122      	str	r2, [r4, #16]
 800acb4:	b1ad      	cbz	r5, 800ace2 <__d2b+0x92>
 800acb6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800acba:	4405      	add	r5, r0
 800acbc:	6035      	str	r5, [r6, #0]
 800acbe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc4:	6018      	str	r0, [r3, #0]
 800acc6:	4620      	mov	r0, r4
 800acc8:	b002      	add	sp, #8
 800acca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800acce:	6161      	str	r1, [r4, #20]
 800acd0:	e7e9      	b.n	800aca6 <__d2b+0x56>
 800acd2:	a801      	add	r0, sp, #4
 800acd4:	f7ff fd61 	bl	800a79a <__lo0bits>
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	6163      	str	r3, [r4, #20]
 800acde:	3020      	adds	r0, #32
 800ace0:	e7e7      	b.n	800acb2 <__d2b+0x62>
 800ace2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ace6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acea:	6030      	str	r0, [r6, #0]
 800acec:	6918      	ldr	r0, [r3, #16]
 800acee:	f7ff fd35 	bl	800a75c <__hi0bits>
 800acf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acf6:	e7e4      	b.n	800acc2 <__d2b+0x72>
 800acf8:	0800b5c6 	.word	0x0800b5c6
 800acfc:	0800b5d7 	.word	0x0800b5d7

0800ad00 <__sflush_r>:
 800ad00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad06:	0716      	lsls	r6, r2, #28
 800ad08:	4605      	mov	r5, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	d454      	bmi.n	800adb8 <__sflush_r+0xb8>
 800ad0e:	684b      	ldr	r3, [r1, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dc02      	bgt.n	800ad1a <__sflush_r+0x1a>
 800ad14:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dd48      	ble.n	800adac <__sflush_r+0xac>
 800ad1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad1c:	2e00      	cmp	r6, #0
 800ad1e:	d045      	beq.n	800adac <__sflush_r+0xac>
 800ad20:	2300      	movs	r3, #0
 800ad22:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad26:	682f      	ldr	r7, [r5, #0]
 800ad28:	6a21      	ldr	r1, [r4, #32]
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	d030      	beq.n	800ad90 <__sflush_r+0x90>
 800ad2e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad30:	89a3      	ldrh	r3, [r4, #12]
 800ad32:	0759      	lsls	r1, r3, #29
 800ad34:	d505      	bpl.n	800ad42 <__sflush_r+0x42>
 800ad36:	6863      	ldr	r3, [r4, #4]
 800ad38:	1ad2      	subs	r2, r2, r3
 800ad3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad3c:	b10b      	cbz	r3, 800ad42 <__sflush_r+0x42>
 800ad3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad40:	1ad2      	subs	r2, r2, r3
 800ad42:	2300      	movs	r3, #0
 800ad44:	4628      	mov	r0, r5
 800ad46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad48:	6a21      	ldr	r1, [r4, #32]
 800ad4a:	47b0      	blx	r6
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	d106      	bne.n	800ad60 <__sflush_r+0x60>
 800ad52:	6829      	ldr	r1, [r5, #0]
 800ad54:	291d      	cmp	r1, #29
 800ad56:	d82b      	bhi.n	800adb0 <__sflush_r+0xb0>
 800ad58:	4a28      	ldr	r2, [pc, #160]	@ (800adfc <__sflush_r+0xfc>)
 800ad5a:	40ca      	lsrs	r2, r1
 800ad5c:	07d6      	lsls	r6, r2, #31
 800ad5e:	d527      	bpl.n	800adb0 <__sflush_r+0xb0>
 800ad60:	2200      	movs	r2, #0
 800ad62:	6062      	str	r2, [r4, #4]
 800ad64:	6922      	ldr	r2, [r4, #16]
 800ad66:	04d9      	lsls	r1, r3, #19
 800ad68:	6022      	str	r2, [r4, #0]
 800ad6a:	d504      	bpl.n	800ad76 <__sflush_r+0x76>
 800ad6c:	1c42      	adds	r2, r0, #1
 800ad6e:	d101      	bne.n	800ad74 <__sflush_r+0x74>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	b903      	cbnz	r3, 800ad76 <__sflush_r+0x76>
 800ad74:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad78:	602f      	str	r7, [r5, #0]
 800ad7a:	b1b9      	cbz	r1, 800adac <__sflush_r+0xac>
 800ad7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad80:	4299      	cmp	r1, r3
 800ad82:	d002      	beq.n	800ad8a <__sflush_r+0x8a>
 800ad84:	4628      	mov	r0, r5
 800ad86:	f7ff fb43 	bl	800a410 <_free_r>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad8e:	e00d      	b.n	800adac <__sflush_r+0xac>
 800ad90:	2301      	movs	r3, #1
 800ad92:	4628      	mov	r0, r5
 800ad94:	47b0      	blx	r6
 800ad96:	4602      	mov	r2, r0
 800ad98:	1c50      	adds	r0, r2, #1
 800ad9a:	d1c9      	bne.n	800ad30 <__sflush_r+0x30>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0c6      	beq.n	800ad30 <__sflush_r+0x30>
 800ada2:	2b1d      	cmp	r3, #29
 800ada4:	d001      	beq.n	800adaa <__sflush_r+0xaa>
 800ada6:	2b16      	cmp	r3, #22
 800ada8:	d11d      	bne.n	800ade6 <__sflush_r+0xe6>
 800adaa:	602f      	str	r7, [r5, #0]
 800adac:	2000      	movs	r0, #0
 800adae:	e021      	b.n	800adf4 <__sflush_r+0xf4>
 800adb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adb4:	b21b      	sxth	r3, r3
 800adb6:	e01a      	b.n	800adee <__sflush_r+0xee>
 800adb8:	690f      	ldr	r7, [r1, #16]
 800adba:	2f00      	cmp	r7, #0
 800adbc:	d0f6      	beq.n	800adac <__sflush_r+0xac>
 800adbe:	0793      	lsls	r3, r2, #30
 800adc0:	bf18      	it	ne
 800adc2:	2300      	movne	r3, #0
 800adc4:	680e      	ldr	r6, [r1, #0]
 800adc6:	bf08      	it	eq
 800adc8:	694b      	ldreq	r3, [r1, #20]
 800adca:	1bf6      	subs	r6, r6, r7
 800adcc:	600f      	str	r7, [r1, #0]
 800adce:	608b      	str	r3, [r1, #8]
 800add0:	2e00      	cmp	r6, #0
 800add2:	ddeb      	ble.n	800adac <__sflush_r+0xac>
 800add4:	4633      	mov	r3, r6
 800add6:	463a      	mov	r2, r7
 800add8:	4628      	mov	r0, r5
 800adda:	6a21      	ldr	r1, [r4, #32]
 800addc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ade0:	47e0      	blx	ip
 800ade2:	2800      	cmp	r0, #0
 800ade4:	dc07      	bgt.n	800adf6 <__sflush_r+0xf6>
 800ade6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adee:	f04f 30ff 	mov.w	r0, #4294967295
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adf6:	4407      	add	r7, r0
 800adf8:	1a36      	subs	r6, r6, r0
 800adfa:	e7e9      	b.n	800add0 <__sflush_r+0xd0>
 800adfc:	20400001 	.word	0x20400001

0800ae00 <_fflush_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	690b      	ldr	r3, [r1, #16]
 800ae04:	4605      	mov	r5, r0
 800ae06:	460c      	mov	r4, r1
 800ae08:	b913      	cbnz	r3, 800ae10 <_fflush_r+0x10>
 800ae0a:	2500      	movs	r5, #0
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	b118      	cbz	r0, 800ae1a <_fflush_r+0x1a>
 800ae12:	6a03      	ldr	r3, [r0, #32]
 800ae14:	b90b      	cbnz	r3, 800ae1a <_fflush_r+0x1a>
 800ae16:	f7fe fb97 	bl	8009548 <__sinit>
 800ae1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d0f3      	beq.n	800ae0a <_fflush_r+0xa>
 800ae22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae24:	07d0      	lsls	r0, r2, #31
 800ae26:	d404      	bmi.n	800ae32 <_fflush_r+0x32>
 800ae28:	0599      	lsls	r1, r3, #22
 800ae2a:	d402      	bmi.n	800ae32 <_fflush_r+0x32>
 800ae2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae2e:	f7fe fc82 	bl	8009736 <__retarget_lock_acquire_recursive>
 800ae32:	4628      	mov	r0, r5
 800ae34:	4621      	mov	r1, r4
 800ae36:	f7ff ff63 	bl	800ad00 <__sflush_r>
 800ae3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	07da      	lsls	r2, r3, #31
 800ae40:	d4e4      	bmi.n	800ae0c <_fflush_r+0xc>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	059b      	lsls	r3, r3, #22
 800ae46:	d4e1      	bmi.n	800ae0c <_fflush_r+0xc>
 800ae48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae4a:	f7fe fc75 	bl	8009738 <__retarget_lock_release_recursive>
 800ae4e:	e7dd      	b.n	800ae0c <_fflush_r+0xc>

0800ae50 <_sbrk_r>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	2300      	movs	r3, #0
 800ae54:	4d05      	ldr	r5, [pc, #20]	@ (800ae6c <_sbrk_r+0x1c>)
 800ae56:	4604      	mov	r4, r0
 800ae58:	4608      	mov	r0, r1
 800ae5a:	602b      	str	r3, [r5, #0]
 800ae5c:	f7f6 f854 	bl	8000f08 <_sbrk>
 800ae60:	1c43      	adds	r3, r0, #1
 800ae62:	d102      	bne.n	800ae6a <_sbrk_r+0x1a>
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	b103      	cbz	r3, 800ae6a <_sbrk_r+0x1a>
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	200016b4 	.word	0x200016b4

0800ae70 <memcpy>:
 800ae70:	440a      	add	r2, r1
 800ae72:	4291      	cmp	r1, r2
 800ae74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae78:	d100      	bne.n	800ae7c <memcpy+0xc>
 800ae7a:	4770      	bx	lr
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae82:	4291      	cmp	r1, r2
 800ae84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae88:	d1f9      	bne.n	800ae7e <memcpy+0xe>
 800ae8a:	bd10      	pop	{r4, pc}

0800ae8c <__assert_func>:
 800ae8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae8e:	4614      	mov	r4, r2
 800ae90:	461a      	mov	r2, r3
 800ae92:	4b09      	ldr	r3, [pc, #36]	@ (800aeb8 <__assert_func+0x2c>)
 800ae94:	4605      	mov	r5, r0
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68d8      	ldr	r0, [r3, #12]
 800ae9a:	b14c      	cbz	r4, 800aeb0 <__assert_func+0x24>
 800ae9c:	4b07      	ldr	r3, [pc, #28]	@ (800aebc <__assert_func+0x30>)
 800ae9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aea2:	9100      	str	r1, [sp, #0]
 800aea4:	462b      	mov	r3, r5
 800aea6:	4906      	ldr	r1, [pc, #24]	@ (800aec0 <__assert_func+0x34>)
 800aea8:	f000 f842 	bl	800af30 <fiprintf>
 800aeac:	f000 f852 	bl	800af54 <abort>
 800aeb0:	4b04      	ldr	r3, [pc, #16]	@ (800aec4 <__assert_func+0x38>)
 800aeb2:	461c      	mov	r4, r3
 800aeb4:	e7f3      	b.n	800ae9e <__assert_func+0x12>
 800aeb6:	bf00      	nop
 800aeb8:	20000188 	.word	0x20000188
 800aebc:	0800b63a 	.word	0x0800b63a
 800aec0:	0800b647 	.word	0x0800b647
 800aec4:	0800b675 	.word	0x0800b675

0800aec8 <_calloc_r>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	fba1 5402 	umull	r5, r4, r1, r2
 800aece:	b934      	cbnz	r4, 800aede <_calloc_r+0x16>
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7ff fb0f 	bl	800a4f4 <_malloc_r>
 800aed6:	4606      	mov	r6, r0
 800aed8:	b928      	cbnz	r0, 800aee6 <_calloc_r+0x1e>
 800aeda:	4630      	mov	r0, r6
 800aedc:	bd70      	pop	{r4, r5, r6, pc}
 800aede:	220c      	movs	r2, #12
 800aee0:	2600      	movs	r6, #0
 800aee2:	6002      	str	r2, [r0, #0]
 800aee4:	e7f9      	b.n	800aeda <_calloc_r+0x12>
 800aee6:	462a      	mov	r2, r5
 800aee8:	4621      	mov	r1, r4
 800aeea:	f7fe fba6 	bl	800963a <memset>
 800aeee:	e7f4      	b.n	800aeda <_calloc_r+0x12>

0800aef0 <__ascii_mbtowc>:
 800aef0:	b082      	sub	sp, #8
 800aef2:	b901      	cbnz	r1, 800aef6 <__ascii_mbtowc+0x6>
 800aef4:	a901      	add	r1, sp, #4
 800aef6:	b142      	cbz	r2, 800af0a <__ascii_mbtowc+0x1a>
 800aef8:	b14b      	cbz	r3, 800af0e <__ascii_mbtowc+0x1e>
 800aefa:	7813      	ldrb	r3, [r2, #0]
 800aefc:	600b      	str	r3, [r1, #0]
 800aefe:	7812      	ldrb	r2, [r2, #0]
 800af00:	1e10      	subs	r0, r2, #0
 800af02:	bf18      	it	ne
 800af04:	2001      	movne	r0, #1
 800af06:	b002      	add	sp, #8
 800af08:	4770      	bx	lr
 800af0a:	4610      	mov	r0, r2
 800af0c:	e7fb      	b.n	800af06 <__ascii_mbtowc+0x16>
 800af0e:	f06f 0001 	mvn.w	r0, #1
 800af12:	e7f8      	b.n	800af06 <__ascii_mbtowc+0x16>

0800af14 <__ascii_wctomb>:
 800af14:	4603      	mov	r3, r0
 800af16:	4608      	mov	r0, r1
 800af18:	b141      	cbz	r1, 800af2c <__ascii_wctomb+0x18>
 800af1a:	2aff      	cmp	r2, #255	@ 0xff
 800af1c:	d904      	bls.n	800af28 <__ascii_wctomb+0x14>
 800af1e:	228a      	movs	r2, #138	@ 0x8a
 800af20:	f04f 30ff 	mov.w	r0, #4294967295
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	4770      	bx	lr
 800af28:	2001      	movs	r0, #1
 800af2a:	700a      	strb	r2, [r1, #0]
 800af2c:	4770      	bx	lr
	...

0800af30 <fiprintf>:
 800af30:	b40e      	push	{r1, r2, r3}
 800af32:	b503      	push	{r0, r1, lr}
 800af34:	4601      	mov	r1, r0
 800af36:	ab03      	add	r3, sp, #12
 800af38:	4805      	ldr	r0, [pc, #20]	@ (800af50 <fiprintf+0x20>)
 800af3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3e:	6800      	ldr	r0, [r0, #0]
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	f000 f835 	bl	800afb0 <_vfiprintf_r>
 800af46:	b002      	add	sp, #8
 800af48:	f85d eb04 	ldr.w	lr, [sp], #4
 800af4c:	b003      	add	sp, #12
 800af4e:	4770      	bx	lr
 800af50:	20000188 	.word	0x20000188

0800af54 <abort>:
 800af54:	2006      	movs	r0, #6
 800af56:	b508      	push	{r3, lr}
 800af58:	f000 f9fe 	bl	800b358 <raise>
 800af5c:	2001      	movs	r0, #1
 800af5e:	f7f5 ff5e 	bl	8000e1e <_exit>

0800af62 <__sfputc_r>:
 800af62:	6893      	ldr	r3, [r2, #8]
 800af64:	b410      	push	{r4}
 800af66:	3b01      	subs	r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	6093      	str	r3, [r2, #8]
 800af6c:	da07      	bge.n	800af7e <__sfputc_r+0x1c>
 800af6e:	6994      	ldr	r4, [r2, #24]
 800af70:	42a3      	cmp	r3, r4
 800af72:	db01      	blt.n	800af78 <__sfputc_r+0x16>
 800af74:	290a      	cmp	r1, #10
 800af76:	d102      	bne.n	800af7e <__sfputc_r+0x1c>
 800af78:	bc10      	pop	{r4}
 800af7a:	f000 b931 	b.w	800b1e0 <__swbuf_r>
 800af7e:	6813      	ldr	r3, [r2, #0]
 800af80:	1c58      	adds	r0, r3, #1
 800af82:	6010      	str	r0, [r2, #0]
 800af84:	7019      	strb	r1, [r3, #0]
 800af86:	4608      	mov	r0, r1
 800af88:	bc10      	pop	{r4}
 800af8a:	4770      	bx	lr

0800af8c <__sfputs_r>:
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	4606      	mov	r6, r0
 800af90:	460f      	mov	r7, r1
 800af92:	4614      	mov	r4, r2
 800af94:	18d5      	adds	r5, r2, r3
 800af96:	42ac      	cmp	r4, r5
 800af98:	d101      	bne.n	800af9e <__sfputs_r+0x12>
 800af9a:	2000      	movs	r0, #0
 800af9c:	e007      	b.n	800afae <__sfputs_r+0x22>
 800af9e:	463a      	mov	r2, r7
 800afa0:	4630      	mov	r0, r6
 800afa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa6:	f7ff ffdc 	bl	800af62 <__sfputc_r>
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	d1f3      	bne.n	800af96 <__sfputs_r+0xa>
 800afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afb0 <_vfiprintf_r>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	460d      	mov	r5, r1
 800afb6:	4614      	mov	r4, r2
 800afb8:	4698      	mov	r8, r3
 800afba:	4606      	mov	r6, r0
 800afbc:	b09d      	sub	sp, #116	@ 0x74
 800afbe:	b118      	cbz	r0, 800afc8 <_vfiprintf_r+0x18>
 800afc0:	6a03      	ldr	r3, [r0, #32]
 800afc2:	b90b      	cbnz	r3, 800afc8 <_vfiprintf_r+0x18>
 800afc4:	f7fe fac0 	bl	8009548 <__sinit>
 800afc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afca:	07d9      	lsls	r1, r3, #31
 800afcc:	d405      	bmi.n	800afda <_vfiprintf_r+0x2a>
 800afce:	89ab      	ldrh	r3, [r5, #12]
 800afd0:	059a      	lsls	r2, r3, #22
 800afd2:	d402      	bmi.n	800afda <_vfiprintf_r+0x2a>
 800afd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afd6:	f7fe fbae 	bl	8009736 <__retarget_lock_acquire_recursive>
 800afda:	89ab      	ldrh	r3, [r5, #12]
 800afdc:	071b      	lsls	r3, r3, #28
 800afde:	d501      	bpl.n	800afe4 <_vfiprintf_r+0x34>
 800afe0:	692b      	ldr	r3, [r5, #16]
 800afe2:	b99b      	cbnz	r3, 800b00c <_vfiprintf_r+0x5c>
 800afe4:	4629      	mov	r1, r5
 800afe6:	4630      	mov	r0, r6
 800afe8:	f000 f938 	bl	800b25c <__swsetup_r>
 800afec:	b170      	cbz	r0, 800b00c <_vfiprintf_r+0x5c>
 800afee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aff0:	07dc      	lsls	r4, r3, #31
 800aff2:	d504      	bpl.n	800affe <_vfiprintf_r+0x4e>
 800aff4:	f04f 30ff 	mov.w	r0, #4294967295
 800aff8:	b01d      	add	sp, #116	@ 0x74
 800affa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800affe:	89ab      	ldrh	r3, [r5, #12]
 800b000:	0598      	lsls	r0, r3, #22
 800b002:	d4f7      	bmi.n	800aff4 <_vfiprintf_r+0x44>
 800b004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b006:	f7fe fb97 	bl	8009738 <__retarget_lock_release_recursive>
 800b00a:	e7f3      	b.n	800aff4 <_vfiprintf_r+0x44>
 800b00c:	2300      	movs	r3, #0
 800b00e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b010:	2320      	movs	r3, #32
 800b012:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b016:	2330      	movs	r3, #48	@ 0x30
 800b018:	f04f 0901 	mov.w	r9, #1
 800b01c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b020:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b1cc <_vfiprintf_r+0x21c>
 800b024:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b028:	4623      	mov	r3, r4
 800b02a:	469a      	mov	sl, r3
 800b02c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b030:	b10a      	cbz	r2, 800b036 <_vfiprintf_r+0x86>
 800b032:	2a25      	cmp	r2, #37	@ 0x25
 800b034:	d1f9      	bne.n	800b02a <_vfiprintf_r+0x7a>
 800b036:	ebba 0b04 	subs.w	fp, sl, r4
 800b03a:	d00b      	beq.n	800b054 <_vfiprintf_r+0xa4>
 800b03c:	465b      	mov	r3, fp
 800b03e:	4622      	mov	r2, r4
 800b040:	4629      	mov	r1, r5
 800b042:	4630      	mov	r0, r6
 800b044:	f7ff ffa2 	bl	800af8c <__sfputs_r>
 800b048:	3001      	adds	r0, #1
 800b04a:	f000 80a7 	beq.w	800b19c <_vfiprintf_r+0x1ec>
 800b04e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b050:	445a      	add	r2, fp
 800b052:	9209      	str	r2, [sp, #36]	@ 0x24
 800b054:	f89a 3000 	ldrb.w	r3, [sl]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 809f 	beq.w	800b19c <_vfiprintf_r+0x1ec>
 800b05e:	2300      	movs	r3, #0
 800b060:	f04f 32ff 	mov.w	r2, #4294967295
 800b064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b068:	f10a 0a01 	add.w	sl, sl, #1
 800b06c:	9304      	str	r3, [sp, #16]
 800b06e:	9307      	str	r3, [sp, #28]
 800b070:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b074:	931a      	str	r3, [sp, #104]	@ 0x68
 800b076:	4654      	mov	r4, sl
 800b078:	2205      	movs	r2, #5
 800b07a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b07e:	4853      	ldr	r0, [pc, #332]	@ (800b1cc <_vfiprintf_r+0x21c>)
 800b080:	f7fe fb5b 	bl	800973a <memchr>
 800b084:	9a04      	ldr	r2, [sp, #16]
 800b086:	b9d8      	cbnz	r0, 800b0c0 <_vfiprintf_r+0x110>
 800b088:	06d1      	lsls	r1, r2, #27
 800b08a:	bf44      	itt	mi
 800b08c:	2320      	movmi	r3, #32
 800b08e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b092:	0713      	lsls	r3, r2, #28
 800b094:	bf44      	itt	mi
 800b096:	232b      	movmi	r3, #43	@ 0x2b
 800b098:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b09c:	f89a 3000 	ldrb.w	r3, [sl]
 800b0a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0a2:	d015      	beq.n	800b0d0 <_vfiprintf_r+0x120>
 800b0a4:	4654      	mov	r4, sl
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	f04f 0c0a 	mov.w	ip, #10
 800b0ac:	9a07      	ldr	r2, [sp, #28]
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0b4:	3b30      	subs	r3, #48	@ 0x30
 800b0b6:	2b09      	cmp	r3, #9
 800b0b8:	d94b      	bls.n	800b152 <_vfiprintf_r+0x1a2>
 800b0ba:	b1b0      	cbz	r0, 800b0ea <_vfiprintf_r+0x13a>
 800b0bc:	9207      	str	r2, [sp, #28]
 800b0be:	e014      	b.n	800b0ea <_vfiprintf_r+0x13a>
 800b0c0:	eba0 0308 	sub.w	r3, r0, r8
 800b0c4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	46a2      	mov	sl, r4
 800b0cc:	9304      	str	r3, [sp, #16]
 800b0ce:	e7d2      	b.n	800b076 <_vfiprintf_r+0xc6>
 800b0d0:	9b03      	ldr	r3, [sp, #12]
 800b0d2:	1d19      	adds	r1, r3, #4
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	9103      	str	r1, [sp, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	bfbb      	ittet	lt
 800b0dc:	425b      	neglt	r3, r3
 800b0de:	f042 0202 	orrlt.w	r2, r2, #2
 800b0e2:	9307      	strge	r3, [sp, #28]
 800b0e4:	9307      	strlt	r3, [sp, #28]
 800b0e6:	bfb8      	it	lt
 800b0e8:	9204      	strlt	r2, [sp, #16]
 800b0ea:	7823      	ldrb	r3, [r4, #0]
 800b0ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0ee:	d10a      	bne.n	800b106 <_vfiprintf_r+0x156>
 800b0f0:	7863      	ldrb	r3, [r4, #1]
 800b0f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0f4:	d132      	bne.n	800b15c <_vfiprintf_r+0x1ac>
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	3402      	adds	r4, #2
 800b0fa:	1d1a      	adds	r2, r3, #4
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	9203      	str	r2, [sp, #12]
 800b100:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b104:	9305      	str	r3, [sp, #20]
 800b106:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b1d0 <_vfiprintf_r+0x220>
 800b10a:	2203      	movs	r2, #3
 800b10c:	4650      	mov	r0, sl
 800b10e:	7821      	ldrb	r1, [r4, #0]
 800b110:	f7fe fb13 	bl	800973a <memchr>
 800b114:	b138      	cbz	r0, 800b126 <_vfiprintf_r+0x176>
 800b116:	2240      	movs	r2, #64	@ 0x40
 800b118:	9b04      	ldr	r3, [sp, #16]
 800b11a:	eba0 000a 	sub.w	r0, r0, sl
 800b11e:	4082      	lsls	r2, r0
 800b120:	4313      	orrs	r3, r2
 800b122:	3401      	adds	r4, #1
 800b124:	9304      	str	r3, [sp, #16]
 800b126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b12a:	2206      	movs	r2, #6
 800b12c:	4829      	ldr	r0, [pc, #164]	@ (800b1d4 <_vfiprintf_r+0x224>)
 800b12e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b132:	f7fe fb02 	bl	800973a <memchr>
 800b136:	2800      	cmp	r0, #0
 800b138:	d03f      	beq.n	800b1ba <_vfiprintf_r+0x20a>
 800b13a:	4b27      	ldr	r3, [pc, #156]	@ (800b1d8 <_vfiprintf_r+0x228>)
 800b13c:	bb1b      	cbnz	r3, 800b186 <_vfiprintf_r+0x1d6>
 800b13e:	9b03      	ldr	r3, [sp, #12]
 800b140:	3307      	adds	r3, #7
 800b142:	f023 0307 	bic.w	r3, r3, #7
 800b146:	3308      	adds	r3, #8
 800b148:	9303      	str	r3, [sp, #12]
 800b14a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b14c:	443b      	add	r3, r7
 800b14e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b150:	e76a      	b.n	800b028 <_vfiprintf_r+0x78>
 800b152:	460c      	mov	r4, r1
 800b154:	2001      	movs	r0, #1
 800b156:	fb0c 3202 	mla	r2, ip, r2, r3
 800b15a:	e7a8      	b.n	800b0ae <_vfiprintf_r+0xfe>
 800b15c:	2300      	movs	r3, #0
 800b15e:	f04f 0c0a 	mov.w	ip, #10
 800b162:	4619      	mov	r1, r3
 800b164:	3401      	adds	r4, #1
 800b166:	9305      	str	r3, [sp, #20]
 800b168:	4620      	mov	r0, r4
 800b16a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b16e:	3a30      	subs	r2, #48	@ 0x30
 800b170:	2a09      	cmp	r2, #9
 800b172:	d903      	bls.n	800b17c <_vfiprintf_r+0x1cc>
 800b174:	2b00      	cmp	r3, #0
 800b176:	d0c6      	beq.n	800b106 <_vfiprintf_r+0x156>
 800b178:	9105      	str	r1, [sp, #20]
 800b17a:	e7c4      	b.n	800b106 <_vfiprintf_r+0x156>
 800b17c:	4604      	mov	r4, r0
 800b17e:	2301      	movs	r3, #1
 800b180:	fb0c 2101 	mla	r1, ip, r1, r2
 800b184:	e7f0      	b.n	800b168 <_vfiprintf_r+0x1b8>
 800b186:	ab03      	add	r3, sp, #12
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	462a      	mov	r2, r5
 800b18c:	4630      	mov	r0, r6
 800b18e:	4b13      	ldr	r3, [pc, #76]	@ (800b1dc <_vfiprintf_r+0x22c>)
 800b190:	a904      	add	r1, sp, #16
 800b192:	f7fd fd91 	bl	8008cb8 <_printf_float>
 800b196:	4607      	mov	r7, r0
 800b198:	1c78      	adds	r0, r7, #1
 800b19a:	d1d6      	bne.n	800b14a <_vfiprintf_r+0x19a>
 800b19c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b19e:	07d9      	lsls	r1, r3, #31
 800b1a0:	d405      	bmi.n	800b1ae <_vfiprintf_r+0x1fe>
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	059a      	lsls	r2, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <_vfiprintf_r+0x1fe>
 800b1a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1aa:	f7fe fac5 	bl	8009738 <__retarget_lock_release_recursive>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	065b      	lsls	r3, r3, #25
 800b1b2:	f53f af1f 	bmi.w	800aff4 <_vfiprintf_r+0x44>
 800b1b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1b8:	e71e      	b.n	800aff8 <_vfiprintf_r+0x48>
 800b1ba:	ab03      	add	r3, sp, #12
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	462a      	mov	r2, r5
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	4b06      	ldr	r3, [pc, #24]	@ (800b1dc <_vfiprintf_r+0x22c>)
 800b1c4:	a904      	add	r1, sp, #16
 800b1c6:	f7fe f815 	bl	80091f4 <_printf_i>
 800b1ca:	e7e4      	b.n	800b196 <_vfiprintf_r+0x1e6>
 800b1cc:	0800b676 	.word	0x0800b676
 800b1d0:	0800b67c 	.word	0x0800b67c
 800b1d4:	0800b680 	.word	0x0800b680
 800b1d8:	08008cb9 	.word	0x08008cb9
 800b1dc:	0800af8d 	.word	0x0800af8d

0800b1e0 <__swbuf_r>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	460e      	mov	r6, r1
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	b118      	cbz	r0, 800b1f2 <__swbuf_r+0x12>
 800b1ea:	6a03      	ldr	r3, [r0, #32]
 800b1ec:	b90b      	cbnz	r3, 800b1f2 <__swbuf_r+0x12>
 800b1ee:	f7fe f9ab 	bl	8009548 <__sinit>
 800b1f2:	69a3      	ldr	r3, [r4, #24]
 800b1f4:	60a3      	str	r3, [r4, #8]
 800b1f6:	89a3      	ldrh	r3, [r4, #12]
 800b1f8:	071a      	lsls	r2, r3, #28
 800b1fa:	d501      	bpl.n	800b200 <__swbuf_r+0x20>
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	b943      	cbnz	r3, 800b212 <__swbuf_r+0x32>
 800b200:	4621      	mov	r1, r4
 800b202:	4628      	mov	r0, r5
 800b204:	f000 f82a 	bl	800b25c <__swsetup_r>
 800b208:	b118      	cbz	r0, 800b212 <__swbuf_r+0x32>
 800b20a:	f04f 37ff 	mov.w	r7, #4294967295
 800b20e:	4638      	mov	r0, r7
 800b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	6922      	ldr	r2, [r4, #16]
 800b216:	b2f6      	uxtb	r6, r6
 800b218:	1a98      	subs	r0, r3, r2
 800b21a:	6963      	ldr	r3, [r4, #20]
 800b21c:	4637      	mov	r7, r6
 800b21e:	4283      	cmp	r3, r0
 800b220:	dc05      	bgt.n	800b22e <__swbuf_r+0x4e>
 800b222:	4621      	mov	r1, r4
 800b224:	4628      	mov	r0, r5
 800b226:	f7ff fdeb 	bl	800ae00 <_fflush_r>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d1ed      	bne.n	800b20a <__swbuf_r+0x2a>
 800b22e:	68a3      	ldr	r3, [r4, #8]
 800b230:	3b01      	subs	r3, #1
 800b232:	60a3      	str	r3, [r4, #8]
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	6022      	str	r2, [r4, #0]
 800b23a:	701e      	strb	r6, [r3, #0]
 800b23c:	6962      	ldr	r2, [r4, #20]
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	429a      	cmp	r2, r3
 800b242:	d004      	beq.n	800b24e <__swbuf_r+0x6e>
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	07db      	lsls	r3, r3, #31
 800b248:	d5e1      	bpl.n	800b20e <__swbuf_r+0x2e>
 800b24a:	2e0a      	cmp	r6, #10
 800b24c:	d1df      	bne.n	800b20e <__swbuf_r+0x2e>
 800b24e:	4621      	mov	r1, r4
 800b250:	4628      	mov	r0, r5
 800b252:	f7ff fdd5 	bl	800ae00 <_fflush_r>
 800b256:	2800      	cmp	r0, #0
 800b258:	d0d9      	beq.n	800b20e <__swbuf_r+0x2e>
 800b25a:	e7d6      	b.n	800b20a <__swbuf_r+0x2a>

0800b25c <__swsetup_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4b29      	ldr	r3, [pc, #164]	@ (800b304 <__swsetup_r+0xa8>)
 800b260:	4605      	mov	r5, r0
 800b262:	6818      	ldr	r0, [r3, #0]
 800b264:	460c      	mov	r4, r1
 800b266:	b118      	cbz	r0, 800b270 <__swsetup_r+0x14>
 800b268:	6a03      	ldr	r3, [r0, #32]
 800b26a:	b90b      	cbnz	r3, 800b270 <__swsetup_r+0x14>
 800b26c:	f7fe f96c 	bl	8009548 <__sinit>
 800b270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b274:	0719      	lsls	r1, r3, #28
 800b276:	d422      	bmi.n	800b2be <__swsetup_r+0x62>
 800b278:	06da      	lsls	r2, r3, #27
 800b27a:	d407      	bmi.n	800b28c <__swsetup_r+0x30>
 800b27c:	2209      	movs	r2, #9
 800b27e:	602a      	str	r2, [r5, #0]
 800b280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b284:	f04f 30ff 	mov.w	r0, #4294967295
 800b288:	81a3      	strh	r3, [r4, #12]
 800b28a:	e033      	b.n	800b2f4 <__swsetup_r+0x98>
 800b28c:	0758      	lsls	r0, r3, #29
 800b28e:	d512      	bpl.n	800b2b6 <__swsetup_r+0x5a>
 800b290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b292:	b141      	cbz	r1, 800b2a6 <__swsetup_r+0x4a>
 800b294:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b298:	4299      	cmp	r1, r3
 800b29a:	d002      	beq.n	800b2a2 <__swsetup_r+0x46>
 800b29c:	4628      	mov	r0, r5
 800b29e:	f7ff f8b7 	bl	800a410 <_free_r>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2a6:	89a3      	ldrh	r3, [r4, #12]
 800b2a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	6063      	str	r3, [r4, #4]
 800b2b2:	6923      	ldr	r3, [r4, #16]
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	f043 0308 	orr.w	r3, r3, #8
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	6923      	ldr	r3, [r4, #16]
 800b2c0:	b94b      	cbnz	r3, 800b2d6 <__swsetup_r+0x7a>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2cc:	d003      	beq.n	800b2d6 <__swsetup_r+0x7a>
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f000 f882 	bl	800b3da <__smakebuf_r>
 800b2d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2da:	f013 0201 	ands.w	r2, r3, #1
 800b2de:	d00a      	beq.n	800b2f6 <__swsetup_r+0x9a>
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	60a2      	str	r2, [r4, #8]
 800b2e4:	6962      	ldr	r2, [r4, #20]
 800b2e6:	4252      	negs	r2, r2
 800b2e8:	61a2      	str	r2, [r4, #24]
 800b2ea:	6922      	ldr	r2, [r4, #16]
 800b2ec:	b942      	cbnz	r2, 800b300 <__swsetup_r+0xa4>
 800b2ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b2f2:	d1c5      	bne.n	800b280 <__swsetup_r+0x24>
 800b2f4:	bd38      	pop	{r3, r4, r5, pc}
 800b2f6:	0799      	lsls	r1, r3, #30
 800b2f8:	bf58      	it	pl
 800b2fa:	6962      	ldrpl	r2, [r4, #20]
 800b2fc:	60a2      	str	r2, [r4, #8]
 800b2fe:	e7f4      	b.n	800b2ea <__swsetup_r+0x8e>
 800b300:	2000      	movs	r0, #0
 800b302:	e7f7      	b.n	800b2f4 <__swsetup_r+0x98>
 800b304:	20000188 	.word	0x20000188

0800b308 <_raise_r>:
 800b308:	291f      	cmp	r1, #31
 800b30a:	b538      	push	{r3, r4, r5, lr}
 800b30c:	4605      	mov	r5, r0
 800b30e:	460c      	mov	r4, r1
 800b310:	d904      	bls.n	800b31c <_raise_r+0x14>
 800b312:	2316      	movs	r3, #22
 800b314:	6003      	str	r3, [r0, #0]
 800b316:	f04f 30ff 	mov.w	r0, #4294967295
 800b31a:	bd38      	pop	{r3, r4, r5, pc}
 800b31c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b31e:	b112      	cbz	r2, 800b326 <_raise_r+0x1e>
 800b320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b324:	b94b      	cbnz	r3, 800b33a <_raise_r+0x32>
 800b326:	4628      	mov	r0, r5
 800b328:	f000 f830 	bl	800b38c <_getpid_r>
 800b32c:	4622      	mov	r2, r4
 800b32e:	4601      	mov	r1, r0
 800b330:	4628      	mov	r0, r5
 800b332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b336:	f000 b817 	b.w	800b368 <_kill_r>
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d00a      	beq.n	800b354 <_raise_r+0x4c>
 800b33e:	1c59      	adds	r1, r3, #1
 800b340:	d103      	bne.n	800b34a <_raise_r+0x42>
 800b342:	2316      	movs	r3, #22
 800b344:	6003      	str	r3, [r0, #0]
 800b346:	2001      	movs	r0, #1
 800b348:	e7e7      	b.n	800b31a <_raise_r+0x12>
 800b34a:	2100      	movs	r1, #0
 800b34c:	4620      	mov	r0, r4
 800b34e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b352:	4798      	blx	r3
 800b354:	2000      	movs	r0, #0
 800b356:	e7e0      	b.n	800b31a <_raise_r+0x12>

0800b358 <raise>:
 800b358:	4b02      	ldr	r3, [pc, #8]	@ (800b364 <raise+0xc>)
 800b35a:	4601      	mov	r1, r0
 800b35c:	6818      	ldr	r0, [r3, #0]
 800b35e:	f7ff bfd3 	b.w	800b308 <_raise_r>
 800b362:	bf00      	nop
 800b364:	20000188 	.word	0x20000188

0800b368 <_kill_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	2300      	movs	r3, #0
 800b36c:	4d06      	ldr	r5, [pc, #24]	@ (800b388 <_kill_r+0x20>)
 800b36e:	4604      	mov	r4, r0
 800b370:	4608      	mov	r0, r1
 800b372:	4611      	mov	r1, r2
 800b374:	602b      	str	r3, [r5, #0]
 800b376:	f7f5 fd42 	bl	8000dfe <_kill>
 800b37a:	1c43      	adds	r3, r0, #1
 800b37c:	d102      	bne.n	800b384 <_kill_r+0x1c>
 800b37e:	682b      	ldr	r3, [r5, #0]
 800b380:	b103      	cbz	r3, 800b384 <_kill_r+0x1c>
 800b382:	6023      	str	r3, [r4, #0]
 800b384:	bd38      	pop	{r3, r4, r5, pc}
 800b386:	bf00      	nop
 800b388:	200016b4 	.word	0x200016b4

0800b38c <_getpid_r>:
 800b38c:	f7f5 bd30 	b.w	8000df0 <_getpid>

0800b390 <__swhatbuf_r>:
 800b390:	b570      	push	{r4, r5, r6, lr}
 800b392:	460c      	mov	r4, r1
 800b394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b398:	4615      	mov	r5, r2
 800b39a:	2900      	cmp	r1, #0
 800b39c:	461e      	mov	r6, r3
 800b39e:	b096      	sub	sp, #88	@ 0x58
 800b3a0:	da0c      	bge.n	800b3bc <__swhatbuf_r+0x2c>
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b3aa:	bf14      	ite	ne
 800b3ac:	2340      	movne	r3, #64	@ 0x40
 800b3ae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	6031      	str	r1, [r6, #0]
 800b3b6:	602b      	str	r3, [r5, #0]
 800b3b8:	b016      	add	sp, #88	@ 0x58
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	466a      	mov	r2, sp
 800b3be:	f000 f849 	bl	800b454 <_fstat_r>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	dbed      	blt.n	800b3a2 <__swhatbuf_r+0x12>
 800b3c6:	9901      	ldr	r1, [sp, #4]
 800b3c8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b3cc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3d0:	4259      	negs	r1, r3
 800b3d2:	4159      	adcs	r1, r3
 800b3d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3d8:	e7eb      	b.n	800b3b2 <__swhatbuf_r+0x22>

0800b3da <__smakebuf_r>:
 800b3da:	898b      	ldrh	r3, [r1, #12]
 800b3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3de:	079d      	lsls	r5, r3, #30
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	d507      	bpl.n	800b3f6 <__smakebuf_r+0x1c>
 800b3e6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b3ea:	6023      	str	r3, [r4, #0]
 800b3ec:	6123      	str	r3, [r4, #16]
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	6163      	str	r3, [r4, #20]
 800b3f2:	b003      	add	sp, #12
 800b3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3f6:	466a      	mov	r2, sp
 800b3f8:	ab01      	add	r3, sp, #4
 800b3fa:	f7ff ffc9 	bl	800b390 <__swhatbuf_r>
 800b3fe:	9f00      	ldr	r7, [sp, #0]
 800b400:	4605      	mov	r5, r0
 800b402:	4639      	mov	r1, r7
 800b404:	4630      	mov	r0, r6
 800b406:	f7ff f875 	bl	800a4f4 <_malloc_r>
 800b40a:	b948      	cbnz	r0, 800b420 <__smakebuf_r+0x46>
 800b40c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b410:	059a      	lsls	r2, r3, #22
 800b412:	d4ee      	bmi.n	800b3f2 <__smakebuf_r+0x18>
 800b414:	f023 0303 	bic.w	r3, r3, #3
 800b418:	f043 0302 	orr.w	r3, r3, #2
 800b41c:	81a3      	strh	r3, [r4, #12]
 800b41e:	e7e2      	b.n	800b3e6 <__smakebuf_r+0xc>
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b42a:	81a3      	strh	r3, [r4, #12]
 800b42c:	9b01      	ldr	r3, [sp, #4]
 800b42e:	6020      	str	r0, [r4, #0]
 800b430:	b15b      	cbz	r3, 800b44a <__smakebuf_r+0x70>
 800b432:	4630      	mov	r0, r6
 800b434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b438:	f000 f81e 	bl	800b478 <_isatty_r>
 800b43c:	b128      	cbz	r0, 800b44a <__smakebuf_r+0x70>
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	f023 0303 	bic.w	r3, r3, #3
 800b444:	f043 0301 	orr.w	r3, r3, #1
 800b448:	81a3      	strh	r3, [r4, #12]
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	431d      	orrs	r5, r3
 800b44e:	81a5      	strh	r5, [r4, #12]
 800b450:	e7cf      	b.n	800b3f2 <__smakebuf_r+0x18>
	...

0800b454 <_fstat_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	2300      	movs	r3, #0
 800b458:	4d06      	ldr	r5, [pc, #24]	@ (800b474 <_fstat_r+0x20>)
 800b45a:	4604      	mov	r4, r0
 800b45c:	4608      	mov	r0, r1
 800b45e:	4611      	mov	r1, r2
 800b460:	602b      	str	r3, [r5, #0]
 800b462:	f7f5 fd2b 	bl	8000ebc <_fstat>
 800b466:	1c43      	adds	r3, r0, #1
 800b468:	d102      	bne.n	800b470 <_fstat_r+0x1c>
 800b46a:	682b      	ldr	r3, [r5, #0]
 800b46c:	b103      	cbz	r3, 800b470 <_fstat_r+0x1c>
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	bd38      	pop	{r3, r4, r5, pc}
 800b472:	bf00      	nop
 800b474:	200016b4 	.word	0x200016b4

0800b478 <_isatty_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	2300      	movs	r3, #0
 800b47c:	4d05      	ldr	r5, [pc, #20]	@ (800b494 <_isatty_r+0x1c>)
 800b47e:	4604      	mov	r4, r0
 800b480:	4608      	mov	r0, r1
 800b482:	602b      	str	r3, [r5, #0]
 800b484:	f7f5 fd29 	bl	8000eda <_isatty>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_isatty_r+0x1a>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_isatty_r+0x1a>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	200016b4 	.word	0x200016b4

0800b498 <_init>:
 800b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49a:	bf00      	nop
 800b49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49e:	bc08      	pop	{r3}
 800b4a0:	469e      	mov	lr, r3
 800b4a2:	4770      	bx	lr

0800b4a4 <_fini>:
 800b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a6:	bf00      	nop
 800b4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4aa:	bc08      	pop	{r3}
 800b4ac:	469e      	mov	lr, r3
 800b4ae:	4770      	bx	lr
