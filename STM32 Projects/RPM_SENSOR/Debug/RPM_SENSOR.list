
RPM_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b148  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800b258  0800b258  0000c258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b634  0800b634  0000d344  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b634  0800b634  0000c634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b63c  0800b63c  0000d344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b63c  0800b63c  0000c63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b640  0800b640  0000c640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800b644  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001380  20000344  0800b988  0000d344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016c4  0800b988  0000d6c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d344  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001157b  00000000  00000000  0000d36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000349b  00000000  00000000  0001e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00021d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca9  00000000  00000000  00022e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b268  00000000  00000000  00023b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152cb  00000000  00000000  0003ed71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecf6  00000000  00000000  0005403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c8  00000000  00000000  000e2d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e8140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b240 	.word	0x0800b240

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800b240 	.word	0x0800b240

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b28      	ldr	r3, [pc, #160]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a27      	ldr	r2, [pc, #156]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <MX_GPIO_Init+0xb8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aea:	4816      	ldr	r0, [pc, #88]	@ (8000b44 <MX_GPIO_Init+0xbc>)
 8000aec:	f000 fdf4 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <MX_GPIO_Init+0xbc>)
 8000b0a:	f000 fc61 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <MX_GPIO_Init+0xc0>)
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480a      	ldr	r0, [pc, #40]	@ (8000b4c <MX_GPIO_Init+0xc4>)
 8000b22:	f000 fc55 	bl	80013d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2006      	movs	r0, #6
 8000b2c:	f000 fc19 	bl	8001362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b30:	2006      	movs	r0, #6
 8000b32:	f000 fc32 	bl	800139a <HAL_NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40011000 	.word	0x40011000
 8000b48:	10210000 	.word	0x10210000
 8000b4c:	40010800 	.word	0x40010800

08000b50 <HAL_GPIO_EXTI_Callback>:
    if (pulse_us > 2000) pulse_us = 2000;
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_us);
    currentPulse = pulse_us;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Verifica que sea nuestro PA0
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d11c      	bne.n	8000b9a <HAL_GPIO_EXTI_Callback+0x4a>
        uint32_t now = HAL_GetTick();  // tiempo actual en ms
 8000b60:	f000 fb1e 	bl	80011a0 <HAL_GetTick>
 8000b64:	60f8      	str	r0, [r7, #12]
        uint32_t diff = now - lastTick;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	60bb      	str	r3, [r7, #8]

        if (diff >= DIFF_MIN_MS && diff <= DIFF_MAX_MS) {
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d90b      	bls.n	8000b8e <HAL_GPIO_EXTI_Callback+0x3e>
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b7c:	d807      	bhi.n	8000b8e <HAL_GPIO_EXTI_Callback+0x3e>
            rpm = 60000 / diff;
 8000b7e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e002      	b.n	8000b94 <HAL_GPIO_EXTI_Callback+0x44>
        } else {
            rpm = 0; // fuera de rango o timeout
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
        }
        lastTick = now;
 8000b94:	4a03      	ldr	r2, [pc, #12]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6013      	str	r3, [r2, #0]
    }
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000360 	.word	0x20000360
 8000ba8:	20000364 	.word	0x20000364

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f000 fa9e 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f808 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f7ff ff66 	bl	8000a88 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000bbc:	f007 fa3a 	bl	8008034 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000bc0:	f000 f99a 	bl	8000ef8 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <main+0x18>

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b094      	sub	sp, #80	@ 0x50
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bd2:	2228      	movs	r2, #40	@ 0x28
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f008 fc01 	bl	80093de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c06:	2301      	movs	r3, #1
 8000c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c14:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 faea 	bl	80031f8 <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c2a:	f000 f827 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2102      	movs	r1, #2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fd56 	bl	80036fc <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c56:	f000 f811 	bl	8000c7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fea5 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c70:	f000 f804 	bl	8000c7c <Error_Handler>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3750      	adds	r7, #80	@ 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <Error_Handler+0x8>

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_MspInit+0x5c>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <HAL_MspInit+0x5c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6193      	str	r3, [r2, #24]
 8000c9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_MspInit+0x5c>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <HAL_MspInit+0x5c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce4 <HAL_MspInit+0x5c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb0:	61d3      	str	r3, [r2, #28]
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_MspInit+0x5c>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_MspInit+0x60>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_MspInit+0x60>)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010000 	.word	0x40010000

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <MemManage_Handler+0x4>

08000d04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 fa1e 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f000 fcdd 	bl	8001708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d5a:	f000 fe09 	bl	8001970 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20001080 	.word	0x20001080

08000d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return 1;
 8000d6c:	2301      	movs	r3, #1
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <_kill>:

int _kill(int pid, int sig)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d80:	f008 fb80 	bl	8009484 <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2216      	movs	r2, #22
 8000d88:	601a      	str	r2, [r3, #0]
  return -1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_exit>:

void _exit (int status)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffe7 	bl	8000d76 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <_exit+0x12>

08000dac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e00a      	b.n	8000dd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dbe:	f3af 8000 	nop.w
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	60ba      	str	r2, [r7, #8]
 8000dca:	b2ca      	uxtb	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf0      	blt.n	8000dbe <_read+0x12>
  }

  return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e009      	b.n	8000e0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbf1      	blt.n	8000df8 <_write+0x12>
  }
  return len;
 8000e14:	687b      	ldr	r3, [r7, #4]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_close>:

int _close(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e44:	605a      	str	r2, [r3, #4]
  return 0;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <_isatty>:

int _isatty(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b085      	sub	sp, #20
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f008 fae8 	bl	8009484 <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20005000 	.word	0x20005000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	20000368 	.word	0x20000368
 8000ee8:	200016c8 	.word	0x200016c8

08000eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b092      	sub	sp, #72	@ 0x48
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2220      	movs	r2, #32
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f008 fa5b 	bl	80093de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f28:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000f2a:	4a34      	ldr	r2, [pc, #208]	@ (8000ffc <MX_TIM1_Init+0x104>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1439;
 8000f2e:	4b32      	ldr	r3, [pc, #200]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000f30:	f240 529f 	movw	r2, #1439	@ 0x59f
 8000f34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b30      	ldr	r3, [pc, #192]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000f3e:	f240 529f 	movw	r2, #1439	@ 0x59f
 8000f42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f50:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f56:	4828      	ldr	r0, [pc, #160]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000f58:	f002 fde2 	bl	8003b20 <HAL_TIM_PWM_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f62:	f7ff fe8b 	bl	8000c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f72:	4619      	mov	r1, r3
 8000f74:	4820      	ldr	r0, [pc, #128]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000f76:	f003 f8db 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000f80:	f7ff fe7c 	bl	8000c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f84:	2360      	movs	r3, #96	@ 0x60
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4813      	ldr	r0, [pc, #76]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000faa:	f002 fe09 	bl	8003bc0 <HAL_TIM_PWM_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000fb4:	f7ff fe62 	bl	8000c7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000fdc:	f003 f906 	bl	80041ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000fe6:	f7ff fe49 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fea:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <MX_TIM1_Init+0x100>)
 8000fec:	f000 f826 	bl	800103c <HAL_TIM_MspPostInit>

}
 8000ff0:	bf00      	nop
 8000ff2:	3748      	adds	r7, #72	@ 0x48
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000036c 	.word	0x2000036c
 8000ffc:	40012c00 	.word	0x40012c00

08001000 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <HAL_TIM_PWM_MspInit+0x34>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10b      	bne.n	800102a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <HAL_TIM_PWM_MspInit+0x38>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <HAL_TIM_PWM_MspInit+0x38>)
 8001018:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800101c:	6193      	str	r3, [r2, #24]
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_TIM_PWM_MspInit+0x38>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40012c00 	.word	0x40012c00
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <HAL_TIM_MspPostInit+0x5c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d118      	bne.n	800108e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_TIM_MspPostInit+0x60>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a0e      	ldr	r2, [pc, #56]	@ (800109c <HAL_TIM_MspPostInit+0x60>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <HAL_TIM_MspPostInit+0x60>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001078:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2302      	movs	r3, #2
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <HAL_TIM_MspPostInit+0x64>)
 800108a:	f000 f9a1 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010800 	.word	0x40010800

080010a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a4:	f7ff ff22 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a8:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010aa:	490c      	ldr	r1, [pc, #48]	@ (80010dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010ac:	4a0c      	ldr	r2, [pc, #48]	@ (80010e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a09      	ldr	r2, [pc, #36]	@ (80010e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010c0:	4c09      	ldr	r4, [pc, #36]	@ (80010e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ce:	f008 f9df 	bl	8009490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d2:	f7ff fd6b 	bl	8000bac <main>
  bx lr
 80010d6:	4770      	bx	lr
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 80010e0:	0800b644 	.word	0x0800b644
  ldr r2, =_sbss
 80010e4:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 80010e8:	200016c4 	.word	0x200016c4

080010ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_2_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <HAL_Init+0x28>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	@ (8001118 <HAL_Init+0x28>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f923 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	200f      	movs	r0, #15
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fdbc 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40022000 	.word	0x40022000

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f93b 	bl	80013b6 <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f903 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	@ (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000000 	.word	0x20000000
 8001174:	20000008 	.word	0x20000008
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x1c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	@ (800119c <HAL_IncTick+0x20>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a03      	ldr	r2, [pc, #12]	@ (800119c <HAL_IncTick+0x20>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000008 	.word	0x20000008
 800119c:	200003b4 	.word	0x200003b4

080011a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b02      	ldr	r3, [pc, #8]	@ (80011b0 <HAL_GetTick+0x10>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	200003b4 	.word	0x200003b4

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4906      	ldr	r1, [pc, #24]	@ (800124c <__NVIC_EnableIRQ+0x34>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	@ (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff90 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff2d 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff42 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff35 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b08b      	sub	sp, #44	@ 0x2c
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e2:	e169      	b.n	80016b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e4:	2201      	movs	r2, #1
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8158 	bne.w	80016b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a9a      	ldr	r2, [pc, #616]	@ (8001670 <HAL_GPIO_Init+0x2a0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d05e      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800140c:	4a98      	ldr	r2, [pc, #608]	@ (8001670 <HAL_GPIO_Init+0x2a0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d875      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001412:	4a98      	ldr	r2, [pc, #608]	@ (8001674 <HAL_GPIO_Init+0x2a4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d058      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001418:	4a96      	ldr	r2, [pc, #600]	@ (8001674 <HAL_GPIO_Init+0x2a4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d86f      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800141e:	4a96      	ldr	r2, [pc, #600]	@ (8001678 <HAL_GPIO_Init+0x2a8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d052      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001424:	4a94      	ldr	r2, [pc, #592]	@ (8001678 <HAL_GPIO_Init+0x2a8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d869      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800142a:	4a94      	ldr	r2, [pc, #592]	@ (800167c <HAL_GPIO_Init+0x2ac>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d04c      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001430:	4a92      	ldr	r2, [pc, #584]	@ (800167c <HAL_GPIO_Init+0x2ac>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d863      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001436:	4a92      	ldr	r2, [pc, #584]	@ (8001680 <HAL_GPIO_Init+0x2b0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d046      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800143c:	4a90      	ldr	r2, [pc, #576]	@ (8001680 <HAL_GPIO_Init+0x2b0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d85d      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001442:	2b12      	cmp	r3, #18
 8001444:	d82a      	bhi.n	800149c <HAL_GPIO_Init+0xcc>
 8001446:	2b12      	cmp	r3, #18
 8001448:	d859      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800144a:	a201      	add	r2, pc, #4	@ (adr r2, 8001450 <HAL_GPIO_Init+0x80>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	080014cb 	.word	0x080014cb
 8001454:	080014a5 	.word	0x080014a5
 8001458:	080014b7 	.word	0x080014b7
 800145c:	080014f9 	.word	0x080014f9
 8001460:	080014ff 	.word	0x080014ff
 8001464:	080014ff 	.word	0x080014ff
 8001468:	080014ff 	.word	0x080014ff
 800146c:	080014ff 	.word	0x080014ff
 8001470:	080014ff 	.word	0x080014ff
 8001474:	080014ff 	.word	0x080014ff
 8001478:	080014ff 	.word	0x080014ff
 800147c:	080014ff 	.word	0x080014ff
 8001480:	080014ff 	.word	0x080014ff
 8001484:	080014ff 	.word	0x080014ff
 8001488:	080014ff 	.word	0x080014ff
 800148c:	080014ff 	.word	0x080014ff
 8001490:	080014ff 	.word	0x080014ff
 8001494:	080014ad 	.word	0x080014ad
 8001498:	080014c1 	.word	0x080014c1
 800149c:	4a79      	ldr	r2, [pc, #484]	@ (8001684 <HAL_GPIO_Init+0x2b4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014a2:	e02c      	b.n	80014fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e029      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	3304      	adds	r3, #4
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e024      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	3308      	adds	r3, #8
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e01f      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	330c      	adds	r3, #12
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e01a      	b.n	8001500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d2:	2304      	movs	r3, #4
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e013      	b.n	8001500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	611a      	str	r2, [r3, #16]
          break;
 80014ea:	e009      	b.n	8001500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	615a      	str	r2, [r3, #20]
          break;
 80014f6:	e003      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x130>
          break;
 80014fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2bff      	cmp	r3, #255	@ 0xff
 8001504:	d801      	bhi.n	800150a <HAL_GPIO_Init+0x13a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	e001      	b.n	800150e <HAL_GPIO_Init+0x13e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3304      	adds	r3, #4
 800150e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2bff      	cmp	r3, #255	@ 0xff
 8001514:	d802      	bhi.n	800151c <HAL_GPIO_Init+0x14c>
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x152>
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	3b08      	subs	r3, #8
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	210f      	movs	r1, #15
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	6a39      	ldr	r1, [r7, #32]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80b1 	beq.w	80016b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001550:	4b4d      	ldr	r3, [pc, #308]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a4c      	ldr	r2, [pc, #304]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b4a      	ldr	r3, [pc, #296]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001568:	4a48      	ldr	r2, [pc, #288]	@ (800168c <HAL_GPIO_Init+0x2bc>)
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a40      	ldr	r2, [pc, #256]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d013      	beq.n	80015bc <HAL_GPIO_Init+0x1ec>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a3f      	ldr	r2, [pc, #252]	@ (8001694 <HAL_GPIO_Init+0x2c4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00d      	beq.n	80015b8 <HAL_GPIO_Init+0x1e8>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a3e      	ldr	r2, [pc, #248]	@ (8001698 <HAL_GPIO_Init+0x2c8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x1e4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a3d      	ldr	r2, [pc, #244]	@ (800169c <HAL_GPIO_Init+0x2cc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_GPIO_Init+0x1e0>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e006      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e004      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015bc:	2300      	movs	r3, #0
 80015be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c0:	f002 0203 	and.w	r2, r2, #3
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	4093      	lsls	r3, r2
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ce:	492f      	ldr	r1, [pc, #188]	@ (800168c <HAL_GPIO_Init+0x2bc>)
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015e8:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	492c      	ldr	r1, [pc, #176]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4928      	ldr	r1, [pc, #160]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001600:	4013      	ands	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	4922      	ldr	r1, [pc, #136]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	60cb      	str	r3, [r1, #12]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	491e      	ldr	r1, [pc, #120]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4918      	ldr	r1, [pc, #96]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	4914      	ldr	r1, [pc, #80]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001650:	4013      	ands	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d021      	beq.n	80016a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	490e      	ldr	r1, [pc, #56]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
 800166c:	e021      	b.n	80016b2 <HAL_GPIO_Init+0x2e2>
 800166e:	bf00      	nop
 8001670:	10320000 	.word	0x10320000
 8001674:	10310000 	.word	0x10310000
 8001678:	10220000 	.word	0x10220000
 800167c:	10210000 	.word	0x10210000
 8001680:	10120000 	.word	0x10120000
 8001684:	10110000 	.word	0x10110000
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000
 8001690:	40010800 	.word	0x40010800
 8001694:	40010c00 	.word	0x40010c00
 8001698:	40011000 	.word	0x40011000
 800169c:	40011400 	.word	0x40011400
 80016a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4909      	ldr	r1, [pc, #36]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	3301      	adds	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f ae8e 	bne.w	80013e4 <HAL_GPIO_Init+0x14>
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	372c      	adds	r7, #44	@ 0x2c
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	611a      	str	r2, [r3, #16]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4013      	ands	r3, r2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fa12 	bl	8000b50 <HAL_GPIO_EXTI_Callback>
  }
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0e8      	b.n	800191c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d106      	bne.n	8001764 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f006 fe34 	bl	80083cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2203      	movs	r2, #3
 8001768:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fdac 	bl	80042d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3304      	adds	r3, #4
 8001784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001786:	f002 fd82 	bl	800428e <USB_CoreInit>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0bf      	b.n	800191c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fdb0 	bl	8004308 <USB_SetCurrentMode>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0b0      	b.n	800191c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e03e      	b.n	800183e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	3311      	adds	r3, #17
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	3310      	adds	r3, #16
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	3313      	adds	r3, #19
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	3320      	adds	r3, #32
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	3324      	adds	r3, #36	@ 0x24
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	3301      	adds	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	791b      	ldrb	r3, [r3, #4]
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	429a      	cmp	r2, r3
 8001846:	d3bb      	bcc.n	80017c0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e044      	b.n	80018d8 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	3301      	adds	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d3b5      	bcc.n	800184e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ec:	f002 fd18 	bl	8004320 <USB_DevInit>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2202      	movs	r2, #2
 80018fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00c      	b.n	800191c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f004 ff98 	bl	800684a <USB_DevDisconnect>

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_PCD_Start+0x16>
 8001936:	2302      	movs	r3, #2
 8001938:	e016      	b.n	8001968 <HAL_PCD_Start+0x44>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fcae 	bl	80042a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800194c:	2101      	movs	r1, #1
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f006 ffaf 	bl	80088b2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f004 ff6c 	bl	8006836 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f004 ff6e 	bl	800685e <USB_ReadInterrupts>
 8001982:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fb1a 	bl	8001fc8 <PCD_EP_ISR_Handler>

    return;
 8001994:	e119      	b.n	8001bca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019b2:	b292      	uxth	r2, r2
 80019b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f006 fd82 	bl	80084c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80019be:	2100      	movs	r1, #0
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f905 	bl	8001bd0 <HAL_PCD_SetAddress>

    return;
 80019c6:	e100      	b.n	8001bca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00c      	beq.n	80019ec <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019da:	b29a      	uxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019e4:	b292      	uxth	r2, r2
 80019e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019ea:	e0ee      	b.n	8001bca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00c      	beq.n	8001a10 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a08:	b292      	uxth	r2, r2
 8001a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a0e:	e0dc      	b.n	8001bca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d027      	beq.n	8001a6a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0204 	bic.w	r2, r2, #4
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	b292      	uxth	r2, r2
 8001a46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f006 fd72 	bl	8008534 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a62:	b292      	uxth	r2, r2
 8001a64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a68:	e0af      	b.n	8001bca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8083 	beq.w	8001b7c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	77fb      	strb	r3, [r7, #31]
 8001a7a:	e010      	b.n	8001a9e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	441a      	add	r2, r3
 8001a88:	7ffb      	ldrb	r3, [r7, #31]
 8001a8a:	8812      	ldrh	r2, [r2, #0]
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	3320      	adds	r3, #32
 8001a92:	443b      	add	r3, r7
 8001a94:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001a98:	7ffb      	ldrb	r3, [r7, #31]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	77fb      	strb	r3, [r7, #31]
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	d9eb      	bls.n	8001a7c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	b292      	uxth	r2, r2
 8001ab8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	b292      	uxth	r2, r2
 8001ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ad4:	bf00      	nop
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f6      	beq.n	8001ad6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001afa:	b292      	uxth	r2, r2
 8001afc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	77fb      	strb	r3, [r7, #31]
 8001b04:	e00f      	b.n	8001b26 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001b06:	7ffb      	ldrb	r3, [r7, #31]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	7ffa      	ldrb	r2, [r7, #31]
 8001b10:	0092      	lsls	r2, r2, #2
 8001b12:	440a      	add	r2, r1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	3320      	adds	r3, #32
 8001b18:	443b      	add	r3, r7
 8001b1a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001b1e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001b20:	7ffb      	ldrb	r3, [r7, #31]
 8001b22:	3301      	adds	r3, #1
 8001b24:	77fb      	strb	r3, [r7, #31]
 8001b26:	7ffb      	ldrb	r3, [r7, #31]
 8001b28:	2b07      	cmp	r3, #7
 8001b2a:	d9ec      	bls.n	8001b06 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0208 	orr.w	r2, r2, #8
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b56:	b292      	uxth	r2, r2
 8001b58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0204 	orr.w	r2, r2, #4
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f006 fcc3 	bl	8008500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b7a:	e026      	b.n	8001bca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00f      	beq.n	8001ba6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f006 fc81 	bl	80084a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ba4:	e011      	b.n	8001bca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00c      	beq.n	8001bca <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001bc8:	bf00      	nop
  }
}
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_PCD_SetAddress+0x1a>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e012      	b.n	8001c10 <HAL_PCD_SetAddress+0x40>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 fe05 	bl	8006810 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	4608      	mov	r0, r1
 8001c22:	4611      	mov	r1, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	4603      	mov	r3, r0
 8001c28:	70fb      	strb	r3, [r7, #3]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	803b      	strh	r3, [r7, #0]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	da0e      	bge.n	8001c5c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 0207 	and.w	r2, r3, #7
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	3310      	adds	r3, #16
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	705a      	strb	r2, [r3, #1]
 8001c5a:	e00e      	b.n	8001c7a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	f003 0207 	and.w	r2, r3, #7
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c86:	883a      	ldrh	r2, [r7, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	78ba      	ldrb	r2, [r7, #2]
 8001c90:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c92:	78bb      	ldrb	r3, [r7, #2]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d102      	bne.n	8001c9e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_PCD_EP_Open+0x94>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e00e      	b.n	8001cca <HAL_PCD_EP_Open+0xb2>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 fb4e 	bl	800435c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da0e      	bge.n	8001d04 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 0207 	and.w	r2, r3, #7
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	705a      	strb	r2, [r3, #1]
 8001d02:	e00e      	b.n	8001d22 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 0207 	and.w	r2, r3, #7
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_PCD_EP_Close+0x6a>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e00e      	b.n	8001d5a <HAL_PCD_EP_Close+0x88>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68f9      	ldr	r1, [r7, #12]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f002 fec6 	bl	8004adc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d72:	7afb      	ldrb	r3, [r7, #11]
 8001d74:	f003 0207 	and.w	r2, r3, #7
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da2:	7afb      	ldrb	r3, [r7, #11]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6979      	ldr	r1, [r7, #20]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 f87d 	bl	8004eb4 <USB_EPStartXfer>

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	f003 0207 	and.w	r2, r3, #7
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	440b      	add	r3, r1
 8001de2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	f003 0207 	and.w	r2, r3, #7
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	3310      	adds	r3, #16
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6979      	ldr	r1, [r7, #20]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 f82f 	bl	8004eb4 <USB_EPStartXfer>

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	7912      	ldrb	r2, [r2, #4]
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e04c      	b.n	8001f18 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	da0e      	bge.n	8001ea4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f003 0207 	and.w	r2, r3, #7
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	3310      	adds	r3, #16
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	705a      	strb	r2, [r3, #1]
 8001ea2:	e00c      	b.n	8001ebe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_SetStall+0x7e>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e01c      	b.n	8001f18 <HAL_PCD_EP_SetStall+0xb8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 fb92 	bl	8006616 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d108      	bne.n	8001f0e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f004 fcb7 	bl	800687c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	7912      	ldrb	r2, [r2, #4]
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e040      	b.n	8001fc0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	da0e      	bge.n	8001f64 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 0207 	and.w	r2, r3, #7
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	3310      	adds	r3, #16
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	705a      	strb	r2, [r3, #1]
 8001f62:	e00e      	b.n	8001f82 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 0207 	and.w	r2, r3, #7
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_PCD_EP_ClrStall+0x82>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e00e      	b.n	8001fc0 <HAL_PCD_EP_ClrStall+0xa0>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68f9      	ldr	r1, [r7, #12]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f004 fb80 	bl	80066b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b096      	sub	sp, #88	@ 0x58
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fd0:	e3bb      	b.n	800274a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001fec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 8175 	bne.w	80022e0 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ff6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d14e      	bne.n	80020a0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800200e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002012:	81fb      	strh	r3, [r7, #14]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800201e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002022:	b29b      	uxth	r3, r3
 8002024:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3310      	adds	r3, #16
 800202a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002034:	b29b      	uxth	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	3302      	adds	r3, #2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002056:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	441a      	add	r2, r3
 8002062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002064:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002066:	2100      	movs	r1, #0
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f006 fa02 	bl	8008472 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7b5b      	ldrb	r3, [r3, #13]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8368 	beq.w	800274a <PCD_EP_ISR_Handler+0x782>
 800207a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 8363 	bne.w	800274a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7b5b      	ldrb	r3, [r3, #13]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800208e:	b2da      	uxtb	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	735a      	strb	r2, [r3, #13]
 800209e:	e354      	b.n	800274a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020a6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d034      	beq.n	8002128 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	3306      	adds	r3, #6
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80020f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f004 fc0e 	bl	800691e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b29a      	uxth	r2, r3
 800210a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800210e:	4013      	ands	r3, r2
 8002110:	823b      	strh	r3, [r7, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	8a3a      	ldrh	r2, [r7, #16]
 8002118:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800211c:	b292      	uxth	r2, r2
 800211e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f006 f979 	bl	8008418 <HAL_PCD_SetupStageCallback>
 8002126:	e310      	b.n	800274a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002128:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800212c:	2b00      	cmp	r3, #0
 800212e:	f280 830c 	bge.w	800274a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29a      	uxth	r2, r3
 800213a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800213e:	4013      	ands	r3, r2
 8002140:	83fb      	strh	r3, [r7, #30]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	8bfa      	ldrh	r2, [r7, #30]
 8002148:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800214c:	b292      	uxth	r2, r2
 800214e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002158:	b29b      	uxth	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	3306      	adds	r3, #6
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800217c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <PCD_EP_ISR_Handler+0x1f0>
 8002184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d015      	beq.n	80021b8 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002192:	6959      	ldr	r1, [r3, #20]
 8002194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002196:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800219c:	b29b      	uxth	r3, r3
 800219e:	f004 fbbe 	bl	800691e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	441a      	add	r2, r3
 80021ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021b0:	2100      	movs	r1, #0
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f006 f942 	bl	800843c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80021c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 82bd 	bne.w	800274a <PCD_EP_ISR_Handler+0x782>
 80021d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021d4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80021d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80021dc:	f000 82b5 	beq.w	800274a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4413      	add	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220a:	b29a      	uxth	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	801a      	strh	r2, [r3, #0]
 8002210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2b3e      	cmp	r3, #62	@ 0x3e
 8002216:	d91d      	bls.n	8002254 <PCD_EP_ISR_Handler+0x28c>
 8002218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <PCD_EP_ISR_Handler+0x26a>
 800222c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800222e:	3b01      	subs	r3, #1
 8002230:	647b      	str	r3, [r7, #68]	@ 0x44
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b29a      	uxth	r2, r3
 8002238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800223a:	b29b      	uxth	r3, r3
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	b29b      	uxth	r3, r3
 8002240:	4313      	orrs	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800224c:	b29a      	uxth	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	801a      	strh	r2, [r3, #0]
 8002252:	e026      	b.n	80022a2 <PCD_EP_ISR_Handler+0x2da>
 8002254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <PCD_EP_ISR_Handler+0x2aa>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226a:	b29a      	uxth	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	e017      	b.n	80022a2 <PCD_EP_ISR_Handler+0x2da>
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	647b      	str	r3, [r7, #68]	@ 0x44
 800227a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <PCD_EP_ISR_Handler+0x2c4>
 8002286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002288:	3301      	adds	r3, #1
 800228a:	647b      	str	r3, [r7, #68]	@ 0x44
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b29a      	uxth	r2, r3
 8002292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002294:	b29b      	uxth	r3, r3
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	b29b      	uxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b29a      	uxth	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b2:	827b      	strh	r3, [r7, #18]
 80022b4:	8a7b      	ldrh	r3, [r7, #18]
 80022b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80022ba:	827b      	strh	r3, [r7, #18]
 80022bc:	8a7b      	ldrh	r3, [r7, #18]
 80022be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022c2:	827b      	strh	r3, [r7, #18]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	8a7b      	ldrh	r3, [r7, #18]
 80022ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022da:	b29b      	uxth	r3, r3
 80022dc:	8013      	strh	r3, [r2, #0]
 80022de:	e234      	b.n	800274a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022f4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f280 80fc 	bge.w	80024f6 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29a      	uxth	r2, r3
 8002310:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002314:	4013      	ands	r3, r2
 8002316:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800232c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002330:	b292      	uxth	r2, r2
 8002332:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002334:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800234a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234c:	7b1b      	ldrb	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d125      	bne.n	800239e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	3306      	adds	r3, #6
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800237e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8092 	beq.w	80024ac <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238e:	6959      	ldr	r1, [r3, #20]
 8002390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002392:	88da      	ldrh	r2, [r3, #6]
 8002394:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002398:	f004 fac1 	bl	800691e <USB_ReadPMA>
 800239c:	e086      	b.n	80024ac <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800239e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a0:	78db      	ldrb	r3, [r3, #3]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d10a      	bne.n	80023bc <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023aa:	461a      	mov	r2, r3
 80023ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f9d9 	bl	8002766 <HAL_PCD_EP_DB_Receive>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80023ba:	e077      	b.n	80024ac <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	441a      	add	r2, r3
 80023e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80023ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d024      	beq.n	8002464 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	3302      	adds	r3, #2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002442:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002446:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800244a:	2b00      	cmp	r3, #0
 800244c:	d02e      	beq.n	80024ac <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002454:	6959      	ldr	r1, [r3, #20]
 8002456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002458:	891a      	ldrh	r2, [r3, #8]
 800245a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800245e:	f004 fa5e 	bl	800691e <USB_ReadPMA>
 8002462:	e023      	b.n	80024ac <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	3306      	adds	r3, #6
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	4413      	add	r3, r2
 8002482:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800248c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002490:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800249e:	6959      	ldr	r1, [r3, #20]
 80024a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a2:	895a      	ldrh	r2, [r3, #10]
 80024a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024a8:	f004 fa39 	bl	800691e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024b4:	441a      	add	r2, r3
 80024b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024c2:	441a      	add	r2, r3
 80024c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <PCD_EP_ISR_Handler+0x514>
 80024d0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80024d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d206      	bcs.n	80024ea <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f005 ffaa 	bl	800843c <HAL_PCD_DataOutStageCallback>
 80024e8:	e005      	b.n	80024f6 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 fcdf 	bl	8004eb4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8123 	beq.w	800274a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002504:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	3310      	adds	r3, #16
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800252e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002532:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	441a      	add	r2, r3
 8002544:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800254c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002550:	b29b      	uxth	r3, r3
 8002552:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002556:	78db      	ldrb	r3, [r3, #3]
 8002558:	2b01      	cmp	r3, #1
 800255a:	f040 80a2 	bne.w	80026a2 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800255e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002566:	7b1b      	ldrb	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8093 	beq.w	8002694 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800256e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d046      	beq.n	8002608 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800257a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257c:	785b      	ldrb	r3, [r3, #1]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d126      	bne.n	80025d0 <PCD_EP_ISR_Handler+0x608>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	4413      	add	r3, r2
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
 800259a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	011a      	lsls	r2, r3, #4
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	4413      	add	r3, r2
 80025a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	801a      	strh	r2, [r3, #0]
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	e061      	b.n	8002694 <PCD_EP_ISR_Handler+0x6cc>
 80025d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d15d      	bne.n	8002694 <PCD_EP_ISR_Handler+0x6cc>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ec:	4413      	add	r3, r2
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	011a      	lsls	r2, r3, #4
 80025f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f8:	4413      	add	r3, r2
 80025fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002602:	2200      	movs	r2, #0
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	e045      	b.n	8002694 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800260e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d126      	bne.n	8002664 <PCD_EP_ISR_Handler+0x69c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	637b      	str	r3, [r7, #52]	@ 0x34
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262a:	4413      	add	r3, r2
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34
 800262e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	011a      	lsls	r2, r3, #4
 8002634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002636:	4413      	add	r3, r2
 8002638:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002648:	b29a      	uxth	r2, r3
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265c:	b29a      	uxth	r2, r3
 800265e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	e017      	b.n	8002694 <PCD_EP_ISR_Handler+0x6cc>
 8002664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d113      	bne.n	8002694 <PCD_EP_ISR_Handler+0x6cc>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002674:	b29b      	uxth	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800267a:	4413      	add	r3, r2
 800267c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800267e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	011a      	lsls	r2, r3, #4
 8002684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002686:	4413      	add	r3, r2
 8002688:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800268c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800268e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002690:	2200      	movs	r2, #0
 8002692:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f005 fee9 	bl	8008472 <HAL_PCD_DataInStageCallback>
 80026a0:	e053      	b.n	800274a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80026a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d146      	bne.n	800273c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	3302      	adds	r3, #2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80026da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d907      	bls.n	80026f6 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80026e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f2:	619a      	str	r2, [r3, #24]
 80026f4:	e002      	b.n	80026fc <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80026f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80026fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f005 feb1 	bl	8008472 <HAL_PCD_DataInStageCallback>
 8002710:	e01b      	b.n	800274a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800271a:	441a      	add	r2, r3
 800271c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002728:	441a      	add	r2, r3
 800272a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002734:	4618      	mov	r0, r3
 8002736:	f002 fbbd 	bl	8004eb4 <USB_EPStartXfer>
 800273a:	e006      	b.n	800274a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800273c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002740:	461a      	mov	r2, r3
 8002742:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f91b 	bl	8002980 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002752:	b29b      	uxth	r3, r3
 8002754:	b21b      	sxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	f6ff ac3b 	blt.w	8001fd2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3758      	adds	r7, #88	@ 0x58
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b088      	sub	sp, #32
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	4613      	mov	r3, r2
 8002772:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07e      	beq.n	800287c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	3302      	adds	r3, #2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	8b7b      	ldrh	r3, [r7, #26]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d306      	bcc.n	80027c0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	8b7b      	ldrh	r3, [r7, #26]
 80027b8:	1ad2      	subs	r2, r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	619a      	str	r2, [r3, #24]
 80027be:	e002      	b.n	80027c6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d123      	bne.n	8002816 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027e8:	833b      	strh	r3, [r7, #24]
 80027ea:	8b3b      	ldrh	r3, [r7, #24]
 80027ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80027f0:	833b      	strh	r3, [r7, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	441a      	add	r2, r3
 8002800:	8b3b      	ldrh	r3, [r7, #24]
 8002802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800280a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800280e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002812:	b29b      	uxth	r3, r3
 8002814:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01f      	beq.n	8002860 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800283a:	82fb      	strh	r3, [r7, #22]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	8afb      	ldrh	r3, [r7, #22]
 800284c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002858:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800285c:	b29b      	uxth	r3, r3
 800285e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002860:	8b7b      	ldrh	r3, [r7, #26]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8087 	beq.w	8002976 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6959      	ldr	r1, [r3, #20]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	891a      	ldrh	r2, [r3, #8]
 8002874:	8b7b      	ldrh	r3, [r7, #26]
 8002876:	f004 f852 	bl	800691e <USB_ReadPMA>
 800287a:	e07c      	b.n	8002976 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	3306      	adds	r3, #6
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	8b7b      	ldrh	r3, [r7, #26]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d306      	bcc.n	80028be <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	699a      	ldr	r2, [r3, #24]
 80028b4:	8b7b      	ldrh	r3, [r7, #26]
 80028b6:	1ad2      	subs	r2, r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	619a      	str	r2, [r3, #24]
 80028bc:	e002      	b.n	80028c4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d123      	bne.n	8002914 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e6:	83fb      	strh	r3, [r7, #30]
 80028e8:	8bfb      	ldrh	r3, [r7, #30]
 80028ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028ee:	83fb      	strh	r3, [r7, #30]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	8bfb      	ldrh	r3, [r7, #30]
 8002900:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002904:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800290c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002910:	b29b      	uxth	r3, r3
 8002912:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11f      	bne.n	800295e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002938:	83bb      	strh	r3, [r7, #28]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	441a      	add	r2, r3
 8002948:	8bbb      	ldrh	r3, [r7, #28]
 800294a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800294e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002956:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800295a:	b29b      	uxth	r3, r3
 800295c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800295e:	8b7b      	ldrh	r3, [r7, #26]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	6959      	ldr	r1, [r3, #20]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	895a      	ldrh	r2, [r3, #10]
 8002970:	8b7b      	ldrh	r3, [r7, #26]
 8002972:	f003 ffd4 	bl	800691e <USB_ReadPMA>
    }
  }

  return count;
 8002976:	8b7b      	ldrh	r3, [r7, #26]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b0a4      	sub	sp, #144	@ 0x90
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 81dd 	beq.w	8002d54 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	3302      	adds	r3, #2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d907      	bls.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029da:	1ad2      	subs	r2, r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	619a      	str	r2, [r3, #24]
 80029e0:	e002      	b.n	80029e8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 80b9 	bne.w	8002b64 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	785b      	ldrb	r3, [r3, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d126      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0xc8>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0e:	4413      	add	r3, r2
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	011a      	lsls	r2, r3, #4
 8002a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	e01a      	b.n	8002a7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d116      	bne.n	8002a7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a64:	4413      	add	r3, r2
 8002a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	011a      	lsls	r2, r3, #4
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a70:	4413      	add	r3, r2
 8002a72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	785b      	ldrb	r3, [r3, #1]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d126      	bne.n	8002ada <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	011a      	lsls	r2, r3, #4
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	801a      	strh	r2, [r3, #0]
 8002ad8:	e017      	b.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d113      	bne.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	4413      	add	r3, r2
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	011a      	lsls	r2, r3, #4
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	4413      	add	r3, r2
 8002afe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2200      	movs	r2, #0
 8002b08:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f005 fcae 	bl	8008472 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 82fc 	beq.w	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b3c:	82fb      	strh	r3, [r7, #22]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	441a      	add	r2, r3
 8002b4c:	8afb      	ldrh	r3, [r7, #22]
 8002b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	8013      	strh	r3, [r2, #0]
 8002b62:	e2da      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d021      	beq.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ba6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	f040 82ae 	bne.w	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bc6:	441a      	add	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bd4:	441a      	add	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d30b      	bcc.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6a1a      	ldr	r2, [r3, #32]
 8002bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bf6:	1ad2      	subs	r2, r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	621a      	str	r2, [r3, #32]
 8002bfc:	e017      	b.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d108      	bne.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002c06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002c16:	e00a      	b.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	785b      	ldrb	r3, [r3, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d165      	bne.n	8002d02 <HAL_PCD_EP_DB_Transmit+0x382>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4a:	4413      	add	r3, r2
 8002c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	011a      	lsls	r2, r3, #4
 8002c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c56:	4413      	add	r3, r2
 8002c58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c72:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c74:	d91d      	bls.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x310>
 8002c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cae:	801a      	strh	r2, [r3, #0]
 8002cb0:	e044      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x350>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e035      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_PCD_EP_DB_Transmit+0x36a>
 8002ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	e01c      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d118      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1e:	4413      	add	r3, r2
 8002d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	011a      	lsls	r2, r3, #4
 8002d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6959      	ldr	r1, [r3, #20]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	891a      	ldrh	r2, [r3, #8]
 8002d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f003 fda0 	bl	8006892 <USB_WritePMA>
 8002d52:	e1e2      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	3306      	adds	r3, #6
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d307      	bcc.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d94:	1ad2      	subs	r2, r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	619a      	str	r2, [r3, #24]
 8002d9a:	e002      	b.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 80c0 	bne.w	8002f2c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d126      	bne.n	8002e02 <HAL_PCD_EP_DB_Transmit+0x482>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dc8:	4413      	add	r3, r2
 8002dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	011a      	lsls	r2, r3, #4
 8002dd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002dda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	e01a      	b.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d116      	bne.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e1e:	4413      	add	r3, r2
 8002e20:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	011a      	lsls	r2, r3, #4
 8002e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e34:	2200      	movs	r2, #0
 8002e36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d12b      	bne.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x51e>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e5a:	4413      	add	r3, r2
 8002e5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	011a      	lsls	r2, r3, #4
 8002e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e66:	4413      	add	r3, r2
 8002e68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e82:	801a      	strh	r2, [r3, #0]
 8002e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e9a:	801a      	strh	r2, [r3, #0]
 8002e9c:	e017      	b.n	8002ece <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	785b      	ldrb	r3, [r3, #1]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d113      	bne.n	8002ece <HAL_PCD_EP_DB_Transmit+0x54e>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eb4:	4413      	add	r3, r2
 8002eb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	011a      	lsls	r2, r3, #4
 8002ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ec6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ec8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eca:	2200      	movs	r2, #0
 8002ecc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f005 facc 	bl	8008472 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 811a 	bne.w	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f00:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	8013      	strh	r3, [r2, #0]
 8002f2a:	e0f6      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d121      	bne.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	441a      	add	r2, r3
 8002f62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f040 80ca 	bne.w	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f8e:	441a      	add	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f9c:	441a      	add	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d30b      	bcc.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fbe:	1ad2      	subs	r2, r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	621a      	str	r2, [r3, #32]
 8002fc4:	e017      	b.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d108      	bne.n	8002fe0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002fce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002fde:	e00a      	b.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	785b      	ldrb	r3, [r3, #1]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d165      	bne.n	80030d0 <HAL_PCD_EP_DB_Transmit+0x750>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003012:	b29b      	uxth	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003018:	4413      	add	r3, r2
 800301a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	011a      	lsls	r2, r3, #4
 8003022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003024:	4413      	add	r3, r2
 8003026:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800302a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800302c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003036:	b29a      	uxth	r2, r3
 8003038:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800303a:	801a      	strh	r2, [r3, #0]
 800303c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003040:	2b3e      	cmp	r3, #62	@ 0x3e
 8003042:	d91d      	bls.n	8003080 <HAL_PCD_EP_DB_Transmit+0x700>
 8003044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800304c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003058:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800305a:	3b01      	subs	r3, #1
 800305c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800305e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29a      	uxth	r2, r3
 8003064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003066:	b29b      	uxth	r3, r3
 8003068:	029b      	lsls	r3, r3, #10
 800306a:	b29b      	uxth	r3, r3
 800306c:	4313      	orrs	r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003078:	b29a      	uxth	r2, r3
 800307a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	e041      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x784>
 8003080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <HAL_PCD_EP_DB_Transmit+0x71e>
 8003088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003096:	b29a      	uxth	r2, r3
 8003098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800309a:	801a      	strh	r2, [r3, #0]
 800309c:	e032      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x784>
 800309e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x738>
 80030b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030b4:	3301      	adds	r3, #1
 80030b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4313      	orrs	r3, r2
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030cc:	801a      	strh	r2, [r3, #0]
 80030ce:	e019      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x784>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	785b      	ldrb	r3, [r3, #1]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d115      	bne.n	8003104 <HAL_PCD_EP_DB_Transmit+0x784>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e6:	4413      	add	r3, r2
 80030e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	011a      	lsls	r2, r3, #4
 80030f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f2:	4413      	add	r3, r2
 80030f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80030fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030fe:	b29a      	uxth	r2, r3
 8003100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003102:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6959      	ldr	r1, [r3, #20]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	895a      	ldrh	r2, [r3, #10]
 8003110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003114:	b29b      	uxth	r3, r3
 8003116:	f003 fbbc 	bl	8006892 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003134:	82bb      	strh	r3, [r7, #20]
 8003136:	8abb      	ldrh	r3, [r7, #20]
 8003138:	f083 0310 	eor.w	r3, r3, #16
 800313c:	82bb      	strh	r3, [r7, #20]
 800313e:	8abb      	ldrh	r3, [r7, #20]
 8003140:	f083 0320 	eor.w	r3, r3, #32
 8003144:	82bb      	strh	r3, [r7, #20]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	8abb      	ldrh	r3, [r7, #20]
 8003156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800315a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800315e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003166:	b29b      	uxth	r3, r3
 8003168:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3790      	adds	r7, #144	@ 0x90
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	4613      	mov	r3, r2
 8003184:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003186:	897b      	ldrh	r3, [r7, #10]
 8003188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	f003 0207 	and.w	r2, r3, #7
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	3310      	adds	r3, #16
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e009      	b.n	80031be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031aa:	897a      	ldrh	r2, [r7, #10]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031be:	893b      	ldrh	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2200      	movs	r2, #0
 80031c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	80da      	strh	r2, [r3, #6]
 80031d2:	e00b      	b.n	80031ec <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2201      	movs	r2, #1
 80031d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e272      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8087 	beq.w	8003326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003218:	4b92      	ldr	r3, [pc, #584]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b04      	cmp	r3, #4
 8003222:	d00c      	beq.n	800323e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003224:	4b8f      	ldr	r3, [pc, #572]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b08      	cmp	r3, #8
 800322e:	d112      	bne.n	8003256 <HAL_RCC_OscConfig+0x5e>
 8003230:	4b8c      	ldr	r3, [pc, #560]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800323c:	d10b      	bne.n	8003256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323e:	4b89      	ldr	r3, [pc, #548]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d06c      	beq.n	8003324 <HAL_RCC_OscConfig+0x12c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d168      	bne.n	8003324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e24c      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x76>
 8003260:	4b80      	ldr	r3, [pc, #512]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a7f      	ldr	r2, [pc, #508]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e02e      	b.n	80032cc <HAL_RCC_OscConfig+0xd4>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x98>
 8003276:	4b7b      	ldr	r3, [pc, #492]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a7a      	ldr	r2, [pc, #488]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 800327c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b78      	ldr	r3, [pc, #480]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a77      	ldr	r2, [pc, #476]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003288:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e01d      	b.n	80032cc <HAL_RCC_OscConfig+0xd4>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0xbc>
 800329a:	4b72      	ldr	r3, [pc, #456]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a71      	ldr	r2, [pc, #452]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0xd4>
 80032b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b68      	ldr	r3, [pc, #416]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a67      	ldr	r2, [pc, #412]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d013      	beq.n	80032fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fd ff64 	bl	80011a0 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032dc:	f7fd ff60 	bl	80011a0 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	@ 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e200      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0xe4>
 80032fa:	e014      	b.n	8003326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fd ff50 	bl	80011a0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7fd ff4c 	bl	80011a0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	@ 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1ec      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003316:	4b53      	ldr	r3, [pc, #332]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x10c>
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d063      	beq.n	80033fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003332:	4b4c      	ldr	r3, [pc, #304]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800333e:	4b49      	ldr	r3, [pc, #292]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b08      	cmp	r3, #8
 8003348:	d11c      	bne.n	8003384 <HAL_RCC_OscConfig+0x18c>
 800334a:	4b46      	ldr	r3, [pc, #280]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d116      	bne.n	8003384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	4b43      	ldr	r3, [pc, #268]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_RCC_OscConfig+0x176>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e1c0      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336e:	4b3d      	ldr	r3, [pc, #244]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4939      	ldr	r1, [pc, #228]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	e03a      	b.n	80033fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338c:	4b36      	ldr	r3, [pc, #216]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7fd ff05 	bl	80011a0 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339a:	f7fd ff01 	bl	80011a0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e1a1      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4927      	ldr	r1, [pc, #156]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
 80033cc:	e015      	b.n	80033fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ce:	4b26      	ldr	r3, [pc, #152]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fd fee4 	bl	80011a0 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033dc:	f7fd fee0 	bl	80011a0 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e180      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d03a      	beq.n	800347c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d019      	beq.n	8003442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340e:	4b17      	ldr	r3, [pc, #92]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7fd fec4 	bl	80011a0 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341c:	f7fd fec0 	bl	80011a0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e160      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800343a:	2001      	movs	r0, #1
 800343c:	f000 fa9c 	bl	8003978 <RCC_Delay>
 8003440:	e01c      	b.n	800347c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003442:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003448:	f7fd feaa 	bl	80011a0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344e:	e00f      	b.n	8003470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003450:	f7fd fea6 	bl	80011a0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d908      	bls.n	8003470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e146      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	42420000 	.word	0x42420000
 800346c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003470:	4b92      	ldr	r3, [pc, #584]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e9      	bne.n	8003450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80a6 	beq.w	80035d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348a:	2300      	movs	r3, #0
 800348c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348e:	4b8b      	ldr	r3, [pc, #556]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10d      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b88      	ldr	r3, [pc, #544]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4a87      	ldr	r2, [pc, #540]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a4:	61d3      	str	r3, [r2, #28]
 80034a6:	4b85      	ldr	r3, [pc, #532]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b6:	4b82      	ldr	r3, [pc, #520]	@ (80036c0 <HAL_RCC_OscConfig+0x4c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d118      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c2:	4b7f      	ldr	r3, [pc, #508]	@ (80036c0 <HAL_RCC_OscConfig+0x4c8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a7e      	ldr	r2, [pc, #504]	@ (80036c0 <HAL_RCC_OscConfig+0x4c8>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ce:	f7fd fe67 	bl	80011a0 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d6:	f7fd fe63 	bl	80011a0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b64      	cmp	r3, #100	@ 0x64
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e103      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	4b75      	ldr	r3, [pc, #468]	@ (80036c0 <HAL_RCC_OscConfig+0x4c8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x312>
 80034fc:	4b6f      	ldr	r3, [pc, #444]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a6e      	ldr	r2, [pc, #440]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6213      	str	r3, [r2, #32]
 8003508:	e02d      	b.n	8003566 <HAL_RCC_OscConfig+0x36e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x334>
 8003512:	4b6a      	ldr	r3, [pc, #424]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	4a69      	ldr	r2, [pc, #420]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6213      	str	r3, [r2, #32]
 800351e:	4b67      	ldr	r3, [pc, #412]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a66      	ldr	r2, [pc, #408]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003524:	f023 0304 	bic.w	r3, r3, #4
 8003528:	6213      	str	r3, [r2, #32]
 800352a:	e01c      	b.n	8003566 <HAL_RCC_OscConfig+0x36e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b05      	cmp	r3, #5
 8003532:	d10c      	bne.n	800354e <HAL_RCC_OscConfig+0x356>
 8003534:	4b61      	ldr	r3, [pc, #388]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4a60      	ldr	r2, [pc, #384]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	6213      	str	r3, [r2, #32]
 8003540:	4b5e      	ldr	r3, [pc, #376]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	4a5d      	ldr	r2, [pc, #372]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6213      	str	r3, [r2, #32]
 800354c:	e00b      	b.n	8003566 <HAL_RCC_OscConfig+0x36e>
 800354e:	4b5b      	ldr	r3, [pc, #364]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a5a      	ldr	r2, [pc, #360]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	4b58      	ldr	r3, [pc, #352]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a57      	ldr	r2, [pc, #348]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d015      	beq.n	800359a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fd fe17 	bl	80011a0 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fd fe13 	bl	80011a0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0b1      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	4b4b      	ldr	r3, [pc, #300]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ee      	beq.n	8003576 <HAL_RCC_OscConfig+0x37e>
 8003598:	e014      	b.n	80035c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fd fe01 	bl	80011a0 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fd fdfd 	bl	80011a0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e09b      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	4b40      	ldr	r3, [pc, #256]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ee      	bne.n	80035a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ca:	4b3c      	ldr	r3, [pc, #240]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4a3b      	ldr	r2, [pc, #236]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8087 	beq.w	80036ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e0:	4b36      	ldr	r3, [pc, #216]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d061      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d146      	bne.n	8003682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f4:	4b33      	ldr	r3, [pc, #204]	@ (80036c4 <HAL_RCC_OscConfig+0x4cc>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fd fdd1 	bl	80011a0 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fd fdcd 	bl	80011a0 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e06d      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003614:	4b29      	ldr	r3, [pc, #164]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f0      	bne.n	8003602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003628:	d108      	bne.n	800363c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800362a:	4b24      	ldr	r3, [pc, #144]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4921      	ldr	r1, [pc, #132]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800363c:	4b1f      	ldr	r3, [pc, #124]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a19      	ldr	r1, [r3, #32]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	430b      	orrs	r3, r1
 800364e:	491b      	ldr	r1, [pc, #108]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003654:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <HAL_RCC_OscConfig+0x4cc>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fd fda1 	bl	80011a0 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003662:	f7fd fd9d 	bl	80011a0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e03d      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003674:	4b11      	ldr	r3, [pc, #68]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x46a>
 8003680:	e035      	b.n	80036ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <HAL_RCC_OscConfig+0x4cc>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fd fd8a 	bl	80011a0 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7fd fd86 	bl	80011a0 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e026      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x498>
 80036ae:	e01e      	b.n	80036ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e019      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40007000 	.word	0x40007000
 80036c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036c8:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_RCC_OscConfig+0x500>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40021000 	.word	0x40021000

080036fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0d0      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b6a      	ldr	r3, [pc, #424]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d910      	bls.n	8003740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b67      	ldr	r3, [pc, #412]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 0207 	bic.w	r2, r3, #7
 8003726:	4965      	ldr	r1, [pc, #404]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a58      	ldr	r2, [pc, #352]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a52      	ldr	r2, [pc, #328]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800377a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d040      	beq.n	800381c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d115      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b41      	ldr	r3, [pc, #260]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e073      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	4b3d      	ldr	r3, [pc, #244]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e06b      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b39      	ldr	r3, [pc, #228]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4936      	ldr	r1, [pc, #216]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ec:	f7fd fcd8 	bl	80011a0 <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fd fcd4 	bl	80011a0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e053      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b2d      	ldr	r3, [pc, #180]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800381c:	4b27      	ldr	r3, [pc, #156]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d210      	bcs.n	800384c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b24      	ldr	r3, [pc, #144]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	4922      	ldr	r1, [pc, #136]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003876:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	@ (80038c8 <HAL_RCC_ClockConfig+0x1cc>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	@ (80038cc <HAL_RCC_ClockConfig+0x1d0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fc36 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40021000 	.word	0x40021000
 80038c4:	0800b29c 	.word	0x0800b29c
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004

080038d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x94>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x30>
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x36>
 80038fe:	e027      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003900:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x98>)
 8003902:	613b      	str	r3, [r7, #16]
      break;
 8003904:	e027      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	0c9b      	lsrs	r3, r3, #18
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	4a17      	ldr	r2, [pc, #92]	@ (800396c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003910:	5cd3      	ldrb	r3, [r2, r3]
 8003912:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d010      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800391e:	4b11      	ldr	r3, [pc, #68]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x94>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	0c5b      	lsrs	r3, r3, #17
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	4a11      	ldr	r2, [pc, #68]	@ (8003970 <HAL_RCC_GetSysClockFreq+0xa0>)
 800392a:	5cd3      	ldrb	r3, [r2, r3]
 800392c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a0d      	ldr	r2, [pc, #52]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x98>)
 8003932:	fb03 f202 	mul.w	r2, r3, r2
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e004      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a0c      	ldr	r2, [pc, #48]	@ (8003974 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	613b      	str	r3, [r7, #16]
      break;
 800394e:	e002      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003950:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x98>)
 8003952:	613b      	str	r3, [r7, #16]
      break;
 8003954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003956:	693b      	ldr	r3, [r7, #16]
}
 8003958:	4618      	mov	r0, r3
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
 8003968:	007a1200 	.word	0x007a1200
 800396c:	0800b2ac 	.word	0x0800b2ac
 8003970:	0800b2bc 	.word	0x0800b2bc
 8003974:	003d0900 	.word	0x003d0900

08003978 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003980:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <RCC_Delay+0x34>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <RCC_Delay+0x38>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0a5b      	lsrs	r3, r3, #9
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003994:	bf00      	nop
  }
  while (Delay --);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1e5a      	subs	r2, r3, #1
 800399a:	60fa      	str	r2, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f9      	bne.n	8003994 <RCC_Delay+0x1c>
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	20000000 	.word	0x20000000
 80039b0:	10624dd3 	.word	0x10624dd3

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d07d      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	61d3      	str	r3, [r2, #28]
 80039ec:	4b49      	ldr	r3, [pc, #292]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	4b46      	ldr	r3, [pc, #280]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d118      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a08:	4b43      	ldr	r3, [pc, #268]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a42      	ldr	r2, [pc, #264]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a14:	f7fd fbc4 	bl	80011a0 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	e008      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7fd fbc0 	bl	80011a0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e06d      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a3a:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02e      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d027      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a58:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a62:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a68:	4b2c      	ldr	r3, [pc, #176]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a6e:	4a29      	ldr	r2, [pc, #164]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d014      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fb8f 	bl	80011a0 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fd fb8b 	bl	80011a0 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e036      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ee      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4917      	ldr	r1, [pc, #92]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	490b      	ldr	r1, [pc, #44]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af6:	4b07      	ldr	r3, [pc, #28]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	4904      	ldr	r1, [pc, #16]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	42420440 	.word	0x42420440

08003b20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e041      	b.n	8003bb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd fa5a 	bl	8001000 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f000 f8f0 	bl	8003d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e0ae      	b.n	8003d3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b0c      	cmp	r3, #12
 8003bea:	f200 809f 	bhi.w	8003d2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bee:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003d2d 	.word	0x08003d2d
 8003bfc:	08003d2d 	.word	0x08003d2d
 8003c00:	08003d2d 	.word	0x08003d2d
 8003c04:	08003c69 	.word	0x08003c69
 8003c08:	08003d2d 	.word	0x08003d2d
 8003c0c:	08003d2d 	.word	0x08003d2d
 8003c10:	08003d2d 	.word	0x08003d2d
 8003c14:	08003cab 	.word	0x08003cab
 8003c18:	08003d2d 	.word	0x08003d2d
 8003c1c:	08003d2d 	.word	0x08003d2d
 8003c20:	08003d2d 	.word	0x08003d2d
 8003c24:	08003ceb 	.word	0x08003ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f8f6 	bl	8003e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0208 	orr.w	r2, r2, #8
 8003c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6999      	ldr	r1, [r3, #24]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	619a      	str	r2, [r3, #24]
      break;
 8003c66:	e064      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f93c 	bl	8003eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6999      	ldr	r1, [r3, #24]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	021a      	lsls	r2, r3, #8
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	619a      	str	r2, [r3, #24]
      break;
 8003ca8:	e043      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f985 	bl	8003fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0208 	orr.w	r2, r2, #8
 8003cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0204 	bic.w	r2, r2, #4
 8003cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69d9      	ldr	r1, [r3, #28]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	61da      	str	r2, [r3, #28]
      break;
 8003ce8:	e023      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f9cf 	bl	8004094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69d9      	ldr	r1, [r3, #28]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	021a      	lsls	r2, r3, #8
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	61da      	str	r2, [r3, #28]
      break;
 8003d2a:	e002      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a2f      	ldr	r2, [pc, #188]	@ (8003e14 <TIM_Base_SetConfig+0xd0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <TIM_Base_SetConfig+0x30>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d62:	d007      	beq.n	8003d74 <TIM_Base_SetConfig+0x30>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a2c      	ldr	r2, [pc, #176]	@ (8003e18 <TIM_Base_SetConfig+0xd4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_Base_SetConfig+0x30>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003e1c <TIM_Base_SetConfig+0xd8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d108      	bne.n	8003d86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a22      	ldr	r2, [pc, #136]	@ (8003e14 <TIM_Base_SetConfig+0xd0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <TIM_Base_SetConfig+0x62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d94:	d007      	beq.n	8003da6 <TIM_Base_SetConfig+0x62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1f      	ldr	r2, [pc, #124]	@ (8003e18 <TIM_Base_SetConfig+0xd4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_Base_SetConfig+0x62>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e1c <TIM_Base_SetConfig+0xd8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a0d      	ldr	r2, [pc, #52]	@ (8003e14 <TIM_Base_SetConfig+0xd0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d103      	bne.n	8003dec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f023 0201 	bic.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800

08003e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f023 0201 	bic.w	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 0302 	bic.w	r3, r3, #2
 8003e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <TIM_OC1_SetConfig+0xc8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10c      	bne.n	8003e96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 0308 	bic.w	r3, r3, #8
 8003e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a13      	ldr	r2, [pc, #76]	@ (8003ee8 <TIM_OC1_SetConfig+0xc8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d111      	bne.n	8003ec2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	621a      	str	r2, [r3, #32]
}
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40012c00 	.word	0x40012c00

08003eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f023 0210 	bic.w	r2, r3, #16
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 0320 	bic.w	r3, r3, #32
 8003f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a1d      	ldr	r2, [pc, #116]	@ (8003fbc <TIM_OC2_SetConfig+0xd0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10d      	bne.n	8003f68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a14      	ldr	r2, [pc, #80]	@ (8003fbc <TIM_OC2_SetConfig+0xd0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d113      	bne.n	8003f98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	40012c00 	.word	0x40012c00

08003fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1d      	ldr	r2, [pc, #116]	@ (8004090 <TIM_OC3_SetConfig+0xd0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d10d      	bne.n	800403a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a14      	ldr	r2, [pc, #80]	@ (8004090 <TIM_OC3_SetConfig+0xd0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d113      	bne.n	800406a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	621a      	str	r2, [r3, #32]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40012c00 	.word	0x40012c00

08004094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	031b      	lsls	r3, r3, #12
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a0f      	ldr	r2, [pc, #60]	@ (800412c <TIM_OC4_SetConfig+0x98>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d109      	bne.n	8004108 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	40012c00 	.word	0x40012c00

08004130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e046      	b.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a16      	ldr	r2, [pc, #88]	@ (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00e      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004194:	d009      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a10      	ldr	r2, [pc, #64]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d10c      	bne.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800

080041ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004204:	2302      	movs	r3, #2
 8004206:	e03d      	b.n	8004284 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800428e:	b480      	push	{r7}
 8004290:	b085      	sub	sp, #20
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	4638      	mov	r0, r7
 8004298:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042b8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042dc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	4013      	ands	r3, r2
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	4638      	mov	r0, r7
 800432a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
	...

0800435c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800435c:	b480      	push	{r7}
 800435e:	b09d      	sub	sp, #116	@ 0x74
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800437e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004382:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	78db      	ldrb	r3, [r3, #3]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d81f      	bhi.n	80043ce <USB_ActivateEndpoint+0x72>
 800438e:	a201      	add	r2, pc, #4	@ (adr r2, 8004394 <USB_ActivateEndpoint+0x38>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043c1 	.word	0x080043c1
 800439c:	080043d7 	.word	0x080043d7
 80043a0:	080043b3 	.word	0x080043b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043b0:	e012      	b.n	80043d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043b6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80043ba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043be:	e00b      	b.n	80043d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043cc:	e004      	b.n	80043d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80043d4:	e000      	b.n	80043d8 <USB_ActivateEndpoint+0x7c>
      break;
 80043d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004410:	b29b      	uxth	r3, r3
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	4313      	orrs	r3, r2
 8004418:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	441a      	add	r2, r3
 8004426:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800442a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800442e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800443a:	b29b      	uxth	r3, r3
 800443c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	7b1b      	ldrb	r3, [r3, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 8178 	bne.w	8004738 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8084 	beq.w	800455a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800445c:	b29b      	uxth	r3, r3
 800445e:	461a      	mov	r2, r3
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	4413      	add	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	011a      	lsls	r2, r3, #4
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	88db      	ldrh	r3, [r3, #6]
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	b29b      	uxth	r3, r3
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	827b      	strh	r3, [r7, #18]
 8004494:	8a7b      	ldrh	r3, [r7, #18]
 8004496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01b      	beq.n	80044d6 <USB_ActivateEndpoint+0x17a>
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b4:	823b      	strh	r3, [r7, #16]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	441a      	add	r2, r3
 80044c0:	8a3b      	ldrh	r3, [r7, #16]
 80044c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	78db      	ldrb	r3, [r3, #3]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d020      	beq.n	8004520 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f4:	81bb      	strh	r3, [r7, #12]
 80044f6:	89bb      	ldrh	r3, [r7, #12]
 80044f8:	f083 0320 	eor.w	r3, r3, #32
 80044fc:	81bb      	strh	r3, [r7, #12]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	89bb      	ldrh	r3, [r7, #12]
 800450a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800450e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]
 800451e:	e2d5      	b.n	8004acc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004536:	81fb      	strh	r3, [r7, #14]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	89fb      	ldrh	r3, [r7, #14]
 8004544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800454c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004554:	b29b      	uxth	r3, r3
 8004556:	8013      	strh	r3, [r2, #0]
 8004558:	e2b8      	b.n	8004acc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	633b      	str	r3, [r7, #48]	@ 0x30
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004564:	b29b      	uxth	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456a:	4413      	add	r3, r2
 800456c:	633b      	str	r3, [r7, #48]	@ 0x30
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	011a      	lsls	r2, r3, #4
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	4413      	add	r3, r2
 8004578:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800457c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	88db      	ldrh	r3, [r3, #6]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	b29b      	uxth	r3, r3
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004598:	b29b      	uxth	r3, r3
 800459a:	461a      	mov	r2, r3
 800459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459e:	4413      	add	r3, r2
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	011a      	lsls	r2, r3, #4
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	4413      	add	r3, r2
 80045ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045bc:	b29a      	uxth	r2, r3
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80045c8:	d91d      	bls.n	8004606 <USB_ActivateEndpoint+0x2aa>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <USB_ActivateEndpoint+0x288>
 80045de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045e0:	3b01      	subs	r3, #1
 80045e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	4313      	orrs	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	e026      	b.n	8004654 <USB_ActivateEndpoint+0x2f8>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <USB_ActivateEndpoint+0x2c8>
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461c:	b29a      	uxth	r2, r3
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	e017      	b.n	8004654 <USB_ActivateEndpoint+0x2f8>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <USB_ActivateEndpoint+0x2e2>
 8004638:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800463a:	3301      	adds	r3, #1
 800463c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29a      	uxth	r2, r3
 8004644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004646:	b29b      	uxth	r3, r3
 8004648:	029b      	lsls	r3, r3, #10
 800464a:	b29b      	uxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	b29a      	uxth	r2, r3
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004662:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01b      	beq.n	80046a4 <USB_ActivateEndpoint+0x348>
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800467e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004682:	843b      	strh	r3, [r7, #32]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	8c3b      	ldrh	r3, [r7, #32]
 8004690:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004694:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800469c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d124      	bne.n	80046f6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c2:	83bb      	strh	r3, [r7, #28]
 80046c4:	8bbb      	ldrh	r3, [r7, #28]
 80046c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80046ca:	83bb      	strh	r3, [r7, #28]
 80046cc:	8bbb      	ldrh	r3, [r7, #28]
 80046ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046d2:	83bb      	strh	r3, [r7, #28]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	8bbb      	ldrh	r3, [r7, #28]
 80046e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	8013      	strh	r3, [r2, #0]
 80046f4:	e1ea      	b.n	8004acc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470c:	83fb      	strh	r3, [r7, #30]
 800470e:	8bfb      	ldrh	r3, [r7, #30]
 8004710:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004714:	83fb      	strh	r3, [r7, #30]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	8bfb      	ldrh	r3, [r7, #30]
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800472e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]
 8004736:	e1c9      	b.n	8004acc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	78db      	ldrb	r3, [r3, #3]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d11e      	bne.n	800477e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004756:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800476c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004770:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]
 800477c:	e01d      	b.n	80047ba <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004794:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80047a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ca:	4413      	add	r3, r2
 80047cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	011a      	lsls	r2, r3, #4
 80047d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	891b      	ldrh	r3, [r3, #8]
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047ec:	801a      	strh	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047fe:	4413      	add	r3, r2
 8004800:	657b      	str	r3, [r7, #84]	@ 0x54
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	011a      	lsls	r2, r3, #4
 8004808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800480a:	4413      	add	r3, r2
 800480c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004810:	653b      	str	r3, [r7, #80]	@ 0x50
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	895b      	ldrh	r3, [r3, #10]
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	b29b      	uxth	r3, r3
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004820:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	785b      	ldrb	r3, [r3, #1]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 8093 	bne.w	8004952 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800483c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01b      	beq.n	8004880 <USB_ActivateEndpoint+0x524>
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800485a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004874:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800488e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <USB_ActivateEndpoint+0x574>
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ae:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80048bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80048ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048ee:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80048f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	441a      	add	r2, r3
 8004902:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800490c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004914:	b29b      	uxth	r3, r3
 8004916:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800492a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800492e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800493c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494c:	b29b      	uxth	r3, r3
 800494e:	8013      	strh	r3, [r2, #0]
 8004950:	e0bc      	b.n	8004acc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004962:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01d      	beq.n	80049aa <USB_ActivateEndpoint+0x64e>
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004984:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800499a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800499e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80049ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80049be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01d      	beq.n	8004a02 <USB_ActivateEndpoint+0x6a6>
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049dc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	78db      	ldrb	r3, [r3, #3]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d024      	beq.n	8004a54 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a20:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004a24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004a28:	f083 0320 	eor.w	r3, r3, #32
 8004a2c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
 8004a52:	e01d      	b.n	8004a90 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a6a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004acc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3774      	adds	r7, #116	@ 0x74
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop

08004adc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b08d      	sub	sp, #52	@ 0x34
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	7b1b      	ldrb	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 808e 	bne.w	8004c0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d044      	beq.n	8004b82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	81bb      	strh	r3, [r7, #12]
 8004b06:	89bb      	ldrh	r3, [r7, #12]
 8004b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <USB_DeactivateEndpoint+0x6c>
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b26:	817b      	strh	r3, [r7, #10]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	897b      	ldrh	r3, [r7, #10]
 8004b34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b40:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b5e:	813b      	strh	r3, [r7, #8]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	893b      	ldrh	r3, [r7, #8]
 8004b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	8013      	strh	r3, [r2, #0]
 8004b80:	e192      	b.n	8004ea8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	827b      	strh	r3, [r7, #18]
 8004b90:	8a7b      	ldrh	r3, [r7, #18]
 8004b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01b      	beq.n	8004bd2 <USB_DeactivateEndpoint+0xf6>
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb0:	823b      	strh	r3, [r7, #16]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	8a3b      	ldrh	r3, [r7, #16]
 8004bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be8:	81fb      	strh	r3, [r7, #14]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	89fb      	ldrh	r3, [r7, #14]
 8004bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8013      	strh	r3, [r2, #0]
 8004c0a:	e14d      	b.n	8004ea8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 80a5 	bne.w	8004d60 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	843b      	strh	r3, [r7, #32]
 8004c24:	8c3b      	ldrh	r3, [r7, #32]
 8004c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01b      	beq.n	8004c66 <USB_DeactivateEndpoint+0x18a>
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c44:	83fb      	strh	r3, [r7, #30]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	441a      	add	r2, r3
 8004c50:	8bfb      	ldrh	r3, [r7, #30]
 8004c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	83bb      	strh	r3, [r7, #28]
 8004c74:	8bbb      	ldrh	r3, [r7, #28]
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01b      	beq.n	8004cb6 <USB_DeactivateEndpoint+0x1da>
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c94:	837b      	strh	r3, [r7, #26]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	8b7b      	ldrh	r3, [r7, #26]
 8004ca2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ca6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ccc:	833b      	strh	r3, [r7, #24]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	441a      	add	r2, r3
 8004cd8:	8b3b      	ldrh	r3, [r7, #24]
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ce6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d04:	82fb      	strh	r3, [r7, #22]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	441a      	add	r2, r3
 8004d10:	8afb      	ldrh	r3, [r7, #22]
 8004d12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d3c:	82bb      	strh	r3, [r7, #20]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	8abb      	ldrh	r3, [r7, #20]
 8004d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8013      	strh	r3, [r2, #0]
 8004d5e:	e0a3      	b.n	8004ea8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004d6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01b      	beq.n	8004db0 <USB_DeactivateEndpoint+0x2d4>
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d8e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004da4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004dbe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <USB_DeactivateEndpoint+0x324>
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dde:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e16:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	441a      	add	r2, r3
 8004e22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e86:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3734      	adds	r7, #52	@ 0x34
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b0c2      	sub	sp, #264	@ 0x108
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ec2:	6018      	str	r0, [r3, #0]
 8004ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ecc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	f040 86b7 	bne.w	8005c4e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d908      	bls.n	8004f0e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004f0c:	e007      	b.n	8004f1e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	7b1b      	ldrb	r3, [r3, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d13a      	bne.n	8004fa4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6959      	ldr	r1, [r3, #20]
 8004f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	88da      	ldrh	r2, [r3, #6]
 8004f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f54:	6800      	ldr	r0, [r0, #0]
 8004f56:	f001 fc9c 	bl	8006892 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	011a      	lsls	r2, r3, #4
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	f000 be1f 	b.w	8005be2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	78db      	ldrb	r3, [r3, #3]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	f040 8462 	bne.w	800587a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	f240 83df 	bls.w	8005792 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005002:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800500c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800501c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005020:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005024:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800502c:	b29b      	uxth	r3, r3
 800502e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005040:	1ad2      	subs	r2, r2, r3
 8005042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800504e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800505c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 81c7 	beq.w	8005404 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800507a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	633b      	str	r3, [r7, #48]	@ 0x30
 8005082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d177      	bne.n	8005182 <USB_EPStartXfer+0x2ce>
 8005092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800509e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	4413      	add	r3, r2
 80050b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	011a      	lsls	r2, r3, #4
 80050c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c6:	4413      	add	r3, r2
 80050c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d8:	b29a      	uxth	r2, r3
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	801a      	strh	r2, [r3, #0]
 80050de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80050e4:	d921      	bls.n	800512a <USB_EPStartXfer+0x276>
 80050e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f4:	f003 031f 	and.w	r3, r3, #31
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <USB_EPStartXfer+0x252>
 80050fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005100:	3b01      	subs	r3, #1
 8005102:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29a      	uxth	r2, r3
 800510c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005110:	b29b      	uxth	r3, r3
 8005112:	029b      	lsls	r3, r3, #10
 8005114:	b29b      	uxth	r3, r3
 8005116:	4313      	orrs	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005122:	b29a      	uxth	r2, r3
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	801a      	strh	r2, [r3, #0]
 8005128:	e050      	b.n	80051cc <USB_EPStartXfer+0x318>
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <USB_EPStartXfer+0x294>
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005140:	b29a      	uxth	r2, r3
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	e041      	b.n	80051cc <USB_EPStartXfer+0x318>
 8005148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <USB_EPStartXfer+0x2b4>
 800515e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005162:	3301      	adds	r3, #1
 8005164:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29a      	uxth	r2, r3
 800516e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005172:	b29b      	uxth	r3, r3
 8005174:	029b      	lsls	r3, r3, #10
 8005176:	b29b      	uxth	r3, r3
 8005178:	4313      	orrs	r3, r2
 800517a:	b29a      	uxth	r2, r3
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	801a      	strh	r2, [r3, #0]
 8005180:	e024      	b.n	80051cc <USB_EPStartXfer+0x318>
 8005182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	785b      	ldrb	r3, [r3, #1]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d11c      	bne.n	80051cc <USB_EPStartXfer+0x318>
 8005192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	4413      	add	r3, r2
 80051a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80051aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	011a      	lsls	r2, r3, #4
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	4413      	add	r3, r2
 80051bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	895b      	ldrh	r3, [r3, #10]
 80051d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6959      	ldr	r1, [r3, #20]
 80051e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80051f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80051f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	f001 fb49 	bl	8006892 <USB_WritePMA>
            ep->xfer_buff += len;
 8005200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695a      	ldr	r2, [r3, #20]
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005210:	441a      	add	r2, r3
 8005212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800521e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6a1a      	ldr	r2, [r3, #32]
 800522a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	429a      	cmp	r2, r3
 8005238:	d90f      	bls.n	800525a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800523a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	621a      	str	r2, [r3, #32]
 8005258:	e00e      	b.n	8005278 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800525a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800526a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2200      	movs	r2, #0
 8005276:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d177      	bne.n	8005378 <USB_EPStartXfer+0x4c4>
 8005288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	4413      	add	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	011a      	lsls	r2, r3, #4
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	4413      	add	r3, r2
 80052be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80052da:	d921      	bls.n	8005320 <USB_EPStartXfer+0x46c>
 80052dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <USB_EPStartXfer+0x448>
 80052f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f6:	3b01      	subs	r3, #1
 80052f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29a      	uxth	r2, r3
 8005302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005306:	b29b      	uxth	r3, r3
 8005308:	029b      	lsls	r3, r3, #10
 800530a:	b29b      	uxth	r3, r3
 800530c:	4313      	orrs	r3, r2
 800530e:	b29b      	uxth	r3, r3
 8005310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005318:	b29a      	uxth	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e056      	b.n	80053ce <USB_EPStartXfer+0x51a>
 8005320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <USB_EPStartXfer+0x48a>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005336:	b29a      	uxth	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	e047      	b.n	80053ce <USB_EPStartXfer+0x51a>
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <USB_EPStartXfer+0x4aa>
 8005354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005358:	3301      	adds	r3, #1
 800535a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29a      	uxth	r2, r3
 8005364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005368:	b29b      	uxth	r3, r3
 800536a:	029b      	lsls	r3, r3, #10
 800536c:	b29b      	uxth	r3, r3
 800536e:	4313      	orrs	r3, r2
 8005370:	b29a      	uxth	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	801a      	strh	r2, [r3, #0]
 8005376:	e02a      	b.n	80053ce <USB_EPStartXfer+0x51a>
 8005378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d122      	bne.n	80053ce <USB_EPStartXfer+0x51a>
 8005388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	623b      	str	r3, [r7, #32]
 8005394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	4413      	add	r3, r2
 80053aa:	623b      	str	r3, [r7, #32]
 80053ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	011a      	lsls	r2, r3, #4
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	4413      	add	r3, r2
 80053be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	891b      	ldrh	r3, [r3, #8]
 80053da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6959      	ldr	r1, [r3, #20]
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	f001 fa48 	bl	8006892 <USB_WritePMA>
 8005402:	e3ee      	b.n	8005be2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d177      	bne.n	8005504 <USB_EPStartXfer+0x650>
 8005414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005424:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800542e:	b29b      	uxth	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005434:	4413      	add	r3, r2
 8005436:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	011a      	lsls	r2, r3, #4
 8005446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005448:	4413      	add	r3, r2
 800544a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800544e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800545a:	b29a      	uxth	r2, r3
 800545c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005464:	2b3e      	cmp	r3, #62	@ 0x3e
 8005466:	d921      	bls.n	80054ac <USB_EPStartXfer+0x5f8>
 8005468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546c:	095b      	lsrs	r3, r3, #5
 800546e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	2b00      	cmp	r3, #0
 800547c:	d104      	bne.n	8005488 <USB_EPStartXfer+0x5d4>
 800547e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005482:	3b01      	subs	r3, #1
 8005484:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29a      	uxth	r2, r3
 800548e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005492:	b29b      	uxth	r3, r3
 8005494:	029b      	lsls	r3, r3, #10
 8005496:	b29b      	uxth	r3, r3
 8005498:	4313      	orrs	r3, r2
 800549a:	b29b      	uxth	r3, r3
 800549c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	e056      	b.n	800555a <USB_EPStartXfer+0x6a6>
 80054ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <USB_EPStartXfer+0x616>
 80054b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	e047      	b.n	800555a <USB_EPStartXfer+0x6a6>
 80054ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <USB_EPStartXfer+0x636>
 80054e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054e4:	3301      	adds	r3, #1
 80054e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	029b      	lsls	r3, r3, #10
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	4313      	orrs	r3, r2
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	e02a      	b.n	800555a <USB_EPStartXfer+0x6a6>
 8005504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d122      	bne.n	800555a <USB_EPStartXfer+0x6a6>
 8005514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800552e:	b29b      	uxth	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005534:	4413      	add	r3, r2
 8005536:	653b      	str	r3, [r7, #80]	@ 0x50
 8005538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	011a      	lsls	r2, r3, #4
 8005546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005548:	4413      	add	r3, r2
 800554a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800554e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005554:	b29a      	uxth	r2, r3
 8005556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005558:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800555a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	891b      	ldrh	r3, [r3, #8]
 8005566:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800556a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6959      	ldr	r1, [r3, #20]
 8005576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557a:	b29b      	uxth	r3, r3
 800557c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005580:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005584:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005588:	6800      	ldr	r0, [r0, #0]
 800558a:	f001 f982 	bl	8006892 <USB_WritePMA>
            ep->xfer_buff += len;
 800558e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559e:	441a      	add	r2, r3
 80055a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1a      	ldr	r2, [r3, #32]
 80055b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d90f      	bls.n	80055e8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80055c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d8:	1ad2      	subs	r2, r2, r3
 80055da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	621a      	str	r2, [r3, #32]
 80055e6:	e00e      	b.n	8005606 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80055e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80055f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	643b      	str	r3, [r7, #64]	@ 0x40
 8005612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d177      	bne.n	8005712 <USB_EPStartXfer+0x85e>
 8005622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800562e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800563c:	b29b      	uxth	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005642:	4413      	add	r3, r2
 8005644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800564a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	011a      	lsls	r2, r3, #4
 8005654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005656:	4413      	add	r3, r2
 8005658:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800565c:	637b      	str	r3, [r7, #52]	@ 0x34
 800565e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005668:	b29a      	uxth	r2, r3
 800566a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005672:	2b3e      	cmp	r3, #62	@ 0x3e
 8005674:	d921      	bls.n	80056ba <USB_EPStartXfer+0x806>
 8005676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <USB_EPStartXfer+0x7e2>
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005690:	3b01      	subs	r3, #1
 8005692:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29a      	uxth	r2, r3
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	029b      	lsls	r3, r3, #10
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b6:	801a      	strh	r2, [r3, #0]
 80056b8:	e050      	b.n	800575c <USB_EPStartXfer+0x8a8>
 80056ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <USB_EPStartXfer+0x824>
 80056c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	e041      	b.n	800575c <USB_EPStartXfer+0x8a8>
 80056d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <USB_EPStartXfer+0x844>
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f2:	3301      	adds	r3, #1
 80056f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005702:	b29b      	uxth	r3, r3
 8005704:	029b      	lsls	r3, r3, #10
 8005706:	b29b      	uxth	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b29a      	uxth	r2, r3
 800570c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e024      	b.n	800575c <USB_EPStartXfer+0x8a8>
 8005712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d11c      	bne.n	800575c <USB_EPStartXfer+0x8a8>
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005736:	4413      	add	r3, r2
 8005738:	643b      	str	r3, [r7, #64]	@ 0x40
 800573a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	011a      	lsls	r2, r3, #4
 8005748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800574a:	4413      	add	r3, r2
 800574c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005756:	b29a      	uxth	r2, r3
 8005758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	895b      	ldrh	r3, [r3, #10]
 8005768:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800576c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6959      	ldr	r1, [r3, #20]
 8005778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577c:	b29b      	uxth	r3, r3
 800577e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005782:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005786:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800578a:	6800      	ldr	r0, [r0, #0]
 800578c:	f001 f881 	bl	8006892 <USB_WritePMA>
 8005790:	e227      	b.n	8005be2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80057a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80057c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80057cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80057ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005802:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800580a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005818:	b29b      	uxth	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800581e:	4413      	add	r3, r2
 8005820:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	011a      	lsls	r2, r3, #4
 8005830:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005832:	4413      	add	r3, r2
 8005834:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005838:	65bb      	str	r3, [r7, #88]	@ 0x58
 800583a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583e:	b29a      	uxth	r2, r3
 8005840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005842:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	891b      	ldrh	r3, [r3, #8]
 8005850:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6959      	ldr	r1, [r3, #20]
 8005860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005864:	b29b      	uxth	r3, r3
 8005866:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800586a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800586e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005872:	6800      	ldr	r0, [r0, #0]
 8005874:	f001 f80d 	bl	8006892 <USB_WritePMA>
 8005878:	e1b3      	b.n	8005be2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800587a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80c6 	beq.w	8005a4c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80058cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d177      	bne.n	80059cc <USB_EPStartXfer+0xb18>
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058fc:	4413      	add	r3, r2
 80058fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	011a      	lsls	r2, r3, #4
 800590e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005910:	4413      	add	r3, r2
 8005912:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005916:	667b      	str	r3, [r7, #100]	@ 0x64
 8005918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005922:	b29a      	uxth	r2, r3
 8005924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800592c:	2b3e      	cmp	r3, #62	@ 0x3e
 800592e:	d921      	bls.n	8005974 <USB_EPStartXfer+0xac0>
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <USB_EPStartXfer+0xa9c>
 8005946:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800594a:	3b01      	subs	r3, #1
 800594c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29a      	uxth	r2, r3
 8005956:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800595a:	b29b      	uxth	r3, r3
 800595c:	029b      	lsls	r3, r3, #10
 800595e:	b29b      	uxth	r3, r3
 8005960:	4313      	orrs	r3, r2
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29a      	uxth	r2, r3
 800596e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e050      	b.n	8005a16 <USB_EPStartXfer+0xb62>
 8005974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <USB_EPStartXfer+0xade>
 800597c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598a:	b29a      	uxth	r2, r3
 800598c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800598e:	801a      	strh	r2, [r3, #0]
 8005990:	e041      	b.n	8005a16 <USB_EPStartXfer+0xb62>
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d004      	beq.n	80059b2 <USB_EPStartXfer+0xafe>
 80059a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80059ac:	3301      	adds	r3, #1
 80059ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80059bc:	b29b      	uxth	r3, r3
 80059be:	029b      	lsls	r3, r3, #10
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	4313      	orrs	r3, r2
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	e024      	b.n	8005a16 <USB_EPStartXfer+0xb62>
 80059cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d11c      	bne.n	8005a16 <USB_EPStartXfer+0xb62>
 80059dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059f0:	4413      	add	r3, r2
 80059f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	011a      	lsls	r2, r3, #4
 8005a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a04:	4413      	add	r3, r2
 8005a06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	895b      	ldrh	r3, [r3, #10]
 8005a22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6959      	ldr	r1, [r3, #20]
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a3c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a40:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a44:	6800      	ldr	r0, [r0, #0]
 8005a46:	f000 ff24 	bl	8006892 <USB_WritePMA>
 8005a4a:	e0ca      	b.n	8005be2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d177      	bne.n	8005b4c <USB_EPStartXfer+0xc98>
 8005a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a7c:	4413      	add	r3, r2
 8005a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	011a      	lsls	r2, r3, #4
 8005a8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a90:	4413      	add	r3, r2
 8005a92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aac:	2b3e      	cmp	r3, #62	@ 0x3e
 8005aae:	d921      	bls.n	8005af4 <USB_EPStartXfer+0xc40>
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d104      	bne.n	8005ad0 <USB_EPStartXfer+0xc1c>
 8005ac6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005aca:	3b01      	subs	r3, #1
 8005acc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005af0:	801a      	strh	r2, [r3, #0]
 8005af2:	e05c      	b.n	8005bae <USB_EPStartXfer+0xcfa>
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <USB_EPStartXfer+0xc5e>
 8005afc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	e04d      	b.n	8005bae <USB_EPStartXfer+0xcfa>
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <USB_EPStartXfer+0xc7e>
 8005b28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	029b      	lsls	r3, r3, #10
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	4313      	orrs	r3, r2
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e030      	b.n	8005bae <USB_EPStartXfer+0xcfa>
 8005b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d128      	bne.n	8005bae <USB_EPStartXfer+0xcfa>
 8005b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b80:	4413      	add	r3, r2
 8005b82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	011a      	lsls	r2, r3, #4
 8005b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b98:	4413      	add	r3, r2
 8005b9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	891b      	ldrh	r3, [r3, #8]
 8005bba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6959      	ldr	r1, [r3, #20]
 8005bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bd4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bd8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bdc:	6800      	ldr	r0, [r0, #0]
 8005bde:	f000 fe58 	bl	8006892 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c08:	817b      	strh	r3, [r7, #10]
 8005c0a:	897b      	ldrh	r3, [r7, #10]
 8005c0c:	f083 0310 	eor.w	r3, r3, #16
 8005c10:	817b      	strh	r3, [r7, #10]
 8005c12:	897b      	ldrh	r3, [r7, #10]
 8005c14:	f083 0320 	eor.w	r3, r3, #32
 8005c18:	817b      	strh	r3, [r7, #10]
 8005c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	441a      	add	r2, r3
 8005c34:	897b      	ldrh	r3, [r7, #10]
 8005c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	8013      	strh	r3, [r2, #0]
 8005c4a:	f000 bcde 	b.w	800660a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	7b1b      	ldrb	r3, [r3, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f040 80bb 	bne.w	8005dd6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699a      	ldr	r2, [r3, #24]
 8005c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d917      	bls.n	8005cac <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699a      	ldr	r2, [r3, #24]
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9c:	1ad2      	subs	r2, r2, r3
 8005c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	619a      	str	r2, [r3, #24]
 8005caa:	e00e      	b.n	8005cca <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005cee:	4413      	add	r3, r2
 8005cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	011a      	lsls	r2, r3, #4
 8005d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d06:	4413      	add	r3, r2
 8005d08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d22:	801a      	strh	r2, [r3, #0]
 8005d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d28:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d2a:	d924      	bls.n	8005d76 <USB_EPStartXfer+0xec2>
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <USB_EPStartXfer+0xe98>
 8005d42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d46:	3b01      	subs	r3, #1
 8005d48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	029b      	lsls	r3, r3, #10
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	f000 bc10 	b.w	8006596 <USB_EPStartXfer+0x16e2>
 8005d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10c      	bne.n	8005d98 <USB_EPStartXfer+0xee4>
 8005d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	e3fe      	b.n	8006596 <USB_EPStartXfer+0x16e2>
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <USB_EPStartXfer+0xf04>
 8005dae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005db2:	3301      	adds	r3, #1
 8005db4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	029b      	lsls	r3, r3, #10
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e3df      	b.n	8006596 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	78db      	ldrb	r3, [r3, #3]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	f040 8218 	bne.w	8006218 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 809d 	bne.w	8005f34 <USB_EPStartXfer+0x1080>
 8005dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e1e:	4413      	add	r3, r2
 8005e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	011a      	lsls	r2, r3, #4
 8005e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e36:	4413      	add	r3, r2
 8005e38:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e62:	d92b      	bls.n	8005ebc <USB_EPStartXfer+0x1008>
 8005e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <USB_EPStartXfer+0xfe0>
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	029b      	lsls	r3, r3, #10
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	e070      	b.n	8005f9e <USB_EPStartXfer+0x10ea>
 8005ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10c      	bne.n	8005ee6 <USB_EPStartXfer+0x1032>
 8005ecc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e05b      	b.n	8005f9e <USB_EPStartXfer+0x10ea>
 8005ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <USB_EPStartXfer+0x1062>
 8005f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f10:	3301      	adds	r3, #1
 8005f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	029b      	lsls	r3, r3, #10
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	e034      	b.n	8005f9e <USB_EPStartXfer+0x10ea>
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d12c      	bne.n	8005f9e <USB_EPStartXfer+0x10ea>
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f68:	4413      	add	r3, r2
 8005f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	011a      	lsls	r2, r3, #4
 8005f7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f80:	4413      	add	r3, r2
 8005f82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f040 809d 	bne.w	80060f8 <USB_EPStartXfer+0x1244>
 8005fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	011a      	lsls	r2, r3, #4
 8005ff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006010:	b29a      	uxth	r2, r3
 8006012:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b3e      	cmp	r3, #62	@ 0x3e
 8006026:	d92b      	bls.n	8006080 <USB_EPStartXfer+0x11cc>
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <USB_EPStartXfer+0x11a4>
 800604e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006052:	3b01      	subs	r3, #1
 8006054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006058:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29a      	uxth	r2, r3
 8006060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006064:	b29b      	uxth	r3, r3
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	b29b      	uxth	r3, r3
 800606a:	4313      	orrs	r3, r2
 800606c:	b29b      	uxth	r3, r3
 800606e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006076:	b29a      	uxth	r2, r3
 8006078:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e069      	b.n	8006154 <USB_EPStartXfer+0x12a0>
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10c      	bne.n	80060aa <USB_EPStartXfer+0x11f6>
 8006090:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	e054      	b.n	8006154 <USB_EPStartXfer+0x12a0>
 80060aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	085b      	lsrs	r3, r3, #1
 80060b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <USB_EPStartXfer+0x1226>
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060d4:	3301      	adds	r3, #1
 80060d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	029b      	lsls	r3, r3, #10
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	4313      	orrs	r3, r2
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e02d      	b.n	8006154 <USB_EPStartXfer+0x12a0>
 80060f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d125      	bne.n	8006154 <USB_EPStartXfer+0x12a0>
 8006108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800611e:	4413      	add	r3, r2
 8006120:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	011a      	lsls	r2, r3, #4
 8006132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006136:	4413      	add	r3, r2
 8006138:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800613c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	b29a      	uxth	r2, r3
 800614e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006152:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8218 	beq.w	8006596 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006186:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800618a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <USB_EPStartXfer+0x12ea>
 8006192:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10d      	bne.n	80061ba <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800619e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 81f5 	bne.w	8006596 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f040 81ee 	bne.w	8006596 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80061ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800620a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006212:	b29b      	uxth	r3, r3
 8006214:	8013      	strh	r3, [r2, #0]
 8006216:	e1be      	b.n	8006596 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	2b01      	cmp	r3, #1
 8006226:	f040 81b4 	bne.w	8006592 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800622a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	429a      	cmp	r2, r3
 8006244:	d917      	bls.n	8006276 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	619a      	str	r2, [r3, #24]
 8006274:	e00e      	b.n	8006294 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2200      	movs	r2, #0
 8006292:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f040 8085 	bne.w	80063b0 <USB_EPStartXfer+0x14fc>
 80062a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062ca:	4413      	add	r3, r2
 80062cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	011a      	lsls	r2, r3, #4
 80062de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062e2:	4413      	add	r3, r2
 80062e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006304:	2b3e      	cmp	r3, #62	@ 0x3e
 8006306:	d923      	bls.n	8006350 <USB_EPStartXfer+0x149c>
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2b00      	cmp	r3, #0
 800631c:	d104      	bne.n	8006328 <USB_EPStartXfer+0x1474>
 800631e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006322:	3b01      	subs	r3, #1
 8006324:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29a      	uxth	r2, r3
 8006330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006334:	b29b      	uxth	r3, r3
 8006336:	029b      	lsls	r3, r3, #10
 8006338:	b29b      	uxth	r3, r3
 800633a:	4313      	orrs	r3, r2
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006346:	b29a      	uxth	r2, r3
 8006348:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	e060      	b.n	8006412 <USB_EPStartXfer+0x155e>
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10c      	bne.n	8006372 <USB_EPStartXfer+0x14be>
 8006358:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006368:	b29a      	uxth	r2, r3
 800636a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e04f      	b.n	8006412 <USB_EPStartXfer+0x155e>
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	085b      	lsrs	r3, r3, #1
 8006378:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <USB_EPStartXfer+0x14de>
 8006388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800638c:	3301      	adds	r3, #1
 800638e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29a      	uxth	r2, r3
 800639a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800639e:	b29b      	uxth	r3, r3
 80063a0:	029b      	lsls	r3, r3, #10
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	4313      	orrs	r3, r2
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	e030      	b.n	8006412 <USB_EPStartXfer+0x155e>
 80063b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d128      	bne.n	8006412 <USB_EPStartXfer+0x155e>
 80063c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063dc:	b29b      	uxth	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063e4:	4413      	add	r3, r2
 80063e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	011a      	lsls	r2, r3, #4
 80063f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063fc:	4413      	add	r3, r2
 80063fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006402:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640a:	b29a      	uxth	r2, r3
 800640c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	785b      	ldrb	r3, [r3, #1]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f040 8085 	bne.w	800653c <USB_EPStartXfer+0x1688>
 8006432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800644e:	b29b      	uxth	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006456:	4413      	add	r3, r2
 8006458:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800645c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	011a      	lsls	r2, r3, #4
 800646a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800646e:	4413      	add	r3, r2
 8006470:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006484:	b29a      	uxth	r2, r3
 8006486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006490:	2b3e      	cmp	r3, #62	@ 0x3e
 8006492:	d923      	bls.n	80064dc <USB_EPStartXfer+0x1628>
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <USB_EPStartXfer+0x1600>
 80064aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064ae:	3b01      	subs	r3, #1
 80064b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	029b      	lsls	r3, r3, #10
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	4313      	orrs	r3, r2
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	e05c      	b.n	8006596 <USB_EPStartXfer+0x16e2>
 80064dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10c      	bne.n	80064fe <USB_EPStartXfer+0x164a>
 80064e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064fa:	801a      	strh	r2, [r3, #0]
 80064fc:	e04b      	b.n	8006596 <USB_EPStartXfer+0x16e2>
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <USB_EPStartXfer+0x166a>
 8006514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006518:	3301      	adds	r3, #1
 800651a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800651e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29a      	uxth	r2, r3
 8006526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800652a:	b29b      	uxth	r3, r3
 800652c:	029b      	lsls	r3, r3, #10
 800652e:	b29b      	uxth	r3, r3
 8006530:	4313      	orrs	r3, r2
 8006532:	b29a      	uxth	r2, r3
 8006534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006538:	801a      	strh	r2, [r3, #0]
 800653a:	e02c      	b.n	8006596 <USB_EPStartXfer+0x16e2>
 800653c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d124      	bne.n	8006596 <USB_EPStartXfer+0x16e2>
 800654c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006562:	4413      	add	r3, r2
 8006564:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	011a      	lsls	r2, r3, #4
 8006576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800657a:	4413      	add	r3, r2
 800657c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006580:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	e001      	b.n	8006596 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e03a      	b.n	800660c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	441a      	add	r2, r3
 80065f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006606:	b29b      	uxth	r3, r3
 8006608:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d020      	beq.n	800666a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800663e:	81bb      	strh	r3, [r7, #12]
 8006640:	89bb      	ldrh	r3, [r7, #12]
 8006642:	f083 0310 	eor.w	r3, r3, #16
 8006646:	81bb      	strh	r3, [r7, #12]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	441a      	add	r2, r3
 8006652:	89bb      	ldrh	r3, [r7, #12]
 8006654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800665c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006664:	b29b      	uxth	r3, r3
 8006666:	8013      	strh	r3, [r2, #0]
 8006668:	e01f      	b.n	80066aa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800667c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006680:	81fb      	strh	r3, [r7, #14]
 8006682:	89fb      	ldrh	r3, [r7, #14]
 8006684:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006688:	81fb      	strh	r3, [r7, #14]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	89fb      	ldrh	r3, [r7, #14]
 8006696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800669a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800669e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr

080066b6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b087      	sub	sp, #28
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	7b1b      	ldrb	r3, [r3, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f040 809d 	bne.w	8006804 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d04c      	beq.n	800676c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	823b      	strh	r3, [r7, #16]
 80066e0:	8a3b      	ldrh	r3, [r7, #16]
 80066e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01b      	beq.n	8006722 <USB_EPClearStall+0x6c>
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006700:	81fb      	strh	r3, [r7, #14]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	441a      	add	r2, r3
 800670c:	89fb      	ldrh	r3, [r7, #14]
 800670e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800671a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800671e:	b29b      	uxth	r3, r3
 8006720:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	78db      	ldrb	r3, [r3, #3]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d06c      	beq.n	8006804 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800673c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006740:	81bb      	strh	r3, [r7, #12]
 8006742:	89bb      	ldrh	r3, [r7, #12]
 8006744:	f083 0320 	eor.w	r3, r3, #32
 8006748:	81bb      	strh	r3, [r7, #12]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	89bb      	ldrh	r3, [r7, #12]
 8006756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800675a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800675e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006766:	b29b      	uxth	r3, r3
 8006768:	8013      	strh	r3, [r2, #0]
 800676a:	e04b      	b.n	8006804 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	82fb      	strh	r3, [r7, #22]
 800677a:	8afb      	ldrh	r3, [r7, #22]
 800677c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01b      	beq.n	80067bc <USB_EPClearStall+0x106>
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800679a:	82bb      	strh	r3, [r7, #20]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	441a      	add	r2, r3
 80067a6:	8abb      	ldrh	r3, [r7, #20]
 80067a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d2:	827b      	strh	r3, [r7, #18]
 80067d4:	8a7b      	ldrh	r3, [r7, #18]
 80067d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067da:	827b      	strh	r3, [r7, #18]
 80067dc:	8a7b      	ldrh	r3, [r7, #18]
 80067de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067e2:	827b      	strh	r3, [r7, #18]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	8a7b      	ldrh	r3, [r7, #18]
 80067f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006800:	b29b      	uxth	r3, r3
 8006802:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr

08006810 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d103      	bne.n	800682a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2280      	movs	r2, #128	@ 0x80
 8006826:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr

0800684a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr

0800685e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800686c:	b29b      	uxth	r3, r3
 800686e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006870:	68fb      	ldr	r3, [r7, #12]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr

08006892 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006892:	b480      	push	{r7}
 8006894:	b08b      	sub	sp, #44	@ 0x2c
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	4611      	mov	r1, r2
 800689e:	461a      	mov	r2, r3
 80068a0:	460b      	mov	r3, r1
 80068a2:	80fb      	strh	r3, [r7, #6]
 80068a4:	4613      	mov	r3, r2
 80068a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068a8:	88bb      	ldrh	r3, [r7, #4]
 80068aa:	3301      	adds	r3, #1
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068b8:	88fb      	ldrh	r3, [r7, #6]
 80068ba:	005a      	lsls	r2, r3, #1
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ca:	e01f      	b.n	800690c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	3301      	adds	r3, #1
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	b21b      	sxth	r3, r3
 80068da:	021b      	lsls	r3, r3, #8
 80068dc:	b21a      	sxth	r2, r3
 80068de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b21b      	sxth	r3, r3
 80068e6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	8a7a      	ldrh	r2, [r7, #18]
 80068ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	3302      	adds	r3, #2
 80068f2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	3302      	adds	r3, #2
 80068f8:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	3301      	adds	r3, #1
 80068fe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	3301      	adds	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	3b01      	subs	r3, #1
 800690a:	627b      	str	r3, [r7, #36]	@ 0x24
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1dc      	bne.n	80068cc <USB_WritePMA+0x3a>
  }
}
 8006912:	bf00      	nop
 8006914:	bf00      	nop
 8006916:	372c      	adds	r7, #44	@ 0x2c
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr

0800691e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800691e:	b480      	push	{r7}
 8006920:	b08b      	sub	sp, #44	@ 0x2c
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	4611      	mov	r1, r2
 800692a:	461a      	mov	r2, r3
 800692c:	460b      	mov	r3, r1
 800692e:	80fb      	strh	r3, [r7, #6]
 8006930:	4613      	mov	r3, r2
 8006932:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006934:	88bb      	ldrh	r3, [r7, #4]
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	b29b      	uxth	r3, r3
 800693a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	005a      	lsls	r2, r3, #1
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006950:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	627b      	str	r3, [r7, #36]	@ 0x24
 8006956:	e01b      	b.n	8006990 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	3302      	adds	r3, #2
 8006964:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	b2da      	uxtb	r2, r3
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	3301      	adds	r3, #1
 8006972:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	0a1b      	lsrs	r3, r3, #8
 8006978:	b2da      	uxtb	r2, r3
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3301      	adds	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	3302      	adds	r3, #2
 8006988:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	3b01      	subs	r3, #1
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e0      	bne.n	8006958 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006996:	88bb      	ldrh	r3, [r7, #4]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	701a      	strb	r2, [r3, #0]
  }
}
 80069b2:	bf00      	nop
 80069b4:	372c      	adds	r7, #44	@ 0x2c
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7c1b      	ldrb	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d115      	bne.n	8006a00 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069d8:	2202      	movs	r2, #2
 80069da:	2181      	movs	r1, #129	@ 0x81
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fe2c 	bl	800863a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069ec:	2202      	movs	r2, #2
 80069ee:	2101      	movs	r1, #1
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fe22 	bl	800863a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80069fe:	e012      	b.n	8006a26 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a00:	2340      	movs	r3, #64	@ 0x40
 8006a02:	2202      	movs	r2, #2
 8006a04:	2181      	movs	r1, #129	@ 0x81
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 fe17 	bl	800863a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a12:	2340      	movs	r3, #64	@ 0x40
 8006a14:	2202      	movs	r2, #2
 8006a16:	2101      	movs	r1, #1
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fe0e 	bl	800863a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a26:	2308      	movs	r3, #8
 8006a28:	2203      	movs	r2, #3
 8006a2a:	2182      	movs	r1, #130	@ 0x82
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fe04 	bl	800863a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006a3c:	f001 ff24 	bl	8008888 <USBD_static_malloc>
 8006a40:	4602      	mov	r2, r0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006a52:	2301      	movs	r3, #1
 8006a54:	73fb      	strb	r3, [r7, #15]
 8006a56:	e026      	b.n	8006aa6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a5e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7c1b      	ldrb	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d109      	bne.n	8006a96 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fec3 	bl	800881a <USBD_LL_PrepareReceive>
 8006a94:	e007      	b.n	8006aa6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a9c:	2340      	movs	r3, #64	@ 0x40
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 feba 	bl	800881a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ac0:	2181      	movs	r1, #129	@ 0x81
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fddf 	bl	8008686 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ace:	2101      	movs	r1, #1
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 fdd8 	bl	8008686 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ade:	2182      	movs	r1, #130	@ 0x82
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 fdd0 	bl	8008686 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 feca 	bl	80088a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b086      	sub	sp, #24
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b2e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d039      	beq.n	8006bbc <USBD_CDC_Setup+0x9e>
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d17f      	bne.n	8006c4c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	88db      	ldrh	r3, [r3, #6]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d029      	beq.n	8006ba8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	b25b      	sxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	da11      	bge.n	8006b82 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006b6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	88d2      	ldrh	r2, [r2, #6]
 8006b70:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b72:	6939      	ldr	r1, [r7, #16]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	88db      	ldrh	r3, [r3, #6]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 f9d6 	bl	8007f2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006b80:	e06b      	b.n	8006c5a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	785a      	ldrb	r2, [r3, #1]
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	88db      	ldrh	r3, [r3, #6]
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b98:	6939      	ldr	r1, [r7, #16]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	88db      	ldrh	r3, [r3, #6]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f9f1 	bl	8007f88 <USBD_CtlPrepareRx>
      break;
 8006ba6:	e058      	b.n	8006c5a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	7850      	ldrb	r0, [r2, #1]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	4798      	blx	r3
      break;
 8006bba:	e04e      	b.n	8006c5a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b0b      	cmp	r3, #11
 8006bc2:	d02e      	beq.n	8006c22 <USBD_CDC_Setup+0x104>
 8006bc4:	2b0b      	cmp	r3, #11
 8006bc6:	dc38      	bgt.n	8006c3a <USBD_CDC_Setup+0x11c>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <USBD_CDC_Setup+0xb4>
 8006bcc:	2b0a      	cmp	r3, #10
 8006bce:	d014      	beq.n	8006bfa <USBD_CDC_Setup+0xdc>
 8006bd0:	e033      	b.n	8006c3a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d107      	bne.n	8006bec <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006bdc:	f107 030c 	add.w	r3, r7, #12
 8006be0:	2202      	movs	r2, #2
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 f9a1 	bl	8007f2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bea:	e02e      	b.n	8006c4a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 f932 	bl	8007e58 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	75fb      	strb	r3, [r7, #23]
          break;
 8006bf8:	e027      	b.n	8006c4a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d107      	bne.n	8006c14 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c04:	f107 030f 	add.w	r3, r7, #15
 8006c08:	2201      	movs	r2, #1
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f98d 	bl	8007f2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c12:	e01a      	b.n	8006c4a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 f91e 	bl	8007e58 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	75fb      	strb	r3, [r7, #23]
          break;
 8006c20:	e013      	b.n	8006c4a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d00d      	beq.n	8006c48 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 f912 	bl	8007e58 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c34:	2302      	movs	r3, #2
 8006c36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c38:	e006      	b.n	8006c48 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 f90b 	bl	8007e58 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c42:	2302      	movs	r3, #2
 8006c44:	75fb      	strb	r3, [r7, #23]
          break;
 8006c46:	e000      	b.n	8006c4a <USBD_CDC_Setup+0x12c>
          break;
 8006c48:	bf00      	nop
      }
      break;
 8006c4a:	e006      	b.n	8006c5a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f902 	bl	8007e58 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c54:	2302      	movs	r3, #2
 8006c56:	75fb      	strb	r3, [r7, #23]
      break;
 8006c58:	bf00      	nop
  }

  return ret;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c76:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c7e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d03a      	beq.n	8006d00 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	331c      	adds	r3, #28
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d029      	beq.n	8006cf4 <USBD_CDC_DataIn+0x90>
 8006ca0:	78fa      	ldrb	r2, [r7, #3]
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	331c      	adds	r3, #28
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	78f9      	ldrb	r1, [r7, #3]
 8006cb4:	68b8      	ldr	r0, [r7, #8]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	4403      	add	r3, r0
 8006cc0:	3320      	adds	r3, #32
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d110      	bne.n	8006cf4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006cd2:	78fa      	ldrb	r2, [r7, #3]
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	331c      	adds	r3, #28
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ce6:	78f9      	ldrb	r1, [r7, #3]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2200      	movs	r2, #0
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fd71 	bl	80087d4 <USBD_LL_Transmit>
 8006cf2:	e003      	b.n	8006cfc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e000      	b.n	8006d02 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d00:	2302      	movs	r3, #2
  }
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 fd9c 	bl	8008860 <USBD_LL_GetRxDataSize>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00d      	beq.n	8006d56 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006d4e:	4611      	mov	r1, r2
 8006d50:	4798      	blx	r3

    return USBD_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e000      	b.n	8006d58 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006d56:	2302      	movs	r3, #2
  }
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d6e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d014      	beq.n	8006da4 <USBD_CDC_EP0_RxReady+0x44>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006d80:	2bff      	cmp	r3, #255	@ 0xff
 8006d82:	d00f      	beq.n	8006da4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006d92:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	22ff      	movs	r2, #255	@ 0xff
 8006da0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2243      	movs	r2, #67	@ 0x43
 8006dbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006dbe:	4b03      	ldr	r3, [pc, #12]	@ (8006dcc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20000094 	.word	0x20000094

08006dd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2243      	movs	r2, #67	@ 0x43
 8006ddc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006dde:	4b03      	ldr	r3, [pc, #12]	@ (8006dec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20000050 	.word	0x20000050

08006df0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2243      	movs	r2, #67	@ 0x43
 8006dfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006dfe:	4b03      	ldr	r3, [pc, #12]	@ (8006e0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bc80      	pop	{r7}
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	200000d8 	.word	0x200000d8

08006e10 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	220a      	movs	r2, #10
 8006e1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006e1e:	4b03      	ldr	r3, [pc, #12]	@ (8006e2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	2000000c 	.word	0x2000000c

08006e30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	4613      	mov	r3, r2
 8006e68:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e70:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006e7a:	88fa      	ldrh	r2, [r7, #6]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e9e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d017      	beq.n	8006efe <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	7c1b      	ldrb	r3, [r3, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 fc99 	bl	800881a <USBD_LL_PrepareReceive>
 8006ee8:	e007      	b.n	8006efa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ef0:	2340      	movs	r3, #64	@ 0x40
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fc90 	bl	800881a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e000      	b.n	8006f00 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006efe:	2302      	movs	r3, #2
  }
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e01a      	b.n	8006f56 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	79fa      	ldrb	r2, [r7, #7]
 8006f4c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f001 fafe 	bl	8008550 <USBD_LL_Init>

  return USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b085      	sub	sp, #20
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d006      	beq.n	8006f80 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]
 8006f7e:	e001      	b.n	8006f84 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006f80:	2302      	movs	r3, #2
 8006f82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bc80      	pop	{r7}
 8006f8e:	4770      	bx	lr

08006f90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 fb33 	bl	8008604 <USBD_LL_Start>

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr

08006fbc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00c      	beq.n	8006ff0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	78fa      	ldrb	r2, [r7, #3]
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	4611      	mov	r1, r2
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	4798      	blx	r3

  return USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fed7 	bl	8007de6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007046:	461a      	mov	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	2b02      	cmp	r3, #2
 800705a:	d016      	beq.n	800708a <USBD_LL_SetupStage+0x6a>
 800705c:	2b02      	cmp	r3, #2
 800705e:	d81c      	bhi.n	800709a <USBD_LL_SetupStage+0x7a>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <USBD_LL_SetupStage+0x4a>
 8007064:	2b01      	cmp	r3, #1
 8007066:	d008      	beq.n	800707a <USBD_LL_SetupStage+0x5a>
 8007068:	e017      	b.n	800709a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9ca 	bl	800740c <USBD_StdDevReq>
      break;
 8007078:	e01a      	b.n	80070b0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa2c 	bl	80074e0 <USBD_StdItfReq>
      break;
 8007088:	e012      	b.n	80070b0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa6c 	bl	8007570 <USBD_StdEPReq>
      break;
 8007098:	e00a      	b.n	80070b0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80070a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fb0b 	bl	80086c4 <USBD_LL_StallEP>
      break;
 80070ae:	bf00      	nop
  }

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b086      	sub	sp, #24
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	460b      	mov	r3, r1
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070c8:	7afb      	ldrb	r3, [r7, #11]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d14b      	bne.n	8007166 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80070d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d134      	bne.n	800714a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d919      	bls.n	8007120 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	1ad2      	subs	r2, r2, r3
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007102:	429a      	cmp	r2, r3
 8007104:	d203      	bcs.n	800710e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800710a:	b29b      	uxth	r3, r3
 800710c:	e002      	b.n	8007114 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007112:	b29b      	uxth	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 ff53 	bl	8007fc4 <USBD_CtlContinueRx>
 800711e:	e038      	b.n	8007192 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007132:	2b03      	cmp	r3, #3
 8007134:	d105      	bne.n	8007142 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 ff50 	bl	8007fe8 <USBD_CtlSendStatus>
 8007148:	e023      	b.n	8007192 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007150:	2b05      	cmp	r3, #5
 8007152:	d11e      	bne.n	8007192 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800715c:	2100      	movs	r1, #0
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f001 fab0 	bl	80086c4 <USBD_LL_StallEP>
 8007164:	e015      	b.n	8007192 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007178:	2b03      	cmp	r3, #3
 800717a:	d108      	bne.n	800718e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	7afa      	ldrb	r2, [r7, #11]
 8007186:	4611      	mov	r1, r2
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	4798      	blx	r3
 800718c:	e001      	b.n	8007192 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800718e:	2302      	movs	r3, #2
 8007190:	e000      	b.n	8007194 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	460b      	mov	r3, r1
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80071aa:	7afb      	ldrb	r3, [r7, #11]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d17f      	bne.n	80072b0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3314      	adds	r3, #20
 80071b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d15c      	bne.n	800727a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d915      	bls.n	80071f8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	1ad2      	subs	r2, r2, r3
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 febd 	bl	8007f64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071ea:	2300      	movs	r3, #0
 80071ec:	2200      	movs	r2, #0
 80071ee:	2100      	movs	r1, #0
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f001 fb12 	bl	800881a <USBD_LL_PrepareReceive>
 80071f6:	e04e      	b.n	8007296 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	6912      	ldr	r2, [r2, #16]
 8007200:	fbb3 f1f2 	udiv	r1, r3, r2
 8007204:	fb01 f202 	mul.w	r2, r1, r2
 8007208:	1a9b      	subs	r3, r3, r2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d11c      	bne.n	8007248 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007216:	429a      	cmp	r2, r3
 8007218:	d316      	bcc.n	8007248 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007224:	429a      	cmp	r2, r3
 8007226:	d20f      	bcs.n	8007248 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007228:	2200      	movs	r2, #0
 800722a:	2100      	movs	r1, #0
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fe99 	bl	8007f64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800723a:	2300      	movs	r3, #0
 800723c:	2200      	movs	r2, #0
 800723e:	2100      	movs	r1, #0
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f001 faea 	bl	800881a <USBD_LL_PrepareReceive>
 8007246:	e026      	b.n	8007296 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800725a:	2b03      	cmp	r3, #3
 800725c:	d105      	bne.n	800726a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800726a:	2180      	movs	r1, #128	@ 0x80
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f001 fa29 	bl	80086c4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 fecb 	bl	800800e <USBD_CtlReceiveStatus>
 8007278:	e00d      	b.n	8007296 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007280:	2b04      	cmp	r3, #4
 8007282:	d004      	beq.n	800728e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800728a:	2b00      	cmp	r3, #0
 800728c:	d103      	bne.n	8007296 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800728e:	2180      	movs	r1, #128	@ 0x80
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f001 fa17 	bl	80086c4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800729c:	2b01      	cmp	r3, #1
 800729e:	d11d      	bne.n	80072dc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7ff fe81 	bl	8006fa8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80072ae:	e015      	b.n	80072dc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00d      	beq.n	80072d8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d108      	bne.n	80072d8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	7afa      	ldrb	r2, [r7, #11]
 80072d0:	4611      	mov	r1, r2
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	4798      	blx	r3
 80072d6:	e001      	b.n	80072dc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072d8:	2302      	movs	r3, #2
 80072da:	e000      	b.n	80072de <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072ee:	2340      	movs	r3, #64	@ 0x40
 80072f0:	2200      	movs	r2, #0
 80072f2:	2100      	movs	r1, #0
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 f9a0 	bl	800863a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2240      	movs	r2, #64	@ 0x40
 8007306:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800730a:	2340      	movs	r3, #64	@ 0x40
 800730c:	2200      	movs	r2, #0
 800730e:	2180      	movs	r1, #128	@ 0x80
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 f992 	bl	800863a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2240      	movs	r2, #64	@ 0x40
 8007320:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6852      	ldr	r2, [r2, #4]
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	4611      	mov	r1, r2
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
  }

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	78fa      	ldrb	r2, [r7, #3]
 8007378:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	bc80      	pop	{r7}
 8007384:	4770      	bx	lr

08007386 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2204      	movs	r2, #4
 800739e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr

080073ae <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073bc:	2b04      	cmp	r3, #4
 80073be:	d105      	bne.n	80073cc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d10b      	bne.n	8007402 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007422:	2b40      	cmp	r3, #64	@ 0x40
 8007424:	d005      	beq.n	8007432 <USBD_StdDevReq+0x26>
 8007426:	2b40      	cmp	r3, #64	@ 0x40
 8007428:	d84f      	bhi.n	80074ca <USBD_StdDevReq+0xbe>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d009      	beq.n	8007442 <USBD_StdDevReq+0x36>
 800742e:	2b20      	cmp	r3, #32
 8007430:	d14b      	bne.n	80074ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	4798      	blx	r3
      break;
 8007440:	e048      	b.n	80074d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	2b09      	cmp	r3, #9
 8007448:	d839      	bhi.n	80074be <USBD_StdDevReq+0xb2>
 800744a:	a201      	add	r2, pc, #4	@ (adr r2, 8007450 <USBD_StdDevReq+0x44>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	080074a1 	.word	0x080074a1
 8007454:	080074b5 	.word	0x080074b5
 8007458:	080074bf 	.word	0x080074bf
 800745c:	080074ab 	.word	0x080074ab
 8007460:	080074bf 	.word	0x080074bf
 8007464:	08007483 	.word	0x08007483
 8007468:	08007479 	.word	0x08007479
 800746c:	080074bf 	.word	0x080074bf
 8007470:	08007497 	.word	0x08007497
 8007474:	0800748d 	.word	0x0800748d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9dc 	bl	8007838 <USBD_GetDescriptor>
          break;
 8007480:	e022      	b.n	80074c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fb3f 	bl	8007b08 <USBD_SetAddress>
          break;
 800748a:	e01d      	b.n	80074c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fb7e 	bl	8007b90 <USBD_SetConfig>
          break;
 8007494:	e018      	b.n	80074c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fc07 	bl	8007cac <USBD_GetConfig>
          break;
 800749e:	e013      	b.n	80074c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fc37 	bl	8007d16 <USBD_GetStatus>
          break;
 80074a8:	e00e      	b.n	80074c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fc65 	bl	8007d7c <USBD_SetFeature>
          break;
 80074b2:	e009      	b.n	80074c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fc74 	bl	8007da4 <USBD_ClrFeature>
          break;
 80074bc:	e004      	b.n	80074c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fcc9 	bl	8007e58 <USBD_CtlError>
          break;
 80074c6:	bf00      	nop
      }
      break;
 80074c8:	e004      	b.n	80074d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fcc3 	bl	8007e58 <USBD_CtlError>
      break;
 80074d2:	bf00      	nop
  }

  return ret;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop

080074e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074f6:	2b40      	cmp	r3, #64	@ 0x40
 80074f8:	d005      	beq.n	8007506 <USBD_StdItfReq+0x26>
 80074fa:	2b40      	cmp	r3, #64	@ 0x40
 80074fc:	d82e      	bhi.n	800755c <USBD_StdItfReq+0x7c>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <USBD_StdItfReq+0x26>
 8007502:	2b20      	cmp	r3, #32
 8007504:	d12a      	bne.n	800755c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800750c:	3b01      	subs	r3, #1
 800750e:	2b02      	cmp	r3, #2
 8007510:	d81d      	bhi.n	800754e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	889b      	ldrh	r3, [r3, #4]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b01      	cmp	r3, #1
 800751a:	d813      	bhi.n	8007544 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	88db      	ldrh	r3, [r3, #6]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d110      	bne.n	8007558 <USBD_StdItfReq+0x78>
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10d      	bne.n	8007558 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fd53 	bl	8007fe8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007542:	e009      	b.n	8007558 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fc86 	bl	8007e58 <USBD_CtlError>
          break;
 800754c:	e004      	b.n	8007558 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc81 	bl	8007e58 <USBD_CtlError>
          break;
 8007556:	e000      	b.n	800755a <USBD_StdItfReq+0x7a>
          break;
 8007558:	bf00      	nop
      }
      break;
 800755a:	e004      	b.n	8007566 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fc7a 	bl	8007e58 <USBD_CtlError>
      break;
 8007564:	bf00      	nop
  }

  return USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	889b      	ldrh	r3, [r3, #4]
 8007582:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800758c:	2b40      	cmp	r3, #64	@ 0x40
 800758e:	d007      	beq.n	80075a0 <USBD_StdEPReq+0x30>
 8007590:	2b40      	cmp	r3, #64	@ 0x40
 8007592:	f200 8146 	bhi.w	8007822 <USBD_StdEPReq+0x2b2>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <USBD_StdEPReq+0x40>
 800759a:	2b20      	cmp	r3, #32
 800759c:	f040 8141 	bne.w	8007822 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
      break;
 80075ae:	e13d      	b.n	800782c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d10a      	bne.n	80075d2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	4798      	blx	r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	e12d      	b.n	800782e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d007      	beq.n	80075ea <USBD_StdEPReq+0x7a>
 80075da:	2b03      	cmp	r3, #3
 80075dc:	f300 811b 	bgt.w	8007816 <USBD_StdEPReq+0x2a6>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d072      	beq.n	80076ca <USBD_StdEPReq+0x15a>
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d03a      	beq.n	800765e <USBD_StdEPReq+0xee>
 80075e8:	e115      	b.n	8007816 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d002      	beq.n	80075fa <USBD_StdEPReq+0x8a>
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d015      	beq.n	8007624 <USBD_StdEPReq+0xb4>
 80075f8:	e02b      	b.n	8007652 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00c      	beq.n	800761a <USBD_StdEPReq+0xaa>
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	2b80      	cmp	r3, #128	@ 0x80
 8007604:	d009      	beq.n	800761a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007606:	7bbb      	ldrb	r3, [r7, #14]
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 f85a 	bl	80086c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007610:	2180      	movs	r1, #128	@ 0x80
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 f856 	bl	80086c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007618:	e020      	b.n	800765c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fc1b 	bl	8007e58 <USBD_CtlError>
              break;
 8007622:	e01b      	b.n	800765c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	885b      	ldrh	r3, [r3, #2]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10e      	bne.n	800764a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <USBD_StdEPReq+0xda>
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b80      	cmp	r3, #128	@ 0x80
 8007636:	d008      	beq.n	800764a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	88db      	ldrh	r3, [r3, #6]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 f83d 	bl	80086c4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fccc 	bl	8007fe8 <USBD_CtlSendStatus>

              break;
 8007650:	e004      	b.n	800765c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fbff 	bl	8007e58 <USBD_CtlError>
              break;
 800765a:	bf00      	nop
          }
          break;
 800765c:	e0e0      	b.n	8007820 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007664:	2b02      	cmp	r3, #2
 8007666:	d002      	beq.n	800766e <USBD_StdEPReq+0xfe>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d015      	beq.n	8007698 <USBD_StdEPReq+0x128>
 800766c:	e026      	b.n	80076bc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00c      	beq.n	800768e <USBD_StdEPReq+0x11e>
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b80      	cmp	r3, #128	@ 0x80
 8007678:	d009      	beq.n	800768e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 f820 	bl	80086c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007684:	2180      	movs	r1, #128	@ 0x80
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 f81c 	bl	80086c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800768c:	e01c      	b.n	80076c8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fbe1 	bl	8007e58 <USBD_CtlError>
              break;
 8007696:	e017      	b.n	80076c8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	885b      	ldrh	r3, [r3, #2]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d112      	bne.n	80076c6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 f827 	bl	8008702 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fc97 	bl	8007fe8 <USBD_CtlSendStatus>
              }
              break;
 80076ba:	e004      	b.n	80076c6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fbca 	bl	8007e58 <USBD_CtlError>
              break;
 80076c4:	e000      	b.n	80076c8 <USBD_StdEPReq+0x158>
              break;
 80076c6:	bf00      	nop
          }
          break;
 80076c8:	e0aa      	b.n	8007820 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d002      	beq.n	80076da <USBD_StdEPReq+0x16a>
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d032      	beq.n	800773e <USBD_StdEPReq+0x1ce>
 80076d8:	e097      	b.n	800780a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <USBD_StdEPReq+0x180>
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b80      	cmp	r3, #128	@ 0x80
 80076e4:	d004      	beq.n	80076f0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fbb5 	bl	8007e58 <USBD_CtlError>
                break;
 80076ee:	e091      	b.n	8007814 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	da0b      	bge.n	8007710 <USBD_StdEPReq+0x1a0>
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	3310      	adds	r3, #16
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	4413      	add	r3, r2
 800770c:	3304      	adds	r3, #4
 800770e:	e00b      	b.n	8007728 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007716:	4613      	mov	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	4413      	add	r3, r2
 8007726:	3304      	adds	r3, #4
 8007728:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2202      	movs	r2, #2
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fbf8 	bl	8007f2c <USBD_CtlSendData>
              break;
 800773c:	e06a      	b.n	8007814 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800773e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007742:	2b00      	cmp	r3, #0
 8007744:	da11      	bge.n	800776a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	f003 020f 	and.w	r2, r3, #15
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	440b      	add	r3, r1
 8007758:	3318      	adds	r3, #24
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d117      	bne.n	8007790 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fb78 	bl	8007e58 <USBD_CtlError>
                  break;
 8007768:	e054      	b.n	8007814 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	f003 020f 	and.w	r2, r3, #15
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	440b      	add	r3, r1
 800777c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fb65 	bl	8007e58 <USBD_CtlError>
                  break;
 800778e:	e041      	b.n	8007814 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007794:	2b00      	cmp	r3, #0
 8007796:	da0b      	bge.n	80077b0 <USBD_StdEPReq+0x240>
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	3310      	adds	r3, #16
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	4413      	add	r3, r2
 80077ac:	3304      	adds	r3, #4
 80077ae:	e00b      	b.n	80077c8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	4413      	add	r3, r2
 80077c6:	3304      	adds	r3, #4
 80077c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <USBD_StdEPReq+0x266>
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	2b80      	cmp	r3, #128	@ 0x80
 80077d4:	d103      	bne.n	80077de <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	e00e      	b.n	80077fc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 ffac 	bl	8008740 <USBD_LL_IsStallEP>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2201      	movs	r2, #1
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	e002      	b.n	80077fc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2202      	movs	r2, #2
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fb92 	bl	8007f2c <USBD_CtlSendData>
              break;
 8007808:	e004      	b.n	8007814 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fb23 	bl	8007e58 <USBD_CtlError>
              break;
 8007812:	bf00      	nop
          }
          break;
 8007814:	e004      	b.n	8007820 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fb1d 	bl	8007e58 <USBD_CtlError>
          break;
 800781e:	bf00      	nop
      }
      break;
 8007820:	e004      	b.n	800782c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fb17 	bl	8007e58 <USBD_CtlError>
      break;
 800782a:	bf00      	nop
  }

  return ret;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	885b      	ldrh	r3, [r3, #2]
 8007852:	0a1b      	lsrs	r3, r3, #8
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	2b06      	cmp	r3, #6
 800785a:	f200 8128 	bhi.w	8007aae <USBD_GetDescriptor+0x276>
 800785e:	a201      	add	r2, pc, #4	@ (adr r2, 8007864 <USBD_GetDescriptor+0x2c>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007881 	.word	0x08007881
 8007868:	08007899 	.word	0x08007899
 800786c:	080078d9 	.word	0x080078d9
 8007870:	08007aaf 	.word	0x08007aaf
 8007874:	08007aaf 	.word	0x08007aaf
 8007878:	08007a4f 	.word	0x08007a4f
 800787c:	08007a7b 	.word	0x08007a7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7c12      	ldrb	r2, [r2, #16]
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
      break;
 8007896:	e112      	b.n	8007abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	7c1b      	ldrb	r3, [r3, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10d      	bne.n	80078bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a8:	f107 0208 	add.w	r2, r7, #8
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3301      	adds	r3, #1
 80078b6:	2202      	movs	r2, #2
 80078b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078ba:	e100      	b.n	8007abe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c4:	f107 0208 	add.w	r2, r7, #8
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	2202      	movs	r2, #2
 80078d4:	701a      	strb	r2, [r3, #0]
      break;
 80078d6:	e0f2      	b.n	8007abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	885b      	ldrh	r3, [r3, #2]
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b05      	cmp	r3, #5
 80078e0:	f200 80ac 	bhi.w	8007a3c <USBD_GetDescriptor+0x204>
 80078e4:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <USBD_GetDescriptor+0xb4>)
 80078e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ea:	bf00      	nop
 80078ec:	08007905 	.word	0x08007905
 80078f0:	08007939 	.word	0x08007939
 80078f4:	0800796d 	.word	0x0800796d
 80078f8:	080079a1 	.word	0x080079a1
 80078fc:	080079d5 	.word	0x080079d5
 8007900:	08007a09 	.word	0x08007a09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	7c12      	ldrb	r2, [r2, #16]
 800791c:	f107 0108 	add.w	r1, r7, #8
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007926:	e091      	b.n	8007a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa94 	bl	8007e58 <USBD_CtlError>
            err++;
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	3301      	adds	r3, #1
 8007934:	72fb      	strb	r3, [r7, #11]
          break;
 8007936:	e089      	b.n	8007a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	7c12      	ldrb	r2, [r2, #16]
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
 8007958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795a:	e077      	b.n	8007a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa7a 	bl	8007e58 <USBD_CtlError>
            err++;
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	3301      	adds	r3, #1
 8007968:	72fb      	strb	r3, [r7, #11]
          break;
 800796a:	e06f      	b.n	8007a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	7c12      	ldrb	r2, [r2, #16]
 8007984:	f107 0108 	add.w	r1, r7, #8
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800798e:	e05d      	b.n	8007a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fa60 	bl	8007e58 <USBD_CtlError>
            err++;
 8007998:	7afb      	ldrb	r3, [r7, #11]
 800799a:	3301      	adds	r3, #1
 800799c:	72fb      	strb	r3, [r7, #11]
          break;
 800799e:	e055      	b.n	8007a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7c12      	ldrb	r2, [r2, #16]
 80079b8:	f107 0108 	add.w	r1, r7, #8
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c2:	e043      	b.n	8007a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fa46 	bl	8007e58 <USBD_CtlError>
            err++;
 80079cc:	7afb      	ldrb	r3, [r7, #11]
 80079ce:	3301      	adds	r3, #1
 80079d0:	72fb      	strb	r3, [r7, #11]
          break;
 80079d2:	e03b      	b.n	8007a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	7c12      	ldrb	r2, [r2, #16]
 80079ec:	f107 0108 	add.w	r1, r7, #8
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
 80079f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079f6:	e029      	b.n	8007a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa2c 	bl	8007e58 <USBD_CtlError>
            err++;
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	3301      	adds	r3, #1
 8007a04:	72fb      	strb	r3, [r7, #11]
          break;
 8007a06:	e021      	b.n	8007a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	7c12      	ldrb	r2, [r2, #16]
 8007a20:	f107 0108 	add.w	r1, r7, #8
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
 8007a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2a:	e00f      	b.n	8007a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa12 	bl	8007e58 <USBD_CtlError>
            err++;
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	3301      	adds	r3, #1
 8007a38:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3a:	e007      	b.n	8007a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa0a 	bl	8007e58 <USBD_CtlError>
          err++;
 8007a44:	7afb      	ldrb	r3, [r7, #11]
 8007a46:	3301      	adds	r3, #1
 8007a48:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007a4a:	e038      	b.n	8007abe <USBD_GetDescriptor+0x286>
 8007a4c:	e037      	b.n	8007abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	7c1b      	ldrb	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d109      	bne.n	8007a6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a5e:	f107 0208 	add.w	r2, r7, #8
 8007a62:	4610      	mov	r0, r2
 8007a64:	4798      	blx	r3
 8007a66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a68:	e029      	b.n	8007abe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9f3 	bl	8007e58 <USBD_CtlError>
        err++;
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	3301      	adds	r3, #1
 8007a76:	72fb      	strb	r3, [r7, #11]
      break;
 8007a78:	e021      	b.n	8007abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	7c1b      	ldrb	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10d      	bne.n	8007a9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8a:	f107 0208 	add.w	r2, r7, #8
 8007a8e:	4610      	mov	r0, r2
 8007a90:	4798      	blx	r3
 8007a92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3301      	adds	r3, #1
 8007a98:	2207      	movs	r2, #7
 8007a9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a9c:	e00f      	b.n	8007abe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f9d9 	bl	8007e58 <USBD_CtlError>
        err++;
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8007aac:	e007      	b.n	8007abe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f9d1 	bl	8007e58 <USBD_CtlError>
      err++;
 8007ab6:	7afb      	ldrb	r3, [r7, #11]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	72fb      	strb	r3, [r7, #11]
      break;
 8007abc:	bf00      	nop
  }

  if (err != 0U)
 8007abe:	7afb      	ldrb	r3, [r7, #11]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d11c      	bne.n	8007afe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ac4:	893b      	ldrh	r3, [r7, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d011      	beq.n	8007aee <USBD_GetDescriptor+0x2b6>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	88db      	ldrh	r3, [r3, #6]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00d      	beq.n	8007aee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	88da      	ldrh	r2, [r3, #6]
 8007ad6:	893b      	ldrh	r3, [r7, #8]
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	bf28      	it	cs
 8007adc:	4613      	movcs	r3, r2
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ae2:	893b      	ldrh	r3, [r7, #8]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fa1f 	bl	8007f2c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	88db      	ldrh	r3, [r3, #6]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa76 	bl	8007fe8 <USBD_CtlSendStatus>
 8007afc:	e000      	b.n	8007b00 <USBD_GetDescriptor+0x2c8>
    return;
 8007afe:	bf00      	nop
    }
  }
}
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop

08007b08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	889b      	ldrh	r3, [r3, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d130      	bne.n	8007b7c <USBD_SetAddress+0x74>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	88db      	ldrh	r3, [r3, #6]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d12c      	bne.n	8007b7c <USBD_SetAddress+0x74>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	885b      	ldrh	r3, [r3, #2]
 8007b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b28:	d828      	bhi.n	8007b7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d104      	bne.n	8007b4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f988 	bl	8007e58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b48:	e01d      	b.n	8007b86 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7bfa      	ldrb	r2, [r7, #15]
 8007b4e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fe1d 	bl	8008796 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fa43 	bl	8007fe8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d004      	beq.n	8007b72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b70:	e009      	b.n	8007b86 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7a:	e004      	b.n	8007b86 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f96a 	bl	8007e58 <USBD_CtlError>
  }
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	885b      	ldrh	r3, [r3, #2]
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	4b41      	ldr	r3, [pc, #260]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007ba2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ba4:	4b40      	ldr	r3, [pc, #256]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d904      	bls.n	8007bb6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f952 	bl	8007e58 <USBD_CtlError>
 8007bb4:	e075      	b.n	8007ca2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d002      	beq.n	8007bc6 <USBD_SetConfig+0x36>
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d023      	beq.n	8007c0c <USBD_SetConfig+0x7c>
 8007bc4:	e062      	b.n	8007c8c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007bc6:	4b38      	ldr	r3, [pc, #224]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d01a      	beq.n	8007c04 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007bce:	4b36      	ldr	r3, [pc, #216]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2203      	movs	r2, #3
 8007bdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007be0:	4b31      	ldr	r3, [pc, #196]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff f9e8 	bl	8006fbc <USBD_SetClassConfig>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d104      	bne.n	8007bfc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f92f 	bl	8007e58 <USBD_CtlError>
            return;
 8007bfa:	e052      	b.n	8007ca2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f9f3 	bl	8007fe8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c02:	e04e      	b.n	8007ca2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f9ef 	bl	8007fe8 <USBD_CtlSendStatus>
        break;
 8007c0a:	e04a      	b.n	8007ca2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c0c:	4b26      	ldr	r3, [pc, #152]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d112      	bne.n	8007c3a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007c1c:	4b22      	ldr	r3, [pc, #136]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c26:	4b20      	ldr	r3, [pc, #128]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff f9e4 	bl	8006ffa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f9d8 	bl	8007fe8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c38:	e033      	b.n	8007ca2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d01d      	beq.n	8007c84 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff f9d2 	bl	8006ffa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007c56:	4b14      	ldr	r3, [pc, #80]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c60:	4b11      	ldr	r3, [pc, #68]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff f9a8 	bl	8006fbc <USBD_SetClassConfig>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d104      	bne.n	8007c7c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f8ef 	bl	8007e58 <USBD_CtlError>
            return;
 8007c7a:	e012      	b.n	8007ca2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f9b3 	bl	8007fe8 <USBD_CtlSendStatus>
        break;
 8007c82:	e00e      	b.n	8007ca2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f9af 	bl	8007fe8 <USBD_CtlSendStatus>
        break;
 8007c8a:	e00a      	b.n	8007ca2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f8e2 	bl	8007e58 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c94:	4b04      	ldr	r3, [pc, #16]	@ (8007ca8 <USBD_SetConfig+0x118>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff f9ad 	bl	8006ffa <USBD_ClrClassConfig>
        break;
 8007ca0:	bf00      	nop
    }
  }
}
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	200003b8 	.word	0x200003b8

08007cac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	88db      	ldrh	r3, [r3, #6]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d004      	beq.n	8007cc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f8c9 	bl	8007e58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cc6:	e022      	b.n	8007d0e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	dc02      	bgt.n	8007cd8 <USBD_GetConfig+0x2c>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	dc03      	bgt.n	8007cde <USBD_GetConfig+0x32>
 8007cd6:	e015      	b.n	8007d04 <USBD_GetConfig+0x58>
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d00b      	beq.n	8007cf4 <USBD_GetConfig+0x48>
 8007cdc:	e012      	b.n	8007d04 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	2201      	movs	r2, #1
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f91d 	bl	8007f2c <USBD_CtlSendData>
        break;
 8007cf2:	e00c      	b.n	8007d0e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f915 	bl	8007f2c <USBD_CtlSendData>
        break;
 8007d02:	e004      	b.n	8007d0e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f8a6 	bl	8007e58 <USBD_CtlError>
        break;
 8007d0c:	bf00      	nop
}
 8007d0e:	bf00      	nop
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d26:	3b01      	subs	r3, #1
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d81e      	bhi.n	8007d6a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	88db      	ldrh	r3, [r3, #6]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d004      	beq.n	8007d3e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f88e 	bl	8007e58 <USBD_CtlError>
        break;
 8007d3c:	e01a      	b.n	8007d74 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d005      	beq.n	8007d5a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f043 0202 	orr.w	r2, r3, #2
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	330c      	adds	r3, #12
 8007d5e:	2202      	movs	r2, #2
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f8e2 	bl	8007f2c <USBD_CtlSendData>
      break;
 8007d68:	e004      	b.n	8007d74 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f873 	bl	8007e58 <USBD_CtlError>
      break;
 8007d72:	bf00      	nop
  }
}
 8007d74:	bf00      	nop
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	885b      	ldrh	r3, [r3, #2]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d106      	bne.n	8007d9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f926 	bl	8007fe8 <USBD_CtlSendStatus>
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007db4:	3b01      	subs	r3, #1
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d80b      	bhi.n	8007dd2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	885b      	ldrh	r3, [r3, #2]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d10c      	bne.n	8007ddc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f90c 	bl	8007fe8 <USBD_CtlSendStatus>
      }
      break;
 8007dd0:	e004      	b.n	8007ddc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f83f 	bl	8007e58 <USBD_CtlError>
      break;
 8007dda:	e000      	b.n	8007dde <USBD_ClrFeature+0x3a>
      break;
 8007ddc:	bf00      	nop
  }
}
 8007dde:	bf00      	nop
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781a      	ldrb	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	785a      	ldrb	r2, [r3, #1]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	3302      	adds	r3, #2
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	3303      	adds	r3, #3
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	4413      	add	r3, r2
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	3305      	adds	r3, #5
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4413      	add	r3, r2
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	3306      	adds	r3, #6
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	3307      	adds	r3, #7
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	4413      	add	r3, r2
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	80da      	strh	r2, [r3, #6]

}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007e62:	2180      	movs	r1, #128	@ 0x80
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fc2d 	bl	80086c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fc29 	bl	80086c4 <USBD_LL_StallEP>
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b086      	sub	sp, #24
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d032      	beq.n	8007ef6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f834 	bl	8007efe <USBD_GetLen>
 8007e96:	4603      	mov	r3, r0
 8007e98:	3301      	adds	r3, #1
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	75fa      	strb	r2, [r7, #23]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4413      	add	r3, r2
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	7812      	ldrb	r2, [r2, #0]
 8007eb4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	75fa      	strb	r2, [r7, #23]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007ec6:	e012      	b.n	8007eee <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	60fa      	str	r2, [r7, #12]
 8007ece:	7dfa      	ldrb	r2, [r7, #23]
 8007ed0:	1c51      	adds	r1, r2, #1
 8007ed2:	75f9      	strb	r1, [r7, #23]
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	440a      	add	r2, r1
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	75fa      	strb	r2, [r7, #23]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	4413      	add	r3, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e8      	bne.n	8007ec8 <USBD_GetString+0x4e>
    }
  }
}
 8007ef6:	bf00      	nop
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f0a:	e005      	b.n	8007f18 <USBD_GetLen+0x1a>
  {
    len++;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3301      	adds	r3, #1
 8007f16:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1f5      	bne.n	8007f0c <USBD_GetLen+0xe>
  }

  return len;
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bc80      	pop	{r7}
 8007f2a:	4770      	bx	lr

08007f2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007f42:	88fa      	ldrh	r2, [r7, #6]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f48:	88fa      	ldrh	r2, [r7, #6]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	2100      	movs	r1, #0
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fc3d 	bl	80087d4 <USBD_LL_Transmit>

  return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f72:	88fb      	ldrh	r3, [r7, #6]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	2100      	movs	r1, #0
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fc2b 	bl	80087d4 <USBD_LL_Transmit>

  return USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2203      	movs	r2, #3
 8007f9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007f9e:	88fa      	ldrh	r2, [r7, #6]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007fa6:	88fa      	ldrh	r2, [r7, #6]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fae:	88fb      	ldrh	r3, [r7, #6]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fc30 	bl	800881a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fd2:	88fb      	ldrh	r3, [r7, #6]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 fc1e 	bl	800881a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fbe8 	bl	80087d4 <USBD_LL_Transmit>

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2205      	movs	r2, #5
 800801a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800801e:	2300      	movs	r3, #0
 8008020:	2200      	movs	r2, #0
 8008022:	2100      	movs	r1, #0
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fbf8 	bl	800881a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008038:	2200      	movs	r2, #0
 800803a:	4912      	ldr	r1, [pc, #72]	@ (8008084 <MX_USB_DEVICE_Init+0x50>)
 800803c:	4812      	ldr	r0, [pc, #72]	@ (8008088 <MX_USB_DEVICE_Init+0x54>)
 800803e:	f7fe ff63 	bl	8006f08 <USBD_Init>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008048:	f7f8 fe18 	bl	8000c7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800804c:	490f      	ldr	r1, [pc, #60]	@ (800808c <MX_USB_DEVICE_Init+0x58>)
 800804e:	480e      	ldr	r0, [pc, #56]	@ (8008088 <MX_USB_DEVICE_Init+0x54>)
 8008050:	f7fe ff85 	bl	8006f5e <USBD_RegisterClass>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800805a:	f7f8 fe0f 	bl	8000c7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800805e:	490c      	ldr	r1, [pc, #48]	@ (8008090 <MX_USB_DEVICE_Init+0x5c>)
 8008060:	4809      	ldr	r0, [pc, #36]	@ (8008088 <MX_USB_DEVICE_Init+0x54>)
 8008062:	f7fe fee5 	bl	8006e30 <USBD_CDC_RegisterInterface>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800806c:	f7f8 fe06 	bl	8000c7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008070:	4805      	ldr	r0, [pc, #20]	@ (8008088 <MX_USB_DEVICE_Init+0x54>)
 8008072:	f7fe ff8d 	bl	8006f90 <USBD_Start>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800807c:	f7f8 fdfe 	bl	8000c7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008080:	bf00      	nop
 8008082:	bd80      	pop	{r7, pc}
 8008084:	2000012c 	.word	0x2000012c
 8008088:	200003bc 	.word	0x200003bc
 800808c:	20000018 	.word	0x20000018
 8008090:	2000011c 	.word	0x2000011c

08008094 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008098:	2200      	movs	r2, #0
 800809a:	4905      	ldr	r1, [pc, #20]	@ (80080b0 <CDC_Init_FS+0x1c>)
 800809c:	4805      	ldr	r0, [pc, #20]	@ (80080b4 <CDC_Init_FS+0x20>)
 800809e:	f7fe fedd 	bl	8006e5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080a2:	4905      	ldr	r1, [pc, #20]	@ (80080b8 <CDC_Init_FS+0x24>)
 80080a4:	4803      	ldr	r0, [pc, #12]	@ (80080b4 <CDC_Init_FS+0x20>)
 80080a6:	f7fe fef2 	bl	8006e8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20000a80 	.word	0x20000a80
 80080b4:	200003bc 	.word	0x200003bc
 80080b8:	20000680 	.word	0x20000680

080080bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr
	...

080080cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	71fb      	strb	r3, [r7, #7]
 80080d8:	4613      	mov	r3, r2
 80080da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080dc:	79fb      	ldrb	r3, [r7, #7]
 80080de:	2b23      	cmp	r3, #35	@ 0x23
 80080e0:	d84a      	bhi.n	8008178 <CDC_Control_FS+0xac>
 80080e2:	a201      	add	r2, pc, #4	@ (adr r2, 80080e8 <CDC_Control_FS+0x1c>)
 80080e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e8:	08008179 	.word	0x08008179
 80080ec:	08008179 	.word	0x08008179
 80080f0:	08008179 	.word	0x08008179
 80080f4:	08008179 	.word	0x08008179
 80080f8:	08008179 	.word	0x08008179
 80080fc:	08008179 	.word	0x08008179
 8008100:	08008179 	.word	0x08008179
 8008104:	08008179 	.word	0x08008179
 8008108:	08008179 	.word	0x08008179
 800810c:	08008179 	.word	0x08008179
 8008110:	08008179 	.word	0x08008179
 8008114:	08008179 	.word	0x08008179
 8008118:	08008179 	.word	0x08008179
 800811c:	08008179 	.word	0x08008179
 8008120:	08008179 	.word	0x08008179
 8008124:	08008179 	.word	0x08008179
 8008128:	08008179 	.word	0x08008179
 800812c:	08008179 	.word	0x08008179
 8008130:	08008179 	.word	0x08008179
 8008134:	08008179 	.word	0x08008179
 8008138:	08008179 	.word	0x08008179
 800813c:	08008179 	.word	0x08008179
 8008140:	08008179 	.word	0x08008179
 8008144:	08008179 	.word	0x08008179
 8008148:	08008179 	.word	0x08008179
 800814c:	08008179 	.word	0x08008179
 8008150:	08008179 	.word	0x08008179
 8008154:	08008179 	.word	0x08008179
 8008158:	08008179 	.word	0x08008179
 800815c:	08008179 	.word	0x08008179
 8008160:	08008179 	.word	0x08008179
 8008164:	08008179 	.word	0x08008179
 8008168:	08008179 	.word	0x08008179
 800816c:	08008179 	.word	0x08008179
 8008170:	08008179 	.word	0x08008179
 8008174:	08008179 	.word	0x08008179
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008178:	bf00      	nop
  }

  return (USBD_OK);
 800817a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	bc80      	pop	{r7}
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop

08008188 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	4805      	ldr	r0, [pc, #20]	@ (80081ac <CDC_Receive_FS+0x24>)
 8008196:	f7fe fe7a 	bl	8006e8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800819a:	4804      	ldr	r0, [pc, #16]	@ (80081ac <CDC_Receive_FS+0x24>)
 800819c:	f7fe fe8a 	bl	8006eb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	200003bc 	.word	0x200003bc

080081b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	6039      	str	r1, [r7, #0]
 80081ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2212      	movs	r2, #18
 80081c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081c2:	4b03      	ldr	r3, [pc, #12]	@ (80081d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	20000148 	.word	0x20000148

080081d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2204      	movs	r2, #4
 80081e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081e6:	4b03      	ldr	r3, [pc, #12]	@ (80081f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bc80      	pop	{r7}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	2000015c 	.word	0x2000015c

080081f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	4907      	ldr	r1, [pc, #28]	@ (800822c <USBD_FS_ProductStrDescriptor+0x34>)
 800820e:	4808      	ldr	r0, [pc, #32]	@ (8008230 <USBD_FS_ProductStrDescriptor+0x38>)
 8008210:	f7ff fe33 	bl	8007e7a <USBD_GetString>
 8008214:	e004      	b.n	8008220 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	4904      	ldr	r1, [pc, #16]	@ (800822c <USBD_FS_ProductStrDescriptor+0x34>)
 800821a:	4805      	ldr	r0, [pc, #20]	@ (8008230 <USBD_FS_ProductStrDescriptor+0x38>)
 800821c:	f7ff fe2d 	bl	8007e7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008220:	4b02      	ldr	r3, [pc, #8]	@ (800822c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000e80 	.word	0x20000e80
 8008230:	0800b258 	.word	0x0800b258

08008234 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	6039      	str	r1, [r7, #0]
 800823e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	4904      	ldr	r1, [pc, #16]	@ (8008254 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008244:	4804      	ldr	r0, [pc, #16]	@ (8008258 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008246:	f7ff fe18 	bl	8007e7a <USBD_GetString>
  return USBD_StrDesc;
 800824a:	4b02      	ldr	r3, [pc, #8]	@ (8008254 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20000e80 	.word	0x20000e80
 8008258:	0800b26c 	.word	0x0800b26c

0800825c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	221a      	movs	r2, #26
 800826c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800826e:	f000 f843 	bl	80082f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008272:	4b02      	ldr	r3, [pc, #8]	@ (800827c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008274:	4618      	mov	r0, r3
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20000160 	.word	0x20000160

08008280 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800828c:	79fb      	ldrb	r3, [r7, #7]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d105      	bne.n	800829e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	4907      	ldr	r1, [pc, #28]	@ (80082b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008296:	4808      	ldr	r0, [pc, #32]	@ (80082b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008298:	f7ff fdef 	bl	8007e7a <USBD_GetString>
 800829c:	e004      	b.n	80082a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	4904      	ldr	r1, [pc, #16]	@ (80082b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082a2:	4805      	ldr	r0, [pc, #20]	@ (80082b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082a4:	f7ff fde9 	bl	8007e7a <USBD_GetString>
  }
  return USBD_StrDesc;
 80082a8:	4b02      	ldr	r3, [pc, #8]	@ (80082b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	20000e80 	.word	0x20000e80
 80082b8:	0800b280 	.word	0x0800b280

080082bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	6039      	str	r1, [r7, #0]
 80082c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d105      	bne.n	80082da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	4907      	ldr	r1, [pc, #28]	@ (80082f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082d2:	4808      	ldr	r0, [pc, #32]	@ (80082f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082d4:	f7ff fdd1 	bl	8007e7a <USBD_GetString>
 80082d8:	e004      	b.n	80082e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	4904      	ldr	r1, [pc, #16]	@ (80082f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082de:	4805      	ldr	r0, [pc, #20]	@ (80082f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082e0:	f7ff fdcb 	bl	8007e7a <USBD_GetString>
  }
  return USBD_StrDesc;
 80082e4:	4b02      	ldr	r3, [pc, #8]	@ (80082f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000e80 	.word	0x20000e80
 80082f4:	0800b28c 	.word	0x0800b28c

080082f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082fe:	4b0f      	ldr	r3, [pc, #60]	@ (800833c <Get_SerialNum+0x44>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008304:	4b0e      	ldr	r3, [pc, #56]	@ (8008340 <Get_SerialNum+0x48>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800830a:	4b0e      	ldr	r3, [pc, #56]	@ (8008344 <Get_SerialNum+0x4c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4413      	add	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d009      	beq.n	8008332 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800831e:	2208      	movs	r2, #8
 8008320:	4909      	ldr	r1, [pc, #36]	@ (8008348 <Get_SerialNum+0x50>)
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 f814 	bl	8008350 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008328:	2204      	movs	r2, #4
 800832a:	4908      	ldr	r1, [pc, #32]	@ (800834c <Get_SerialNum+0x54>)
 800832c:	68b8      	ldr	r0, [r7, #8]
 800832e:	f000 f80f 	bl	8008350 <IntToUnicode>
  }
}
 8008332:	bf00      	nop
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	1ffff7e8 	.word	0x1ffff7e8
 8008340:	1ffff7ec 	.word	0x1ffff7ec
 8008344:	1ffff7f0 	.word	0x1ffff7f0
 8008348:	20000162 	.word	0x20000162
 800834c:	20000172 	.word	0x20000172

08008350 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]
 8008366:	e027      	b.n	80083b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	0f1b      	lsrs	r3, r3, #28
 800836c:	2b09      	cmp	r3, #9
 800836e:	d80b      	bhi.n	8008388 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	0f1b      	lsrs	r3, r3, #28
 8008374:	b2da      	uxtb	r2, r3
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	4619      	mov	r1, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	440b      	add	r3, r1
 8008380:	3230      	adds	r2, #48	@ 0x30
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	e00a      	b.n	800839e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	0f1b      	lsrs	r3, r3, #28
 800838c:	b2da      	uxtb	r2, r3
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	4619      	mov	r1, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	440b      	add	r3, r1
 8008398:	3237      	adds	r2, #55	@ 0x37
 800839a:	b2d2      	uxtb	r2, r2
 800839c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	011b      	lsls	r3, r3, #4
 80083a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	3301      	adds	r3, #1
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4413      	add	r3, r2
 80083ae:	2200      	movs	r2, #0
 80083b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	3301      	adds	r3, #1
 80083b6:	75fb      	strb	r3, [r7, #23]
 80083b8:	7dfa      	ldrb	r2, [r7, #23]
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d3d3      	bcc.n	8008368 <IntToUnicode+0x18>
  }
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bc80      	pop	{r7}
 80083ca:	4770      	bx	lr

080083cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a0d      	ldr	r2, [pc, #52]	@ (8008410 <HAL_PCD_MspInit+0x44>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d113      	bne.n	8008406 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80083de:	4b0d      	ldr	r3, [pc, #52]	@ (8008414 <HAL_PCD_MspInit+0x48>)
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008414 <HAL_PCD_MspInit+0x48>)
 80083e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083e8:	61d3      	str	r3, [r2, #28]
 80083ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008414 <HAL_PCD_MspInit+0x48>)
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80083f6:	2200      	movs	r2, #0
 80083f8:	2100      	movs	r1, #0
 80083fa:	2014      	movs	r0, #20
 80083fc:	f7f8 ffb1 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008400:	2014      	movs	r0, #20
 8008402:	f7f8 ffca 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40005c00 	.word	0x40005c00
 8008414:	40021000 	.word	0x40021000

08008418 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800842c:	4619      	mov	r1, r3
 800842e:	4610      	mov	r0, r2
 8008430:	f7fe fdf6 	bl	8007020 <USBD_LL_SetupStage>
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800844e:	78fa      	ldrb	r2, [r7, #3]
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	4613      	mov	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	440b      	add	r3, r1
 800845c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	4619      	mov	r1, r3
 8008466:	f7fe fe28 	bl	80070ba <USBD_LL_DataOutStage>
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008484:	78fa      	ldrb	r2, [r7, #3]
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	440b      	add	r3, r1
 8008492:	3324      	adds	r3, #36	@ 0x24
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	4619      	mov	r1, r3
 800849a:	f7fe fe7f 	bl	800719c <USBD_LL_DataInStage>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe ff8f 	bl	80073d8 <USBD_LL_SOF>
}
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084ca:	2301      	movs	r3, #1
 80084cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	799b      	ldrb	r3, [r3, #6]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d001      	beq.n	80084da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084d6:	f7f8 fbd1 	bl	8000c7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084e0:	7bfa      	ldrb	r2, [r7, #15]
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe ff3f 	bl	8007368 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe fef8 	bl	80072e6 <USBD_LL_Reset>
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe ff39 	bl	8007386 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	7a9b      	ldrb	r3, [r3, #10]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800851c:	4b04      	ldr	r3, [pc, #16]	@ (8008530 <HAL_PCD_SuspendCallback+0x30>)
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	4a03      	ldr	r2, [pc, #12]	@ (8008530 <HAL_PCD_SuspendCallback+0x30>)
 8008522:	f043 0306 	orr.w	r3, r3, #6
 8008526:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	e000ed00 	.word	0xe000ed00

08008534 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe ff33 	bl	80073ae <USBD_LL_Resume>
}
 8008548:	bf00      	nop
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008558:	4a28      	ldr	r2, [pc, #160]	@ (80085fc <USBD_LL_Init+0xac>)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a26      	ldr	r2, [pc, #152]	@ (80085fc <USBD_LL_Init+0xac>)
 8008564:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008568:	4b24      	ldr	r3, [pc, #144]	@ (80085fc <USBD_LL_Init+0xac>)
 800856a:	4a25      	ldr	r2, [pc, #148]	@ (8008600 <USBD_LL_Init+0xb0>)
 800856c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800856e:	4b23      	ldr	r3, [pc, #140]	@ (80085fc <USBD_LL_Init+0xac>)
 8008570:	2208      	movs	r2, #8
 8008572:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008574:	4b21      	ldr	r3, [pc, #132]	@ (80085fc <USBD_LL_Init+0xac>)
 8008576:	2202      	movs	r2, #2
 8008578:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800857a:	4b20      	ldr	r3, [pc, #128]	@ (80085fc <USBD_LL_Init+0xac>)
 800857c:	2200      	movs	r2, #0
 800857e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008580:	4b1e      	ldr	r3, [pc, #120]	@ (80085fc <USBD_LL_Init+0xac>)
 8008582:	2200      	movs	r2, #0
 8008584:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008586:	4b1d      	ldr	r3, [pc, #116]	@ (80085fc <USBD_LL_Init+0xac>)
 8008588:	2200      	movs	r2, #0
 800858a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800858c:	481b      	ldr	r0, [pc, #108]	@ (80085fc <USBD_LL_Init+0xac>)
 800858e:	f7f9 f8d3 	bl	8001738 <HAL_PCD_Init>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008598:	f7f8 fb70 	bl	8000c7c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085a2:	2318      	movs	r3, #24
 80085a4:	2200      	movs	r2, #0
 80085a6:	2100      	movs	r1, #0
 80085a8:	f7fa fde4 	bl	8003174 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085b2:	2358      	movs	r3, #88	@ 0x58
 80085b4:	2200      	movs	r2, #0
 80085b6:	2180      	movs	r1, #128	@ 0x80
 80085b8:	f7fa fddc 	bl	8003174 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085c2:	23c0      	movs	r3, #192	@ 0xc0
 80085c4:	2200      	movs	r2, #0
 80085c6:	2181      	movs	r1, #129	@ 0x81
 80085c8:	f7fa fdd4 	bl	8003174 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085d2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80085d6:	2200      	movs	r2, #0
 80085d8:	2101      	movs	r1, #1
 80085da:	f7fa fdcb 	bl	8003174 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085e8:	2200      	movs	r2, #0
 80085ea:	2182      	movs	r1, #130	@ 0x82
 80085ec:	f7fa fdc2 	bl	8003174 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20001080 	.word	0x20001080
 8008600:	40005c00 	.word	0x40005c00

08008604 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800861a:	4618      	mov	r0, r3
 800861c:	f7f9 f982 	bl	8001924 <HAL_PCD_Start>
 8008620:	4603      	mov	r3, r0
 8008622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	4618      	mov	r0, r3
 8008628:	f000 f94e 	bl	80088c8 <USBD_Get_USB_Status>
 800862c:	4603      	mov	r3, r0
 800862e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008630:	7bbb      	ldrb	r3, [r7, #14]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	4608      	mov	r0, r1
 8008644:	4611      	mov	r1, r2
 8008646:	461a      	mov	r2, r3
 8008648:	4603      	mov	r3, r0
 800864a:	70fb      	strb	r3, [r7, #3]
 800864c:	460b      	mov	r3, r1
 800864e:	70bb      	strb	r3, [r7, #2]
 8008650:	4613      	mov	r3, r2
 8008652:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008662:	78bb      	ldrb	r3, [r7, #2]
 8008664:	883a      	ldrh	r2, [r7, #0]
 8008666:	78f9      	ldrb	r1, [r7, #3]
 8008668:	f7f9 fad6 	bl	8001c18 <HAL_PCD_EP_Open>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f928 	bl	80088c8 <USBD_Get_USB_Status>
 8008678:	4603      	mov	r3, r0
 800867a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800867c:	7bbb      	ldrb	r3, [r7, #14]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7f9 fb14 	bl	8001cd2 <HAL_PCD_EP_Close>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 f909 	bl	80088c8 <USBD_Get_USB_Status>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7f9 fbbc 	bl	8001e60 <HAL_PCD_EP_SetStall>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 f8ea 	bl	80088c8 <USBD_Get_USB_Status>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800871c:	78fa      	ldrb	r2, [r7, #3]
 800871e:	4611      	mov	r1, r2
 8008720:	4618      	mov	r0, r3
 8008722:	f7f9 fbfd 	bl	8001f20 <HAL_PCD_EP_ClrStall>
 8008726:	4603      	mov	r3, r0
 8008728:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	4618      	mov	r0, r3
 800872e:	f000 f8cb 	bl	80088c8 <USBD_Get_USB_Status>
 8008732:	4603      	mov	r3, r0
 8008734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008736:	7bbb      	ldrb	r3, [r7, #14]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008752:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008758:	2b00      	cmp	r3, #0
 800875a:	da0b      	bge.n	8008774 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	4613      	mov	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	00db      	lsls	r3, r3, #3
 800876c:	440b      	add	r3, r1
 800876e:	3312      	adds	r3, #18
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	e00b      	b.n	800878c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800877a:	68f9      	ldr	r1, [r7, #12]
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	440b      	add	r3, r1
 8008786:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800878a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr

08008796 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087b0:	78fa      	ldrb	r2, [r7, #3]
 80087b2:	4611      	mov	r1, r2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7f9 fa0b 	bl	8001bd0 <HAL_PCD_SetAddress>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 f881 	bl	80088c8 <USBD_Get_USB_Status>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	607a      	str	r2, [r7, #4]
 80087de:	461a      	mov	r2, r3
 80087e0:	460b      	mov	r3, r1
 80087e2:	72fb      	strb	r3, [r7, #11]
 80087e4:	4613      	mov	r3, r2
 80087e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087f6:	893b      	ldrh	r3, [r7, #8]
 80087f8:	7af9      	ldrb	r1, [r7, #11]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	f7f9 faf9 	bl	8001df2 <HAL_PCD_EP_Transmit>
 8008800:	4603      	mov	r3, r0
 8008802:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008804:	7dfb      	ldrb	r3, [r7, #23]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f85e 	bl	80088c8 <USBD_Get_USB_Status>
 800880c:	4603      	mov	r3, r0
 800880e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008810:	7dbb      	ldrb	r3, [r7, #22]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b086      	sub	sp, #24
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	461a      	mov	r2, r3
 8008826:	460b      	mov	r3, r1
 8008828:	72fb      	strb	r3, [r7, #11]
 800882a:	4613      	mov	r3, r2
 800882c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800883c:	893b      	ldrh	r3, [r7, #8]
 800883e:	7af9      	ldrb	r1, [r7, #11]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	f7f9 fa8e 	bl	8001d62 <HAL_PCD_EP_Receive>
 8008846:	4603      	mov	r3, r0
 8008848:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f83b 	bl	80088c8 <USBD_Get_USB_Status>
 8008852:	4603      	mov	r3, r0
 8008854:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008856:	7dbb      	ldrb	r3, [r7, #22]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	4611      	mov	r1, r2
 8008876:	4618      	mov	r0, r3
 8008878:	f7f9 faa4 	bl	8001dc4 <HAL_PCD_EP_GetRxCount>
 800887c:	4603      	mov	r3, r0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008890:	4b02      	ldr	r3, [pc, #8]	@ (800889c <USBD_static_malloc+0x14>)
}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr
 800889c:	20001358 	.word	0x20001358

080088a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]

}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bc80      	pop	{r7}
 80088b0:	4770      	bx	lr

080088b2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	460b      	mov	r3, r1
 80088bc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr

080088c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d817      	bhi.n	800890c <USBD_Get_USB_Status+0x44>
 80088dc:	a201      	add	r2, pc, #4	@ (adr r2, 80088e4 <USBD_Get_USB_Status+0x1c>)
 80088de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e2:	bf00      	nop
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	080088fb 	.word	0x080088fb
 80088ec:	08008901 	.word	0x08008901
 80088f0:	08008907 	.word	0x08008907
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]
    break;
 80088f8:	e00b      	b.n	8008912 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088fa:	2302      	movs	r3, #2
 80088fc:	73fb      	strb	r3, [r7, #15]
    break;
 80088fe:	e008      	b.n	8008912 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008900:	2301      	movs	r3, #1
 8008902:	73fb      	strb	r3, [r7, #15]
    break;
 8008904:	e005      	b.n	8008912 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008906:	2302      	movs	r3, #2
 8008908:	73fb      	strb	r3, [r7, #15]
    break;
 800890a:	e002      	b.n	8008912 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800890c:	2302      	movs	r3, #2
 800890e:	73fb      	strb	r3, [r7, #15]
    break;
 8008910:	bf00      	nop
  }
  return usb_status;
 8008912:	7bfb      	ldrb	r3, [r7, #15]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop

08008920 <__cvt>:
 8008920:	2b00      	cmp	r3, #0
 8008922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008926:	461d      	mov	r5, r3
 8008928:	bfbb      	ittet	lt
 800892a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800892e:	461d      	movlt	r5, r3
 8008930:	2300      	movge	r3, #0
 8008932:	232d      	movlt	r3, #45	@ 0x2d
 8008934:	b088      	sub	sp, #32
 8008936:	4614      	mov	r4, r2
 8008938:	bfb8      	it	lt
 800893a:	4614      	movlt	r4, r2
 800893c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800893e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008940:	7013      	strb	r3, [r2, #0]
 8008942:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008944:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008948:	f023 0820 	bic.w	r8, r3, #32
 800894c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008950:	d005      	beq.n	800895e <__cvt+0x3e>
 8008952:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008956:	d100      	bne.n	800895a <__cvt+0x3a>
 8008958:	3601      	adds	r6, #1
 800895a:	2302      	movs	r3, #2
 800895c:	e000      	b.n	8008960 <__cvt+0x40>
 800895e:	2303      	movs	r3, #3
 8008960:	aa07      	add	r2, sp, #28
 8008962:	9204      	str	r2, [sp, #16]
 8008964:	aa06      	add	r2, sp, #24
 8008966:	e9cd a202 	strd	sl, r2, [sp, #8]
 800896a:	e9cd 3600 	strd	r3, r6, [sp]
 800896e:	4622      	mov	r2, r4
 8008970:	462b      	mov	r3, r5
 8008972:	f000 fe4d 	bl	8009610 <_dtoa_r>
 8008976:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800897a:	4607      	mov	r7, r0
 800897c:	d119      	bne.n	80089b2 <__cvt+0x92>
 800897e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008980:	07db      	lsls	r3, r3, #31
 8008982:	d50e      	bpl.n	80089a2 <__cvt+0x82>
 8008984:	eb00 0906 	add.w	r9, r0, r6
 8008988:	2200      	movs	r2, #0
 800898a:	2300      	movs	r3, #0
 800898c:	4620      	mov	r0, r4
 800898e:	4629      	mov	r1, r5
 8008990:	f7f8 f80a 	bl	80009a8 <__aeabi_dcmpeq>
 8008994:	b108      	cbz	r0, 800899a <__cvt+0x7a>
 8008996:	f8cd 901c 	str.w	r9, [sp, #28]
 800899a:	2230      	movs	r2, #48	@ 0x30
 800899c:	9b07      	ldr	r3, [sp, #28]
 800899e:	454b      	cmp	r3, r9
 80089a0:	d31e      	bcc.n	80089e0 <__cvt+0xc0>
 80089a2:	4638      	mov	r0, r7
 80089a4:	9b07      	ldr	r3, [sp, #28]
 80089a6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80089a8:	1bdb      	subs	r3, r3, r7
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	b008      	add	sp, #32
 80089ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089b6:	eb00 0906 	add.w	r9, r0, r6
 80089ba:	d1e5      	bne.n	8008988 <__cvt+0x68>
 80089bc:	7803      	ldrb	r3, [r0, #0]
 80089be:	2b30      	cmp	r3, #48	@ 0x30
 80089c0:	d10a      	bne.n	80089d8 <__cvt+0xb8>
 80089c2:	2200      	movs	r2, #0
 80089c4:	2300      	movs	r3, #0
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7f7 ffed 	bl	80009a8 <__aeabi_dcmpeq>
 80089ce:	b918      	cbnz	r0, 80089d8 <__cvt+0xb8>
 80089d0:	f1c6 0601 	rsb	r6, r6, #1
 80089d4:	f8ca 6000 	str.w	r6, [sl]
 80089d8:	f8da 3000 	ldr.w	r3, [sl]
 80089dc:	4499      	add	r9, r3
 80089de:	e7d3      	b.n	8008988 <__cvt+0x68>
 80089e0:	1c59      	adds	r1, r3, #1
 80089e2:	9107      	str	r1, [sp, #28]
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	e7d9      	b.n	800899c <__cvt+0x7c>

080089e8 <__exponent>:
 80089e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ea:	2900      	cmp	r1, #0
 80089ec:	bfb6      	itet	lt
 80089ee:	232d      	movlt	r3, #45	@ 0x2d
 80089f0:	232b      	movge	r3, #43	@ 0x2b
 80089f2:	4249      	neglt	r1, r1
 80089f4:	2909      	cmp	r1, #9
 80089f6:	7002      	strb	r2, [r0, #0]
 80089f8:	7043      	strb	r3, [r0, #1]
 80089fa:	dd29      	ble.n	8008a50 <__exponent+0x68>
 80089fc:	f10d 0307 	add.w	r3, sp, #7
 8008a00:	461d      	mov	r5, r3
 8008a02:	270a      	movs	r7, #10
 8008a04:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a08:	461a      	mov	r2, r3
 8008a0a:	fb07 1416 	mls	r4, r7, r6, r1
 8008a0e:	3430      	adds	r4, #48	@ 0x30
 8008a10:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a14:	460c      	mov	r4, r1
 8008a16:	2c63      	cmp	r4, #99	@ 0x63
 8008a18:	4631      	mov	r1, r6
 8008a1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a1e:	dcf1      	bgt.n	8008a04 <__exponent+0x1c>
 8008a20:	3130      	adds	r1, #48	@ 0x30
 8008a22:	1e94      	subs	r4, r2, #2
 8008a24:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a28:	4623      	mov	r3, r4
 8008a2a:	1c41      	adds	r1, r0, #1
 8008a2c:	42ab      	cmp	r3, r5
 8008a2e:	d30a      	bcc.n	8008a46 <__exponent+0x5e>
 8008a30:	f10d 0309 	add.w	r3, sp, #9
 8008a34:	1a9b      	subs	r3, r3, r2
 8008a36:	42ac      	cmp	r4, r5
 8008a38:	bf88      	it	hi
 8008a3a:	2300      	movhi	r3, #0
 8008a3c:	3302      	adds	r3, #2
 8008a3e:	4403      	add	r3, r0
 8008a40:	1a18      	subs	r0, r3, r0
 8008a42:	b003      	add	sp, #12
 8008a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a46:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008a4a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008a4e:	e7ed      	b.n	8008a2c <__exponent+0x44>
 8008a50:	2330      	movs	r3, #48	@ 0x30
 8008a52:	3130      	adds	r1, #48	@ 0x30
 8008a54:	7083      	strb	r3, [r0, #2]
 8008a56:	70c1      	strb	r1, [r0, #3]
 8008a58:	1d03      	adds	r3, r0, #4
 8008a5a:	e7f1      	b.n	8008a40 <__exponent+0x58>

08008a5c <_printf_float>:
 8008a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a60:	b091      	sub	sp, #68	@ 0x44
 8008a62:	460c      	mov	r4, r1
 8008a64:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008a68:	4616      	mov	r6, r2
 8008a6a:	461f      	mov	r7, r3
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	f000 fcbf 	bl	80093f0 <_localeconv_r>
 8008a72:	6803      	ldr	r3, [r0, #0]
 8008a74:	4618      	mov	r0, r3
 8008a76:	9308      	str	r3, [sp, #32]
 8008a78:	f7f7 fb6a 	bl	8000150 <strlen>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a80:	f8d8 3000 	ldr.w	r3, [r8]
 8008a84:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a86:	3307      	adds	r3, #7
 8008a88:	f023 0307 	bic.w	r3, r3, #7
 8008a8c:	f103 0208 	add.w	r2, r3, #8
 8008a90:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a94:	f8d4 b000 	ldr.w	fp, [r4]
 8008a98:	f8c8 2000 	str.w	r2, [r8]
 8008a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aa0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008aa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aa6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ab2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8008d28 <_printf_float+0x2cc>)
 8008ab8:	f7f7 ffa8 	bl	8000a0c <__aeabi_dcmpun>
 8008abc:	bb70      	cbnz	r0, 8008b1c <_printf_float+0xc0>
 8008abe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	4b98      	ldr	r3, [pc, #608]	@ (8008d28 <_printf_float+0x2cc>)
 8008ac8:	f7f7 ff82 	bl	80009d0 <__aeabi_dcmple>
 8008acc:	bb30      	cbnz	r0, 8008b1c <_printf_float+0xc0>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	f7f7 ff71 	bl	80009bc <__aeabi_dcmplt>
 8008ada:	b110      	cbz	r0, 8008ae2 <_printf_float+0x86>
 8008adc:	232d      	movs	r3, #45	@ 0x2d
 8008ade:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ae2:	4a92      	ldr	r2, [pc, #584]	@ (8008d2c <_printf_float+0x2d0>)
 8008ae4:	4b92      	ldr	r3, [pc, #584]	@ (8008d30 <_printf_float+0x2d4>)
 8008ae6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008aea:	bf8c      	ite	hi
 8008aec:	4690      	movhi	r8, r2
 8008aee:	4698      	movls	r8, r3
 8008af0:	2303      	movs	r3, #3
 8008af2:	f04f 0900 	mov.w	r9, #0
 8008af6:	6123      	str	r3, [r4, #16]
 8008af8:	f02b 0304 	bic.w	r3, fp, #4
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	4633      	mov	r3, r6
 8008b00:	4621      	mov	r1, r4
 8008b02:	4628      	mov	r0, r5
 8008b04:	9700      	str	r7, [sp, #0]
 8008b06:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008b08:	f000 f9d4 	bl	8008eb4 <_printf_common>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f040 8090 	bne.w	8008c32 <_printf_float+0x1d6>
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	b011      	add	sp, #68	@ 0x44
 8008b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	464b      	mov	r3, r9
 8008b20:	4640      	mov	r0, r8
 8008b22:	4649      	mov	r1, r9
 8008b24:	f7f7 ff72 	bl	8000a0c <__aeabi_dcmpun>
 8008b28:	b148      	cbz	r0, 8008b3e <_printf_float+0xe2>
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	bfb8      	it	lt
 8008b30:	232d      	movlt	r3, #45	@ 0x2d
 8008b32:	4a80      	ldr	r2, [pc, #512]	@ (8008d34 <_printf_float+0x2d8>)
 8008b34:	bfb8      	it	lt
 8008b36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8008d38 <_printf_float+0x2dc>)
 8008b3c:	e7d3      	b.n	8008ae6 <_printf_float+0x8a>
 8008b3e:	6863      	ldr	r3, [r4, #4]
 8008b40:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	d13f      	bne.n	8008bc8 <_printf_float+0x16c>
 8008b48:	2306      	movs	r3, #6
 8008b4a:	6063      	str	r3, [r4, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008b52:	6023      	str	r3, [r4, #0]
 8008b54:	9206      	str	r2, [sp, #24]
 8008b56:	aa0e      	add	r2, sp, #56	@ 0x38
 8008b58:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008b5c:	aa0d      	add	r2, sp, #52	@ 0x34
 8008b5e:	9203      	str	r2, [sp, #12]
 8008b60:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008b64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008b68:	6863      	ldr	r3, [r4, #4]
 8008b6a:	4642      	mov	r2, r8
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	4628      	mov	r0, r5
 8008b70:	464b      	mov	r3, r9
 8008b72:	910a      	str	r1, [sp, #40]	@ 0x28
 8008b74:	f7ff fed4 	bl	8008920 <__cvt>
 8008b78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	2947      	cmp	r1, #71	@ 0x47
 8008b7e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008b80:	d128      	bne.n	8008bd4 <_printf_float+0x178>
 8008b82:	1cc8      	adds	r0, r1, #3
 8008b84:	db02      	blt.n	8008b8c <_printf_float+0x130>
 8008b86:	6863      	ldr	r3, [r4, #4]
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	dd40      	ble.n	8008c0e <_printf_float+0x1b2>
 8008b8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008b90:	fa5f fa8a 	uxtb.w	sl, sl
 8008b94:	4652      	mov	r2, sl
 8008b96:	3901      	subs	r1, #1
 8008b98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008b9c:	910d      	str	r1, [sp, #52]	@ 0x34
 8008b9e:	f7ff ff23 	bl	80089e8 <__exponent>
 8008ba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ba4:	4681      	mov	r9, r0
 8008ba6:	1813      	adds	r3, r2, r0
 8008ba8:	2a01      	cmp	r2, #1
 8008baa:	6123      	str	r3, [r4, #16]
 8008bac:	dc02      	bgt.n	8008bb4 <_printf_float+0x158>
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	07d2      	lsls	r2, r2, #31
 8008bb2:	d501      	bpl.n	8008bb8 <_printf_float+0x15c>
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	6123      	str	r3, [r4, #16]
 8008bb8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d09e      	beq.n	8008afe <_printf_float+0xa2>
 8008bc0:	232d      	movs	r3, #45	@ 0x2d
 8008bc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bc6:	e79a      	b.n	8008afe <_printf_float+0xa2>
 8008bc8:	2947      	cmp	r1, #71	@ 0x47
 8008bca:	d1bf      	bne.n	8008b4c <_printf_float+0xf0>
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1bd      	bne.n	8008b4c <_printf_float+0xf0>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e7ba      	b.n	8008b4a <_printf_float+0xee>
 8008bd4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008bd8:	d9dc      	bls.n	8008b94 <_printf_float+0x138>
 8008bda:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008bde:	d118      	bne.n	8008c12 <_printf_float+0x1b6>
 8008be0:	2900      	cmp	r1, #0
 8008be2:	6863      	ldr	r3, [r4, #4]
 8008be4:	dd0b      	ble.n	8008bfe <_printf_float+0x1a2>
 8008be6:	6121      	str	r1, [r4, #16]
 8008be8:	b913      	cbnz	r3, 8008bf0 <_printf_float+0x194>
 8008bea:	6822      	ldr	r2, [r4, #0]
 8008bec:	07d0      	lsls	r0, r2, #31
 8008bee:	d502      	bpl.n	8008bf6 <_printf_float+0x19a>
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	440b      	add	r3, r1
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	f04f 0900 	mov.w	r9, #0
 8008bfa:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008bfc:	e7dc      	b.n	8008bb8 <_printf_float+0x15c>
 8008bfe:	b913      	cbnz	r3, 8008c06 <_printf_float+0x1aa>
 8008c00:	6822      	ldr	r2, [r4, #0]
 8008c02:	07d2      	lsls	r2, r2, #31
 8008c04:	d501      	bpl.n	8008c0a <_printf_float+0x1ae>
 8008c06:	3302      	adds	r3, #2
 8008c08:	e7f4      	b.n	8008bf4 <_printf_float+0x198>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e7f2      	b.n	8008bf4 <_printf_float+0x198>
 8008c0e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c14:	4299      	cmp	r1, r3
 8008c16:	db05      	blt.n	8008c24 <_printf_float+0x1c8>
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	6121      	str	r1, [r4, #16]
 8008c1c:	07d8      	lsls	r0, r3, #31
 8008c1e:	d5ea      	bpl.n	8008bf6 <_printf_float+0x19a>
 8008c20:	1c4b      	adds	r3, r1, #1
 8008c22:	e7e7      	b.n	8008bf4 <_printf_float+0x198>
 8008c24:	2900      	cmp	r1, #0
 8008c26:	bfcc      	ite	gt
 8008c28:	2201      	movgt	r2, #1
 8008c2a:	f1c1 0202 	rsble	r2, r1, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	e7e0      	b.n	8008bf4 <_printf_float+0x198>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	055a      	lsls	r2, r3, #21
 8008c36:	d407      	bmi.n	8008c48 <_printf_float+0x1ec>
 8008c38:	6923      	ldr	r3, [r4, #16]
 8008c3a:	4642      	mov	r2, r8
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4628      	mov	r0, r5
 8008c40:	47b8      	blx	r7
 8008c42:	3001      	adds	r0, #1
 8008c44:	d12b      	bne.n	8008c9e <_printf_float+0x242>
 8008c46:	e764      	b.n	8008b12 <_printf_float+0xb6>
 8008c48:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c4c:	f240 80dc 	bls.w	8008e08 <_printf_float+0x3ac>
 8008c50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c54:	2200      	movs	r2, #0
 8008c56:	2300      	movs	r3, #0
 8008c58:	f7f7 fea6 	bl	80009a8 <__aeabi_dcmpeq>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d033      	beq.n	8008cc8 <_printf_float+0x26c>
 8008c60:	2301      	movs	r3, #1
 8008c62:	4631      	mov	r1, r6
 8008c64:	4628      	mov	r0, r5
 8008c66:	4a35      	ldr	r2, [pc, #212]	@ (8008d3c <_printf_float+0x2e0>)
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f43f af51 	beq.w	8008b12 <_printf_float+0xb6>
 8008c70:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008c74:	4543      	cmp	r3, r8
 8008c76:	db02      	blt.n	8008c7e <_printf_float+0x222>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	07d8      	lsls	r0, r3, #31
 8008c7c:	d50f      	bpl.n	8008c9e <_printf_float+0x242>
 8008c7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c82:	4631      	mov	r1, r6
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b8      	blx	r7
 8008c88:	3001      	adds	r0, #1
 8008c8a:	f43f af42 	beq.w	8008b12 <_printf_float+0xb6>
 8008c8e:	f04f 0900 	mov.w	r9, #0
 8008c92:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c96:	f104 0a1a 	add.w	sl, r4, #26
 8008c9a:	45c8      	cmp	r8, r9
 8008c9c:	dc09      	bgt.n	8008cb2 <_printf_float+0x256>
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	079b      	lsls	r3, r3, #30
 8008ca2:	f100 8102 	bmi.w	8008eaa <_printf_float+0x44e>
 8008ca6:	68e0      	ldr	r0, [r4, #12]
 8008ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008caa:	4298      	cmp	r0, r3
 8008cac:	bfb8      	it	lt
 8008cae:	4618      	movlt	r0, r3
 8008cb0:	e731      	b.n	8008b16 <_printf_float+0xba>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	4652      	mov	r2, sl
 8008cb6:	4631      	mov	r1, r6
 8008cb8:	4628      	mov	r0, r5
 8008cba:	47b8      	blx	r7
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	f43f af28 	beq.w	8008b12 <_printf_float+0xb6>
 8008cc2:	f109 0901 	add.w	r9, r9, #1
 8008cc6:	e7e8      	b.n	8008c9a <_printf_float+0x23e>
 8008cc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	dc38      	bgt.n	8008d40 <_printf_float+0x2e4>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4631      	mov	r1, r6
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	4a19      	ldr	r2, [pc, #100]	@ (8008d3c <_printf_float+0x2e0>)
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f43f af1a 	beq.w	8008b12 <_printf_float+0xb6>
 8008cde:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008ce2:	ea59 0303 	orrs.w	r3, r9, r3
 8008ce6:	d102      	bne.n	8008cee <_printf_float+0x292>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	07d9      	lsls	r1, r3, #31
 8008cec:	d5d7      	bpl.n	8008c9e <_printf_float+0x242>
 8008cee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	47b8      	blx	r7
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	f43f af0a 	beq.w	8008b12 <_printf_float+0xb6>
 8008cfe:	f04f 0a00 	mov.w	sl, #0
 8008d02:	f104 0b1a 	add.w	fp, r4, #26
 8008d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d08:	425b      	negs	r3, r3
 8008d0a:	4553      	cmp	r3, sl
 8008d0c:	dc01      	bgt.n	8008d12 <_printf_float+0x2b6>
 8008d0e:	464b      	mov	r3, r9
 8008d10:	e793      	b.n	8008c3a <_printf_float+0x1de>
 8008d12:	2301      	movs	r3, #1
 8008d14:	465a      	mov	r2, fp
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f43f aef8 	beq.w	8008b12 <_printf_float+0xb6>
 8008d22:	f10a 0a01 	add.w	sl, sl, #1
 8008d26:	e7ee      	b.n	8008d06 <_printf_float+0x2aa>
 8008d28:	7fefffff 	.word	0x7fefffff
 8008d2c:	0800b2c2 	.word	0x0800b2c2
 8008d30:	0800b2be 	.word	0x0800b2be
 8008d34:	0800b2ca 	.word	0x0800b2ca
 8008d38:	0800b2c6 	.word	0x0800b2c6
 8008d3c:	0800b2ce 	.word	0x0800b2ce
 8008d40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d42:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008d46:	4553      	cmp	r3, sl
 8008d48:	bfa8      	it	ge
 8008d4a:	4653      	movge	r3, sl
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	4699      	mov	r9, r3
 8008d50:	dc36      	bgt.n	8008dc0 <_printf_float+0x364>
 8008d52:	f04f 0b00 	mov.w	fp, #0
 8008d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d5a:	f104 021a 	add.w	r2, r4, #26
 8008d5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d60:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d62:	eba3 0309 	sub.w	r3, r3, r9
 8008d66:	455b      	cmp	r3, fp
 8008d68:	dc31      	bgt.n	8008dce <_printf_float+0x372>
 8008d6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d6c:	459a      	cmp	sl, r3
 8008d6e:	dc3a      	bgt.n	8008de6 <_printf_float+0x38a>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	07da      	lsls	r2, r3, #31
 8008d74:	d437      	bmi.n	8008de6 <_printf_float+0x38a>
 8008d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d78:	ebaa 0903 	sub.w	r9, sl, r3
 8008d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d7e:	ebaa 0303 	sub.w	r3, sl, r3
 8008d82:	4599      	cmp	r9, r3
 8008d84:	bfa8      	it	ge
 8008d86:	4699      	movge	r9, r3
 8008d88:	f1b9 0f00 	cmp.w	r9, #0
 8008d8c:	dc33      	bgt.n	8008df6 <_printf_float+0x39a>
 8008d8e:	f04f 0800 	mov.w	r8, #0
 8008d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d96:	f104 0b1a 	add.w	fp, r4, #26
 8008d9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d9c:	ebaa 0303 	sub.w	r3, sl, r3
 8008da0:	eba3 0309 	sub.w	r3, r3, r9
 8008da4:	4543      	cmp	r3, r8
 8008da6:	f77f af7a 	ble.w	8008c9e <_printf_float+0x242>
 8008daa:	2301      	movs	r3, #1
 8008dac:	465a      	mov	r2, fp
 8008dae:	4631      	mov	r1, r6
 8008db0:	4628      	mov	r0, r5
 8008db2:	47b8      	blx	r7
 8008db4:	3001      	adds	r0, #1
 8008db6:	f43f aeac 	beq.w	8008b12 <_printf_float+0xb6>
 8008dba:	f108 0801 	add.w	r8, r8, #1
 8008dbe:	e7ec      	b.n	8008d9a <_printf_float+0x33e>
 8008dc0:	4642      	mov	r2, r8
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	47b8      	blx	r7
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d1c2      	bne.n	8008d52 <_printf_float+0x2f6>
 8008dcc:	e6a1      	b.n	8008b12 <_printf_float+0xb6>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	920a      	str	r2, [sp, #40]	@ 0x28
 8008dd6:	47b8      	blx	r7
 8008dd8:	3001      	adds	r0, #1
 8008dda:	f43f ae9a 	beq.w	8008b12 <_printf_float+0xb6>
 8008dde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008de0:	f10b 0b01 	add.w	fp, fp, #1
 8008de4:	e7bb      	b.n	8008d5e <_printf_float+0x302>
 8008de6:	4631      	mov	r1, r6
 8008de8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008dec:	4628      	mov	r0, r5
 8008dee:	47b8      	blx	r7
 8008df0:	3001      	adds	r0, #1
 8008df2:	d1c0      	bne.n	8008d76 <_printf_float+0x31a>
 8008df4:	e68d      	b.n	8008b12 <_printf_float+0xb6>
 8008df6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008df8:	464b      	mov	r3, r9
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	4442      	add	r2, r8
 8008e00:	47b8      	blx	r7
 8008e02:	3001      	adds	r0, #1
 8008e04:	d1c3      	bne.n	8008d8e <_printf_float+0x332>
 8008e06:	e684      	b.n	8008b12 <_printf_float+0xb6>
 8008e08:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008e0c:	f1ba 0f01 	cmp.w	sl, #1
 8008e10:	dc01      	bgt.n	8008e16 <_printf_float+0x3ba>
 8008e12:	07db      	lsls	r3, r3, #31
 8008e14:	d536      	bpl.n	8008e84 <_printf_float+0x428>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4642      	mov	r2, r8
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	47b8      	blx	r7
 8008e20:	3001      	adds	r0, #1
 8008e22:	f43f ae76 	beq.w	8008b12 <_printf_float+0xb6>
 8008e26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	47b8      	blx	r7
 8008e30:	3001      	adds	r0, #1
 8008e32:	f43f ae6e 	beq.w	8008b12 <_printf_float+0xb6>
 8008e36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e42:	f7f7 fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8008e46:	b9c0      	cbnz	r0, 8008e7a <_printf_float+0x41e>
 8008e48:	4653      	mov	r3, sl
 8008e4a:	f108 0201 	add.w	r2, r8, #1
 8008e4e:	4631      	mov	r1, r6
 8008e50:	4628      	mov	r0, r5
 8008e52:	47b8      	blx	r7
 8008e54:	3001      	adds	r0, #1
 8008e56:	d10c      	bne.n	8008e72 <_printf_float+0x416>
 8008e58:	e65b      	b.n	8008b12 <_printf_float+0xb6>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	465a      	mov	r2, fp
 8008e5e:	4631      	mov	r1, r6
 8008e60:	4628      	mov	r0, r5
 8008e62:	47b8      	blx	r7
 8008e64:	3001      	adds	r0, #1
 8008e66:	f43f ae54 	beq.w	8008b12 <_printf_float+0xb6>
 8008e6a:	f108 0801 	add.w	r8, r8, #1
 8008e6e:	45d0      	cmp	r8, sl
 8008e70:	dbf3      	blt.n	8008e5a <_printf_float+0x3fe>
 8008e72:	464b      	mov	r3, r9
 8008e74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008e78:	e6e0      	b.n	8008c3c <_printf_float+0x1e0>
 8008e7a:	f04f 0800 	mov.w	r8, #0
 8008e7e:	f104 0b1a 	add.w	fp, r4, #26
 8008e82:	e7f4      	b.n	8008e6e <_printf_float+0x412>
 8008e84:	2301      	movs	r3, #1
 8008e86:	4642      	mov	r2, r8
 8008e88:	e7e1      	b.n	8008e4e <_printf_float+0x3f2>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	464a      	mov	r2, r9
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4628      	mov	r0, r5
 8008e92:	47b8      	blx	r7
 8008e94:	3001      	adds	r0, #1
 8008e96:	f43f ae3c 	beq.w	8008b12 <_printf_float+0xb6>
 8008e9a:	f108 0801 	add.w	r8, r8, #1
 8008e9e:	68e3      	ldr	r3, [r4, #12]
 8008ea0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ea2:	1a5b      	subs	r3, r3, r1
 8008ea4:	4543      	cmp	r3, r8
 8008ea6:	dcf0      	bgt.n	8008e8a <_printf_float+0x42e>
 8008ea8:	e6fd      	b.n	8008ca6 <_printf_float+0x24a>
 8008eaa:	f04f 0800 	mov.w	r8, #0
 8008eae:	f104 0919 	add.w	r9, r4, #25
 8008eb2:	e7f4      	b.n	8008e9e <_printf_float+0x442>

08008eb4 <_printf_common>:
 8008eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb8:	4616      	mov	r6, r2
 8008eba:	4698      	mov	r8, r3
 8008ebc:	688a      	ldr	r2, [r1, #8]
 8008ebe:	690b      	ldr	r3, [r1, #16]
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	bfb8      	it	lt
 8008ec6:	4613      	movlt	r3, r2
 8008ec8:	6033      	str	r3, [r6, #0]
 8008eca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ece:	460c      	mov	r4, r1
 8008ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ed4:	b10a      	cbz	r2, 8008eda <_printf_common+0x26>
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	6033      	str	r3, [r6, #0]
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	0699      	lsls	r1, r3, #26
 8008ede:	bf42      	ittt	mi
 8008ee0:	6833      	ldrmi	r3, [r6, #0]
 8008ee2:	3302      	addmi	r3, #2
 8008ee4:	6033      	strmi	r3, [r6, #0]
 8008ee6:	6825      	ldr	r5, [r4, #0]
 8008ee8:	f015 0506 	ands.w	r5, r5, #6
 8008eec:	d106      	bne.n	8008efc <_printf_common+0x48>
 8008eee:	f104 0a19 	add.w	sl, r4, #25
 8008ef2:	68e3      	ldr	r3, [r4, #12]
 8008ef4:	6832      	ldr	r2, [r6, #0]
 8008ef6:	1a9b      	subs	r3, r3, r2
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	dc2b      	bgt.n	8008f54 <_printf_common+0xa0>
 8008efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f00:	6822      	ldr	r2, [r4, #0]
 8008f02:	3b00      	subs	r3, #0
 8008f04:	bf18      	it	ne
 8008f06:	2301      	movne	r3, #1
 8008f08:	0692      	lsls	r2, r2, #26
 8008f0a:	d430      	bmi.n	8008f6e <_printf_common+0xba>
 8008f0c:	4641      	mov	r1, r8
 8008f0e:	4638      	mov	r0, r7
 8008f10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f14:	47c8      	blx	r9
 8008f16:	3001      	adds	r0, #1
 8008f18:	d023      	beq.n	8008f62 <_printf_common+0xae>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	6922      	ldr	r2, [r4, #16]
 8008f1e:	f003 0306 	and.w	r3, r3, #6
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	bf14      	ite	ne
 8008f26:	2500      	movne	r5, #0
 8008f28:	6833      	ldreq	r3, [r6, #0]
 8008f2a:	f04f 0600 	mov.w	r6, #0
 8008f2e:	bf08      	it	eq
 8008f30:	68e5      	ldreq	r5, [r4, #12]
 8008f32:	f104 041a 	add.w	r4, r4, #26
 8008f36:	bf08      	it	eq
 8008f38:	1aed      	subeq	r5, r5, r3
 8008f3a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008f3e:	bf08      	it	eq
 8008f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f44:	4293      	cmp	r3, r2
 8008f46:	bfc4      	itt	gt
 8008f48:	1a9b      	subgt	r3, r3, r2
 8008f4a:	18ed      	addgt	r5, r5, r3
 8008f4c:	42b5      	cmp	r5, r6
 8008f4e:	d11a      	bne.n	8008f86 <_printf_common+0xd2>
 8008f50:	2000      	movs	r0, #0
 8008f52:	e008      	b.n	8008f66 <_printf_common+0xb2>
 8008f54:	2301      	movs	r3, #1
 8008f56:	4652      	mov	r2, sl
 8008f58:	4641      	mov	r1, r8
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	47c8      	blx	r9
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d103      	bne.n	8008f6a <_printf_common+0xb6>
 8008f62:	f04f 30ff 	mov.w	r0, #4294967295
 8008f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6a:	3501      	adds	r5, #1
 8008f6c:	e7c1      	b.n	8008ef2 <_printf_common+0x3e>
 8008f6e:	2030      	movs	r0, #48	@ 0x30
 8008f70:	18e1      	adds	r1, r4, r3
 8008f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f7c:	4422      	add	r2, r4
 8008f7e:	3302      	adds	r3, #2
 8008f80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f84:	e7c2      	b.n	8008f0c <_printf_common+0x58>
 8008f86:	2301      	movs	r3, #1
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4641      	mov	r1, r8
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	47c8      	blx	r9
 8008f90:	3001      	adds	r0, #1
 8008f92:	d0e6      	beq.n	8008f62 <_printf_common+0xae>
 8008f94:	3601      	adds	r6, #1
 8008f96:	e7d9      	b.n	8008f4c <_printf_common+0x98>

08008f98 <_printf_i>:
 8008f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9c:	7e0f      	ldrb	r7, [r1, #24]
 8008f9e:	4691      	mov	r9, r2
 8008fa0:	2f78      	cmp	r7, #120	@ 0x78
 8008fa2:	4680      	mov	r8, r0
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	469a      	mov	sl, r3
 8008fa8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fae:	d807      	bhi.n	8008fc0 <_printf_i+0x28>
 8008fb0:	2f62      	cmp	r7, #98	@ 0x62
 8008fb2:	d80a      	bhi.n	8008fca <_printf_i+0x32>
 8008fb4:	2f00      	cmp	r7, #0
 8008fb6:	f000 80d1 	beq.w	800915c <_printf_i+0x1c4>
 8008fba:	2f58      	cmp	r7, #88	@ 0x58
 8008fbc:	f000 80b8 	beq.w	8009130 <_printf_i+0x198>
 8008fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fc8:	e03a      	b.n	8009040 <_printf_i+0xa8>
 8008fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fce:	2b15      	cmp	r3, #21
 8008fd0:	d8f6      	bhi.n	8008fc0 <_printf_i+0x28>
 8008fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8008fd8 <_printf_i+0x40>)
 8008fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fd8:	08009031 	.word	0x08009031
 8008fdc:	08009045 	.word	0x08009045
 8008fe0:	08008fc1 	.word	0x08008fc1
 8008fe4:	08008fc1 	.word	0x08008fc1
 8008fe8:	08008fc1 	.word	0x08008fc1
 8008fec:	08008fc1 	.word	0x08008fc1
 8008ff0:	08009045 	.word	0x08009045
 8008ff4:	08008fc1 	.word	0x08008fc1
 8008ff8:	08008fc1 	.word	0x08008fc1
 8008ffc:	08008fc1 	.word	0x08008fc1
 8009000:	08008fc1 	.word	0x08008fc1
 8009004:	08009143 	.word	0x08009143
 8009008:	0800906f 	.word	0x0800906f
 800900c:	080090fd 	.word	0x080090fd
 8009010:	08008fc1 	.word	0x08008fc1
 8009014:	08008fc1 	.word	0x08008fc1
 8009018:	08009165 	.word	0x08009165
 800901c:	08008fc1 	.word	0x08008fc1
 8009020:	0800906f 	.word	0x0800906f
 8009024:	08008fc1 	.word	0x08008fc1
 8009028:	08008fc1 	.word	0x08008fc1
 800902c:	08009105 	.word	0x08009105
 8009030:	6833      	ldr	r3, [r6, #0]
 8009032:	1d1a      	adds	r2, r3, #4
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6032      	str	r2, [r6, #0]
 8009038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800903c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009040:	2301      	movs	r3, #1
 8009042:	e09c      	b.n	800917e <_printf_i+0x1e6>
 8009044:	6833      	ldr	r3, [r6, #0]
 8009046:	6820      	ldr	r0, [r4, #0]
 8009048:	1d19      	adds	r1, r3, #4
 800904a:	6031      	str	r1, [r6, #0]
 800904c:	0606      	lsls	r6, r0, #24
 800904e:	d501      	bpl.n	8009054 <_printf_i+0xbc>
 8009050:	681d      	ldr	r5, [r3, #0]
 8009052:	e003      	b.n	800905c <_printf_i+0xc4>
 8009054:	0645      	lsls	r5, r0, #25
 8009056:	d5fb      	bpl.n	8009050 <_printf_i+0xb8>
 8009058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800905c:	2d00      	cmp	r5, #0
 800905e:	da03      	bge.n	8009068 <_printf_i+0xd0>
 8009060:	232d      	movs	r3, #45	@ 0x2d
 8009062:	426d      	negs	r5, r5
 8009064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009068:	230a      	movs	r3, #10
 800906a:	4858      	ldr	r0, [pc, #352]	@ (80091cc <_printf_i+0x234>)
 800906c:	e011      	b.n	8009092 <_printf_i+0xfa>
 800906e:	6821      	ldr	r1, [r4, #0]
 8009070:	6833      	ldr	r3, [r6, #0]
 8009072:	0608      	lsls	r0, r1, #24
 8009074:	f853 5b04 	ldr.w	r5, [r3], #4
 8009078:	d402      	bmi.n	8009080 <_printf_i+0xe8>
 800907a:	0649      	lsls	r1, r1, #25
 800907c:	bf48      	it	mi
 800907e:	b2ad      	uxthmi	r5, r5
 8009080:	2f6f      	cmp	r7, #111	@ 0x6f
 8009082:	6033      	str	r3, [r6, #0]
 8009084:	bf14      	ite	ne
 8009086:	230a      	movne	r3, #10
 8009088:	2308      	moveq	r3, #8
 800908a:	4850      	ldr	r0, [pc, #320]	@ (80091cc <_printf_i+0x234>)
 800908c:	2100      	movs	r1, #0
 800908e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009092:	6866      	ldr	r6, [r4, #4]
 8009094:	2e00      	cmp	r6, #0
 8009096:	60a6      	str	r6, [r4, #8]
 8009098:	db05      	blt.n	80090a6 <_printf_i+0x10e>
 800909a:	6821      	ldr	r1, [r4, #0]
 800909c:	432e      	orrs	r6, r5
 800909e:	f021 0104 	bic.w	r1, r1, #4
 80090a2:	6021      	str	r1, [r4, #0]
 80090a4:	d04b      	beq.n	800913e <_printf_i+0x1a6>
 80090a6:	4616      	mov	r6, r2
 80090a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80090ac:	fb03 5711 	mls	r7, r3, r1, r5
 80090b0:	5dc7      	ldrb	r7, [r0, r7]
 80090b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090b6:	462f      	mov	r7, r5
 80090b8:	42bb      	cmp	r3, r7
 80090ba:	460d      	mov	r5, r1
 80090bc:	d9f4      	bls.n	80090a8 <_printf_i+0x110>
 80090be:	2b08      	cmp	r3, #8
 80090c0:	d10b      	bne.n	80090da <_printf_i+0x142>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	07df      	lsls	r7, r3, #31
 80090c6:	d508      	bpl.n	80090da <_printf_i+0x142>
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	6861      	ldr	r1, [r4, #4]
 80090cc:	4299      	cmp	r1, r3
 80090ce:	bfde      	ittt	le
 80090d0:	2330      	movle	r3, #48	@ 0x30
 80090d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090da:	1b92      	subs	r2, r2, r6
 80090dc:	6122      	str	r2, [r4, #16]
 80090de:	464b      	mov	r3, r9
 80090e0:	4621      	mov	r1, r4
 80090e2:	4640      	mov	r0, r8
 80090e4:	f8cd a000 	str.w	sl, [sp]
 80090e8:	aa03      	add	r2, sp, #12
 80090ea:	f7ff fee3 	bl	8008eb4 <_printf_common>
 80090ee:	3001      	adds	r0, #1
 80090f0:	d14a      	bne.n	8009188 <_printf_i+0x1f0>
 80090f2:	f04f 30ff 	mov.w	r0, #4294967295
 80090f6:	b004      	add	sp, #16
 80090f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	f043 0320 	orr.w	r3, r3, #32
 8009102:	6023      	str	r3, [r4, #0]
 8009104:	2778      	movs	r7, #120	@ 0x78
 8009106:	4832      	ldr	r0, [pc, #200]	@ (80091d0 <_printf_i+0x238>)
 8009108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	6831      	ldr	r1, [r6, #0]
 8009110:	061f      	lsls	r7, r3, #24
 8009112:	f851 5b04 	ldr.w	r5, [r1], #4
 8009116:	d402      	bmi.n	800911e <_printf_i+0x186>
 8009118:	065f      	lsls	r7, r3, #25
 800911a:	bf48      	it	mi
 800911c:	b2ad      	uxthmi	r5, r5
 800911e:	6031      	str	r1, [r6, #0]
 8009120:	07d9      	lsls	r1, r3, #31
 8009122:	bf44      	itt	mi
 8009124:	f043 0320 	orrmi.w	r3, r3, #32
 8009128:	6023      	strmi	r3, [r4, #0]
 800912a:	b11d      	cbz	r5, 8009134 <_printf_i+0x19c>
 800912c:	2310      	movs	r3, #16
 800912e:	e7ad      	b.n	800908c <_printf_i+0xf4>
 8009130:	4826      	ldr	r0, [pc, #152]	@ (80091cc <_printf_i+0x234>)
 8009132:	e7e9      	b.n	8009108 <_printf_i+0x170>
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	f023 0320 	bic.w	r3, r3, #32
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	e7f6      	b.n	800912c <_printf_i+0x194>
 800913e:	4616      	mov	r6, r2
 8009140:	e7bd      	b.n	80090be <_printf_i+0x126>
 8009142:	6833      	ldr	r3, [r6, #0]
 8009144:	6825      	ldr	r5, [r4, #0]
 8009146:	1d18      	adds	r0, r3, #4
 8009148:	6961      	ldr	r1, [r4, #20]
 800914a:	6030      	str	r0, [r6, #0]
 800914c:	062e      	lsls	r6, r5, #24
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	d501      	bpl.n	8009156 <_printf_i+0x1be>
 8009152:	6019      	str	r1, [r3, #0]
 8009154:	e002      	b.n	800915c <_printf_i+0x1c4>
 8009156:	0668      	lsls	r0, r5, #25
 8009158:	d5fb      	bpl.n	8009152 <_printf_i+0x1ba>
 800915a:	8019      	strh	r1, [r3, #0]
 800915c:	2300      	movs	r3, #0
 800915e:	4616      	mov	r6, r2
 8009160:	6123      	str	r3, [r4, #16]
 8009162:	e7bc      	b.n	80090de <_printf_i+0x146>
 8009164:	6833      	ldr	r3, [r6, #0]
 8009166:	2100      	movs	r1, #0
 8009168:	1d1a      	adds	r2, r3, #4
 800916a:	6032      	str	r2, [r6, #0]
 800916c:	681e      	ldr	r6, [r3, #0]
 800916e:	6862      	ldr	r2, [r4, #4]
 8009170:	4630      	mov	r0, r6
 8009172:	f000 f9b4 	bl	80094de <memchr>
 8009176:	b108      	cbz	r0, 800917c <_printf_i+0x1e4>
 8009178:	1b80      	subs	r0, r0, r6
 800917a:	6060      	str	r0, [r4, #4]
 800917c:	6863      	ldr	r3, [r4, #4]
 800917e:	6123      	str	r3, [r4, #16]
 8009180:	2300      	movs	r3, #0
 8009182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009186:	e7aa      	b.n	80090de <_printf_i+0x146>
 8009188:	4632      	mov	r2, r6
 800918a:	4649      	mov	r1, r9
 800918c:	4640      	mov	r0, r8
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	47d0      	blx	sl
 8009192:	3001      	adds	r0, #1
 8009194:	d0ad      	beq.n	80090f2 <_printf_i+0x15a>
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	079b      	lsls	r3, r3, #30
 800919a:	d413      	bmi.n	80091c4 <_printf_i+0x22c>
 800919c:	68e0      	ldr	r0, [r4, #12]
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	4298      	cmp	r0, r3
 80091a2:	bfb8      	it	lt
 80091a4:	4618      	movlt	r0, r3
 80091a6:	e7a6      	b.n	80090f6 <_printf_i+0x15e>
 80091a8:	2301      	movs	r3, #1
 80091aa:	4632      	mov	r2, r6
 80091ac:	4649      	mov	r1, r9
 80091ae:	4640      	mov	r0, r8
 80091b0:	47d0      	blx	sl
 80091b2:	3001      	adds	r0, #1
 80091b4:	d09d      	beq.n	80090f2 <_printf_i+0x15a>
 80091b6:	3501      	adds	r5, #1
 80091b8:	68e3      	ldr	r3, [r4, #12]
 80091ba:	9903      	ldr	r1, [sp, #12]
 80091bc:	1a5b      	subs	r3, r3, r1
 80091be:	42ab      	cmp	r3, r5
 80091c0:	dcf2      	bgt.n	80091a8 <_printf_i+0x210>
 80091c2:	e7eb      	b.n	800919c <_printf_i+0x204>
 80091c4:	2500      	movs	r5, #0
 80091c6:	f104 0619 	add.w	r6, r4, #25
 80091ca:	e7f5      	b.n	80091b8 <_printf_i+0x220>
 80091cc:	0800b2d0 	.word	0x0800b2d0
 80091d0:	0800b2e1 	.word	0x0800b2e1

080091d4 <std>:
 80091d4:	2300      	movs	r3, #0
 80091d6:	b510      	push	{r4, lr}
 80091d8:	4604      	mov	r4, r0
 80091da:	e9c0 3300 	strd	r3, r3, [r0]
 80091de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091e2:	6083      	str	r3, [r0, #8]
 80091e4:	8181      	strh	r1, [r0, #12]
 80091e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80091e8:	81c2      	strh	r2, [r0, #14]
 80091ea:	6183      	str	r3, [r0, #24]
 80091ec:	4619      	mov	r1, r3
 80091ee:	2208      	movs	r2, #8
 80091f0:	305c      	adds	r0, #92	@ 0x5c
 80091f2:	f000 f8f4 	bl	80093de <memset>
 80091f6:	4b0d      	ldr	r3, [pc, #52]	@ (800922c <std+0x58>)
 80091f8:	6224      	str	r4, [r4, #32]
 80091fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80091fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009230 <std+0x5c>)
 80091fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009200:	4b0c      	ldr	r3, [pc, #48]	@ (8009234 <std+0x60>)
 8009202:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009204:	4b0c      	ldr	r3, [pc, #48]	@ (8009238 <std+0x64>)
 8009206:	6323      	str	r3, [r4, #48]	@ 0x30
 8009208:	4b0c      	ldr	r3, [pc, #48]	@ (800923c <std+0x68>)
 800920a:	429c      	cmp	r4, r3
 800920c:	d006      	beq.n	800921c <std+0x48>
 800920e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009212:	4294      	cmp	r4, r2
 8009214:	d002      	beq.n	800921c <std+0x48>
 8009216:	33d0      	adds	r3, #208	@ 0xd0
 8009218:	429c      	cmp	r4, r3
 800921a:	d105      	bne.n	8009228 <std+0x54>
 800921c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009224:	f000 b958 	b.w	80094d8 <__retarget_lock_init_recursive>
 8009228:	bd10      	pop	{r4, pc}
 800922a:	bf00      	nop
 800922c:	08009359 	.word	0x08009359
 8009230:	0800937b 	.word	0x0800937b
 8009234:	080093b3 	.word	0x080093b3
 8009238:	080093d7 	.word	0x080093d7
 800923c:	20001578 	.word	0x20001578

08009240 <stdio_exit_handler>:
 8009240:	4a02      	ldr	r2, [pc, #8]	@ (800924c <stdio_exit_handler+0xc>)
 8009242:	4903      	ldr	r1, [pc, #12]	@ (8009250 <stdio_exit_handler+0x10>)
 8009244:	4803      	ldr	r0, [pc, #12]	@ (8009254 <stdio_exit_handler+0x14>)
 8009246:	f000 b869 	b.w	800931c <_fwalk_sglue>
 800924a:	bf00      	nop
 800924c:	2000017c 	.word	0x2000017c
 8009250:	0800aba9 	.word	0x0800aba9
 8009254:	2000018c 	.word	0x2000018c

08009258 <cleanup_stdio>:
 8009258:	6841      	ldr	r1, [r0, #4]
 800925a:	4b0c      	ldr	r3, [pc, #48]	@ (800928c <cleanup_stdio+0x34>)
 800925c:	b510      	push	{r4, lr}
 800925e:	4299      	cmp	r1, r3
 8009260:	4604      	mov	r4, r0
 8009262:	d001      	beq.n	8009268 <cleanup_stdio+0x10>
 8009264:	f001 fca0 	bl	800aba8 <_fflush_r>
 8009268:	68a1      	ldr	r1, [r4, #8]
 800926a:	4b09      	ldr	r3, [pc, #36]	@ (8009290 <cleanup_stdio+0x38>)
 800926c:	4299      	cmp	r1, r3
 800926e:	d002      	beq.n	8009276 <cleanup_stdio+0x1e>
 8009270:	4620      	mov	r0, r4
 8009272:	f001 fc99 	bl	800aba8 <_fflush_r>
 8009276:	68e1      	ldr	r1, [r4, #12]
 8009278:	4b06      	ldr	r3, [pc, #24]	@ (8009294 <cleanup_stdio+0x3c>)
 800927a:	4299      	cmp	r1, r3
 800927c:	d004      	beq.n	8009288 <cleanup_stdio+0x30>
 800927e:	4620      	mov	r0, r4
 8009280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009284:	f001 bc90 	b.w	800aba8 <_fflush_r>
 8009288:	bd10      	pop	{r4, pc}
 800928a:	bf00      	nop
 800928c:	20001578 	.word	0x20001578
 8009290:	200015e0 	.word	0x200015e0
 8009294:	20001648 	.word	0x20001648

08009298 <global_stdio_init.part.0>:
 8009298:	b510      	push	{r4, lr}
 800929a:	4b0b      	ldr	r3, [pc, #44]	@ (80092c8 <global_stdio_init.part.0+0x30>)
 800929c:	4c0b      	ldr	r4, [pc, #44]	@ (80092cc <global_stdio_init.part.0+0x34>)
 800929e:	4a0c      	ldr	r2, [pc, #48]	@ (80092d0 <global_stdio_init.part.0+0x38>)
 80092a0:	4620      	mov	r0, r4
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	2104      	movs	r1, #4
 80092a6:	2200      	movs	r2, #0
 80092a8:	f7ff ff94 	bl	80091d4 <std>
 80092ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092b0:	2201      	movs	r2, #1
 80092b2:	2109      	movs	r1, #9
 80092b4:	f7ff ff8e 	bl	80091d4 <std>
 80092b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092bc:	2202      	movs	r2, #2
 80092be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c2:	2112      	movs	r1, #18
 80092c4:	f7ff bf86 	b.w	80091d4 <std>
 80092c8:	200016b0 	.word	0x200016b0
 80092cc:	20001578 	.word	0x20001578
 80092d0:	08009241 	.word	0x08009241

080092d4 <__sfp_lock_acquire>:
 80092d4:	4801      	ldr	r0, [pc, #4]	@ (80092dc <__sfp_lock_acquire+0x8>)
 80092d6:	f000 b900 	b.w	80094da <__retarget_lock_acquire_recursive>
 80092da:	bf00      	nop
 80092dc:	200016b9 	.word	0x200016b9

080092e0 <__sfp_lock_release>:
 80092e0:	4801      	ldr	r0, [pc, #4]	@ (80092e8 <__sfp_lock_release+0x8>)
 80092e2:	f000 b8fb 	b.w	80094dc <__retarget_lock_release_recursive>
 80092e6:	bf00      	nop
 80092e8:	200016b9 	.word	0x200016b9

080092ec <__sinit>:
 80092ec:	b510      	push	{r4, lr}
 80092ee:	4604      	mov	r4, r0
 80092f0:	f7ff fff0 	bl	80092d4 <__sfp_lock_acquire>
 80092f4:	6a23      	ldr	r3, [r4, #32]
 80092f6:	b11b      	cbz	r3, 8009300 <__sinit+0x14>
 80092f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092fc:	f7ff bff0 	b.w	80092e0 <__sfp_lock_release>
 8009300:	4b04      	ldr	r3, [pc, #16]	@ (8009314 <__sinit+0x28>)
 8009302:	6223      	str	r3, [r4, #32]
 8009304:	4b04      	ldr	r3, [pc, #16]	@ (8009318 <__sinit+0x2c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1f5      	bne.n	80092f8 <__sinit+0xc>
 800930c:	f7ff ffc4 	bl	8009298 <global_stdio_init.part.0>
 8009310:	e7f2      	b.n	80092f8 <__sinit+0xc>
 8009312:	bf00      	nop
 8009314:	08009259 	.word	0x08009259
 8009318:	200016b0 	.word	0x200016b0

0800931c <_fwalk_sglue>:
 800931c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009320:	4607      	mov	r7, r0
 8009322:	4688      	mov	r8, r1
 8009324:	4614      	mov	r4, r2
 8009326:	2600      	movs	r6, #0
 8009328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800932c:	f1b9 0901 	subs.w	r9, r9, #1
 8009330:	d505      	bpl.n	800933e <_fwalk_sglue+0x22>
 8009332:	6824      	ldr	r4, [r4, #0]
 8009334:	2c00      	cmp	r4, #0
 8009336:	d1f7      	bne.n	8009328 <_fwalk_sglue+0xc>
 8009338:	4630      	mov	r0, r6
 800933a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800933e:	89ab      	ldrh	r3, [r5, #12]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d907      	bls.n	8009354 <_fwalk_sglue+0x38>
 8009344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009348:	3301      	adds	r3, #1
 800934a:	d003      	beq.n	8009354 <_fwalk_sglue+0x38>
 800934c:	4629      	mov	r1, r5
 800934e:	4638      	mov	r0, r7
 8009350:	47c0      	blx	r8
 8009352:	4306      	orrs	r6, r0
 8009354:	3568      	adds	r5, #104	@ 0x68
 8009356:	e7e9      	b.n	800932c <_fwalk_sglue+0x10>

08009358 <__sread>:
 8009358:	b510      	push	{r4, lr}
 800935a:	460c      	mov	r4, r1
 800935c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009360:	f000 f86c 	bl	800943c <_read_r>
 8009364:	2800      	cmp	r0, #0
 8009366:	bfab      	itete	ge
 8009368:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800936a:	89a3      	ldrhlt	r3, [r4, #12]
 800936c:	181b      	addge	r3, r3, r0
 800936e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009372:	bfac      	ite	ge
 8009374:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009376:	81a3      	strhlt	r3, [r4, #12]
 8009378:	bd10      	pop	{r4, pc}

0800937a <__swrite>:
 800937a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937e:	461f      	mov	r7, r3
 8009380:	898b      	ldrh	r3, [r1, #12]
 8009382:	4605      	mov	r5, r0
 8009384:	05db      	lsls	r3, r3, #23
 8009386:	460c      	mov	r4, r1
 8009388:	4616      	mov	r6, r2
 800938a:	d505      	bpl.n	8009398 <__swrite+0x1e>
 800938c:	2302      	movs	r3, #2
 800938e:	2200      	movs	r2, #0
 8009390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009394:	f000 f840 	bl	8009418 <_lseek_r>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	4632      	mov	r2, r6
 800939c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093a0:	81a3      	strh	r3, [r4, #12]
 80093a2:	4628      	mov	r0, r5
 80093a4:	463b      	mov	r3, r7
 80093a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ae:	f000 b857 	b.w	8009460 <_write_r>

080093b2 <__sseek>:
 80093b2:	b510      	push	{r4, lr}
 80093b4:	460c      	mov	r4, r1
 80093b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ba:	f000 f82d 	bl	8009418 <_lseek_r>
 80093be:	1c43      	adds	r3, r0, #1
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	bf15      	itete	ne
 80093c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093ce:	81a3      	strheq	r3, [r4, #12]
 80093d0:	bf18      	it	ne
 80093d2:	81a3      	strhne	r3, [r4, #12]
 80093d4:	bd10      	pop	{r4, pc}

080093d6 <__sclose>:
 80093d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093da:	f000 b80d 	b.w	80093f8 <_close_r>

080093de <memset>:
 80093de:	4603      	mov	r3, r0
 80093e0:	4402      	add	r2, r0
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d100      	bne.n	80093e8 <memset+0xa>
 80093e6:	4770      	bx	lr
 80093e8:	f803 1b01 	strb.w	r1, [r3], #1
 80093ec:	e7f9      	b.n	80093e2 <memset+0x4>
	...

080093f0 <_localeconv_r>:
 80093f0:	4800      	ldr	r0, [pc, #0]	@ (80093f4 <_localeconv_r+0x4>)
 80093f2:	4770      	bx	lr
 80093f4:	200002c8 	.word	0x200002c8

080093f8 <_close_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	2300      	movs	r3, #0
 80093fc:	4d05      	ldr	r5, [pc, #20]	@ (8009414 <_close_r+0x1c>)
 80093fe:	4604      	mov	r4, r0
 8009400:	4608      	mov	r0, r1
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	f7f7 fd0b 	bl	8000e1e <_close>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d102      	bne.n	8009412 <_close_r+0x1a>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	b103      	cbz	r3, 8009412 <_close_r+0x1a>
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	200016b4 	.word	0x200016b4

08009418 <_lseek_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	4604      	mov	r4, r0
 800941c:	4608      	mov	r0, r1
 800941e:	4611      	mov	r1, r2
 8009420:	2200      	movs	r2, #0
 8009422:	4d05      	ldr	r5, [pc, #20]	@ (8009438 <_lseek_r+0x20>)
 8009424:	602a      	str	r2, [r5, #0]
 8009426:	461a      	mov	r2, r3
 8009428:	f7f7 fd1d 	bl	8000e66 <_lseek>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_lseek_r+0x1e>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	b103      	cbz	r3, 8009436 <_lseek_r+0x1e>
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	200016b4 	.word	0x200016b4

0800943c <_read_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	4611      	mov	r1, r2
 8009444:	2200      	movs	r2, #0
 8009446:	4d05      	ldr	r5, [pc, #20]	@ (800945c <_read_r+0x20>)
 8009448:	602a      	str	r2, [r5, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	f7f7 fcae 	bl	8000dac <_read>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_read_r+0x1e>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b103      	cbz	r3, 800945a <_read_r+0x1e>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	200016b4 	.word	0x200016b4

08009460 <_write_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	4611      	mov	r1, r2
 8009468:	2200      	movs	r2, #0
 800946a:	4d05      	ldr	r5, [pc, #20]	@ (8009480 <_write_r+0x20>)
 800946c:	602a      	str	r2, [r5, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	f7f7 fcb9 	bl	8000de6 <_write>
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	d102      	bne.n	800947e <_write_r+0x1e>
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	b103      	cbz	r3, 800947e <_write_r+0x1e>
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	200016b4 	.word	0x200016b4

08009484 <__errno>:
 8009484:	4b01      	ldr	r3, [pc, #4]	@ (800948c <__errno+0x8>)
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	20000188 	.word	0x20000188

08009490 <__libc_init_array>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	2600      	movs	r6, #0
 8009494:	4d0c      	ldr	r5, [pc, #48]	@ (80094c8 <__libc_init_array+0x38>)
 8009496:	4c0d      	ldr	r4, [pc, #52]	@ (80094cc <__libc_init_array+0x3c>)
 8009498:	1b64      	subs	r4, r4, r5
 800949a:	10a4      	asrs	r4, r4, #2
 800949c:	42a6      	cmp	r6, r4
 800949e:	d109      	bne.n	80094b4 <__libc_init_array+0x24>
 80094a0:	f001 fece 	bl	800b240 <_init>
 80094a4:	2600      	movs	r6, #0
 80094a6:	4d0a      	ldr	r5, [pc, #40]	@ (80094d0 <__libc_init_array+0x40>)
 80094a8:	4c0a      	ldr	r4, [pc, #40]	@ (80094d4 <__libc_init_array+0x44>)
 80094aa:	1b64      	subs	r4, r4, r5
 80094ac:	10a4      	asrs	r4, r4, #2
 80094ae:	42a6      	cmp	r6, r4
 80094b0:	d105      	bne.n	80094be <__libc_init_array+0x2e>
 80094b2:	bd70      	pop	{r4, r5, r6, pc}
 80094b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b8:	4798      	blx	r3
 80094ba:	3601      	adds	r6, #1
 80094bc:	e7ee      	b.n	800949c <__libc_init_array+0xc>
 80094be:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c2:	4798      	blx	r3
 80094c4:	3601      	adds	r6, #1
 80094c6:	e7f2      	b.n	80094ae <__libc_init_array+0x1e>
 80094c8:	0800b63c 	.word	0x0800b63c
 80094cc:	0800b63c 	.word	0x0800b63c
 80094d0:	0800b63c 	.word	0x0800b63c
 80094d4:	0800b640 	.word	0x0800b640

080094d8 <__retarget_lock_init_recursive>:
 80094d8:	4770      	bx	lr

080094da <__retarget_lock_acquire_recursive>:
 80094da:	4770      	bx	lr

080094dc <__retarget_lock_release_recursive>:
 80094dc:	4770      	bx	lr

080094de <memchr>:
 80094de:	4603      	mov	r3, r0
 80094e0:	b510      	push	{r4, lr}
 80094e2:	b2c9      	uxtb	r1, r1
 80094e4:	4402      	add	r2, r0
 80094e6:	4293      	cmp	r3, r2
 80094e8:	4618      	mov	r0, r3
 80094ea:	d101      	bne.n	80094f0 <memchr+0x12>
 80094ec:	2000      	movs	r0, #0
 80094ee:	e003      	b.n	80094f8 <memchr+0x1a>
 80094f0:	7804      	ldrb	r4, [r0, #0]
 80094f2:	3301      	adds	r3, #1
 80094f4:	428c      	cmp	r4, r1
 80094f6:	d1f6      	bne.n	80094e6 <memchr+0x8>
 80094f8:	bd10      	pop	{r4, pc}

080094fa <quorem>:
 80094fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fe:	6903      	ldr	r3, [r0, #16]
 8009500:	690c      	ldr	r4, [r1, #16]
 8009502:	4607      	mov	r7, r0
 8009504:	42a3      	cmp	r3, r4
 8009506:	db7e      	blt.n	8009606 <quorem+0x10c>
 8009508:	3c01      	subs	r4, #1
 800950a:	00a3      	lsls	r3, r4, #2
 800950c:	f100 0514 	add.w	r5, r0, #20
 8009510:	f101 0814 	add.w	r8, r1, #20
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009520:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009524:	3301      	adds	r3, #1
 8009526:	429a      	cmp	r2, r3
 8009528:	fbb2 f6f3 	udiv	r6, r2, r3
 800952c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009530:	d32e      	bcc.n	8009590 <quorem+0x96>
 8009532:	f04f 0a00 	mov.w	sl, #0
 8009536:	46c4      	mov	ip, r8
 8009538:	46ae      	mov	lr, r5
 800953a:	46d3      	mov	fp, sl
 800953c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009540:	b298      	uxth	r0, r3
 8009542:	fb06 a000 	mla	r0, r6, r0, sl
 8009546:	0c1b      	lsrs	r3, r3, #16
 8009548:	0c02      	lsrs	r2, r0, #16
 800954a:	fb06 2303 	mla	r3, r6, r3, r2
 800954e:	f8de 2000 	ldr.w	r2, [lr]
 8009552:	b280      	uxth	r0, r0
 8009554:	b292      	uxth	r2, r2
 8009556:	1a12      	subs	r2, r2, r0
 8009558:	445a      	add	r2, fp
 800955a:	f8de 0000 	ldr.w	r0, [lr]
 800955e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009562:	b29b      	uxth	r3, r3
 8009564:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009568:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800956c:	b292      	uxth	r2, r2
 800956e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009572:	45e1      	cmp	r9, ip
 8009574:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009578:	f84e 2b04 	str.w	r2, [lr], #4
 800957c:	d2de      	bcs.n	800953c <quorem+0x42>
 800957e:	9b00      	ldr	r3, [sp, #0]
 8009580:	58eb      	ldr	r3, [r5, r3]
 8009582:	b92b      	cbnz	r3, 8009590 <quorem+0x96>
 8009584:	9b01      	ldr	r3, [sp, #4]
 8009586:	3b04      	subs	r3, #4
 8009588:	429d      	cmp	r5, r3
 800958a:	461a      	mov	r2, r3
 800958c:	d32f      	bcc.n	80095ee <quorem+0xf4>
 800958e:	613c      	str	r4, [r7, #16]
 8009590:	4638      	mov	r0, r7
 8009592:	f001 f981 	bl	800a898 <__mcmp>
 8009596:	2800      	cmp	r0, #0
 8009598:	db25      	blt.n	80095e6 <quorem+0xec>
 800959a:	4629      	mov	r1, r5
 800959c:	2000      	movs	r0, #0
 800959e:	f858 2b04 	ldr.w	r2, [r8], #4
 80095a2:	f8d1 c000 	ldr.w	ip, [r1]
 80095a6:	fa1f fe82 	uxth.w	lr, r2
 80095aa:	fa1f f38c 	uxth.w	r3, ip
 80095ae:	eba3 030e 	sub.w	r3, r3, lr
 80095b2:	4403      	add	r3, r0
 80095b4:	0c12      	lsrs	r2, r2, #16
 80095b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80095ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80095be:	b29b      	uxth	r3, r3
 80095c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095c4:	45c1      	cmp	r9, r8
 80095c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095ca:	f841 3b04 	str.w	r3, [r1], #4
 80095ce:	d2e6      	bcs.n	800959e <quorem+0xa4>
 80095d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095d8:	b922      	cbnz	r2, 80095e4 <quorem+0xea>
 80095da:	3b04      	subs	r3, #4
 80095dc:	429d      	cmp	r5, r3
 80095de:	461a      	mov	r2, r3
 80095e0:	d30b      	bcc.n	80095fa <quorem+0x100>
 80095e2:	613c      	str	r4, [r7, #16]
 80095e4:	3601      	adds	r6, #1
 80095e6:	4630      	mov	r0, r6
 80095e8:	b003      	add	sp, #12
 80095ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ee:	6812      	ldr	r2, [r2, #0]
 80095f0:	3b04      	subs	r3, #4
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	d1cb      	bne.n	800958e <quorem+0x94>
 80095f6:	3c01      	subs	r4, #1
 80095f8:	e7c6      	b.n	8009588 <quorem+0x8e>
 80095fa:	6812      	ldr	r2, [r2, #0]
 80095fc:	3b04      	subs	r3, #4
 80095fe:	2a00      	cmp	r2, #0
 8009600:	d1ef      	bne.n	80095e2 <quorem+0xe8>
 8009602:	3c01      	subs	r4, #1
 8009604:	e7ea      	b.n	80095dc <quorem+0xe2>
 8009606:	2000      	movs	r0, #0
 8009608:	e7ee      	b.n	80095e8 <quorem+0xee>
 800960a:	0000      	movs	r0, r0
 800960c:	0000      	movs	r0, r0
	...

08009610 <_dtoa_r>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	4614      	mov	r4, r2
 8009616:	461d      	mov	r5, r3
 8009618:	69c7      	ldr	r7, [r0, #28]
 800961a:	b097      	sub	sp, #92	@ 0x5c
 800961c:	4681      	mov	r9, r0
 800961e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009622:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009624:	b97f      	cbnz	r7, 8009646 <_dtoa_r+0x36>
 8009626:	2010      	movs	r0, #16
 8009628:	f000 fe0e 	bl	800a248 <malloc>
 800962c:	4602      	mov	r2, r0
 800962e:	f8c9 001c 	str.w	r0, [r9, #28]
 8009632:	b920      	cbnz	r0, 800963e <_dtoa_r+0x2e>
 8009634:	21ef      	movs	r1, #239	@ 0xef
 8009636:	4bac      	ldr	r3, [pc, #688]	@ (80098e8 <_dtoa_r+0x2d8>)
 8009638:	48ac      	ldr	r0, [pc, #688]	@ (80098ec <_dtoa_r+0x2dc>)
 800963a:	f001 fafb 	bl	800ac34 <__assert_func>
 800963e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009642:	6007      	str	r7, [r0, #0]
 8009644:	60c7      	str	r7, [r0, #12]
 8009646:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800964a:	6819      	ldr	r1, [r3, #0]
 800964c:	b159      	cbz	r1, 8009666 <_dtoa_r+0x56>
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	2301      	movs	r3, #1
 8009652:	4093      	lsls	r3, r2
 8009654:	604a      	str	r2, [r1, #4]
 8009656:	608b      	str	r3, [r1, #8]
 8009658:	4648      	mov	r0, r9
 800965a:	f000 feeb 	bl	800a434 <_Bfree>
 800965e:	2200      	movs	r2, #0
 8009660:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	1e2b      	subs	r3, r5, #0
 8009668:	bfaf      	iteee	ge
 800966a:	2300      	movge	r3, #0
 800966c:	2201      	movlt	r2, #1
 800966e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009672:	9307      	strlt	r3, [sp, #28]
 8009674:	bfa8      	it	ge
 8009676:	6033      	strge	r3, [r6, #0]
 8009678:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800967c:	4b9c      	ldr	r3, [pc, #624]	@ (80098f0 <_dtoa_r+0x2e0>)
 800967e:	bfb8      	it	lt
 8009680:	6032      	strlt	r2, [r6, #0]
 8009682:	ea33 0308 	bics.w	r3, r3, r8
 8009686:	d112      	bne.n	80096ae <_dtoa_r+0x9e>
 8009688:	f242 730f 	movw	r3, #9999	@ 0x270f
 800968c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009694:	4323      	orrs	r3, r4
 8009696:	f000 855e 	beq.w	800a156 <_dtoa_r+0xb46>
 800969a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800969c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80098f4 <_dtoa_r+0x2e4>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 8560 	beq.w	800a166 <_dtoa_r+0xb56>
 80096a6:	f10a 0303 	add.w	r3, sl, #3
 80096aa:	f000 bd5a 	b.w	800a162 <_dtoa_r+0xb52>
 80096ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80096b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096ba:	2200      	movs	r2, #0
 80096bc:	2300      	movs	r3, #0
 80096be:	f7f7 f973 	bl	80009a8 <__aeabi_dcmpeq>
 80096c2:	4607      	mov	r7, r0
 80096c4:	b158      	cbz	r0, 80096de <_dtoa_r+0xce>
 80096c6:	2301      	movs	r3, #1
 80096c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80096ce:	b113      	cbz	r3, 80096d6 <_dtoa_r+0xc6>
 80096d0:	4b89      	ldr	r3, [pc, #548]	@ (80098f8 <_dtoa_r+0x2e8>)
 80096d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80098fc <_dtoa_r+0x2ec>
 80096da:	f000 bd44 	b.w	800a166 <_dtoa_r+0xb56>
 80096de:	ab14      	add	r3, sp, #80	@ 0x50
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	ab15      	add	r3, sp, #84	@ 0x54
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	4648      	mov	r0, r9
 80096e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80096ec:	f001 f984 	bl	800a9f8 <__d2b>
 80096f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80096f4:	9003      	str	r0, [sp, #12]
 80096f6:	2e00      	cmp	r6, #0
 80096f8:	d078      	beq.n	80097ec <_dtoa_r+0x1dc>
 80096fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009700:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009708:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800970c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009710:	9712      	str	r7, [sp, #72]	@ 0x48
 8009712:	4619      	mov	r1, r3
 8009714:	2200      	movs	r2, #0
 8009716:	4b7a      	ldr	r3, [pc, #488]	@ (8009900 <_dtoa_r+0x2f0>)
 8009718:	f7f6 fd26 	bl	8000168 <__aeabi_dsub>
 800971c:	a36c      	add	r3, pc, #432	@ (adr r3, 80098d0 <_dtoa_r+0x2c0>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f7f6 fed9 	bl	80004d8 <__aeabi_dmul>
 8009726:	a36c      	add	r3, pc, #432	@ (adr r3, 80098d8 <_dtoa_r+0x2c8>)
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	f7f6 fd1e 	bl	800016c <__adddf3>
 8009730:	4604      	mov	r4, r0
 8009732:	4630      	mov	r0, r6
 8009734:	460d      	mov	r5, r1
 8009736:	f7f6 fe65 	bl	8000404 <__aeabi_i2d>
 800973a:	a369      	add	r3, pc, #420	@ (adr r3, 80098e0 <_dtoa_r+0x2d0>)
 800973c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009740:	f7f6 feca 	bl	80004d8 <__aeabi_dmul>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4620      	mov	r0, r4
 800974a:	4629      	mov	r1, r5
 800974c:	f7f6 fd0e 	bl	800016c <__adddf3>
 8009750:	4604      	mov	r4, r0
 8009752:	460d      	mov	r5, r1
 8009754:	f7f7 f970 	bl	8000a38 <__aeabi_d2iz>
 8009758:	2200      	movs	r2, #0
 800975a:	4607      	mov	r7, r0
 800975c:	2300      	movs	r3, #0
 800975e:	4620      	mov	r0, r4
 8009760:	4629      	mov	r1, r5
 8009762:	f7f7 f92b 	bl	80009bc <__aeabi_dcmplt>
 8009766:	b140      	cbz	r0, 800977a <_dtoa_r+0x16a>
 8009768:	4638      	mov	r0, r7
 800976a:	f7f6 fe4b 	bl	8000404 <__aeabi_i2d>
 800976e:	4622      	mov	r2, r4
 8009770:	462b      	mov	r3, r5
 8009772:	f7f7 f919 	bl	80009a8 <__aeabi_dcmpeq>
 8009776:	b900      	cbnz	r0, 800977a <_dtoa_r+0x16a>
 8009778:	3f01      	subs	r7, #1
 800977a:	2f16      	cmp	r7, #22
 800977c:	d854      	bhi.n	8009828 <_dtoa_r+0x218>
 800977e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009782:	4b60      	ldr	r3, [pc, #384]	@ (8009904 <_dtoa_r+0x2f4>)
 8009784:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f7f7 f916 	bl	80009bc <__aeabi_dcmplt>
 8009790:	2800      	cmp	r0, #0
 8009792:	d04b      	beq.n	800982c <_dtoa_r+0x21c>
 8009794:	2300      	movs	r3, #0
 8009796:	3f01      	subs	r7, #1
 8009798:	930f      	str	r3, [sp, #60]	@ 0x3c
 800979a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800979c:	1b9b      	subs	r3, r3, r6
 800979e:	1e5a      	subs	r2, r3, #1
 80097a0:	bf49      	itett	mi
 80097a2:	f1c3 0301 	rsbmi	r3, r3, #1
 80097a6:	2300      	movpl	r3, #0
 80097a8:	9304      	strmi	r3, [sp, #16]
 80097aa:	2300      	movmi	r3, #0
 80097ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80097ae:	bf54      	ite	pl
 80097b0:	9304      	strpl	r3, [sp, #16]
 80097b2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80097b4:	2f00      	cmp	r7, #0
 80097b6:	db3b      	blt.n	8009830 <_dtoa_r+0x220>
 80097b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ba:	970e      	str	r7, [sp, #56]	@ 0x38
 80097bc:	443b      	add	r3, r7
 80097be:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c0:	2300      	movs	r3, #0
 80097c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80097c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80097c6:	2b09      	cmp	r3, #9
 80097c8:	d865      	bhi.n	8009896 <_dtoa_r+0x286>
 80097ca:	2b05      	cmp	r3, #5
 80097cc:	bfc4      	itt	gt
 80097ce:	3b04      	subgt	r3, #4
 80097d0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80097d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80097d4:	bfc8      	it	gt
 80097d6:	2400      	movgt	r4, #0
 80097d8:	f1a3 0302 	sub.w	r3, r3, #2
 80097dc:	bfd8      	it	le
 80097de:	2401      	movle	r4, #1
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d864      	bhi.n	80098ae <_dtoa_r+0x29e>
 80097e4:	e8df f003 	tbb	[pc, r3]
 80097e8:	2c385553 	.word	0x2c385553
 80097ec:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80097f0:	441e      	add	r6, r3
 80097f2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80097f6:	2b20      	cmp	r3, #32
 80097f8:	bfc1      	itttt	gt
 80097fa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80097fe:	fa08 f803 	lslgt.w	r8, r8, r3
 8009802:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009806:	fa24 f303 	lsrgt.w	r3, r4, r3
 800980a:	bfd6      	itet	le
 800980c:	f1c3 0320 	rsble	r3, r3, #32
 8009810:	ea48 0003 	orrgt.w	r0, r8, r3
 8009814:	fa04 f003 	lslle.w	r0, r4, r3
 8009818:	f7f6 fde4 	bl	80003e4 <__aeabi_ui2d>
 800981c:	2201      	movs	r2, #1
 800981e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009822:	3e01      	subs	r6, #1
 8009824:	9212      	str	r2, [sp, #72]	@ 0x48
 8009826:	e774      	b.n	8009712 <_dtoa_r+0x102>
 8009828:	2301      	movs	r3, #1
 800982a:	e7b5      	b.n	8009798 <_dtoa_r+0x188>
 800982c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800982e:	e7b4      	b.n	800979a <_dtoa_r+0x18a>
 8009830:	9b04      	ldr	r3, [sp, #16]
 8009832:	1bdb      	subs	r3, r3, r7
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	427b      	negs	r3, r7
 8009838:	930a      	str	r3, [sp, #40]	@ 0x28
 800983a:	2300      	movs	r3, #0
 800983c:	930e      	str	r3, [sp, #56]	@ 0x38
 800983e:	e7c1      	b.n	80097c4 <_dtoa_r+0x1b4>
 8009840:	2301      	movs	r3, #1
 8009842:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009844:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009846:	eb07 0b03 	add.w	fp, r7, r3
 800984a:	f10b 0301 	add.w	r3, fp, #1
 800984e:	2b01      	cmp	r3, #1
 8009850:	9308      	str	r3, [sp, #32]
 8009852:	bfb8      	it	lt
 8009854:	2301      	movlt	r3, #1
 8009856:	e006      	b.n	8009866 <_dtoa_r+0x256>
 8009858:	2301      	movs	r3, #1
 800985a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800985c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800985e:	2b00      	cmp	r3, #0
 8009860:	dd28      	ble.n	80098b4 <_dtoa_r+0x2a4>
 8009862:	469b      	mov	fp, r3
 8009864:	9308      	str	r3, [sp, #32]
 8009866:	2100      	movs	r1, #0
 8009868:	2204      	movs	r2, #4
 800986a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800986e:	f102 0514 	add.w	r5, r2, #20
 8009872:	429d      	cmp	r5, r3
 8009874:	d926      	bls.n	80098c4 <_dtoa_r+0x2b4>
 8009876:	6041      	str	r1, [r0, #4]
 8009878:	4648      	mov	r0, r9
 800987a:	f000 fd9b 	bl	800a3b4 <_Balloc>
 800987e:	4682      	mov	sl, r0
 8009880:	2800      	cmp	r0, #0
 8009882:	d143      	bne.n	800990c <_dtoa_r+0x2fc>
 8009884:	4602      	mov	r2, r0
 8009886:	f240 11af 	movw	r1, #431	@ 0x1af
 800988a:	4b1f      	ldr	r3, [pc, #124]	@ (8009908 <_dtoa_r+0x2f8>)
 800988c:	e6d4      	b.n	8009638 <_dtoa_r+0x28>
 800988e:	2300      	movs	r3, #0
 8009890:	e7e3      	b.n	800985a <_dtoa_r+0x24a>
 8009892:	2300      	movs	r3, #0
 8009894:	e7d5      	b.n	8009842 <_dtoa_r+0x232>
 8009896:	2401      	movs	r4, #1
 8009898:	2300      	movs	r3, #0
 800989a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800989c:	9320      	str	r3, [sp, #128]	@ 0x80
 800989e:	f04f 3bff 	mov.w	fp, #4294967295
 80098a2:	2200      	movs	r2, #0
 80098a4:	2312      	movs	r3, #18
 80098a6:	f8cd b020 	str.w	fp, [sp, #32]
 80098aa:	9221      	str	r2, [sp, #132]	@ 0x84
 80098ac:	e7db      	b.n	8009866 <_dtoa_r+0x256>
 80098ae:	2301      	movs	r3, #1
 80098b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098b2:	e7f4      	b.n	800989e <_dtoa_r+0x28e>
 80098b4:	f04f 0b01 	mov.w	fp, #1
 80098b8:	465b      	mov	r3, fp
 80098ba:	f8cd b020 	str.w	fp, [sp, #32]
 80098be:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80098c2:	e7d0      	b.n	8009866 <_dtoa_r+0x256>
 80098c4:	3101      	adds	r1, #1
 80098c6:	0052      	lsls	r2, r2, #1
 80098c8:	e7d1      	b.n	800986e <_dtoa_r+0x25e>
 80098ca:	bf00      	nop
 80098cc:	f3af 8000 	nop.w
 80098d0:	636f4361 	.word	0x636f4361
 80098d4:	3fd287a7 	.word	0x3fd287a7
 80098d8:	8b60c8b3 	.word	0x8b60c8b3
 80098dc:	3fc68a28 	.word	0x3fc68a28
 80098e0:	509f79fb 	.word	0x509f79fb
 80098e4:	3fd34413 	.word	0x3fd34413
 80098e8:	0800b2ff 	.word	0x0800b2ff
 80098ec:	0800b316 	.word	0x0800b316
 80098f0:	7ff00000 	.word	0x7ff00000
 80098f4:	0800b2fb 	.word	0x0800b2fb
 80098f8:	0800b2cf 	.word	0x0800b2cf
 80098fc:	0800b2ce 	.word	0x0800b2ce
 8009900:	3ff80000 	.word	0x3ff80000
 8009904:	0800b468 	.word	0x0800b468
 8009908:	0800b36e 	.word	0x0800b36e
 800990c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009910:	6018      	str	r0, [r3, #0]
 8009912:	9b08      	ldr	r3, [sp, #32]
 8009914:	2b0e      	cmp	r3, #14
 8009916:	f200 80a1 	bhi.w	8009a5c <_dtoa_r+0x44c>
 800991a:	2c00      	cmp	r4, #0
 800991c:	f000 809e 	beq.w	8009a5c <_dtoa_r+0x44c>
 8009920:	2f00      	cmp	r7, #0
 8009922:	dd33      	ble.n	800998c <_dtoa_r+0x37c>
 8009924:	4b9c      	ldr	r3, [pc, #624]	@ (8009b98 <_dtoa_r+0x588>)
 8009926:	f007 020f 	and.w	r2, r7, #15
 800992a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800992e:	05f8      	lsls	r0, r7, #23
 8009930:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009934:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009938:	ea4f 1427 	mov.w	r4, r7, asr #4
 800993c:	d516      	bpl.n	800996c <_dtoa_r+0x35c>
 800993e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009942:	4b96      	ldr	r3, [pc, #600]	@ (8009b9c <_dtoa_r+0x58c>)
 8009944:	2603      	movs	r6, #3
 8009946:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800994a:	f7f6 feef 	bl	800072c <__aeabi_ddiv>
 800994e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009952:	f004 040f 	and.w	r4, r4, #15
 8009956:	4d91      	ldr	r5, [pc, #580]	@ (8009b9c <_dtoa_r+0x58c>)
 8009958:	b954      	cbnz	r4, 8009970 <_dtoa_r+0x360>
 800995a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800995e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009962:	f7f6 fee3 	bl	800072c <__aeabi_ddiv>
 8009966:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800996a:	e028      	b.n	80099be <_dtoa_r+0x3ae>
 800996c:	2602      	movs	r6, #2
 800996e:	e7f2      	b.n	8009956 <_dtoa_r+0x346>
 8009970:	07e1      	lsls	r1, r4, #31
 8009972:	d508      	bpl.n	8009986 <_dtoa_r+0x376>
 8009974:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800997c:	f7f6 fdac 	bl	80004d8 <__aeabi_dmul>
 8009980:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009984:	3601      	adds	r6, #1
 8009986:	1064      	asrs	r4, r4, #1
 8009988:	3508      	adds	r5, #8
 800998a:	e7e5      	b.n	8009958 <_dtoa_r+0x348>
 800998c:	f000 80af 	beq.w	8009aee <_dtoa_r+0x4de>
 8009990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009994:	427c      	negs	r4, r7
 8009996:	4b80      	ldr	r3, [pc, #512]	@ (8009b98 <_dtoa_r+0x588>)
 8009998:	f004 020f 	and.w	r2, r4, #15
 800999c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f7f6 fd98 	bl	80004d8 <__aeabi_dmul>
 80099a8:	2602      	movs	r6, #2
 80099aa:	2300      	movs	r3, #0
 80099ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099b0:	4d7a      	ldr	r5, [pc, #488]	@ (8009b9c <_dtoa_r+0x58c>)
 80099b2:	1124      	asrs	r4, r4, #4
 80099b4:	2c00      	cmp	r4, #0
 80099b6:	f040 808f 	bne.w	8009ad8 <_dtoa_r+0x4c8>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1d3      	bne.n	8009966 <_dtoa_r+0x356>
 80099be:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80099c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f000 8094 	beq.w	8009af2 <_dtoa_r+0x4e2>
 80099ca:	2200      	movs	r2, #0
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	4b73      	ldr	r3, [pc, #460]	@ (8009ba0 <_dtoa_r+0x590>)
 80099d2:	f7f6 fff3 	bl	80009bc <__aeabi_dcmplt>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	f000 808b 	beq.w	8009af2 <_dtoa_r+0x4e2>
 80099dc:	9b08      	ldr	r3, [sp, #32]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 8087 	beq.w	8009af2 <_dtoa_r+0x4e2>
 80099e4:	f1bb 0f00 	cmp.w	fp, #0
 80099e8:	dd34      	ble.n	8009a54 <_dtoa_r+0x444>
 80099ea:	4620      	mov	r0, r4
 80099ec:	2200      	movs	r2, #0
 80099ee:	4629      	mov	r1, r5
 80099f0:	4b6c      	ldr	r3, [pc, #432]	@ (8009ba4 <_dtoa_r+0x594>)
 80099f2:	f7f6 fd71 	bl	80004d8 <__aeabi_dmul>
 80099f6:	465c      	mov	r4, fp
 80099f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099fc:	f107 38ff 	add.w	r8, r7, #4294967295
 8009a00:	3601      	adds	r6, #1
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7f6 fcfe 	bl	8000404 <__aeabi_i2d>
 8009a08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a0c:	f7f6 fd64 	bl	80004d8 <__aeabi_dmul>
 8009a10:	2200      	movs	r2, #0
 8009a12:	4b65      	ldr	r3, [pc, #404]	@ (8009ba8 <_dtoa_r+0x598>)
 8009a14:	f7f6 fbaa 	bl	800016c <__adddf3>
 8009a18:	4605      	mov	r5, r0
 8009a1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a1e:	2c00      	cmp	r4, #0
 8009a20:	d16a      	bne.n	8009af8 <_dtoa_r+0x4e8>
 8009a22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a26:	2200      	movs	r2, #0
 8009a28:	4b60      	ldr	r3, [pc, #384]	@ (8009bac <_dtoa_r+0x59c>)
 8009a2a:	f7f6 fb9d 	bl	8000168 <__aeabi_dsub>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a36:	462a      	mov	r2, r5
 8009a38:	4633      	mov	r3, r6
 8009a3a:	f7f6 ffdd 	bl	80009f8 <__aeabi_dcmpgt>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f040 8298 	bne.w	8009f74 <_dtoa_r+0x964>
 8009a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a48:	462a      	mov	r2, r5
 8009a4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a4e:	f7f6 ffb5 	bl	80009bc <__aeabi_dcmplt>
 8009a52:	bb38      	cbnz	r0, 8009aa4 <_dtoa_r+0x494>
 8009a54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009a58:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009a5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f2c0 8157 	blt.w	8009d12 <_dtoa_r+0x702>
 8009a64:	2f0e      	cmp	r7, #14
 8009a66:	f300 8154 	bgt.w	8009d12 <_dtoa_r+0x702>
 8009a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8009b98 <_dtoa_r+0x588>)
 8009a6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009a78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f280 80e5 	bge.w	8009c4a <_dtoa_r+0x63a>
 8009a80:	9b08      	ldr	r3, [sp, #32]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f300 80e1 	bgt.w	8009c4a <_dtoa_r+0x63a>
 8009a88:	d10c      	bne.n	8009aa4 <_dtoa_r+0x494>
 8009a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	4b46      	ldr	r3, [pc, #280]	@ (8009bac <_dtoa_r+0x59c>)
 8009a92:	f7f6 fd21 	bl	80004d8 <__aeabi_dmul>
 8009a96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a9a:	f7f6 ffa3 	bl	80009e4 <__aeabi_dcmpge>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f000 8266 	beq.w	8009f70 <_dtoa_r+0x960>
 8009aa4:	2400      	movs	r4, #0
 8009aa6:	4625      	mov	r5, r4
 8009aa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009aaa:	4656      	mov	r6, sl
 8009aac:	ea6f 0803 	mvn.w	r8, r3
 8009ab0:	2700      	movs	r7, #0
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4648      	mov	r0, r9
 8009ab6:	f000 fcbd 	bl	800a434 <_Bfree>
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	f000 80bd 	beq.w	8009c3a <_dtoa_r+0x62a>
 8009ac0:	b12f      	cbz	r7, 8009ace <_dtoa_r+0x4be>
 8009ac2:	42af      	cmp	r7, r5
 8009ac4:	d003      	beq.n	8009ace <_dtoa_r+0x4be>
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	4648      	mov	r0, r9
 8009aca:	f000 fcb3 	bl	800a434 <_Bfree>
 8009ace:	4629      	mov	r1, r5
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	f000 fcaf 	bl	800a434 <_Bfree>
 8009ad6:	e0b0      	b.n	8009c3a <_dtoa_r+0x62a>
 8009ad8:	07e2      	lsls	r2, r4, #31
 8009ada:	d505      	bpl.n	8009ae8 <_dtoa_r+0x4d8>
 8009adc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ae0:	f7f6 fcfa 	bl	80004d8 <__aeabi_dmul>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	3601      	adds	r6, #1
 8009ae8:	1064      	asrs	r4, r4, #1
 8009aea:	3508      	adds	r5, #8
 8009aec:	e762      	b.n	80099b4 <_dtoa_r+0x3a4>
 8009aee:	2602      	movs	r6, #2
 8009af0:	e765      	b.n	80099be <_dtoa_r+0x3ae>
 8009af2:	46b8      	mov	r8, r7
 8009af4:	9c08      	ldr	r4, [sp, #32]
 8009af6:	e784      	b.n	8009a02 <_dtoa_r+0x3f2>
 8009af8:	4b27      	ldr	r3, [pc, #156]	@ (8009b98 <_dtoa_r+0x588>)
 8009afa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009afc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b04:	4454      	add	r4, sl
 8009b06:	2900      	cmp	r1, #0
 8009b08:	d054      	beq.n	8009bb4 <_dtoa_r+0x5a4>
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	4928      	ldr	r1, [pc, #160]	@ (8009bb0 <_dtoa_r+0x5a0>)
 8009b0e:	f7f6 fe0d 	bl	800072c <__aeabi_ddiv>
 8009b12:	4633      	mov	r3, r6
 8009b14:	462a      	mov	r2, r5
 8009b16:	f7f6 fb27 	bl	8000168 <__aeabi_dsub>
 8009b1a:	4656      	mov	r6, sl
 8009b1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b24:	f7f6 ff88 	bl	8000a38 <__aeabi_d2iz>
 8009b28:	4605      	mov	r5, r0
 8009b2a:	f7f6 fc6b 	bl	8000404 <__aeabi_i2d>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b36:	f7f6 fb17 	bl	8000168 <__aeabi_dsub>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	3530      	adds	r5, #48	@ 0x30
 8009b40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b48:	f806 5b01 	strb.w	r5, [r6], #1
 8009b4c:	f7f6 ff36 	bl	80009bc <__aeabi_dcmplt>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d172      	bne.n	8009c3a <_dtoa_r+0x62a>
 8009b54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b58:	2000      	movs	r0, #0
 8009b5a:	4911      	ldr	r1, [pc, #68]	@ (8009ba0 <_dtoa_r+0x590>)
 8009b5c:	f7f6 fb04 	bl	8000168 <__aeabi_dsub>
 8009b60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b64:	f7f6 ff2a 	bl	80009bc <__aeabi_dcmplt>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f040 80b4 	bne.w	8009cd6 <_dtoa_r+0x6c6>
 8009b6e:	42a6      	cmp	r6, r4
 8009b70:	f43f af70 	beq.w	8009a54 <_dtoa_r+0x444>
 8009b74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba4 <_dtoa_r+0x594>)
 8009b7c:	f7f6 fcac 	bl	80004d8 <__aeabi_dmul>
 8009b80:	2200      	movs	r2, #0
 8009b82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b8a:	4b06      	ldr	r3, [pc, #24]	@ (8009ba4 <_dtoa_r+0x594>)
 8009b8c:	f7f6 fca4 	bl	80004d8 <__aeabi_dmul>
 8009b90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b94:	e7c4      	b.n	8009b20 <_dtoa_r+0x510>
 8009b96:	bf00      	nop
 8009b98:	0800b468 	.word	0x0800b468
 8009b9c:	0800b440 	.word	0x0800b440
 8009ba0:	3ff00000 	.word	0x3ff00000
 8009ba4:	40240000 	.word	0x40240000
 8009ba8:	401c0000 	.word	0x401c0000
 8009bac:	40140000 	.word	0x40140000
 8009bb0:	3fe00000 	.word	0x3fe00000
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f7f6 fc8e 	bl	80004d8 <__aeabi_dmul>
 8009bbc:	4656      	mov	r6, sl
 8009bbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bc2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009bc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bc8:	f7f6 ff36 	bl	8000a38 <__aeabi_d2iz>
 8009bcc:	4605      	mov	r5, r0
 8009bce:	f7f6 fc19 	bl	8000404 <__aeabi_i2d>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bda:	f7f6 fac5 	bl	8000168 <__aeabi_dsub>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	3530      	adds	r5, #48	@ 0x30
 8009be4:	f806 5b01 	strb.w	r5, [r6], #1
 8009be8:	42a6      	cmp	r6, r4
 8009bea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009bee:	f04f 0200 	mov.w	r2, #0
 8009bf2:	d124      	bne.n	8009c3e <_dtoa_r+0x62e>
 8009bf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009bf8:	4bae      	ldr	r3, [pc, #696]	@ (8009eb4 <_dtoa_r+0x8a4>)
 8009bfa:	f7f6 fab7 	bl	800016c <__adddf3>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c06:	f7f6 fef7 	bl	80009f8 <__aeabi_dcmpgt>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d163      	bne.n	8009cd6 <_dtoa_r+0x6c6>
 8009c0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c12:	2000      	movs	r0, #0
 8009c14:	49a7      	ldr	r1, [pc, #668]	@ (8009eb4 <_dtoa_r+0x8a4>)
 8009c16:	f7f6 faa7 	bl	8000168 <__aeabi_dsub>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c22:	f7f6 fecb 	bl	80009bc <__aeabi_dcmplt>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	f43f af14 	beq.w	8009a54 <_dtoa_r+0x444>
 8009c2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009c2e:	1e73      	subs	r3, r6, #1
 8009c30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c36:	2b30      	cmp	r3, #48	@ 0x30
 8009c38:	d0f8      	beq.n	8009c2c <_dtoa_r+0x61c>
 8009c3a:	4647      	mov	r7, r8
 8009c3c:	e03b      	b.n	8009cb6 <_dtoa_r+0x6a6>
 8009c3e:	4b9e      	ldr	r3, [pc, #632]	@ (8009eb8 <_dtoa_r+0x8a8>)
 8009c40:	f7f6 fc4a 	bl	80004d8 <__aeabi_dmul>
 8009c44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c48:	e7bc      	b.n	8009bc4 <_dtoa_r+0x5b4>
 8009c4a:	4656      	mov	r6, sl
 8009c4c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c54:	4620      	mov	r0, r4
 8009c56:	4629      	mov	r1, r5
 8009c58:	f7f6 fd68 	bl	800072c <__aeabi_ddiv>
 8009c5c:	f7f6 feec 	bl	8000a38 <__aeabi_d2iz>
 8009c60:	4680      	mov	r8, r0
 8009c62:	f7f6 fbcf 	bl	8000404 <__aeabi_i2d>
 8009c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c6a:	f7f6 fc35 	bl	80004d8 <__aeabi_dmul>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	4620      	mov	r0, r4
 8009c74:	4629      	mov	r1, r5
 8009c76:	f7f6 fa77 	bl	8000168 <__aeabi_dsub>
 8009c7a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009c7e:	9d08      	ldr	r5, [sp, #32]
 8009c80:	f806 4b01 	strb.w	r4, [r6], #1
 8009c84:	eba6 040a 	sub.w	r4, r6, sl
 8009c88:	42a5      	cmp	r5, r4
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	d133      	bne.n	8009cf8 <_dtoa_r+0x6e8>
 8009c90:	f7f6 fa6c 	bl	800016c <__adddf3>
 8009c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c98:	4604      	mov	r4, r0
 8009c9a:	460d      	mov	r5, r1
 8009c9c:	f7f6 feac 	bl	80009f8 <__aeabi_dcmpgt>
 8009ca0:	b9c0      	cbnz	r0, 8009cd4 <_dtoa_r+0x6c4>
 8009ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	4629      	mov	r1, r5
 8009caa:	f7f6 fe7d 	bl	80009a8 <__aeabi_dcmpeq>
 8009cae:	b110      	cbz	r0, 8009cb6 <_dtoa_r+0x6a6>
 8009cb0:	f018 0f01 	tst.w	r8, #1
 8009cb4:	d10e      	bne.n	8009cd4 <_dtoa_r+0x6c4>
 8009cb6:	4648      	mov	r0, r9
 8009cb8:	9903      	ldr	r1, [sp, #12]
 8009cba:	f000 fbbb 	bl	800a434 <_Bfree>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	7033      	strb	r3, [r6, #0]
 8009cc2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009cc4:	3701      	adds	r7, #1
 8009cc6:	601f      	str	r7, [r3, #0]
 8009cc8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 824b 	beq.w	800a166 <_dtoa_r+0xb56>
 8009cd0:	601e      	str	r6, [r3, #0]
 8009cd2:	e248      	b.n	800a166 <_dtoa_r+0xb56>
 8009cd4:	46b8      	mov	r8, r7
 8009cd6:	4633      	mov	r3, r6
 8009cd8:	461e      	mov	r6, r3
 8009cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cde:	2a39      	cmp	r2, #57	@ 0x39
 8009ce0:	d106      	bne.n	8009cf0 <_dtoa_r+0x6e0>
 8009ce2:	459a      	cmp	sl, r3
 8009ce4:	d1f8      	bne.n	8009cd8 <_dtoa_r+0x6c8>
 8009ce6:	2230      	movs	r2, #48	@ 0x30
 8009ce8:	f108 0801 	add.w	r8, r8, #1
 8009cec:	f88a 2000 	strb.w	r2, [sl]
 8009cf0:	781a      	ldrb	r2, [r3, #0]
 8009cf2:	3201      	adds	r2, #1
 8009cf4:	701a      	strb	r2, [r3, #0]
 8009cf6:	e7a0      	b.n	8009c3a <_dtoa_r+0x62a>
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8009eb8 <_dtoa_r+0x8a8>)
 8009cfc:	f7f6 fbec 	bl	80004d8 <__aeabi_dmul>
 8009d00:	2200      	movs	r2, #0
 8009d02:	2300      	movs	r3, #0
 8009d04:	4604      	mov	r4, r0
 8009d06:	460d      	mov	r5, r1
 8009d08:	f7f6 fe4e 	bl	80009a8 <__aeabi_dcmpeq>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d09f      	beq.n	8009c50 <_dtoa_r+0x640>
 8009d10:	e7d1      	b.n	8009cb6 <_dtoa_r+0x6a6>
 8009d12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d14:	2a00      	cmp	r2, #0
 8009d16:	f000 80ea 	beq.w	8009eee <_dtoa_r+0x8de>
 8009d1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d1c:	2a01      	cmp	r2, #1
 8009d1e:	f300 80cd 	bgt.w	8009ebc <_dtoa_r+0x8ac>
 8009d22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009d24:	2a00      	cmp	r2, #0
 8009d26:	f000 80c1 	beq.w	8009eac <_dtoa_r+0x89c>
 8009d2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d30:	9e04      	ldr	r6, [sp, #16]
 8009d32:	9a04      	ldr	r2, [sp, #16]
 8009d34:	2101      	movs	r1, #1
 8009d36:	441a      	add	r2, r3
 8009d38:	9204      	str	r2, [sp, #16]
 8009d3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d3c:	4648      	mov	r0, r9
 8009d3e:	441a      	add	r2, r3
 8009d40:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d42:	f000 fc2b 	bl	800a59c <__i2b>
 8009d46:	4605      	mov	r5, r0
 8009d48:	b166      	cbz	r6, 8009d64 <_dtoa_r+0x754>
 8009d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dd09      	ble.n	8009d64 <_dtoa_r+0x754>
 8009d50:	42b3      	cmp	r3, r6
 8009d52:	bfa8      	it	ge
 8009d54:	4633      	movge	r3, r6
 8009d56:	9a04      	ldr	r2, [sp, #16]
 8009d58:	1af6      	subs	r6, r6, r3
 8009d5a:	1ad2      	subs	r2, r2, r3
 8009d5c:	9204      	str	r2, [sp, #16]
 8009d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d66:	b30b      	cbz	r3, 8009dac <_dtoa_r+0x79c>
 8009d68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 80c6 	beq.w	8009efc <_dtoa_r+0x8ec>
 8009d70:	2c00      	cmp	r4, #0
 8009d72:	f000 80c0 	beq.w	8009ef6 <_dtoa_r+0x8e6>
 8009d76:	4629      	mov	r1, r5
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4648      	mov	r0, r9
 8009d7c:	f000 fcc6 	bl	800a70c <__pow5mult>
 8009d80:	9a03      	ldr	r2, [sp, #12]
 8009d82:	4601      	mov	r1, r0
 8009d84:	4605      	mov	r5, r0
 8009d86:	4648      	mov	r0, r9
 8009d88:	f000 fc1e 	bl	800a5c8 <__multiply>
 8009d8c:	9903      	ldr	r1, [sp, #12]
 8009d8e:	4680      	mov	r8, r0
 8009d90:	4648      	mov	r0, r9
 8009d92:	f000 fb4f 	bl	800a434 <_Bfree>
 8009d96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d98:	1b1b      	subs	r3, r3, r4
 8009d9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d9c:	f000 80b1 	beq.w	8009f02 <_dtoa_r+0x8f2>
 8009da0:	4641      	mov	r1, r8
 8009da2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009da4:	4648      	mov	r0, r9
 8009da6:	f000 fcb1 	bl	800a70c <__pow5mult>
 8009daa:	9003      	str	r0, [sp, #12]
 8009dac:	2101      	movs	r1, #1
 8009dae:	4648      	mov	r0, r9
 8009db0:	f000 fbf4 	bl	800a59c <__i2b>
 8009db4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009db6:	4604      	mov	r4, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 81d8 	beq.w	800a16e <_dtoa_r+0xb5e>
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	4648      	mov	r0, r9
 8009dc4:	f000 fca2 	bl	800a70c <__pow5mult>
 8009dc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009dca:	4604      	mov	r4, r0
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	f300 809f 	bgt.w	8009f10 <_dtoa_r+0x900>
 8009dd2:	9b06      	ldr	r3, [sp, #24]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 8097 	bne.w	8009f08 <_dtoa_r+0x8f8>
 8009dda:	9b07      	ldr	r3, [sp, #28]
 8009ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f040 8093 	bne.w	8009f0c <_dtoa_r+0x8fc>
 8009de6:	9b07      	ldr	r3, [sp, #28]
 8009de8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009dec:	0d1b      	lsrs	r3, r3, #20
 8009dee:	051b      	lsls	r3, r3, #20
 8009df0:	b133      	cbz	r3, 8009e00 <_dtoa_r+0x7f0>
 8009df2:	9b04      	ldr	r3, [sp, #16]
 8009df4:	3301      	adds	r3, #1
 8009df6:	9304      	str	r3, [sp, #16]
 8009df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dfe:	2301      	movs	r3, #1
 8009e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 81b8 	beq.w	800a17a <_dtoa_r+0xb6a>
 8009e0a:	6923      	ldr	r3, [r4, #16]
 8009e0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e10:	6918      	ldr	r0, [r3, #16]
 8009e12:	f000 fb77 	bl	800a504 <__hi0bits>
 8009e16:	f1c0 0020 	rsb	r0, r0, #32
 8009e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e1c:	4418      	add	r0, r3
 8009e1e:	f010 001f 	ands.w	r0, r0, #31
 8009e22:	f000 8082 	beq.w	8009f2a <_dtoa_r+0x91a>
 8009e26:	f1c0 0320 	rsb	r3, r0, #32
 8009e2a:	2b04      	cmp	r3, #4
 8009e2c:	dd73      	ble.n	8009f16 <_dtoa_r+0x906>
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	f1c0 001c 	rsb	r0, r0, #28
 8009e34:	4403      	add	r3, r0
 8009e36:	9304      	str	r3, [sp, #16]
 8009e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e3a:	4406      	add	r6, r0
 8009e3c:	4403      	add	r3, r0
 8009e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e40:	9b04      	ldr	r3, [sp, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	dd05      	ble.n	8009e52 <_dtoa_r+0x842>
 8009e46:	461a      	mov	r2, r3
 8009e48:	4648      	mov	r0, r9
 8009e4a:	9903      	ldr	r1, [sp, #12]
 8009e4c:	f000 fcb8 	bl	800a7c0 <__lshift>
 8009e50:	9003      	str	r0, [sp, #12]
 8009e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dd05      	ble.n	8009e64 <_dtoa_r+0x854>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	4648      	mov	r0, r9
 8009e5e:	f000 fcaf 	bl	800a7c0 <__lshift>
 8009e62:	4604      	mov	r4, r0
 8009e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d061      	beq.n	8009f2e <_dtoa_r+0x91e>
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	9803      	ldr	r0, [sp, #12]
 8009e6e:	f000 fd13 	bl	800a898 <__mcmp>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	da5b      	bge.n	8009f2e <_dtoa_r+0x91e>
 8009e76:	2300      	movs	r3, #0
 8009e78:	220a      	movs	r2, #10
 8009e7a:	4648      	mov	r0, r9
 8009e7c:	9903      	ldr	r1, [sp, #12]
 8009e7e:	f000 fafb 	bl	800a478 <__multadd>
 8009e82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e84:	f107 38ff 	add.w	r8, r7, #4294967295
 8009e88:	9003      	str	r0, [sp, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 8177 	beq.w	800a17e <_dtoa_r+0xb6e>
 8009e90:	4629      	mov	r1, r5
 8009e92:	2300      	movs	r3, #0
 8009e94:	220a      	movs	r2, #10
 8009e96:	4648      	mov	r0, r9
 8009e98:	f000 faee 	bl	800a478 <__multadd>
 8009e9c:	f1bb 0f00 	cmp.w	fp, #0
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	dc6f      	bgt.n	8009f84 <_dtoa_r+0x974>
 8009ea4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	dc49      	bgt.n	8009f3e <_dtoa_r+0x92e>
 8009eaa:	e06b      	b.n	8009f84 <_dtoa_r+0x974>
 8009eac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009eae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009eb2:	e73c      	b.n	8009d2e <_dtoa_r+0x71e>
 8009eb4:	3fe00000 	.word	0x3fe00000
 8009eb8:	40240000 	.word	0x40240000
 8009ebc:	9b08      	ldr	r3, [sp, #32]
 8009ebe:	1e5c      	subs	r4, r3, #1
 8009ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ec2:	42a3      	cmp	r3, r4
 8009ec4:	db09      	blt.n	8009eda <_dtoa_r+0x8ca>
 8009ec6:	1b1c      	subs	r4, r3, r4
 8009ec8:	9b08      	ldr	r3, [sp, #32]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f6bf af30 	bge.w	8009d30 <_dtoa_r+0x720>
 8009ed0:	9b04      	ldr	r3, [sp, #16]
 8009ed2:	9a08      	ldr	r2, [sp, #32]
 8009ed4:	1a9e      	subs	r6, r3, r2
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e72b      	b.n	8009d32 <_dtoa_r+0x722>
 8009eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009edc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ede:	1ae3      	subs	r3, r4, r3
 8009ee0:	441a      	add	r2, r3
 8009ee2:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ee4:	9e04      	ldr	r6, [sp, #16]
 8009ee6:	2400      	movs	r4, #0
 8009ee8:	9b08      	ldr	r3, [sp, #32]
 8009eea:	920e      	str	r2, [sp, #56]	@ 0x38
 8009eec:	e721      	b.n	8009d32 <_dtoa_r+0x722>
 8009eee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ef0:	9e04      	ldr	r6, [sp, #16]
 8009ef2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ef4:	e728      	b.n	8009d48 <_dtoa_r+0x738>
 8009ef6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009efa:	e751      	b.n	8009da0 <_dtoa_r+0x790>
 8009efc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009efe:	9903      	ldr	r1, [sp, #12]
 8009f00:	e750      	b.n	8009da4 <_dtoa_r+0x794>
 8009f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f06:	e751      	b.n	8009dac <_dtoa_r+0x79c>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e779      	b.n	8009e00 <_dtoa_r+0x7f0>
 8009f0c:	9b06      	ldr	r3, [sp, #24]
 8009f0e:	e777      	b.n	8009e00 <_dtoa_r+0x7f0>
 8009f10:	2300      	movs	r3, #0
 8009f12:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f14:	e779      	b.n	8009e0a <_dtoa_r+0x7fa>
 8009f16:	d093      	beq.n	8009e40 <_dtoa_r+0x830>
 8009f18:	9a04      	ldr	r2, [sp, #16]
 8009f1a:	331c      	adds	r3, #28
 8009f1c:	441a      	add	r2, r3
 8009f1e:	9204      	str	r2, [sp, #16]
 8009f20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f22:	441e      	add	r6, r3
 8009f24:	441a      	add	r2, r3
 8009f26:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f28:	e78a      	b.n	8009e40 <_dtoa_r+0x830>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	e7f4      	b.n	8009f18 <_dtoa_r+0x908>
 8009f2e:	9b08      	ldr	r3, [sp, #32]
 8009f30:	46b8      	mov	r8, r7
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dc20      	bgt.n	8009f78 <_dtoa_r+0x968>
 8009f36:	469b      	mov	fp, r3
 8009f38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	dd1e      	ble.n	8009f7c <_dtoa_r+0x96c>
 8009f3e:	f1bb 0f00 	cmp.w	fp, #0
 8009f42:	f47f adb1 	bne.w	8009aa8 <_dtoa_r+0x498>
 8009f46:	4621      	mov	r1, r4
 8009f48:	465b      	mov	r3, fp
 8009f4a:	2205      	movs	r2, #5
 8009f4c:	4648      	mov	r0, r9
 8009f4e:	f000 fa93 	bl	800a478 <__multadd>
 8009f52:	4601      	mov	r1, r0
 8009f54:	4604      	mov	r4, r0
 8009f56:	9803      	ldr	r0, [sp, #12]
 8009f58:	f000 fc9e 	bl	800a898 <__mcmp>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	f77f ada3 	ble.w	8009aa8 <_dtoa_r+0x498>
 8009f62:	4656      	mov	r6, sl
 8009f64:	2331      	movs	r3, #49	@ 0x31
 8009f66:	f108 0801 	add.w	r8, r8, #1
 8009f6a:	f806 3b01 	strb.w	r3, [r6], #1
 8009f6e:	e59f      	b.n	8009ab0 <_dtoa_r+0x4a0>
 8009f70:	46b8      	mov	r8, r7
 8009f72:	9c08      	ldr	r4, [sp, #32]
 8009f74:	4625      	mov	r5, r4
 8009f76:	e7f4      	b.n	8009f62 <_dtoa_r+0x952>
 8009f78:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009f7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f000 8101 	beq.w	800a186 <_dtoa_r+0xb76>
 8009f84:	2e00      	cmp	r6, #0
 8009f86:	dd05      	ble.n	8009f94 <_dtoa_r+0x984>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4632      	mov	r2, r6
 8009f8c:	4648      	mov	r0, r9
 8009f8e:	f000 fc17 	bl	800a7c0 <__lshift>
 8009f92:	4605      	mov	r5, r0
 8009f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d05c      	beq.n	800a054 <_dtoa_r+0xa44>
 8009f9a:	4648      	mov	r0, r9
 8009f9c:	6869      	ldr	r1, [r5, #4]
 8009f9e:	f000 fa09 	bl	800a3b4 <_Balloc>
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	b928      	cbnz	r0, 8009fb2 <_dtoa_r+0x9a2>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fac:	4b80      	ldr	r3, [pc, #512]	@ (800a1b0 <_dtoa_r+0xba0>)
 8009fae:	f7ff bb43 	b.w	8009638 <_dtoa_r+0x28>
 8009fb2:	692a      	ldr	r2, [r5, #16]
 8009fb4:	f105 010c 	add.w	r1, r5, #12
 8009fb8:	3202      	adds	r2, #2
 8009fba:	0092      	lsls	r2, r2, #2
 8009fbc:	300c      	adds	r0, #12
 8009fbe:	f000 fe2b 	bl	800ac18 <memcpy>
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	4648      	mov	r0, r9
 8009fc8:	f000 fbfa 	bl	800a7c0 <__lshift>
 8009fcc:	462f      	mov	r7, r5
 8009fce:	4605      	mov	r5, r0
 8009fd0:	f10a 0301 	add.w	r3, sl, #1
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	eb0a 030b 	add.w	r3, sl, fp
 8009fda:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fdc:	9b06      	ldr	r3, [sp, #24]
 8009fde:	f003 0301 	and.w	r3, r3, #1
 8009fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fe4:	9b04      	ldr	r3, [sp, #16]
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	9803      	ldr	r0, [sp, #12]
 8009fea:	f103 3bff 	add.w	fp, r3, #4294967295
 8009fee:	f7ff fa84 	bl	80094fa <quorem>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	3330      	adds	r3, #48	@ 0x30
 8009ff8:	9006      	str	r0, [sp, #24]
 8009ffa:	9803      	ldr	r0, [sp, #12]
 8009ffc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ffe:	f000 fc4b 	bl	800a898 <__mcmp>
 800a002:	462a      	mov	r2, r5
 800a004:	9008      	str	r0, [sp, #32]
 800a006:	4621      	mov	r1, r4
 800a008:	4648      	mov	r0, r9
 800a00a:	f000 fc61 	bl	800a8d0 <__mdiff>
 800a00e:	68c2      	ldr	r2, [r0, #12]
 800a010:	4606      	mov	r6, r0
 800a012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a014:	bb02      	cbnz	r2, 800a058 <_dtoa_r+0xa48>
 800a016:	4601      	mov	r1, r0
 800a018:	9803      	ldr	r0, [sp, #12]
 800a01a:	f000 fc3d 	bl	800a898 <__mcmp>
 800a01e:	4602      	mov	r2, r0
 800a020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a022:	4631      	mov	r1, r6
 800a024:	4648      	mov	r0, r9
 800a026:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800a02a:	f000 fa03 	bl	800a434 <_Bfree>
 800a02e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a030:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a032:	9e04      	ldr	r6, [sp, #16]
 800a034:	ea42 0103 	orr.w	r1, r2, r3
 800a038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a03a:	4319      	orrs	r1, r3
 800a03c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a03e:	d10d      	bne.n	800a05c <_dtoa_r+0xa4c>
 800a040:	2b39      	cmp	r3, #57	@ 0x39
 800a042:	d027      	beq.n	800a094 <_dtoa_r+0xa84>
 800a044:	9a08      	ldr	r2, [sp, #32]
 800a046:	2a00      	cmp	r2, #0
 800a048:	dd01      	ble.n	800a04e <_dtoa_r+0xa3e>
 800a04a:	9b06      	ldr	r3, [sp, #24]
 800a04c:	3331      	adds	r3, #49	@ 0x31
 800a04e:	f88b 3000 	strb.w	r3, [fp]
 800a052:	e52e      	b.n	8009ab2 <_dtoa_r+0x4a2>
 800a054:	4628      	mov	r0, r5
 800a056:	e7b9      	b.n	8009fcc <_dtoa_r+0x9bc>
 800a058:	2201      	movs	r2, #1
 800a05a:	e7e2      	b.n	800a022 <_dtoa_r+0xa12>
 800a05c:	9908      	ldr	r1, [sp, #32]
 800a05e:	2900      	cmp	r1, #0
 800a060:	db04      	blt.n	800a06c <_dtoa_r+0xa5c>
 800a062:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800a064:	4301      	orrs	r1, r0
 800a066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a068:	4301      	orrs	r1, r0
 800a06a:	d120      	bne.n	800a0ae <_dtoa_r+0xa9e>
 800a06c:	2a00      	cmp	r2, #0
 800a06e:	ddee      	ble.n	800a04e <_dtoa_r+0xa3e>
 800a070:	2201      	movs	r2, #1
 800a072:	9903      	ldr	r1, [sp, #12]
 800a074:	4648      	mov	r0, r9
 800a076:	9304      	str	r3, [sp, #16]
 800a078:	f000 fba2 	bl	800a7c0 <__lshift>
 800a07c:	4621      	mov	r1, r4
 800a07e:	9003      	str	r0, [sp, #12]
 800a080:	f000 fc0a 	bl	800a898 <__mcmp>
 800a084:	2800      	cmp	r0, #0
 800a086:	9b04      	ldr	r3, [sp, #16]
 800a088:	dc02      	bgt.n	800a090 <_dtoa_r+0xa80>
 800a08a:	d1e0      	bne.n	800a04e <_dtoa_r+0xa3e>
 800a08c:	07da      	lsls	r2, r3, #31
 800a08e:	d5de      	bpl.n	800a04e <_dtoa_r+0xa3e>
 800a090:	2b39      	cmp	r3, #57	@ 0x39
 800a092:	d1da      	bne.n	800a04a <_dtoa_r+0xa3a>
 800a094:	2339      	movs	r3, #57	@ 0x39
 800a096:	f88b 3000 	strb.w	r3, [fp]
 800a09a:	4633      	mov	r3, r6
 800a09c:	461e      	mov	r6, r3
 800a09e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	2a39      	cmp	r2, #57	@ 0x39
 800a0a6:	d04e      	beq.n	800a146 <_dtoa_r+0xb36>
 800a0a8:	3201      	adds	r2, #1
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	e501      	b.n	8009ab2 <_dtoa_r+0x4a2>
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	dd03      	ble.n	800a0ba <_dtoa_r+0xaaa>
 800a0b2:	2b39      	cmp	r3, #57	@ 0x39
 800a0b4:	d0ee      	beq.n	800a094 <_dtoa_r+0xa84>
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	e7c9      	b.n	800a04e <_dtoa_r+0xa3e>
 800a0ba:	9a04      	ldr	r2, [sp, #16]
 800a0bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a0be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a0c2:	428a      	cmp	r2, r1
 800a0c4:	d028      	beq.n	800a118 <_dtoa_r+0xb08>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	220a      	movs	r2, #10
 800a0ca:	9903      	ldr	r1, [sp, #12]
 800a0cc:	4648      	mov	r0, r9
 800a0ce:	f000 f9d3 	bl	800a478 <__multadd>
 800a0d2:	42af      	cmp	r7, r5
 800a0d4:	9003      	str	r0, [sp, #12]
 800a0d6:	f04f 0300 	mov.w	r3, #0
 800a0da:	f04f 020a 	mov.w	r2, #10
 800a0de:	4639      	mov	r1, r7
 800a0e0:	4648      	mov	r0, r9
 800a0e2:	d107      	bne.n	800a0f4 <_dtoa_r+0xae4>
 800a0e4:	f000 f9c8 	bl	800a478 <__multadd>
 800a0e8:	4607      	mov	r7, r0
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	9b04      	ldr	r3, [sp, #16]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	e777      	b.n	8009fe4 <_dtoa_r+0x9d4>
 800a0f4:	f000 f9c0 	bl	800a478 <__multadd>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4607      	mov	r7, r0
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	220a      	movs	r2, #10
 800a100:	4648      	mov	r0, r9
 800a102:	f000 f9b9 	bl	800a478 <__multadd>
 800a106:	4605      	mov	r5, r0
 800a108:	e7f0      	b.n	800a0ec <_dtoa_r+0xadc>
 800a10a:	f1bb 0f00 	cmp.w	fp, #0
 800a10e:	bfcc      	ite	gt
 800a110:	465e      	movgt	r6, fp
 800a112:	2601      	movle	r6, #1
 800a114:	2700      	movs	r7, #0
 800a116:	4456      	add	r6, sl
 800a118:	2201      	movs	r2, #1
 800a11a:	9903      	ldr	r1, [sp, #12]
 800a11c:	4648      	mov	r0, r9
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	f000 fb4e 	bl	800a7c0 <__lshift>
 800a124:	4621      	mov	r1, r4
 800a126:	9003      	str	r0, [sp, #12]
 800a128:	f000 fbb6 	bl	800a898 <__mcmp>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	dcb4      	bgt.n	800a09a <_dtoa_r+0xa8a>
 800a130:	d102      	bne.n	800a138 <_dtoa_r+0xb28>
 800a132:	9b04      	ldr	r3, [sp, #16]
 800a134:	07db      	lsls	r3, r3, #31
 800a136:	d4b0      	bmi.n	800a09a <_dtoa_r+0xa8a>
 800a138:	4633      	mov	r3, r6
 800a13a:	461e      	mov	r6, r3
 800a13c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a140:	2a30      	cmp	r2, #48	@ 0x30
 800a142:	d0fa      	beq.n	800a13a <_dtoa_r+0xb2a>
 800a144:	e4b5      	b.n	8009ab2 <_dtoa_r+0x4a2>
 800a146:	459a      	cmp	sl, r3
 800a148:	d1a8      	bne.n	800a09c <_dtoa_r+0xa8c>
 800a14a:	2331      	movs	r3, #49	@ 0x31
 800a14c:	f108 0801 	add.w	r8, r8, #1
 800a150:	f88a 3000 	strb.w	r3, [sl]
 800a154:	e4ad      	b.n	8009ab2 <_dtoa_r+0x4a2>
 800a156:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a158:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a1b4 <_dtoa_r+0xba4>
 800a15c:	b11b      	cbz	r3, 800a166 <_dtoa_r+0xb56>
 800a15e:	f10a 0308 	add.w	r3, sl, #8
 800a162:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	4650      	mov	r0, sl
 800a168:	b017      	add	sp, #92	@ 0x5c
 800a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a170:	2b01      	cmp	r3, #1
 800a172:	f77f ae2e 	ble.w	8009dd2 <_dtoa_r+0x7c2>
 800a176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a178:	930a      	str	r3, [sp, #40]	@ 0x28
 800a17a:	2001      	movs	r0, #1
 800a17c:	e64d      	b.n	8009e1a <_dtoa_r+0x80a>
 800a17e:	f1bb 0f00 	cmp.w	fp, #0
 800a182:	f77f aed9 	ble.w	8009f38 <_dtoa_r+0x928>
 800a186:	4656      	mov	r6, sl
 800a188:	4621      	mov	r1, r4
 800a18a:	9803      	ldr	r0, [sp, #12]
 800a18c:	f7ff f9b5 	bl	80094fa <quorem>
 800a190:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a194:	f806 3b01 	strb.w	r3, [r6], #1
 800a198:	eba6 020a 	sub.w	r2, r6, sl
 800a19c:	4593      	cmp	fp, r2
 800a19e:	ddb4      	ble.n	800a10a <_dtoa_r+0xafa>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	220a      	movs	r2, #10
 800a1a4:	4648      	mov	r0, r9
 800a1a6:	9903      	ldr	r1, [sp, #12]
 800a1a8:	f000 f966 	bl	800a478 <__multadd>
 800a1ac:	9003      	str	r0, [sp, #12]
 800a1ae:	e7eb      	b.n	800a188 <_dtoa_r+0xb78>
 800a1b0:	0800b36e 	.word	0x0800b36e
 800a1b4:	0800b2f2 	.word	0x0800b2f2

0800a1b8 <_free_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	d040      	beq.n	800a242 <_free_r+0x8a>
 800a1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c4:	1f0c      	subs	r4, r1, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bfb8      	it	lt
 800a1ca:	18e4      	addlt	r4, r4, r3
 800a1cc:	f000 f8e6 	bl	800a39c <__malloc_lock>
 800a1d0:	4a1c      	ldr	r2, [pc, #112]	@ (800a244 <_free_r+0x8c>)
 800a1d2:	6813      	ldr	r3, [r2, #0]
 800a1d4:	b933      	cbnz	r3, 800a1e4 <_free_r+0x2c>
 800a1d6:	6063      	str	r3, [r4, #4]
 800a1d8:	6014      	str	r4, [r2, #0]
 800a1da:	4628      	mov	r0, r5
 800a1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e0:	f000 b8e2 	b.w	800a3a8 <__malloc_unlock>
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	d908      	bls.n	800a1fa <_free_r+0x42>
 800a1e8:	6820      	ldr	r0, [r4, #0]
 800a1ea:	1821      	adds	r1, r4, r0
 800a1ec:	428b      	cmp	r3, r1
 800a1ee:	bf01      	itttt	eq
 800a1f0:	6819      	ldreq	r1, [r3, #0]
 800a1f2:	685b      	ldreq	r3, [r3, #4]
 800a1f4:	1809      	addeq	r1, r1, r0
 800a1f6:	6021      	streq	r1, [r4, #0]
 800a1f8:	e7ed      	b.n	800a1d6 <_free_r+0x1e>
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	b10b      	cbz	r3, 800a204 <_free_r+0x4c>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d9fa      	bls.n	800a1fa <_free_r+0x42>
 800a204:	6811      	ldr	r1, [r2, #0]
 800a206:	1850      	adds	r0, r2, r1
 800a208:	42a0      	cmp	r0, r4
 800a20a:	d10b      	bne.n	800a224 <_free_r+0x6c>
 800a20c:	6820      	ldr	r0, [r4, #0]
 800a20e:	4401      	add	r1, r0
 800a210:	1850      	adds	r0, r2, r1
 800a212:	4283      	cmp	r3, r0
 800a214:	6011      	str	r1, [r2, #0]
 800a216:	d1e0      	bne.n	800a1da <_free_r+0x22>
 800a218:	6818      	ldr	r0, [r3, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	4408      	add	r0, r1
 800a21e:	6010      	str	r0, [r2, #0]
 800a220:	6053      	str	r3, [r2, #4]
 800a222:	e7da      	b.n	800a1da <_free_r+0x22>
 800a224:	d902      	bls.n	800a22c <_free_r+0x74>
 800a226:	230c      	movs	r3, #12
 800a228:	602b      	str	r3, [r5, #0]
 800a22a:	e7d6      	b.n	800a1da <_free_r+0x22>
 800a22c:	6820      	ldr	r0, [r4, #0]
 800a22e:	1821      	adds	r1, r4, r0
 800a230:	428b      	cmp	r3, r1
 800a232:	bf01      	itttt	eq
 800a234:	6819      	ldreq	r1, [r3, #0]
 800a236:	685b      	ldreq	r3, [r3, #4]
 800a238:	1809      	addeq	r1, r1, r0
 800a23a:	6021      	streq	r1, [r4, #0]
 800a23c:	6063      	str	r3, [r4, #4]
 800a23e:	6054      	str	r4, [r2, #4]
 800a240:	e7cb      	b.n	800a1da <_free_r+0x22>
 800a242:	bd38      	pop	{r3, r4, r5, pc}
 800a244:	200016c0 	.word	0x200016c0

0800a248 <malloc>:
 800a248:	4b02      	ldr	r3, [pc, #8]	@ (800a254 <malloc+0xc>)
 800a24a:	4601      	mov	r1, r0
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	f000 b825 	b.w	800a29c <_malloc_r>
 800a252:	bf00      	nop
 800a254:	20000188 	.word	0x20000188

0800a258 <sbrk_aligned>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	4e0f      	ldr	r6, [pc, #60]	@ (800a298 <sbrk_aligned+0x40>)
 800a25c:	460c      	mov	r4, r1
 800a25e:	6831      	ldr	r1, [r6, #0]
 800a260:	4605      	mov	r5, r0
 800a262:	b911      	cbnz	r1, 800a26a <sbrk_aligned+0x12>
 800a264:	f000 fcc8 	bl	800abf8 <_sbrk_r>
 800a268:	6030      	str	r0, [r6, #0]
 800a26a:	4621      	mov	r1, r4
 800a26c:	4628      	mov	r0, r5
 800a26e:	f000 fcc3 	bl	800abf8 <_sbrk_r>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	d103      	bne.n	800a27e <sbrk_aligned+0x26>
 800a276:	f04f 34ff 	mov.w	r4, #4294967295
 800a27a:	4620      	mov	r0, r4
 800a27c:	bd70      	pop	{r4, r5, r6, pc}
 800a27e:	1cc4      	adds	r4, r0, #3
 800a280:	f024 0403 	bic.w	r4, r4, #3
 800a284:	42a0      	cmp	r0, r4
 800a286:	d0f8      	beq.n	800a27a <sbrk_aligned+0x22>
 800a288:	1a21      	subs	r1, r4, r0
 800a28a:	4628      	mov	r0, r5
 800a28c:	f000 fcb4 	bl	800abf8 <_sbrk_r>
 800a290:	3001      	adds	r0, #1
 800a292:	d1f2      	bne.n	800a27a <sbrk_aligned+0x22>
 800a294:	e7ef      	b.n	800a276 <sbrk_aligned+0x1e>
 800a296:	bf00      	nop
 800a298:	200016bc 	.word	0x200016bc

0800a29c <_malloc_r>:
 800a29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a0:	1ccd      	adds	r5, r1, #3
 800a2a2:	f025 0503 	bic.w	r5, r5, #3
 800a2a6:	3508      	adds	r5, #8
 800a2a8:	2d0c      	cmp	r5, #12
 800a2aa:	bf38      	it	cc
 800a2ac:	250c      	movcc	r5, #12
 800a2ae:	2d00      	cmp	r5, #0
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	db01      	blt.n	800a2b8 <_malloc_r+0x1c>
 800a2b4:	42a9      	cmp	r1, r5
 800a2b6:	d904      	bls.n	800a2c2 <_malloc_r+0x26>
 800a2b8:	230c      	movs	r3, #12
 800a2ba:	6033      	str	r3, [r6, #0]
 800a2bc:	2000      	movs	r0, #0
 800a2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a398 <_malloc_r+0xfc>
 800a2c6:	f000 f869 	bl	800a39c <__malloc_lock>
 800a2ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ce:	461c      	mov	r4, r3
 800a2d0:	bb44      	cbnz	r4, 800a324 <_malloc_r+0x88>
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f7ff ffbf 	bl	800a258 <sbrk_aligned>
 800a2da:	1c43      	adds	r3, r0, #1
 800a2dc:	4604      	mov	r4, r0
 800a2de:	d158      	bne.n	800a392 <_malloc_r+0xf6>
 800a2e0:	f8d8 4000 	ldr.w	r4, [r8]
 800a2e4:	4627      	mov	r7, r4
 800a2e6:	2f00      	cmp	r7, #0
 800a2e8:	d143      	bne.n	800a372 <_malloc_r+0xd6>
 800a2ea:	2c00      	cmp	r4, #0
 800a2ec:	d04b      	beq.n	800a386 <_malloc_r+0xea>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	4639      	mov	r1, r7
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	eb04 0903 	add.w	r9, r4, r3
 800a2f8:	f000 fc7e 	bl	800abf8 <_sbrk_r>
 800a2fc:	4581      	cmp	r9, r0
 800a2fe:	d142      	bne.n	800a386 <_malloc_r+0xea>
 800a300:	6821      	ldr	r1, [r4, #0]
 800a302:	4630      	mov	r0, r6
 800a304:	1a6d      	subs	r5, r5, r1
 800a306:	4629      	mov	r1, r5
 800a308:	f7ff ffa6 	bl	800a258 <sbrk_aligned>
 800a30c:	3001      	adds	r0, #1
 800a30e:	d03a      	beq.n	800a386 <_malloc_r+0xea>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	442b      	add	r3, r5
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	f8d8 3000 	ldr.w	r3, [r8]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	bb62      	cbnz	r2, 800a378 <_malloc_r+0xdc>
 800a31e:	f8c8 7000 	str.w	r7, [r8]
 800a322:	e00f      	b.n	800a344 <_malloc_r+0xa8>
 800a324:	6822      	ldr	r2, [r4, #0]
 800a326:	1b52      	subs	r2, r2, r5
 800a328:	d420      	bmi.n	800a36c <_malloc_r+0xd0>
 800a32a:	2a0b      	cmp	r2, #11
 800a32c:	d917      	bls.n	800a35e <_malloc_r+0xc2>
 800a32e:	1961      	adds	r1, r4, r5
 800a330:	42a3      	cmp	r3, r4
 800a332:	6025      	str	r5, [r4, #0]
 800a334:	bf18      	it	ne
 800a336:	6059      	strne	r1, [r3, #4]
 800a338:	6863      	ldr	r3, [r4, #4]
 800a33a:	bf08      	it	eq
 800a33c:	f8c8 1000 	streq.w	r1, [r8]
 800a340:	5162      	str	r2, [r4, r5]
 800a342:	604b      	str	r3, [r1, #4]
 800a344:	4630      	mov	r0, r6
 800a346:	f000 f82f 	bl	800a3a8 <__malloc_unlock>
 800a34a:	f104 000b 	add.w	r0, r4, #11
 800a34e:	1d23      	adds	r3, r4, #4
 800a350:	f020 0007 	bic.w	r0, r0, #7
 800a354:	1ac2      	subs	r2, r0, r3
 800a356:	bf1c      	itt	ne
 800a358:	1a1b      	subne	r3, r3, r0
 800a35a:	50a3      	strne	r3, [r4, r2]
 800a35c:	e7af      	b.n	800a2be <_malloc_r+0x22>
 800a35e:	6862      	ldr	r2, [r4, #4]
 800a360:	42a3      	cmp	r3, r4
 800a362:	bf0c      	ite	eq
 800a364:	f8c8 2000 	streq.w	r2, [r8]
 800a368:	605a      	strne	r2, [r3, #4]
 800a36a:	e7eb      	b.n	800a344 <_malloc_r+0xa8>
 800a36c:	4623      	mov	r3, r4
 800a36e:	6864      	ldr	r4, [r4, #4]
 800a370:	e7ae      	b.n	800a2d0 <_malloc_r+0x34>
 800a372:	463c      	mov	r4, r7
 800a374:	687f      	ldr	r7, [r7, #4]
 800a376:	e7b6      	b.n	800a2e6 <_malloc_r+0x4a>
 800a378:	461a      	mov	r2, r3
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	d1fb      	bne.n	800a378 <_malloc_r+0xdc>
 800a380:	2300      	movs	r3, #0
 800a382:	6053      	str	r3, [r2, #4]
 800a384:	e7de      	b.n	800a344 <_malloc_r+0xa8>
 800a386:	230c      	movs	r3, #12
 800a388:	4630      	mov	r0, r6
 800a38a:	6033      	str	r3, [r6, #0]
 800a38c:	f000 f80c 	bl	800a3a8 <__malloc_unlock>
 800a390:	e794      	b.n	800a2bc <_malloc_r+0x20>
 800a392:	6005      	str	r5, [r0, #0]
 800a394:	e7d6      	b.n	800a344 <_malloc_r+0xa8>
 800a396:	bf00      	nop
 800a398:	200016c0 	.word	0x200016c0

0800a39c <__malloc_lock>:
 800a39c:	4801      	ldr	r0, [pc, #4]	@ (800a3a4 <__malloc_lock+0x8>)
 800a39e:	f7ff b89c 	b.w	80094da <__retarget_lock_acquire_recursive>
 800a3a2:	bf00      	nop
 800a3a4:	200016b8 	.word	0x200016b8

0800a3a8 <__malloc_unlock>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	@ (800a3b0 <__malloc_unlock+0x8>)
 800a3aa:	f7ff b897 	b.w	80094dc <__retarget_lock_release_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	200016b8 	.word	0x200016b8

0800a3b4 <_Balloc>:
 800a3b4:	b570      	push	{r4, r5, r6, lr}
 800a3b6:	69c6      	ldr	r6, [r0, #28]
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	460d      	mov	r5, r1
 800a3bc:	b976      	cbnz	r6, 800a3dc <_Balloc+0x28>
 800a3be:	2010      	movs	r0, #16
 800a3c0:	f7ff ff42 	bl	800a248 <malloc>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	61e0      	str	r0, [r4, #28]
 800a3c8:	b920      	cbnz	r0, 800a3d4 <_Balloc+0x20>
 800a3ca:	216b      	movs	r1, #107	@ 0x6b
 800a3cc:	4b17      	ldr	r3, [pc, #92]	@ (800a42c <_Balloc+0x78>)
 800a3ce:	4818      	ldr	r0, [pc, #96]	@ (800a430 <_Balloc+0x7c>)
 800a3d0:	f000 fc30 	bl	800ac34 <__assert_func>
 800a3d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3d8:	6006      	str	r6, [r0, #0]
 800a3da:	60c6      	str	r6, [r0, #12]
 800a3dc:	69e6      	ldr	r6, [r4, #28]
 800a3de:	68f3      	ldr	r3, [r6, #12]
 800a3e0:	b183      	cbz	r3, 800a404 <_Balloc+0x50>
 800a3e2:	69e3      	ldr	r3, [r4, #28]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3ea:	b9b8      	cbnz	r0, 800a41c <_Balloc+0x68>
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	fa01 f605 	lsl.w	r6, r1, r5
 800a3f2:	1d72      	adds	r2, r6, #5
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	0092      	lsls	r2, r2, #2
 800a3f8:	f000 fc3a 	bl	800ac70 <_calloc_r>
 800a3fc:	b160      	cbz	r0, 800a418 <_Balloc+0x64>
 800a3fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a402:	e00e      	b.n	800a422 <_Balloc+0x6e>
 800a404:	2221      	movs	r2, #33	@ 0x21
 800a406:	2104      	movs	r1, #4
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fc31 	bl	800ac70 <_calloc_r>
 800a40e:	69e3      	ldr	r3, [r4, #28]
 800a410:	60f0      	str	r0, [r6, #12]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1e4      	bne.n	800a3e2 <_Balloc+0x2e>
 800a418:	2000      	movs	r0, #0
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	6802      	ldr	r2, [r0, #0]
 800a41e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a422:	2300      	movs	r3, #0
 800a424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a428:	e7f7      	b.n	800a41a <_Balloc+0x66>
 800a42a:	bf00      	nop
 800a42c:	0800b2ff 	.word	0x0800b2ff
 800a430:	0800b37f 	.word	0x0800b37f

0800a434 <_Bfree>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	69c6      	ldr	r6, [r0, #28]
 800a438:	4605      	mov	r5, r0
 800a43a:	460c      	mov	r4, r1
 800a43c:	b976      	cbnz	r6, 800a45c <_Bfree+0x28>
 800a43e:	2010      	movs	r0, #16
 800a440:	f7ff ff02 	bl	800a248 <malloc>
 800a444:	4602      	mov	r2, r0
 800a446:	61e8      	str	r0, [r5, #28]
 800a448:	b920      	cbnz	r0, 800a454 <_Bfree+0x20>
 800a44a:	218f      	movs	r1, #143	@ 0x8f
 800a44c:	4b08      	ldr	r3, [pc, #32]	@ (800a470 <_Bfree+0x3c>)
 800a44e:	4809      	ldr	r0, [pc, #36]	@ (800a474 <_Bfree+0x40>)
 800a450:	f000 fbf0 	bl	800ac34 <__assert_func>
 800a454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a458:	6006      	str	r6, [r0, #0]
 800a45a:	60c6      	str	r6, [r0, #12]
 800a45c:	b13c      	cbz	r4, 800a46e <_Bfree+0x3a>
 800a45e:	69eb      	ldr	r3, [r5, #28]
 800a460:	6862      	ldr	r2, [r4, #4]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a468:	6021      	str	r1, [r4, #0]
 800a46a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	0800b2ff 	.word	0x0800b2ff
 800a474:	0800b37f 	.word	0x0800b37f

0800a478 <__multadd>:
 800a478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47c:	4607      	mov	r7, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	461e      	mov	r6, r3
 800a482:	2000      	movs	r0, #0
 800a484:	690d      	ldr	r5, [r1, #16]
 800a486:	f101 0c14 	add.w	ip, r1, #20
 800a48a:	f8dc 3000 	ldr.w	r3, [ip]
 800a48e:	3001      	adds	r0, #1
 800a490:	b299      	uxth	r1, r3
 800a492:	fb02 6101 	mla	r1, r2, r1, r6
 800a496:	0c1e      	lsrs	r6, r3, #16
 800a498:	0c0b      	lsrs	r3, r1, #16
 800a49a:	fb02 3306 	mla	r3, r2, r6, r3
 800a49e:	b289      	uxth	r1, r1
 800a4a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4a4:	4285      	cmp	r5, r0
 800a4a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4aa:	f84c 1b04 	str.w	r1, [ip], #4
 800a4ae:	dcec      	bgt.n	800a48a <__multadd+0x12>
 800a4b0:	b30e      	cbz	r6, 800a4f6 <__multadd+0x7e>
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	42ab      	cmp	r3, r5
 800a4b6:	dc19      	bgt.n	800a4ec <__multadd+0x74>
 800a4b8:	6861      	ldr	r1, [r4, #4]
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	3101      	adds	r1, #1
 800a4be:	f7ff ff79 	bl	800a3b4 <_Balloc>
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	b928      	cbnz	r0, 800a4d2 <__multadd+0x5a>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	21ba      	movs	r1, #186	@ 0xba
 800a4ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a4fc <__multadd+0x84>)
 800a4cc:	480c      	ldr	r0, [pc, #48]	@ (800a500 <__multadd+0x88>)
 800a4ce:	f000 fbb1 	bl	800ac34 <__assert_func>
 800a4d2:	6922      	ldr	r2, [r4, #16]
 800a4d4:	f104 010c 	add.w	r1, r4, #12
 800a4d8:	3202      	adds	r2, #2
 800a4da:	0092      	lsls	r2, r2, #2
 800a4dc:	300c      	adds	r0, #12
 800a4de:	f000 fb9b 	bl	800ac18 <memcpy>
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	f7ff ffa5 	bl	800a434 <_Bfree>
 800a4ea:	4644      	mov	r4, r8
 800a4ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4f0:	3501      	adds	r5, #1
 800a4f2:	615e      	str	r6, [r3, #20]
 800a4f4:	6125      	str	r5, [r4, #16]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4fc:	0800b36e 	.word	0x0800b36e
 800a500:	0800b37f 	.word	0x0800b37f

0800a504 <__hi0bits>:
 800a504:	4603      	mov	r3, r0
 800a506:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a50a:	bf3a      	itte	cc
 800a50c:	0403      	lslcc	r3, r0, #16
 800a50e:	2010      	movcc	r0, #16
 800a510:	2000      	movcs	r0, #0
 800a512:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a516:	bf3c      	itt	cc
 800a518:	021b      	lslcc	r3, r3, #8
 800a51a:	3008      	addcc	r0, #8
 800a51c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a520:	bf3c      	itt	cc
 800a522:	011b      	lslcc	r3, r3, #4
 800a524:	3004      	addcc	r0, #4
 800a526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a52a:	bf3c      	itt	cc
 800a52c:	009b      	lslcc	r3, r3, #2
 800a52e:	3002      	addcc	r0, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	db05      	blt.n	800a540 <__hi0bits+0x3c>
 800a534:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a538:	f100 0001 	add.w	r0, r0, #1
 800a53c:	bf08      	it	eq
 800a53e:	2020      	moveq	r0, #32
 800a540:	4770      	bx	lr

0800a542 <__lo0bits>:
 800a542:	6803      	ldr	r3, [r0, #0]
 800a544:	4602      	mov	r2, r0
 800a546:	f013 0007 	ands.w	r0, r3, #7
 800a54a:	d00b      	beq.n	800a564 <__lo0bits+0x22>
 800a54c:	07d9      	lsls	r1, r3, #31
 800a54e:	d421      	bmi.n	800a594 <__lo0bits+0x52>
 800a550:	0798      	lsls	r0, r3, #30
 800a552:	bf49      	itett	mi
 800a554:	085b      	lsrmi	r3, r3, #1
 800a556:	089b      	lsrpl	r3, r3, #2
 800a558:	2001      	movmi	r0, #1
 800a55a:	6013      	strmi	r3, [r2, #0]
 800a55c:	bf5c      	itt	pl
 800a55e:	2002      	movpl	r0, #2
 800a560:	6013      	strpl	r3, [r2, #0]
 800a562:	4770      	bx	lr
 800a564:	b299      	uxth	r1, r3
 800a566:	b909      	cbnz	r1, 800a56c <__lo0bits+0x2a>
 800a568:	2010      	movs	r0, #16
 800a56a:	0c1b      	lsrs	r3, r3, #16
 800a56c:	b2d9      	uxtb	r1, r3
 800a56e:	b909      	cbnz	r1, 800a574 <__lo0bits+0x32>
 800a570:	3008      	adds	r0, #8
 800a572:	0a1b      	lsrs	r3, r3, #8
 800a574:	0719      	lsls	r1, r3, #28
 800a576:	bf04      	itt	eq
 800a578:	091b      	lsreq	r3, r3, #4
 800a57a:	3004      	addeq	r0, #4
 800a57c:	0799      	lsls	r1, r3, #30
 800a57e:	bf04      	itt	eq
 800a580:	089b      	lsreq	r3, r3, #2
 800a582:	3002      	addeq	r0, #2
 800a584:	07d9      	lsls	r1, r3, #31
 800a586:	d403      	bmi.n	800a590 <__lo0bits+0x4e>
 800a588:	085b      	lsrs	r3, r3, #1
 800a58a:	f100 0001 	add.w	r0, r0, #1
 800a58e:	d003      	beq.n	800a598 <__lo0bits+0x56>
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	4770      	bx	lr
 800a594:	2000      	movs	r0, #0
 800a596:	4770      	bx	lr
 800a598:	2020      	movs	r0, #32
 800a59a:	4770      	bx	lr

0800a59c <__i2b>:
 800a59c:	b510      	push	{r4, lr}
 800a59e:	460c      	mov	r4, r1
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	f7ff ff07 	bl	800a3b4 <_Balloc>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	b928      	cbnz	r0, 800a5b6 <__i2b+0x1a>
 800a5aa:	f240 1145 	movw	r1, #325	@ 0x145
 800a5ae:	4b04      	ldr	r3, [pc, #16]	@ (800a5c0 <__i2b+0x24>)
 800a5b0:	4804      	ldr	r0, [pc, #16]	@ (800a5c4 <__i2b+0x28>)
 800a5b2:	f000 fb3f 	bl	800ac34 <__assert_func>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	6144      	str	r4, [r0, #20]
 800a5ba:	6103      	str	r3, [r0, #16]
 800a5bc:	bd10      	pop	{r4, pc}
 800a5be:	bf00      	nop
 800a5c0:	0800b36e 	.word	0x0800b36e
 800a5c4:	0800b37f 	.word	0x0800b37f

0800a5c8 <__multiply>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	4617      	mov	r7, r2
 800a5ce:	690a      	ldr	r2, [r1, #16]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	4689      	mov	r9, r1
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	bfa2      	ittt	ge
 800a5d8:	463b      	movge	r3, r7
 800a5da:	460f      	movge	r7, r1
 800a5dc:	4699      	movge	r9, r3
 800a5de:	693d      	ldr	r5, [r7, #16]
 800a5e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	eb05 060a 	add.w	r6, r5, sl
 800a5ec:	42b3      	cmp	r3, r6
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	bfb8      	it	lt
 800a5f2:	3101      	addlt	r1, #1
 800a5f4:	f7ff fede 	bl	800a3b4 <_Balloc>
 800a5f8:	b930      	cbnz	r0, 800a608 <__multiply+0x40>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a600:	4b40      	ldr	r3, [pc, #256]	@ (800a704 <__multiply+0x13c>)
 800a602:	4841      	ldr	r0, [pc, #260]	@ (800a708 <__multiply+0x140>)
 800a604:	f000 fb16 	bl	800ac34 <__assert_func>
 800a608:	f100 0414 	add.w	r4, r0, #20
 800a60c:	4623      	mov	r3, r4
 800a60e:	2200      	movs	r2, #0
 800a610:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a614:	4573      	cmp	r3, lr
 800a616:	d320      	bcc.n	800a65a <__multiply+0x92>
 800a618:	f107 0814 	add.w	r8, r7, #20
 800a61c:	f109 0114 	add.w	r1, r9, #20
 800a620:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a624:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a628:	9302      	str	r3, [sp, #8]
 800a62a:	1beb      	subs	r3, r5, r7
 800a62c:	3b15      	subs	r3, #21
 800a62e:	f023 0303 	bic.w	r3, r3, #3
 800a632:	3304      	adds	r3, #4
 800a634:	3715      	adds	r7, #21
 800a636:	42bd      	cmp	r5, r7
 800a638:	bf38      	it	cc
 800a63a:	2304      	movcc	r3, #4
 800a63c:	9301      	str	r3, [sp, #4]
 800a63e:	9b02      	ldr	r3, [sp, #8]
 800a640:	9103      	str	r1, [sp, #12]
 800a642:	428b      	cmp	r3, r1
 800a644:	d80c      	bhi.n	800a660 <__multiply+0x98>
 800a646:	2e00      	cmp	r6, #0
 800a648:	dd03      	ble.n	800a652 <__multiply+0x8a>
 800a64a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d055      	beq.n	800a6fe <__multiply+0x136>
 800a652:	6106      	str	r6, [r0, #16]
 800a654:	b005      	add	sp, #20
 800a656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65a:	f843 2b04 	str.w	r2, [r3], #4
 800a65e:	e7d9      	b.n	800a614 <__multiply+0x4c>
 800a660:	f8b1 a000 	ldrh.w	sl, [r1]
 800a664:	f1ba 0f00 	cmp.w	sl, #0
 800a668:	d01f      	beq.n	800a6aa <__multiply+0xe2>
 800a66a:	46c4      	mov	ip, r8
 800a66c:	46a1      	mov	r9, r4
 800a66e:	2700      	movs	r7, #0
 800a670:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a674:	f8d9 3000 	ldr.w	r3, [r9]
 800a678:	fa1f fb82 	uxth.w	fp, r2
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	fb0a 330b 	mla	r3, sl, fp, r3
 800a682:	443b      	add	r3, r7
 800a684:	f8d9 7000 	ldr.w	r7, [r9]
 800a688:	0c12      	lsrs	r2, r2, #16
 800a68a:	0c3f      	lsrs	r7, r7, #16
 800a68c:	fb0a 7202 	mla	r2, sl, r2, r7
 800a690:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a694:	b29b      	uxth	r3, r3
 800a696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a69a:	4565      	cmp	r5, ip
 800a69c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a6a0:	f849 3b04 	str.w	r3, [r9], #4
 800a6a4:	d8e4      	bhi.n	800a670 <__multiply+0xa8>
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	50e7      	str	r7, [r4, r3]
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	3104      	adds	r1, #4
 800a6ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a6b2:	f1b9 0f00 	cmp.w	r9, #0
 800a6b6:	d020      	beq.n	800a6fa <__multiply+0x132>
 800a6b8:	4647      	mov	r7, r8
 800a6ba:	46a4      	mov	ip, r4
 800a6bc:	f04f 0a00 	mov.w	sl, #0
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	f8b7 b000 	ldrh.w	fp, [r7]
 800a6c6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	fb09 220b 	mla	r2, r9, fp, r2
 800a6d0:	4452      	add	r2, sl
 800a6d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6d6:	f84c 3b04 	str.w	r3, [ip], #4
 800a6da:	f857 3b04 	ldr.w	r3, [r7], #4
 800a6de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6e2:	f8bc 3000 	ldrh.w	r3, [ip]
 800a6e6:	42bd      	cmp	r5, r7
 800a6e8:	fb09 330a 	mla	r3, r9, sl, r3
 800a6ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a6f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6f4:	d8e5      	bhi.n	800a6c2 <__multiply+0xfa>
 800a6f6:	9a01      	ldr	r2, [sp, #4]
 800a6f8:	50a3      	str	r3, [r4, r2]
 800a6fa:	3404      	adds	r4, #4
 800a6fc:	e79f      	b.n	800a63e <__multiply+0x76>
 800a6fe:	3e01      	subs	r6, #1
 800a700:	e7a1      	b.n	800a646 <__multiply+0x7e>
 800a702:	bf00      	nop
 800a704:	0800b36e 	.word	0x0800b36e
 800a708:	0800b37f 	.word	0x0800b37f

0800a70c <__pow5mult>:
 800a70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a710:	4615      	mov	r5, r2
 800a712:	f012 0203 	ands.w	r2, r2, #3
 800a716:	4607      	mov	r7, r0
 800a718:	460e      	mov	r6, r1
 800a71a:	d007      	beq.n	800a72c <__pow5mult+0x20>
 800a71c:	4c25      	ldr	r4, [pc, #148]	@ (800a7b4 <__pow5mult+0xa8>)
 800a71e:	3a01      	subs	r2, #1
 800a720:	2300      	movs	r3, #0
 800a722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a726:	f7ff fea7 	bl	800a478 <__multadd>
 800a72a:	4606      	mov	r6, r0
 800a72c:	10ad      	asrs	r5, r5, #2
 800a72e:	d03d      	beq.n	800a7ac <__pow5mult+0xa0>
 800a730:	69fc      	ldr	r4, [r7, #28]
 800a732:	b97c      	cbnz	r4, 800a754 <__pow5mult+0x48>
 800a734:	2010      	movs	r0, #16
 800a736:	f7ff fd87 	bl	800a248 <malloc>
 800a73a:	4602      	mov	r2, r0
 800a73c:	61f8      	str	r0, [r7, #28]
 800a73e:	b928      	cbnz	r0, 800a74c <__pow5mult+0x40>
 800a740:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a744:	4b1c      	ldr	r3, [pc, #112]	@ (800a7b8 <__pow5mult+0xac>)
 800a746:	481d      	ldr	r0, [pc, #116]	@ (800a7bc <__pow5mult+0xb0>)
 800a748:	f000 fa74 	bl	800ac34 <__assert_func>
 800a74c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a750:	6004      	str	r4, [r0, #0]
 800a752:	60c4      	str	r4, [r0, #12]
 800a754:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a758:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a75c:	b94c      	cbnz	r4, 800a772 <__pow5mult+0x66>
 800a75e:	f240 2171 	movw	r1, #625	@ 0x271
 800a762:	4638      	mov	r0, r7
 800a764:	f7ff ff1a 	bl	800a59c <__i2b>
 800a768:	2300      	movs	r3, #0
 800a76a:	4604      	mov	r4, r0
 800a76c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a770:	6003      	str	r3, [r0, #0]
 800a772:	f04f 0900 	mov.w	r9, #0
 800a776:	07eb      	lsls	r3, r5, #31
 800a778:	d50a      	bpl.n	800a790 <__pow5mult+0x84>
 800a77a:	4631      	mov	r1, r6
 800a77c:	4622      	mov	r2, r4
 800a77e:	4638      	mov	r0, r7
 800a780:	f7ff ff22 	bl	800a5c8 <__multiply>
 800a784:	4680      	mov	r8, r0
 800a786:	4631      	mov	r1, r6
 800a788:	4638      	mov	r0, r7
 800a78a:	f7ff fe53 	bl	800a434 <_Bfree>
 800a78e:	4646      	mov	r6, r8
 800a790:	106d      	asrs	r5, r5, #1
 800a792:	d00b      	beq.n	800a7ac <__pow5mult+0xa0>
 800a794:	6820      	ldr	r0, [r4, #0]
 800a796:	b938      	cbnz	r0, 800a7a8 <__pow5mult+0x9c>
 800a798:	4622      	mov	r2, r4
 800a79a:	4621      	mov	r1, r4
 800a79c:	4638      	mov	r0, r7
 800a79e:	f7ff ff13 	bl	800a5c8 <__multiply>
 800a7a2:	6020      	str	r0, [r4, #0]
 800a7a4:	f8c0 9000 	str.w	r9, [r0]
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	e7e4      	b.n	800a776 <__pow5mult+0x6a>
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b2:	bf00      	nop
 800a7b4:	0800b430 	.word	0x0800b430
 800a7b8:	0800b2ff 	.word	0x0800b2ff
 800a7bc:	0800b37f 	.word	0x0800b37f

0800a7c0 <__lshift>:
 800a7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	4607      	mov	r7, r0
 800a7c8:	4691      	mov	r9, r2
 800a7ca:	6923      	ldr	r3, [r4, #16]
 800a7cc:	6849      	ldr	r1, [r1, #4]
 800a7ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7d8:	f108 0601 	add.w	r6, r8, #1
 800a7dc:	42b3      	cmp	r3, r6
 800a7de:	db0b      	blt.n	800a7f8 <__lshift+0x38>
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff fde7 	bl	800a3b4 <_Balloc>
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	b948      	cbnz	r0, 800a7fe <__lshift+0x3e>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a7f0:	4b27      	ldr	r3, [pc, #156]	@ (800a890 <__lshift+0xd0>)
 800a7f2:	4828      	ldr	r0, [pc, #160]	@ (800a894 <__lshift+0xd4>)
 800a7f4:	f000 fa1e 	bl	800ac34 <__assert_func>
 800a7f8:	3101      	adds	r1, #1
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	e7ee      	b.n	800a7dc <__lshift+0x1c>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f100 0114 	add.w	r1, r0, #20
 800a804:	f100 0210 	add.w	r2, r0, #16
 800a808:	4618      	mov	r0, r3
 800a80a:	4553      	cmp	r3, sl
 800a80c:	db33      	blt.n	800a876 <__lshift+0xb6>
 800a80e:	6920      	ldr	r0, [r4, #16]
 800a810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a814:	f104 0314 	add.w	r3, r4, #20
 800a818:	f019 091f 	ands.w	r9, r9, #31
 800a81c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a820:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a824:	d02b      	beq.n	800a87e <__lshift+0xbe>
 800a826:	468a      	mov	sl, r1
 800a828:	2200      	movs	r2, #0
 800a82a:	f1c9 0e20 	rsb	lr, r9, #32
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	fa00 f009 	lsl.w	r0, r0, r9
 800a834:	4310      	orrs	r0, r2
 800a836:	f84a 0b04 	str.w	r0, [sl], #4
 800a83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a83e:	459c      	cmp	ip, r3
 800a840:	fa22 f20e 	lsr.w	r2, r2, lr
 800a844:	d8f3      	bhi.n	800a82e <__lshift+0x6e>
 800a846:	ebac 0304 	sub.w	r3, ip, r4
 800a84a:	3b15      	subs	r3, #21
 800a84c:	f023 0303 	bic.w	r3, r3, #3
 800a850:	3304      	adds	r3, #4
 800a852:	f104 0015 	add.w	r0, r4, #21
 800a856:	4560      	cmp	r0, ip
 800a858:	bf88      	it	hi
 800a85a:	2304      	movhi	r3, #4
 800a85c:	50ca      	str	r2, [r1, r3]
 800a85e:	b10a      	cbz	r2, 800a864 <__lshift+0xa4>
 800a860:	f108 0602 	add.w	r6, r8, #2
 800a864:	3e01      	subs	r6, #1
 800a866:	4638      	mov	r0, r7
 800a868:	4621      	mov	r1, r4
 800a86a:	612e      	str	r6, [r5, #16]
 800a86c:	f7ff fde2 	bl	800a434 <_Bfree>
 800a870:	4628      	mov	r0, r5
 800a872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a876:	f842 0f04 	str.w	r0, [r2, #4]!
 800a87a:	3301      	adds	r3, #1
 800a87c:	e7c5      	b.n	800a80a <__lshift+0x4a>
 800a87e:	3904      	subs	r1, #4
 800a880:	f853 2b04 	ldr.w	r2, [r3], #4
 800a884:	459c      	cmp	ip, r3
 800a886:	f841 2f04 	str.w	r2, [r1, #4]!
 800a88a:	d8f9      	bhi.n	800a880 <__lshift+0xc0>
 800a88c:	e7ea      	b.n	800a864 <__lshift+0xa4>
 800a88e:	bf00      	nop
 800a890:	0800b36e 	.word	0x0800b36e
 800a894:	0800b37f 	.word	0x0800b37f

0800a898 <__mcmp>:
 800a898:	4603      	mov	r3, r0
 800a89a:	690a      	ldr	r2, [r1, #16]
 800a89c:	6900      	ldr	r0, [r0, #16]
 800a89e:	b530      	push	{r4, r5, lr}
 800a8a0:	1a80      	subs	r0, r0, r2
 800a8a2:	d10e      	bne.n	800a8c2 <__mcmp+0x2a>
 800a8a4:	3314      	adds	r3, #20
 800a8a6:	3114      	adds	r1, #20
 800a8a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8b8:	4295      	cmp	r5, r2
 800a8ba:	d003      	beq.n	800a8c4 <__mcmp+0x2c>
 800a8bc:	d205      	bcs.n	800a8ca <__mcmp+0x32>
 800a8be:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c2:	bd30      	pop	{r4, r5, pc}
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	d3f3      	bcc.n	800a8b0 <__mcmp+0x18>
 800a8c8:	e7fb      	b.n	800a8c2 <__mcmp+0x2a>
 800a8ca:	2001      	movs	r0, #1
 800a8cc:	e7f9      	b.n	800a8c2 <__mcmp+0x2a>
	...

0800a8d0 <__mdiff>:
 800a8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	4689      	mov	r9, r1
 800a8d6:	4606      	mov	r6, r0
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4648      	mov	r0, r9
 800a8dc:	4614      	mov	r4, r2
 800a8de:	f7ff ffdb 	bl	800a898 <__mcmp>
 800a8e2:	1e05      	subs	r5, r0, #0
 800a8e4:	d112      	bne.n	800a90c <__mdiff+0x3c>
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f7ff fd63 	bl	800a3b4 <_Balloc>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	b928      	cbnz	r0, 800a8fe <__mdiff+0x2e>
 800a8f2:	f240 2137 	movw	r1, #567	@ 0x237
 800a8f6:	4b3e      	ldr	r3, [pc, #248]	@ (800a9f0 <__mdiff+0x120>)
 800a8f8:	483e      	ldr	r0, [pc, #248]	@ (800a9f4 <__mdiff+0x124>)
 800a8fa:	f000 f99b 	bl	800ac34 <__assert_func>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a904:	4610      	mov	r0, r2
 800a906:	b003      	add	sp, #12
 800a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90c:	bfbc      	itt	lt
 800a90e:	464b      	movlt	r3, r9
 800a910:	46a1      	movlt	r9, r4
 800a912:	4630      	mov	r0, r6
 800a914:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a918:	bfba      	itte	lt
 800a91a:	461c      	movlt	r4, r3
 800a91c:	2501      	movlt	r5, #1
 800a91e:	2500      	movge	r5, #0
 800a920:	f7ff fd48 	bl	800a3b4 <_Balloc>
 800a924:	4602      	mov	r2, r0
 800a926:	b918      	cbnz	r0, 800a930 <__mdiff+0x60>
 800a928:	f240 2145 	movw	r1, #581	@ 0x245
 800a92c:	4b30      	ldr	r3, [pc, #192]	@ (800a9f0 <__mdiff+0x120>)
 800a92e:	e7e3      	b.n	800a8f8 <__mdiff+0x28>
 800a930:	f100 0b14 	add.w	fp, r0, #20
 800a934:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a938:	f109 0310 	add.w	r3, r9, #16
 800a93c:	60c5      	str	r5, [r0, #12]
 800a93e:	f04f 0c00 	mov.w	ip, #0
 800a942:	f109 0514 	add.w	r5, r9, #20
 800a946:	46d9      	mov	r9, fp
 800a948:	6926      	ldr	r6, [r4, #16]
 800a94a:	f104 0e14 	add.w	lr, r4, #20
 800a94e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a952:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a956:	9301      	str	r3, [sp, #4]
 800a958:	9b01      	ldr	r3, [sp, #4]
 800a95a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a95e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a962:	b281      	uxth	r1, r0
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	fa1f f38a 	uxth.w	r3, sl
 800a96a:	1a5b      	subs	r3, r3, r1
 800a96c:	0c00      	lsrs	r0, r0, #16
 800a96e:	4463      	add	r3, ip
 800a970:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a974:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a978:	b29b      	uxth	r3, r3
 800a97a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a97e:	4576      	cmp	r6, lr
 800a980:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a984:	f849 3b04 	str.w	r3, [r9], #4
 800a988:	d8e6      	bhi.n	800a958 <__mdiff+0x88>
 800a98a:	1b33      	subs	r3, r6, r4
 800a98c:	3b15      	subs	r3, #21
 800a98e:	f023 0303 	bic.w	r3, r3, #3
 800a992:	3415      	adds	r4, #21
 800a994:	3304      	adds	r3, #4
 800a996:	42a6      	cmp	r6, r4
 800a998:	bf38      	it	cc
 800a99a:	2304      	movcc	r3, #4
 800a99c:	441d      	add	r5, r3
 800a99e:	445b      	add	r3, fp
 800a9a0:	461e      	mov	r6, r3
 800a9a2:	462c      	mov	r4, r5
 800a9a4:	4544      	cmp	r4, r8
 800a9a6:	d30e      	bcc.n	800a9c6 <__mdiff+0xf6>
 800a9a8:	f108 0103 	add.w	r1, r8, #3
 800a9ac:	1b49      	subs	r1, r1, r5
 800a9ae:	f021 0103 	bic.w	r1, r1, #3
 800a9b2:	3d03      	subs	r5, #3
 800a9b4:	45a8      	cmp	r8, r5
 800a9b6:	bf38      	it	cc
 800a9b8:	2100      	movcc	r1, #0
 800a9ba:	440b      	add	r3, r1
 800a9bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9c0:	b199      	cbz	r1, 800a9ea <__mdiff+0x11a>
 800a9c2:	6117      	str	r7, [r2, #16]
 800a9c4:	e79e      	b.n	800a904 <__mdiff+0x34>
 800a9c6:	46e6      	mov	lr, ip
 800a9c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a9cc:	fa1f fc81 	uxth.w	ip, r1
 800a9d0:	44f4      	add	ip, lr
 800a9d2:	0c08      	lsrs	r0, r1, #16
 800a9d4:	4471      	add	r1, lr
 800a9d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a9da:	b289      	uxth	r1, r1
 800a9dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a9e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9e4:	f846 1b04 	str.w	r1, [r6], #4
 800a9e8:	e7dc      	b.n	800a9a4 <__mdiff+0xd4>
 800a9ea:	3f01      	subs	r7, #1
 800a9ec:	e7e6      	b.n	800a9bc <__mdiff+0xec>
 800a9ee:	bf00      	nop
 800a9f0:	0800b36e 	.word	0x0800b36e
 800a9f4:	0800b37f 	.word	0x0800b37f

0800a9f8 <__d2b>:
 800a9f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	4690      	mov	r8, r2
 800aa00:	4699      	mov	r9, r3
 800aa02:	9e08      	ldr	r6, [sp, #32]
 800aa04:	f7ff fcd6 	bl	800a3b4 <_Balloc>
 800aa08:	4604      	mov	r4, r0
 800aa0a:	b930      	cbnz	r0, 800aa1a <__d2b+0x22>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa12:	4b23      	ldr	r3, [pc, #140]	@ (800aaa0 <__d2b+0xa8>)
 800aa14:	4823      	ldr	r0, [pc, #140]	@ (800aaa4 <__d2b+0xac>)
 800aa16:	f000 f90d 	bl	800ac34 <__assert_func>
 800aa1a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa22:	b10d      	cbz	r5, 800aa28 <__d2b+0x30>
 800aa24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa28:	9301      	str	r3, [sp, #4]
 800aa2a:	f1b8 0300 	subs.w	r3, r8, #0
 800aa2e:	d024      	beq.n	800aa7a <__d2b+0x82>
 800aa30:	4668      	mov	r0, sp
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	f7ff fd85 	bl	800a542 <__lo0bits>
 800aa38:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa3c:	b1d8      	cbz	r0, 800aa76 <__d2b+0x7e>
 800aa3e:	f1c0 0320 	rsb	r3, r0, #32
 800aa42:	fa02 f303 	lsl.w	r3, r2, r3
 800aa46:	430b      	orrs	r3, r1
 800aa48:	40c2      	lsrs	r2, r0
 800aa4a:	6163      	str	r3, [r4, #20]
 800aa4c:	9201      	str	r2, [sp, #4]
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	bf0c      	ite	eq
 800aa54:	2201      	moveq	r2, #1
 800aa56:	2202      	movne	r2, #2
 800aa58:	61a3      	str	r3, [r4, #24]
 800aa5a:	6122      	str	r2, [r4, #16]
 800aa5c:	b1ad      	cbz	r5, 800aa8a <__d2b+0x92>
 800aa5e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa62:	4405      	add	r5, r0
 800aa64:	6035      	str	r5, [r6, #0]
 800aa66:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6c:	6018      	str	r0, [r3, #0]
 800aa6e:	4620      	mov	r0, r4
 800aa70:	b002      	add	sp, #8
 800aa72:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800aa76:	6161      	str	r1, [r4, #20]
 800aa78:	e7e9      	b.n	800aa4e <__d2b+0x56>
 800aa7a:	a801      	add	r0, sp, #4
 800aa7c:	f7ff fd61 	bl	800a542 <__lo0bits>
 800aa80:	9b01      	ldr	r3, [sp, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	6163      	str	r3, [r4, #20]
 800aa86:	3020      	adds	r0, #32
 800aa88:	e7e7      	b.n	800aa5a <__d2b+0x62>
 800aa8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa92:	6030      	str	r0, [r6, #0]
 800aa94:	6918      	ldr	r0, [r3, #16]
 800aa96:	f7ff fd35 	bl	800a504 <__hi0bits>
 800aa9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa9e:	e7e4      	b.n	800aa6a <__d2b+0x72>
 800aaa0:	0800b36e 	.word	0x0800b36e
 800aaa4:	0800b37f 	.word	0x0800b37f

0800aaa8 <__sflush_r>:
 800aaa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	0716      	lsls	r6, r2, #28
 800aab0:	4605      	mov	r5, r0
 800aab2:	460c      	mov	r4, r1
 800aab4:	d454      	bmi.n	800ab60 <__sflush_r+0xb8>
 800aab6:	684b      	ldr	r3, [r1, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	dc02      	bgt.n	800aac2 <__sflush_r+0x1a>
 800aabc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	dd48      	ble.n	800ab54 <__sflush_r+0xac>
 800aac2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	d045      	beq.n	800ab54 <__sflush_r+0xac>
 800aac8:	2300      	movs	r3, #0
 800aaca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aace:	682f      	ldr	r7, [r5, #0]
 800aad0:	6a21      	ldr	r1, [r4, #32]
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	d030      	beq.n	800ab38 <__sflush_r+0x90>
 800aad6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	0759      	lsls	r1, r3, #29
 800aadc:	d505      	bpl.n	800aaea <__sflush_r+0x42>
 800aade:	6863      	ldr	r3, [r4, #4]
 800aae0:	1ad2      	subs	r2, r2, r3
 800aae2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aae4:	b10b      	cbz	r3, 800aaea <__sflush_r+0x42>
 800aae6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aae8:	1ad2      	subs	r2, r2, r3
 800aaea:	2300      	movs	r3, #0
 800aaec:	4628      	mov	r0, r5
 800aaee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aaf0:	6a21      	ldr	r1, [r4, #32]
 800aaf2:	47b0      	blx	r6
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	d106      	bne.n	800ab08 <__sflush_r+0x60>
 800aafa:	6829      	ldr	r1, [r5, #0]
 800aafc:	291d      	cmp	r1, #29
 800aafe:	d82b      	bhi.n	800ab58 <__sflush_r+0xb0>
 800ab00:	4a28      	ldr	r2, [pc, #160]	@ (800aba4 <__sflush_r+0xfc>)
 800ab02:	40ca      	lsrs	r2, r1
 800ab04:	07d6      	lsls	r6, r2, #31
 800ab06:	d527      	bpl.n	800ab58 <__sflush_r+0xb0>
 800ab08:	2200      	movs	r2, #0
 800ab0a:	6062      	str	r2, [r4, #4]
 800ab0c:	6922      	ldr	r2, [r4, #16]
 800ab0e:	04d9      	lsls	r1, r3, #19
 800ab10:	6022      	str	r2, [r4, #0]
 800ab12:	d504      	bpl.n	800ab1e <__sflush_r+0x76>
 800ab14:	1c42      	adds	r2, r0, #1
 800ab16:	d101      	bne.n	800ab1c <__sflush_r+0x74>
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	b903      	cbnz	r3, 800ab1e <__sflush_r+0x76>
 800ab1c:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab20:	602f      	str	r7, [r5, #0]
 800ab22:	b1b9      	cbz	r1, 800ab54 <__sflush_r+0xac>
 800ab24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab28:	4299      	cmp	r1, r3
 800ab2a:	d002      	beq.n	800ab32 <__sflush_r+0x8a>
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f7ff fb43 	bl	800a1b8 <_free_r>
 800ab32:	2300      	movs	r3, #0
 800ab34:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab36:	e00d      	b.n	800ab54 <__sflush_r+0xac>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	47b0      	blx	r6
 800ab3e:	4602      	mov	r2, r0
 800ab40:	1c50      	adds	r0, r2, #1
 800ab42:	d1c9      	bne.n	800aad8 <__sflush_r+0x30>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d0c6      	beq.n	800aad8 <__sflush_r+0x30>
 800ab4a:	2b1d      	cmp	r3, #29
 800ab4c:	d001      	beq.n	800ab52 <__sflush_r+0xaa>
 800ab4e:	2b16      	cmp	r3, #22
 800ab50:	d11d      	bne.n	800ab8e <__sflush_r+0xe6>
 800ab52:	602f      	str	r7, [r5, #0]
 800ab54:	2000      	movs	r0, #0
 800ab56:	e021      	b.n	800ab9c <__sflush_r+0xf4>
 800ab58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab5c:	b21b      	sxth	r3, r3
 800ab5e:	e01a      	b.n	800ab96 <__sflush_r+0xee>
 800ab60:	690f      	ldr	r7, [r1, #16]
 800ab62:	2f00      	cmp	r7, #0
 800ab64:	d0f6      	beq.n	800ab54 <__sflush_r+0xac>
 800ab66:	0793      	lsls	r3, r2, #30
 800ab68:	bf18      	it	ne
 800ab6a:	2300      	movne	r3, #0
 800ab6c:	680e      	ldr	r6, [r1, #0]
 800ab6e:	bf08      	it	eq
 800ab70:	694b      	ldreq	r3, [r1, #20]
 800ab72:	1bf6      	subs	r6, r6, r7
 800ab74:	600f      	str	r7, [r1, #0]
 800ab76:	608b      	str	r3, [r1, #8]
 800ab78:	2e00      	cmp	r6, #0
 800ab7a:	ddeb      	ble.n	800ab54 <__sflush_r+0xac>
 800ab7c:	4633      	mov	r3, r6
 800ab7e:	463a      	mov	r2, r7
 800ab80:	4628      	mov	r0, r5
 800ab82:	6a21      	ldr	r1, [r4, #32]
 800ab84:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ab88:	47e0      	blx	ip
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	dc07      	bgt.n	800ab9e <__sflush_r+0xf6>
 800ab8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab96:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab9e:	4407      	add	r7, r0
 800aba0:	1a36      	subs	r6, r6, r0
 800aba2:	e7e9      	b.n	800ab78 <__sflush_r+0xd0>
 800aba4:	20400001 	.word	0x20400001

0800aba8 <_fflush_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	690b      	ldr	r3, [r1, #16]
 800abac:	4605      	mov	r5, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	b913      	cbnz	r3, 800abb8 <_fflush_r+0x10>
 800abb2:	2500      	movs	r5, #0
 800abb4:	4628      	mov	r0, r5
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	b118      	cbz	r0, 800abc2 <_fflush_r+0x1a>
 800abba:	6a03      	ldr	r3, [r0, #32]
 800abbc:	b90b      	cbnz	r3, 800abc2 <_fflush_r+0x1a>
 800abbe:	f7fe fb95 	bl	80092ec <__sinit>
 800abc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0f3      	beq.n	800abb2 <_fflush_r+0xa>
 800abca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abcc:	07d0      	lsls	r0, r2, #31
 800abce:	d404      	bmi.n	800abda <_fflush_r+0x32>
 800abd0:	0599      	lsls	r1, r3, #22
 800abd2:	d402      	bmi.n	800abda <_fflush_r+0x32>
 800abd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abd6:	f7fe fc80 	bl	80094da <__retarget_lock_acquire_recursive>
 800abda:	4628      	mov	r0, r5
 800abdc:	4621      	mov	r1, r4
 800abde:	f7ff ff63 	bl	800aaa8 <__sflush_r>
 800abe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abe4:	4605      	mov	r5, r0
 800abe6:	07da      	lsls	r2, r3, #31
 800abe8:	d4e4      	bmi.n	800abb4 <_fflush_r+0xc>
 800abea:	89a3      	ldrh	r3, [r4, #12]
 800abec:	059b      	lsls	r3, r3, #22
 800abee:	d4e1      	bmi.n	800abb4 <_fflush_r+0xc>
 800abf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abf2:	f7fe fc73 	bl	80094dc <__retarget_lock_release_recursive>
 800abf6:	e7dd      	b.n	800abb4 <_fflush_r+0xc>

0800abf8 <_sbrk_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	2300      	movs	r3, #0
 800abfc:	4d05      	ldr	r5, [pc, #20]	@ (800ac14 <_sbrk_r+0x1c>)
 800abfe:	4604      	mov	r4, r0
 800ac00:	4608      	mov	r0, r1
 800ac02:	602b      	str	r3, [r5, #0]
 800ac04:	f7f6 f93c 	bl	8000e80 <_sbrk>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_sbrk_r+0x1a>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_sbrk_r+0x1a>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	200016b4 	.word	0x200016b4

0800ac18 <memcpy>:
 800ac18:	440a      	add	r2, r1
 800ac1a:	4291      	cmp	r1, r2
 800ac1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac20:	d100      	bne.n	800ac24 <memcpy+0xc>
 800ac22:	4770      	bx	lr
 800ac24:	b510      	push	{r4, lr}
 800ac26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac2a:	4291      	cmp	r1, r2
 800ac2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac30:	d1f9      	bne.n	800ac26 <memcpy+0xe>
 800ac32:	bd10      	pop	{r4, pc}

0800ac34 <__assert_func>:
 800ac34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac36:	4614      	mov	r4, r2
 800ac38:	461a      	mov	r2, r3
 800ac3a:	4b09      	ldr	r3, [pc, #36]	@ (800ac60 <__assert_func+0x2c>)
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68d8      	ldr	r0, [r3, #12]
 800ac42:	b14c      	cbz	r4, 800ac58 <__assert_func+0x24>
 800ac44:	4b07      	ldr	r3, [pc, #28]	@ (800ac64 <__assert_func+0x30>)
 800ac46:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac4a:	9100      	str	r1, [sp, #0]
 800ac4c:	462b      	mov	r3, r5
 800ac4e:	4906      	ldr	r1, [pc, #24]	@ (800ac68 <__assert_func+0x34>)
 800ac50:	f000 f842 	bl	800acd8 <fiprintf>
 800ac54:	f000 f852 	bl	800acfc <abort>
 800ac58:	4b04      	ldr	r3, [pc, #16]	@ (800ac6c <__assert_func+0x38>)
 800ac5a:	461c      	mov	r4, r3
 800ac5c:	e7f3      	b.n	800ac46 <__assert_func+0x12>
 800ac5e:	bf00      	nop
 800ac60:	20000188 	.word	0x20000188
 800ac64:	0800b3e2 	.word	0x0800b3e2
 800ac68:	0800b3ef 	.word	0x0800b3ef
 800ac6c:	0800b41d 	.word	0x0800b41d

0800ac70 <_calloc_r>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	fba1 5402 	umull	r5, r4, r1, r2
 800ac76:	b934      	cbnz	r4, 800ac86 <_calloc_r+0x16>
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f7ff fb0f 	bl	800a29c <_malloc_r>
 800ac7e:	4606      	mov	r6, r0
 800ac80:	b928      	cbnz	r0, 800ac8e <_calloc_r+0x1e>
 800ac82:	4630      	mov	r0, r6
 800ac84:	bd70      	pop	{r4, r5, r6, pc}
 800ac86:	220c      	movs	r2, #12
 800ac88:	2600      	movs	r6, #0
 800ac8a:	6002      	str	r2, [r0, #0]
 800ac8c:	e7f9      	b.n	800ac82 <_calloc_r+0x12>
 800ac8e:	462a      	mov	r2, r5
 800ac90:	4621      	mov	r1, r4
 800ac92:	f7fe fba4 	bl	80093de <memset>
 800ac96:	e7f4      	b.n	800ac82 <_calloc_r+0x12>

0800ac98 <__ascii_mbtowc>:
 800ac98:	b082      	sub	sp, #8
 800ac9a:	b901      	cbnz	r1, 800ac9e <__ascii_mbtowc+0x6>
 800ac9c:	a901      	add	r1, sp, #4
 800ac9e:	b142      	cbz	r2, 800acb2 <__ascii_mbtowc+0x1a>
 800aca0:	b14b      	cbz	r3, 800acb6 <__ascii_mbtowc+0x1e>
 800aca2:	7813      	ldrb	r3, [r2, #0]
 800aca4:	600b      	str	r3, [r1, #0]
 800aca6:	7812      	ldrb	r2, [r2, #0]
 800aca8:	1e10      	subs	r0, r2, #0
 800acaa:	bf18      	it	ne
 800acac:	2001      	movne	r0, #1
 800acae:	b002      	add	sp, #8
 800acb0:	4770      	bx	lr
 800acb2:	4610      	mov	r0, r2
 800acb4:	e7fb      	b.n	800acae <__ascii_mbtowc+0x16>
 800acb6:	f06f 0001 	mvn.w	r0, #1
 800acba:	e7f8      	b.n	800acae <__ascii_mbtowc+0x16>

0800acbc <__ascii_wctomb>:
 800acbc:	4603      	mov	r3, r0
 800acbe:	4608      	mov	r0, r1
 800acc0:	b141      	cbz	r1, 800acd4 <__ascii_wctomb+0x18>
 800acc2:	2aff      	cmp	r2, #255	@ 0xff
 800acc4:	d904      	bls.n	800acd0 <__ascii_wctomb+0x14>
 800acc6:	228a      	movs	r2, #138	@ 0x8a
 800acc8:	f04f 30ff 	mov.w	r0, #4294967295
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	4770      	bx	lr
 800acd0:	2001      	movs	r0, #1
 800acd2:	700a      	strb	r2, [r1, #0]
 800acd4:	4770      	bx	lr
	...

0800acd8 <fiprintf>:
 800acd8:	b40e      	push	{r1, r2, r3}
 800acda:	b503      	push	{r0, r1, lr}
 800acdc:	4601      	mov	r1, r0
 800acde:	ab03      	add	r3, sp, #12
 800ace0:	4805      	ldr	r0, [pc, #20]	@ (800acf8 <fiprintf+0x20>)
 800ace2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace6:	6800      	ldr	r0, [r0, #0]
 800ace8:	9301      	str	r3, [sp, #4]
 800acea:	f000 f835 	bl	800ad58 <_vfiprintf_r>
 800acee:	b002      	add	sp, #8
 800acf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acf4:	b003      	add	sp, #12
 800acf6:	4770      	bx	lr
 800acf8:	20000188 	.word	0x20000188

0800acfc <abort>:
 800acfc:	2006      	movs	r0, #6
 800acfe:	b508      	push	{r3, lr}
 800ad00:	f000 f9fe 	bl	800b100 <raise>
 800ad04:	2001      	movs	r0, #1
 800ad06:	f7f6 f846 	bl	8000d96 <_exit>

0800ad0a <__sfputc_r>:
 800ad0a:	6893      	ldr	r3, [r2, #8]
 800ad0c:	b410      	push	{r4}
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	6093      	str	r3, [r2, #8]
 800ad14:	da07      	bge.n	800ad26 <__sfputc_r+0x1c>
 800ad16:	6994      	ldr	r4, [r2, #24]
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	db01      	blt.n	800ad20 <__sfputc_r+0x16>
 800ad1c:	290a      	cmp	r1, #10
 800ad1e:	d102      	bne.n	800ad26 <__sfputc_r+0x1c>
 800ad20:	bc10      	pop	{r4}
 800ad22:	f000 b931 	b.w	800af88 <__swbuf_r>
 800ad26:	6813      	ldr	r3, [r2, #0]
 800ad28:	1c58      	adds	r0, r3, #1
 800ad2a:	6010      	str	r0, [r2, #0]
 800ad2c:	7019      	strb	r1, [r3, #0]
 800ad2e:	4608      	mov	r0, r1
 800ad30:	bc10      	pop	{r4}
 800ad32:	4770      	bx	lr

0800ad34 <__sfputs_r>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	4606      	mov	r6, r0
 800ad38:	460f      	mov	r7, r1
 800ad3a:	4614      	mov	r4, r2
 800ad3c:	18d5      	adds	r5, r2, r3
 800ad3e:	42ac      	cmp	r4, r5
 800ad40:	d101      	bne.n	800ad46 <__sfputs_r+0x12>
 800ad42:	2000      	movs	r0, #0
 800ad44:	e007      	b.n	800ad56 <__sfputs_r+0x22>
 800ad46:	463a      	mov	r2, r7
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4e:	f7ff ffdc 	bl	800ad0a <__sfputc_r>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d1f3      	bne.n	800ad3e <__sfputs_r+0xa>
 800ad56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad58 <_vfiprintf_r>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	460d      	mov	r5, r1
 800ad5e:	4614      	mov	r4, r2
 800ad60:	4698      	mov	r8, r3
 800ad62:	4606      	mov	r6, r0
 800ad64:	b09d      	sub	sp, #116	@ 0x74
 800ad66:	b118      	cbz	r0, 800ad70 <_vfiprintf_r+0x18>
 800ad68:	6a03      	ldr	r3, [r0, #32]
 800ad6a:	b90b      	cbnz	r3, 800ad70 <_vfiprintf_r+0x18>
 800ad6c:	f7fe fabe 	bl	80092ec <__sinit>
 800ad70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	d405      	bmi.n	800ad82 <_vfiprintf_r+0x2a>
 800ad76:	89ab      	ldrh	r3, [r5, #12]
 800ad78:	059a      	lsls	r2, r3, #22
 800ad7a:	d402      	bmi.n	800ad82 <_vfiprintf_r+0x2a>
 800ad7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad7e:	f7fe fbac 	bl	80094da <__retarget_lock_acquire_recursive>
 800ad82:	89ab      	ldrh	r3, [r5, #12]
 800ad84:	071b      	lsls	r3, r3, #28
 800ad86:	d501      	bpl.n	800ad8c <_vfiprintf_r+0x34>
 800ad88:	692b      	ldr	r3, [r5, #16]
 800ad8a:	b99b      	cbnz	r3, 800adb4 <_vfiprintf_r+0x5c>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f000 f938 	bl	800b004 <__swsetup_r>
 800ad94:	b170      	cbz	r0, 800adb4 <_vfiprintf_r+0x5c>
 800ad96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad98:	07dc      	lsls	r4, r3, #31
 800ad9a:	d504      	bpl.n	800ada6 <_vfiprintf_r+0x4e>
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ada0:	b01d      	add	sp, #116	@ 0x74
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	0598      	lsls	r0, r3, #22
 800adaa:	d4f7      	bmi.n	800ad9c <_vfiprintf_r+0x44>
 800adac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adae:	f7fe fb95 	bl	80094dc <__retarget_lock_release_recursive>
 800adb2:	e7f3      	b.n	800ad9c <_vfiprintf_r+0x44>
 800adb4:	2300      	movs	r3, #0
 800adb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800adb8:	2320      	movs	r3, #32
 800adba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adbe:	2330      	movs	r3, #48	@ 0x30
 800adc0:	f04f 0901 	mov.w	r9, #1
 800adc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800af74 <_vfiprintf_r+0x21c>
 800adcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800add0:	4623      	mov	r3, r4
 800add2:	469a      	mov	sl, r3
 800add4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800add8:	b10a      	cbz	r2, 800adde <_vfiprintf_r+0x86>
 800adda:	2a25      	cmp	r2, #37	@ 0x25
 800addc:	d1f9      	bne.n	800add2 <_vfiprintf_r+0x7a>
 800adde:	ebba 0b04 	subs.w	fp, sl, r4
 800ade2:	d00b      	beq.n	800adfc <_vfiprintf_r+0xa4>
 800ade4:	465b      	mov	r3, fp
 800ade6:	4622      	mov	r2, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	4630      	mov	r0, r6
 800adec:	f7ff ffa2 	bl	800ad34 <__sfputs_r>
 800adf0:	3001      	adds	r0, #1
 800adf2:	f000 80a7 	beq.w	800af44 <_vfiprintf_r+0x1ec>
 800adf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adf8:	445a      	add	r2, fp
 800adfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800adfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 809f 	beq.w	800af44 <_vfiprintf_r+0x1ec>
 800ae06:	2300      	movs	r3, #0
 800ae08:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae10:	f10a 0a01 	add.w	sl, sl, #1
 800ae14:	9304      	str	r3, [sp, #16]
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae1e:	4654      	mov	r4, sl
 800ae20:	2205      	movs	r2, #5
 800ae22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae26:	4853      	ldr	r0, [pc, #332]	@ (800af74 <_vfiprintf_r+0x21c>)
 800ae28:	f7fe fb59 	bl	80094de <memchr>
 800ae2c:	9a04      	ldr	r2, [sp, #16]
 800ae2e:	b9d8      	cbnz	r0, 800ae68 <_vfiprintf_r+0x110>
 800ae30:	06d1      	lsls	r1, r2, #27
 800ae32:	bf44      	itt	mi
 800ae34:	2320      	movmi	r3, #32
 800ae36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae3a:	0713      	lsls	r3, r2, #28
 800ae3c:	bf44      	itt	mi
 800ae3e:	232b      	movmi	r3, #43	@ 0x2b
 800ae40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae44:	f89a 3000 	ldrb.w	r3, [sl]
 800ae48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae4a:	d015      	beq.n	800ae78 <_vfiprintf_r+0x120>
 800ae4c:	4654      	mov	r4, sl
 800ae4e:	2000      	movs	r0, #0
 800ae50:	f04f 0c0a 	mov.w	ip, #10
 800ae54:	9a07      	ldr	r2, [sp, #28]
 800ae56:	4621      	mov	r1, r4
 800ae58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae5c:	3b30      	subs	r3, #48	@ 0x30
 800ae5e:	2b09      	cmp	r3, #9
 800ae60:	d94b      	bls.n	800aefa <_vfiprintf_r+0x1a2>
 800ae62:	b1b0      	cbz	r0, 800ae92 <_vfiprintf_r+0x13a>
 800ae64:	9207      	str	r2, [sp, #28]
 800ae66:	e014      	b.n	800ae92 <_vfiprintf_r+0x13a>
 800ae68:	eba0 0308 	sub.w	r3, r0, r8
 800ae6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae70:	4313      	orrs	r3, r2
 800ae72:	46a2      	mov	sl, r4
 800ae74:	9304      	str	r3, [sp, #16]
 800ae76:	e7d2      	b.n	800ae1e <_vfiprintf_r+0xc6>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	1d19      	adds	r1, r3, #4
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	9103      	str	r1, [sp, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bfbb      	ittet	lt
 800ae84:	425b      	neglt	r3, r3
 800ae86:	f042 0202 	orrlt.w	r2, r2, #2
 800ae8a:	9307      	strge	r3, [sp, #28]
 800ae8c:	9307      	strlt	r3, [sp, #28]
 800ae8e:	bfb8      	it	lt
 800ae90:	9204      	strlt	r2, [sp, #16]
 800ae92:	7823      	ldrb	r3, [r4, #0]
 800ae94:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae96:	d10a      	bne.n	800aeae <_vfiprintf_r+0x156>
 800ae98:	7863      	ldrb	r3, [r4, #1]
 800ae9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae9c:	d132      	bne.n	800af04 <_vfiprintf_r+0x1ac>
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	3402      	adds	r4, #2
 800aea2:	1d1a      	adds	r2, r3, #4
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	9203      	str	r2, [sp, #12]
 800aea8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800af78 <_vfiprintf_r+0x220>
 800aeb2:	2203      	movs	r2, #3
 800aeb4:	4650      	mov	r0, sl
 800aeb6:	7821      	ldrb	r1, [r4, #0]
 800aeb8:	f7fe fb11 	bl	80094de <memchr>
 800aebc:	b138      	cbz	r0, 800aece <_vfiprintf_r+0x176>
 800aebe:	2240      	movs	r2, #64	@ 0x40
 800aec0:	9b04      	ldr	r3, [sp, #16]
 800aec2:	eba0 000a 	sub.w	r0, r0, sl
 800aec6:	4082      	lsls	r2, r0
 800aec8:	4313      	orrs	r3, r2
 800aeca:	3401      	adds	r4, #1
 800aecc:	9304      	str	r3, [sp, #16]
 800aece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed2:	2206      	movs	r2, #6
 800aed4:	4829      	ldr	r0, [pc, #164]	@ (800af7c <_vfiprintf_r+0x224>)
 800aed6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aeda:	f7fe fb00 	bl	80094de <memchr>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d03f      	beq.n	800af62 <_vfiprintf_r+0x20a>
 800aee2:	4b27      	ldr	r3, [pc, #156]	@ (800af80 <_vfiprintf_r+0x228>)
 800aee4:	bb1b      	cbnz	r3, 800af2e <_vfiprintf_r+0x1d6>
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	3307      	adds	r3, #7
 800aeea:	f023 0307 	bic.w	r3, r3, #7
 800aeee:	3308      	adds	r3, #8
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef4:	443b      	add	r3, r7
 800aef6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef8:	e76a      	b.n	800add0 <_vfiprintf_r+0x78>
 800aefa:	460c      	mov	r4, r1
 800aefc:	2001      	movs	r0, #1
 800aefe:	fb0c 3202 	mla	r2, ip, r2, r3
 800af02:	e7a8      	b.n	800ae56 <_vfiprintf_r+0xfe>
 800af04:	2300      	movs	r3, #0
 800af06:	f04f 0c0a 	mov.w	ip, #10
 800af0a:	4619      	mov	r1, r3
 800af0c:	3401      	adds	r4, #1
 800af0e:	9305      	str	r3, [sp, #20]
 800af10:	4620      	mov	r0, r4
 800af12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af16:	3a30      	subs	r2, #48	@ 0x30
 800af18:	2a09      	cmp	r2, #9
 800af1a:	d903      	bls.n	800af24 <_vfiprintf_r+0x1cc>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0c6      	beq.n	800aeae <_vfiprintf_r+0x156>
 800af20:	9105      	str	r1, [sp, #20]
 800af22:	e7c4      	b.n	800aeae <_vfiprintf_r+0x156>
 800af24:	4604      	mov	r4, r0
 800af26:	2301      	movs	r3, #1
 800af28:	fb0c 2101 	mla	r1, ip, r1, r2
 800af2c:	e7f0      	b.n	800af10 <_vfiprintf_r+0x1b8>
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	462a      	mov	r2, r5
 800af34:	4630      	mov	r0, r6
 800af36:	4b13      	ldr	r3, [pc, #76]	@ (800af84 <_vfiprintf_r+0x22c>)
 800af38:	a904      	add	r1, sp, #16
 800af3a:	f7fd fd8f 	bl	8008a5c <_printf_float>
 800af3e:	4607      	mov	r7, r0
 800af40:	1c78      	adds	r0, r7, #1
 800af42:	d1d6      	bne.n	800aef2 <_vfiprintf_r+0x19a>
 800af44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af46:	07d9      	lsls	r1, r3, #31
 800af48:	d405      	bmi.n	800af56 <_vfiprintf_r+0x1fe>
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	059a      	lsls	r2, r3, #22
 800af4e:	d402      	bmi.n	800af56 <_vfiprintf_r+0x1fe>
 800af50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af52:	f7fe fac3 	bl	80094dc <__retarget_lock_release_recursive>
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	065b      	lsls	r3, r3, #25
 800af5a:	f53f af1f 	bmi.w	800ad9c <_vfiprintf_r+0x44>
 800af5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af60:	e71e      	b.n	800ada0 <_vfiprintf_r+0x48>
 800af62:	ab03      	add	r3, sp, #12
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	462a      	mov	r2, r5
 800af68:	4630      	mov	r0, r6
 800af6a:	4b06      	ldr	r3, [pc, #24]	@ (800af84 <_vfiprintf_r+0x22c>)
 800af6c:	a904      	add	r1, sp, #16
 800af6e:	f7fe f813 	bl	8008f98 <_printf_i>
 800af72:	e7e4      	b.n	800af3e <_vfiprintf_r+0x1e6>
 800af74:	0800b41e 	.word	0x0800b41e
 800af78:	0800b424 	.word	0x0800b424
 800af7c:	0800b428 	.word	0x0800b428
 800af80:	08008a5d 	.word	0x08008a5d
 800af84:	0800ad35 	.word	0x0800ad35

0800af88 <__swbuf_r>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	460e      	mov	r6, r1
 800af8c:	4614      	mov	r4, r2
 800af8e:	4605      	mov	r5, r0
 800af90:	b118      	cbz	r0, 800af9a <__swbuf_r+0x12>
 800af92:	6a03      	ldr	r3, [r0, #32]
 800af94:	b90b      	cbnz	r3, 800af9a <__swbuf_r+0x12>
 800af96:	f7fe f9a9 	bl	80092ec <__sinit>
 800af9a:	69a3      	ldr	r3, [r4, #24]
 800af9c:	60a3      	str	r3, [r4, #8]
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	071a      	lsls	r2, r3, #28
 800afa2:	d501      	bpl.n	800afa8 <__swbuf_r+0x20>
 800afa4:	6923      	ldr	r3, [r4, #16]
 800afa6:	b943      	cbnz	r3, 800afba <__swbuf_r+0x32>
 800afa8:	4621      	mov	r1, r4
 800afaa:	4628      	mov	r0, r5
 800afac:	f000 f82a 	bl	800b004 <__swsetup_r>
 800afb0:	b118      	cbz	r0, 800afba <__swbuf_r+0x32>
 800afb2:	f04f 37ff 	mov.w	r7, #4294967295
 800afb6:	4638      	mov	r0, r7
 800afb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	6922      	ldr	r2, [r4, #16]
 800afbe:	b2f6      	uxtb	r6, r6
 800afc0:	1a98      	subs	r0, r3, r2
 800afc2:	6963      	ldr	r3, [r4, #20]
 800afc4:	4637      	mov	r7, r6
 800afc6:	4283      	cmp	r3, r0
 800afc8:	dc05      	bgt.n	800afd6 <__swbuf_r+0x4e>
 800afca:	4621      	mov	r1, r4
 800afcc:	4628      	mov	r0, r5
 800afce:	f7ff fdeb 	bl	800aba8 <_fflush_r>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d1ed      	bne.n	800afb2 <__swbuf_r+0x2a>
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	3b01      	subs	r3, #1
 800afda:	60a3      	str	r3, [r4, #8]
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	6022      	str	r2, [r4, #0]
 800afe2:	701e      	strb	r6, [r3, #0]
 800afe4:	6962      	ldr	r2, [r4, #20]
 800afe6:	1c43      	adds	r3, r0, #1
 800afe8:	429a      	cmp	r2, r3
 800afea:	d004      	beq.n	800aff6 <__swbuf_r+0x6e>
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	07db      	lsls	r3, r3, #31
 800aff0:	d5e1      	bpl.n	800afb6 <__swbuf_r+0x2e>
 800aff2:	2e0a      	cmp	r6, #10
 800aff4:	d1df      	bne.n	800afb6 <__swbuf_r+0x2e>
 800aff6:	4621      	mov	r1, r4
 800aff8:	4628      	mov	r0, r5
 800affa:	f7ff fdd5 	bl	800aba8 <_fflush_r>
 800affe:	2800      	cmp	r0, #0
 800b000:	d0d9      	beq.n	800afb6 <__swbuf_r+0x2e>
 800b002:	e7d6      	b.n	800afb2 <__swbuf_r+0x2a>

0800b004 <__swsetup_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4b29      	ldr	r3, [pc, #164]	@ (800b0ac <__swsetup_r+0xa8>)
 800b008:	4605      	mov	r5, r0
 800b00a:	6818      	ldr	r0, [r3, #0]
 800b00c:	460c      	mov	r4, r1
 800b00e:	b118      	cbz	r0, 800b018 <__swsetup_r+0x14>
 800b010:	6a03      	ldr	r3, [r0, #32]
 800b012:	b90b      	cbnz	r3, 800b018 <__swsetup_r+0x14>
 800b014:	f7fe f96a 	bl	80092ec <__sinit>
 800b018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b01c:	0719      	lsls	r1, r3, #28
 800b01e:	d422      	bmi.n	800b066 <__swsetup_r+0x62>
 800b020:	06da      	lsls	r2, r3, #27
 800b022:	d407      	bmi.n	800b034 <__swsetup_r+0x30>
 800b024:	2209      	movs	r2, #9
 800b026:	602a      	str	r2, [r5, #0]
 800b028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	81a3      	strh	r3, [r4, #12]
 800b032:	e033      	b.n	800b09c <__swsetup_r+0x98>
 800b034:	0758      	lsls	r0, r3, #29
 800b036:	d512      	bpl.n	800b05e <__swsetup_r+0x5a>
 800b038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b03a:	b141      	cbz	r1, 800b04e <__swsetup_r+0x4a>
 800b03c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b040:	4299      	cmp	r1, r3
 800b042:	d002      	beq.n	800b04a <__swsetup_r+0x46>
 800b044:	4628      	mov	r0, r5
 800b046:	f7ff f8b7 	bl	800a1b8 <_free_r>
 800b04a:	2300      	movs	r3, #0
 800b04c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b054:	81a3      	strh	r3, [r4, #12]
 800b056:	2300      	movs	r3, #0
 800b058:	6063      	str	r3, [r4, #4]
 800b05a:	6923      	ldr	r3, [r4, #16]
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	f043 0308 	orr.w	r3, r3, #8
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	b94b      	cbnz	r3, 800b07e <__swsetup_r+0x7a>
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b074:	d003      	beq.n	800b07e <__swsetup_r+0x7a>
 800b076:	4621      	mov	r1, r4
 800b078:	4628      	mov	r0, r5
 800b07a:	f000 f882 	bl	800b182 <__smakebuf_r>
 800b07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b082:	f013 0201 	ands.w	r2, r3, #1
 800b086:	d00a      	beq.n	800b09e <__swsetup_r+0x9a>
 800b088:	2200      	movs	r2, #0
 800b08a:	60a2      	str	r2, [r4, #8]
 800b08c:	6962      	ldr	r2, [r4, #20]
 800b08e:	4252      	negs	r2, r2
 800b090:	61a2      	str	r2, [r4, #24]
 800b092:	6922      	ldr	r2, [r4, #16]
 800b094:	b942      	cbnz	r2, 800b0a8 <__swsetup_r+0xa4>
 800b096:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b09a:	d1c5      	bne.n	800b028 <__swsetup_r+0x24>
 800b09c:	bd38      	pop	{r3, r4, r5, pc}
 800b09e:	0799      	lsls	r1, r3, #30
 800b0a0:	bf58      	it	pl
 800b0a2:	6962      	ldrpl	r2, [r4, #20]
 800b0a4:	60a2      	str	r2, [r4, #8]
 800b0a6:	e7f4      	b.n	800b092 <__swsetup_r+0x8e>
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	e7f7      	b.n	800b09c <__swsetup_r+0x98>
 800b0ac:	20000188 	.word	0x20000188

0800b0b0 <_raise_r>:
 800b0b0:	291f      	cmp	r1, #31
 800b0b2:	b538      	push	{r3, r4, r5, lr}
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	d904      	bls.n	800b0c4 <_raise_r+0x14>
 800b0ba:	2316      	movs	r3, #22
 800b0bc:	6003      	str	r3, [r0, #0]
 800b0be:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0c6:	b112      	cbz	r2, 800b0ce <_raise_r+0x1e>
 800b0c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0cc:	b94b      	cbnz	r3, 800b0e2 <_raise_r+0x32>
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f000 f830 	bl	800b134 <_getpid_r>
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	4601      	mov	r1, r0
 800b0d8:	4628      	mov	r0, r5
 800b0da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0de:	f000 b817 	b.w	800b110 <_kill_r>
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d00a      	beq.n	800b0fc <_raise_r+0x4c>
 800b0e6:	1c59      	adds	r1, r3, #1
 800b0e8:	d103      	bne.n	800b0f2 <_raise_r+0x42>
 800b0ea:	2316      	movs	r3, #22
 800b0ec:	6003      	str	r3, [r0, #0]
 800b0ee:	2001      	movs	r0, #1
 800b0f0:	e7e7      	b.n	800b0c2 <_raise_r+0x12>
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0fa:	4798      	blx	r3
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e7e0      	b.n	800b0c2 <_raise_r+0x12>

0800b100 <raise>:
 800b100:	4b02      	ldr	r3, [pc, #8]	@ (800b10c <raise+0xc>)
 800b102:	4601      	mov	r1, r0
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	f7ff bfd3 	b.w	800b0b0 <_raise_r>
 800b10a:	bf00      	nop
 800b10c:	20000188 	.word	0x20000188

0800b110 <_kill_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	2300      	movs	r3, #0
 800b114:	4d06      	ldr	r5, [pc, #24]	@ (800b130 <_kill_r+0x20>)
 800b116:	4604      	mov	r4, r0
 800b118:	4608      	mov	r0, r1
 800b11a:	4611      	mov	r1, r2
 800b11c:	602b      	str	r3, [r5, #0]
 800b11e:	f7f5 fe2a 	bl	8000d76 <_kill>
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	d102      	bne.n	800b12c <_kill_r+0x1c>
 800b126:	682b      	ldr	r3, [r5, #0]
 800b128:	b103      	cbz	r3, 800b12c <_kill_r+0x1c>
 800b12a:	6023      	str	r3, [r4, #0]
 800b12c:	bd38      	pop	{r3, r4, r5, pc}
 800b12e:	bf00      	nop
 800b130:	200016b4 	.word	0x200016b4

0800b134 <_getpid_r>:
 800b134:	f7f5 be18 	b.w	8000d68 <_getpid>

0800b138 <__swhatbuf_r>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	460c      	mov	r4, r1
 800b13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b140:	4615      	mov	r5, r2
 800b142:	2900      	cmp	r1, #0
 800b144:	461e      	mov	r6, r3
 800b146:	b096      	sub	sp, #88	@ 0x58
 800b148:	da0c      	bge.n	800b164 <__swhatbuf_r+0x2c>
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	2100      	movs	r1, #0
 800b14e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b152:	bf14      	ite	ne
 800b154:	2340      	movne	r3, #64	@ 0x40
 800b156:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b15a:	2000      	movs	r0, #0
 800b15c:	6031      	str	r1, [r6, #0]
 800b15e:	602b      	str	r3, [r5, #0]
 800b160:	b016      	add	sp, #88	@ 0x58
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	466a      	mov	r2, sp
 800b166:	f000 f849 	bl	800b1fc <_fstat_r>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	dbed      	blt.n	800b14a <__swhatbuf_r+0x12>
 800b16e:	9901      	ldr	r1, [sp, #4]
 800b170:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b174:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b178:	4259      	negs	r1, r3
 800b17a:	4159      	adcs	r1, r3
 800b17c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b180:	e7eb      	b.n	800b15a <__swhatbuf_r+0x22>

0800b182 <__smakebuf_r>:
 800b182:	898b      	ldrh	r3, [r1, #12]
 800b184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b186:	079d      	lsls	r5, r3, #30
 800b188:	4606      	mov	r6, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	d507      	bpl.n	800b19e <__smakebuf_r+0x1c>
 800b18e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b192:	6023      	str	r3, [r4, #0]
 800b194:	6123      	str	r3, [r4, #16]
 800b196:	2301      	movs	r3, #1
 800b198:	6163      	str	r3, [r4, #20]
 800b19a:	b003      	add	sp, #12
 800b19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b19e:	466a      	mov	r2, sp
 800b1a0:	ab01      	add	r3, sp, #4
 800b1a2:	f7ff ffc9 	bl	800b138 <__swhatbuf_r>
 800b1a6:	9f00      	ldr	r7, [sp, #0]
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f7ff f875 	bl	800a29c <_malloc_r>
 800b1b2:	b948      	cbnz	r0, 800b1c8 <__smakebuf_r+0x46>
 800b1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b8:	059a      	lsls	r2, r3, #22
 800b1ba:	d4ee      	bmi.n	800b19a <__smakebuf_r+0x18>
 800b1bc:	f023 0303 	bic.w	r3, r3, #3
 800b1c0:	f043 0302 	orr.w	r3, r3, #2
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	e7e2      	b.n	800b18e <__smakebuf_r+0xc>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	9b01      	ldr	r3, [sp, #4]
 800b1d6:	6020      	str	r0, [r4, #0]
 800b1d8:	b15b      	cbz	r3, 800b1f2 <__smakebuf_r+0x70>
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1e0:	f000 f81e 	bl	800b220 <_isatty_r>
 800b1e4:	b128      	cbz	r0, 800b1f2 <__smakebuf_r+0x70>
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	f023 0303 	bic.w	r3, r3, #3
 800b1ec:	f043 0301 	orr.w	r3, r3, #1
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	431d      	orrs	r5, r3
 800b1f6:	81a5      	strh	r5, [r4, #12]
 800b1f8:	e7cf      	b.n	800b19a <__smakebuf_r+0x18>
	...

0800b1fc <_fstat_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	2300      	movs	r3, #0
 800b200:	4d06      	ldr	r5, [pc, #24]	@ (800b21c <_fstat_r+0x20>)
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	4611      	mov	r1, r2
 800b208:	602b      	str	r3, [r5, #0]
 800b20a:	f7f5 fe13 	bl	8000e34 <_fstat>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	d102      	bne.n	800b218 <_fstat_r+0x1c>
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	b103      	cbz	r3, 800b218 <_fstat_r+0x1c>
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	bd38      	pop	{r3, r4, r5, pc}
 800b21a:	bf00      	nop
 800b21c:	200016b4 	.word	0x200016b4

0800b220 <_isatty_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	2300      	movs	r3, #0
 800b224:	4d05      	ldr	r5, [pc, #20]	@ (800b23c <_isatty_r+0x1c>)
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f5 fe11 	bl	8000e52 <_isatty>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_isatty_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_isatty_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	200016b4 	.word	0x200016b4

0800b240 <_init>:
 800b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b242:	bf00      	nop
 800b244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b246:	bc08      	pop	{r3}
 800b248:	469e      	mov	lr, r3
 800b24a:	4770      	bx	lr

0800b24c <_fini>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	bf00      	nop
 800b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b252:	bc08      	pop	{r3}
 800b254:	469e      	mov	lr, r3
 800b256:	4770      	bx	lr
