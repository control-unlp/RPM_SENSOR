
RPM_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1b0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800c2c0  0800c2c0  0000d2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c69c  0800c69c  0000e348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c69c  0800c69c  0000d69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6a4  0800c6a4  0000e348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6a4  0800c6a4  0000d6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c6a8  0800c6a8  0000d6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  0800c6ac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d8  20000348  0800c9f4  0000e348  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001720  0800c9f4  0000e720  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fa7  00000000  00000000  0000e371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354e  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00023868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd0  00000000  00000000  00024970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b280  00000000  00000000  00025640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001544c  00000000  00000000  000408c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008edce  00000000  00000000  00055d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4ada  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005524  00000000  00000000  000e4b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ea044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c2a8 	.word	0x0800c2a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800c2a8 	.word	0x0800c2a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <MX_GPIO_Init+0xb8>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a27      	ldr	r2, [pc, #156]	@ (8000ffc <MX_GPIO_Init+0xb8>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <MX_GPIO_Init+0xb8>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f70:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <MX_GPIO_Init+0xb8>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <MX_GPIO_Init+0xb8>)
 8000f76:	f043 0320 	orr.w	r3, r3, #32
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <MX_GPIO_Init+0xb8>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0320 	and.w	r3, r3, #32
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <MX_GPIO_Init+0xb8>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <MX_GPIO_Init+0xb8>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <MX_GPIO_Init+0xb8>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fa6:	4816      	ldr	r0, [pc, #88]	@ (8001000 <MX_GPIO_Init+0xbc>)
 8000fa8:	f000 ff40 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480e      	ldr	r0, [pc, #56]	@ (8001000 <MX_GPIO_Init+0xbc>)
 8000fc6:	f000 fdad 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <MX_GPIO_Init+0xc0>)
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <MX_GPIO_Init+0xc4>)
 8000fde:	f000 fda1 	bl	8001b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2006      	movs	r0, #6
 8000fe8:	f000 fd65 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fec:	2006      	movs	r0, #6
 8000fee:	f000 fd7e 	bl	8001aee <HAL_NVIC_EnableIRQ>

}
 8000ff2:	bf00      	nop
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40011000 	.word	0x40011000
 8001004:	10210000 	.word	0x10210000
 8001008:	40010800 	.word	0x40010800

0800100c <HAL_GPIO_EXTI_Callback>:
    if (pulse_us > 2000) pulse_us = 2000;
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_us);
    currentPulse = pulse_us;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Verifica que sea nuestro PA0
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d11c      	bne.n	8001056 <HAL_GPIO_EXTI_Callback+0x4a>
        uint32_t now = HAL_GetTick();  // tiempo actual en ms
 800101c:	f000 fc6a 	bl	80018f4 <HAL_GetTick>
 8001020:	60f8      	str	r0, [r7, #12]
        uint32_t diff = now - lastTick;
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_GPIO_EXTI_Callback+0x54>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	60bb      	str	r3, [r7, #8]

        if (diff >= DIFF_MIN_MS && diff <= DIFF_MAX_MS) {
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d90b      	bls.n	800104a <HAL_GPIO_EXTI_Callback+0x3e>
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001038:	d807      	bhi.n	800104a <HAL_GPIO_EXTI_Callback+0x3e>
            rpm = 60000 / diff;
 800103a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	fbb2 f3f3 	udiv	r3, r2, r3
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <HAL_GPIO_EXTI_Callback+0x58>)
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e002      	b.n	8001050 <HAL_GPIO_EXTI_Callback+0x44>
        } else {
            rpm = 0; // fuera de rango o timeout
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_GPIO_EXTI_Callback+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
        }
        lastTick = now;
 8001050:	4a03      	ldr	r2, [pc, #12]	@ (8001060 <HAL_GPIO_EXTI_Callback+0x54>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6013      	str	r3, [r2, #0]
    }
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000364 	.word	0x20000364
 8001064:	20000368 	.word	0x20000368

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f000 fbea 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f810 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f7ff ff66 	bl	8000f44 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001078:	f008 f810 	bl	800909c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800107c:	f000 fa4c 	bl	8001518 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001080:	f000 face 	bl	8001620 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001084:	2100      	movs	r1, #0
 8001086:	4802      	ldr	r0, [pc, #8]	@ (8001090 <main+0x28>)
 8001088:	f003 f992 	bl	80043b0 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <main+0x24>
 8001090:	200003c8 	.word	0x200003c8

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	@ 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109e:	2228      	movs	r2, #40	@ 0x28
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f009 f9cf 	bl	800a446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d2:	2301      	movs	r3, #1
 80010d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fc2e 	bl	800394c <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010f6:	f000 f8c7 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	230f      	movs	r3, #15
 80010fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800110a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2102      	movs	r1, #2
 8001116:	4618      	mov	r0, r3
 8001118:	f002 fe9a 	bl	8003e50 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001122:	f000 f8b1 	bl	8001288 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001126:	2310      	movs	r3, #16
 8001128:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4618      	mov	r0, r3
 8001132:	f002 ffe9 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800113c:	f000 f8a4 	bl	8001288 <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3750      	adds	r7, #80	@ 0x50
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Se llama en cada OVERFLOW (Update Event) del TIM3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d104      	bne.n	8001164 <HAL_TIM_PeriodElapsedCallback+0x1c>
    ic_overflows++;   // acumulamos overflows para construir el "contador absoluto"
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001162:	6013      	str	r3, [r2, #0]
  }
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40000400 	.word	0x40000400
 8001174:	2000036c 	.word	0x2000036c

08001178 <HAL_TIM_IC_CaptureCallback>:

// Se llama en cada CAPTURA (flanco en CH1)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b089      	sub	sp, #36	@ 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a37      	ldr	r2, [pc, #220]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d167      	bne.n	800125a <HAL_TIM_IC_CaptureCallback+0xe2>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7f1b      	ldrb	r3, [r3, #28]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d163      	bne.n	800125a <HAL_TIM_IC_CaptureCallback+0xe2>

    // 1) Leo el valor capturado (0..65535)
    uint32_t cap = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001192:	2100      	movs	r1, #0
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f003 fc65 	bl	8004a64 <HAL_TIM_ReadCapturedValue>
 800119a:	61b8      	str	r0, [r7, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop

    // 2) Tomo un snapshot atómico del contador de overflows
    //    (la secuencia minimiza race conditions con overflow justo entre lectura y uso)
    __disable_irq();
    uint32_t of = ic_overflows;
 80011a0:	4b31      	ldr	r3, [pc, #196]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61fb      	str	r3, [r7, #28]
    // Si justo ocurrió overflow y la captura pertenece al período anterior,
    // ajustamos el conteo. (HAL ya latchea, esto es por seguridad)
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET &&
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d10f      	bne.n	80011d4 <HAL_TIM_IC_CaptureCallback+0x5c>
        __HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET &&
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f003 0301 	and.w	r3, r3, #1
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET &&
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d108      	bne.n	80011d4 <HAL_TIM_IC_CaptureCallback+0x5c>
        __HAL_TIM_GET_COUNTER(htim) < cap) {
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        __HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET &&
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d902      	bls.n	80011d4 <HAL_TIM_IC_CaptureCallback+0x5c>
      of++;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsie i" : : : "memory");
 80011d4:	b662      	cpsie	i
}
 80011d6:	bf00      	nop
    }
    __enable_irq();

    // 3) Construyo el conteo absoluto (en ticks de 1 us)
    //    abs_count = of * 65536 + cap
    uint32_t abs_count = of * TIMER_MAX_COUNT + cap;
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	041b      	lsls	r3, r3, #16
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4413      	add	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]

    // 4) Cálculo del período (delta de ticks) contra la captura anterior
    if (!first_capture) {
 80011e2:	4b22      	ldr	r3, [pc, #136]	@ (800126c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d12c      	bne.n	8001246 <HAL_TIM_IC_CaptureCallback+0xce>
      uint32_t delta_ticks = abs_count - last_abs_count;   // en 1 us/tick
 80011ec:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	613b      	str	r3, [r7, #16]

      if (delta_ticks > 0) {
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d02b      	beq.n	8001254 <HAL_TIM_IC_CaptureCallback+0xdc>
        // f = 1 / periodo;   rpm = f * 60 / PPR
        // periodo_us = delta_ticks (porque 1 tick = 1 us)
        // rpm = 60e6 / (delta_us * PPR)
        float rpm = (60.0f * 1000000.0f) / ((float)delta_ticks * (float)PULSOS_POR_REV);
 80011fc:	6938      	ldr	r0, [r7, #16]
 80011fe:	f7ff fcf9 	bl	8000bf4 <__aeabi_ui2f>
 8001202:	4603      	mov	r3, r0
 8001204:	4619      	mov	r1, r3
 8001206:	481b      	ldr	r0, [pc, #108]	@ (8001274 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001208:	f7ff fe00 	bl	8000e0c <__aeabi_fdiv>
 800120c:	4603      	mov	r3, r0
 800120e:	60fb      	str	r3, [r7, #12]

        rpm_inst = rpm;
 8001210:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6013      	str	r3, [r2, #0]
        // filtro simple para suavizar
        rpm_filtrada = (ALFA * rpm_inst) + (1.0f - ALFA) * rpm_filtrada;
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4918      	ldr	r1, [pc, #96]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x104>)
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fd41 	bl	8000ca4 <__aeabi_fmul>
 8001222:	4603      	mov	r3, r0
 8001224:	461c      	mov	r4, r3
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4916      	ldr	r1, [pc, #88]	@ (8001284 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fd39 	bl	8000ca4 <__aeabi_fmul>
 8001232:	4603      	mov	r3, r0
 8001234:	4619      	mov	r1, r3
 8001236:	4620      	mov	r0, r4
 8001238:	f7ff fc2c 	bl	8000a94 <__addsf3>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e006      	b.n	8001254 <HAL_TIM_IC_CaptureCallback+0xdc>
      }
    } else {
      first_capture = 0;
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
      rpm_filtrada = 0.0f;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x108>)
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
    }

    // 5) Guardar para la próxima
    last_abs_count = abs_count;
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	6013      	str	r3, [r2, #0]
  }
}
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	@ 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	bf00      	nop
 8001264:	40000400 	.word	0x40000400
 8001268:	2000036c 	.word	0x2000036c
 800126c:	20000000 	.word	0x20000000
 8001270:	20000370 	.word	0x20000370
 8001274:	4c64e1c0 	.word	0x4c64e1c0
 8001278:	20000374 	.word	0x20000374
 800127c:	3e4ccccd 	.word	0x3e4ccccd
 8001280:	20000378 	.word	0x20000378
 8001284:	3f4ccccd 	.word	0x3f4ccccd

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <Error_Handler+0x8>

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <HAL_MspInit+0x5c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_MspInit+0x5c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <HAL_MspInit+0x5c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_MspInit+0x60>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <HAL_MspInit+0x60>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <NMI_Handler+0x4>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <MemManage_Handler+0x4>

08001310 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <UsageFault_Handler+0x4>

08001320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f000 fac2 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001354:	2001      	movs	r0, #1
 8001356:	f000 fd81 	bl	8001e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001364:	4802      	ldr	r0, [pc, #8]	@ (8001370 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001366:	f000 fead 	bl	80020c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200010dc 	.word	0x200010dc

08001374 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <TIM3_IRQHandler+0x10>)
 800137a:	f003 f925 	bl	80045c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200003c8 	.word	0x200003c8

08001388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return 1;
 800138c:	2301      	movs	r3, #1
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <_kill>:

int _kill(int pid, int sig)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013a0:	f009 f8a4 	bl	800a4ec <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2216      	movs	r2, #22
 80013a8:	601a      	str	r2, [r3, #0]
  return -1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <_exit>:

void _exit (int status)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013be:	f04f 31ff 	mov.w	r1, #4294967295
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffe7 	bl	8001396 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <_exit+0x12>

080013cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e00a      	b.n	80013f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013de:	f3af 8000 	nop.w
 80013e2:	4601      	mov	r1, r0
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	60ba      	str	r2, [r7, #8]
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf0      	blt.n	80013de <_read+0x12>
  }

  return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e009      	b.n	800142c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	60ba      	str	r2, [r7, #8]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf1      	blt.n	8001418 <_write+0x12>
  }
  return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_close>:

int _close(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001464:	605a      	str	r2, [r3, #4]
  return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <_isatty>:

int _isatty(int file)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
	...

080014a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a8:	4a14      	ldr	r2, [pc, #80]	@ (80014fc <_sbrk+0x5c>)
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <_sbrk+0x60>)
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b4:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <_sbrk+0x64>)
 80014be:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <_sbrk+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d207      	bcs.n	80014e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d0:	f009 f80c 	bl	800a4ec <__errno>
 80014d4:	4603      	mov	r3, r0
 80014d6:	220c      	movs	r2, #12
 80014d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e009      	b.n	80014f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e6:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <_sbrk+0x64>)
 80014f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20005000 	.word	0x20005000
 8001500:	00000400 	.word	0x00000400
 8001504:	2000037c 	.word	0x2000037c
 8001508:	20001720 	.word	0x20001720

0800150c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b092      	sub	sp, #72	@ 0x48
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2220      	movs	r2, #32
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f008 ff7f 	bl	800a446 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001548:	4b33      	ldr	r3, [pc, #204]	@ (8001618 <MX_TIM1_Init+0x100>)
 800154a:	4a34      	ldr	r2, [pc, #208]	@ (800161c <MX_TIM1_Init+0x104>)
 800154c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1439;
 800154e:	4b32      	ldr	r3, [pc, #200]	@ (8001618 <MX_TIM1_Init+0x100>)
 8001550:	f240 529f 	movw	r2, #1439	@ 0x59f
 8001554:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001556:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <MX_TIM1_Init+0x100>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 800155c:	4b2e      	ldr	r3, [pc, #184]	@ (8001618 <MX_TIM1_Init+0x100>)
 800155e:	f240 529f 	movw	r2, #1439	@ 0x59f
 8001562:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b2c      	ldr	r3, [pc, #176]	@ (8001618 <MX_TIM1_Init+0x100>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800156a:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <MX_TIM1_Init+0x100>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b29      	ldr	r3, [pc, #164]	@ (8001618 <MX_TIM1_Init+0x100>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001576:	4828      	ldr	r0, [pc, #160]	@ (8001618 <MX_TIM1_Init+0x100>)
 8001578:	f002 fe7c 	bl	8004274 <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001582:	f7ff fe81 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001592:	4619      	mov	r1, r3
 8001594:	4820      	ldr	r0, [pc, #128]	@ (8001618 <MX_TIM1_Init+0x100>)
 8001596:	f003 fded 	bl	8005174 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80015a0:	f7ff fe72 	bl	8001288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a4:	2360      	movs	r3, #96	@ 0x60
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4813      	ldr	r0, [pc, #76]	@ (8001618 <MX_TIM1_Init+0x100>)
 80015ca:	f003 f989 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80015d4:	f7ff fe58 	bl	8001288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	@ (8001618 <MX_TIM1_Init+0x100>)
 80015fc:	f003 fe18 	bl	8005230 <HAL_TIMEx_ConfigBreakDeadTime>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001606:	f7ff fe3f 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800160a:	4803      	ldr	r0, [pc, #12]	@ (8001618 <MX_TIM1_Init+0x100>)
 800160c:	f000 f8c0 	bl	8001790 <HAL_TIM_MspPostInit>

}
 8001610:	bf00      	nop
 8001612:	3748      	adds	r7, #72	@ 0x48
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000380 	.word	0x20000380
 800161c:	40012c00 	.word	0x40012c00

08001620 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001630:	463b      	mov	r3, r7
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800163c:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <MX_TIM3_Init+0xa0>)
 800163e:	4a21      	ldr	r2, [pc, #132]	@ (80016c4 <MX_TIM3_Init+0xa4>)
 8001640:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <MX_TIM3_Init+0xa0>)
 8001644:	2247      	movs	r2, #71	@ 0x47
 8001646:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <MX_TIM3_Init+0xa0>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800164e:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <MX_TIM3_Init+0xa0>)
 8001650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001654:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_TIM3_Init+0xa0>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <MX_TIM3_Init+0xa0>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <MX_TIM3_Init+0xa0>)
 8001664:	f002 fe55 	bl	8004312 <HAL_TIM_IC_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800166e:	f7ff fe0b 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4619      	mov	r1, r3
 8001680:	480f      	ldr	r0, [pc, #60]	@ (80016c0 <MX_TIM3_Init+0xa0>)
 8001682:	f003 fd77 	bl	8005174 <HAL_TIMEx_MasterConfigSynchronization>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800168c:	f7ff fdfc 	bl	8001288 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001690:	2302      	movs	r3, #2
 8001692:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001694:	2301      	movs	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 8;
 800169c:	2308      	movs	r3, #8
 800169e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	2200      	movs	r2, #0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4806      	ldr	r0, [pc, #24]	@ (80016c0 <MX_TIM3_Init+0xa0>)
 80016a8:	f003 f87e 	bl	80047a8 <HAL_TIM_IC_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80016b2:	f7ff fde9 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200003c8 	.word	0x200003c8
 80016c4:	40000400 	.word	0x40000400

080016c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a09      	ldr	r2, [pc, #36]	@ (80016fc <HAL_TIM_PWM_MspInit+0x34>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d10b      	bne.n	80016f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_TIM_PWM_MspInit+0x38>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <HAL_TIM_PWM_MspInit+0x38>)
 80016e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_TIM_PWM_MspInit+0x38>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	40021000 	.word	0x40021000

08001704 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM3)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a19      	ldr	r2, [pc, #100]	@ (8001784 <HAL_TIM_IC_MspInit+0x80>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d12b      	bne.n	800177c <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001724:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <HAL_TIM_IC_MspInit+0x84>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <HAL_TIM_IC_MspInit+0x84>)
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	61d3      	str	r3, [r2, #28]
 8001730:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_TIM_IC_MspInit+0x84>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <HAL_TIM_IC_MspInit+0x84>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <HAL_TIM_IC_MspInit+0x84>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <HAL_TIM_IC_MspInit+0x84>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001754:	2340      	movs	r3, #64	@ 0x40
 8001756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	4809      	ldr	r0, [pc, #36]	@ (800178c <HAL_TIM_IC_MspInit+0x88>)
 8001768:	f000 f9dc 	bl	8001b24 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	201d      	movs	r0, #29
 8001772:	f000 f9a0 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001776:	201d      	movs	r0, #29
 8001778:	f000 f9b9 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40000400 	.word	0x40000400
 8001788:	40021000 	.word	0x40021000
 800178c:	40010800 	.word	0x40010800

08001790 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a10      	ldr	r2, [pc, #64]	@ (80017ec <HAL_TIM_MspPostInit+0x5c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d118      	bne.n	80017e2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_TIM_MspPostInit+0x60>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	@ (80017f0 <HAL_TIM_MspPostInit+0x60>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <HAL_TIM_MspPostInit+0x60>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2302      	movs	r3, #2
 80017d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <HAL_TIM_MspPostInit+0x64>)
 80017de:	f000 f9a1 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40012c00 	.word	0x40012c00
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010800 	.word	0x40010800

080017f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f8:	f7ff fe88 	bl	800150c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480b      	ldr	r0, [pc, #44]	@ (800182c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017fe:	490c      	ldr	r1, [pc, #48]	@ (8001830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001800:	4a0c      	ldr	r2, [pc, #48]	@ (8001834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a09      	ldr	r2, [pc, #36]	@ (8001838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001814:	4c09      	ldr	r4, [pc, #36]	@ (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001822:	f008 fe69 	bl	800a4f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001826:	f7ff fc1f 	bl	8001068 <main>
  bx lr
 800182a:	4770      	bx	lr
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8001834:	0800c6ac 	.word	0x0800c6ac
  ldr r2, =_sbss
 8001838:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 800183c:	20001720 	.word	0x20001720

08001840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC1_2_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_Init+0x28>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <HAL_Init+0x28>)
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f923 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	200f      	movs	r0, #15
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff fd18 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40022000 	.word	0x40022000

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f93b 	bl	8001b0a <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f903 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000004 	.word	0x20000004
 80018c8:	2000000c 	.word	0x2000000c
 80018cc:	20000008 	.word	0x20000008

080018d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_IncTick+0x1c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_IncTick+0x20>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a03      	ldr	r2, [pc, #12]	@ (80018f0 <HAL_IncTick+0x20>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	20000410 	.word	0x20000410

080018f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b02      	ldr	r3, [pc, #8]	@ (8001904 <HAL_GetTick+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000410 	.word	0x20000410

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	@ (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4906      	ldr	r1, [pc, #24]	@ (80019a0 <__NVIC_EnableIRQ+0x34>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	@ (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	@ 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff90 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff2d 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff42 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff35 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b08b      	sub	sp, #44	@ 0x2c
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e169      	b.n	8001e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f040 8158 	bne.w	8001e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a9a      	ldr	r2, [pc, #616]	@ (8001dc4 <HAL_GPIO_Init+0x2a0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d05e      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b60:	4a98      	ldr	r2, [pc, #608]	@ (8001dc4 <HAL_GPIO_Init+0x2a0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d875      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b66:	4a98      	ldr	r2, [pc, #608]	@ (8001dc8 <HAL_GPIO_Init+0x2a4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d058      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b6c:	4a96      	ldr	r2, [pc, #600]	@ (8001dc8 <HAL_GPIO_Init+0x2a4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d86f      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b72:	4a96      	ldr	r2, [pc, #600]	@ (8001dcc <HAL_GPIO_Init+0x2a8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d052      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b78:	4a94      	ldr	r2, [pc, #592]	@ (8001dcc <HAL_GPIO_Init+0x2a8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d869      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b7e:	4a94      	ldr	r2, [pc, #592]	@ (8001dd0 <HAL_GPIO_Init+0x2ac>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d04c      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b84:	4a92      	ldr	r2, [pc, #584]	@ (8001dd0 <HAL_GPIO_Init+0x2ac>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d863      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b8a:	4a92      	ldr	r2, [pc, #584]	@ (8001dd4 <HAL_GPIO_Init+0x2b0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d046      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b90:	4a90      	ldr	r2, [pc, #576]	@ (8001dd4 <HAL_GPIO_Init+0x2b0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d85d      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d82a      	bhi.n	8001bf0 <HAL_GPIO_Init+0xcc>
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d859      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba4 <HAL_GPIO_Init+0x80>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001c1f 	.word	0x08001c1f
 8001ba8:	08001bf9 	.word	0x08001bf9
 8001bac:	08001c0b 	.word	0x08001c0b
 8001bb0:	08001c4d 	.word	0x08001c4d
 8001bb4:	08001c53 	.word	0x08001c53
 8001bb8:	08001c53 	.word	0x08001c53
 8001bbc:	08001c53 	.word	0x08001c53
 8001bc0:	08001c53 	.word	0x08001c53
 8001bc4:	08001c53 	.word	0x08001c53
 8001bc8:	08001c53 	.word	0x08001c53
 8001bcc:	08001c53 	.word	0x08001c53
 8001bd0:	08001c53 	.word	0x08001c53
 8001bd4:	08001c53 	.word	0x08001c53
 8001bd8:	08001c53 	.word	0x08001c53
 8001bdc:	08001c53 	.word	0x08001c53
 8001be0:	08001c53 	.word	0x08001c53
 8001be4:	08001c53 	.word	0x08001c53
 8001be8:	08001c01 	.word	0x08001c01
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	4a79      	ldr	r2, [pc, #484]	@ (8001dd8 <HAL_GPIO_Init+0x2b4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bf6:	e02c      	b.n	8001c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e029      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	3304      	adds	r3, #4
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	e024      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	623b      	str	r3, [r7, #32]
          break;
 8001c12:	e01f      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e01a      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c26:	2304      	movs	r3, #4
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e013      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c34:	2308      	movs	r3, #8
 8001c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	611a      	str	r2, [r3, #16]
          break;
 8001c3e:	e009      	b.n	8001c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c40:	2308      	movs	r3, #8
 8001c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	615a      	str	r2, [r3, #20]
          break;
 8001c4a:	e003      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
          break;
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          break;
 8001c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2bff      	cmp	r3, #255	@ 0xff
 8001c58:	d801      	bhi.n	8001c5e <HAL_GPIO_Init+0x13a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_Init+0x13e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2bff      	cmp	r3, #255	@ 0xff
 8001c68:	d802      	bhi.n	8001c70 <HAL_GPIO_Init+0x14c>
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x152>
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	3b08      	subs	r3, #8
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80b1 	beq.w	8001e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cbc:	4a48      	ldr	r2, [pc, #288]	@ (8001de0 <HAL_GPIO_Init+0x2bc>)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a40      	ldr	r2, [pc, #256]	@ (8001de4 <HAL_GPIO_Init+0x2c0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_GPIO_Init+0x1ec>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a3f      	ldr	r2, [pc, #252]	@ (8001de8 <HAL_GPIO_Init+0x2c4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00d      	beq.n	8001d0c <HAL_GPIO_Init+0x1e8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8001dec <HAL_GPIO_Init+0x2c8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <HAL_GPIO_Init+0x1e4>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_GPIO_Init+0x1e0>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d04:	2304      	movs	r3, #4
 8001d06:	e004      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d10:	2300      	movs	r3, #0
 8001d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d14:	f002 0203 	and.w	r2, r2, #3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d22:	492f      	ldr	r1, [pc, #188]	@ (8001de0 <HAL_GPIO_Init+0x2bc>)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	492c      	ldr	r1, [pc, #176]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4928      	ldr	r1, [pc, #160]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d64:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	4922      	ldr	r1, [pc, #136]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60cb      	str	r3, [r1, #12]
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	491e      	ldr	r1, [pc, #120]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4918      	ldr	r1, [pc, #96]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4914      	ldr	r1, [pc, #80]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d021      	beq.n	8001df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001db4:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	490e      	ldr	r1, [pc, #56]	@ (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e021      	b.n	8001e06 <HAL_GPIO_Init+0x2e2>
 8001dc2:	bf00      	nop
 8001dc4:	10320000 	.word	0x10320000
 8001dc8:	10310000 	.word	0x10310000
 8001dcc:	10220000 	.word	0x10220000
 8001dd0:	10210000 	.word	0x10210000
 8001dd4:	10120000 	.word	0x10120000
 8001dd8:	10110000 	.word	0x10110000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000
 8001de4:	40010800 	.word	0x40010800
 8001de8:	40010c00 	.word	0x40010c00
 8001dec:	40011000 	.word	0x40011000
 8001df0:	40011400 	.word	0x40011400
 8001df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	4909      	ldr	r1, [pc, #36]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	3301      	adds	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f47f ae8e 	bne.w	8001b38 <HAL_GPIO_Init+0x14>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	372c      	adds	r7, #44	@ 0x2c
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d006      	beq.n	8001e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f8c6 	bl	800100c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40010400 	.word	0x40010400

08001e8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0e8      	b.n	8002070 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f007 fabe 	bl	8009434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2203      	movs	r2, #3
 8001ebc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fa36 	bl	800533c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eda:	f003 fa0c 	bl	80052f6 <USB_CoreInit>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0bf      	b.n	8002070 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 fa3a 	bl	8005370 <USB_SetCurrentMode>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0b0      	b.n	8002070 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e03e      	b.n	8001f92 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	3311      	adds	r3, #17
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	3310      	adds	r3, #16
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	3313      	adds	r3, #19
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3320      	adds	r3, #32
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3324      	adds	r3, #36	@ 0x24
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	791b      	ldrb	r3, [r3, #4]
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d3bb      	bcc.n	8001f14 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e044      	b.n	800202c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3301      	adds	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	791b      	ldrb	r3, [r3, #4]
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	429a      	cmp	r2, r3
 8002034:	d3b5      	bcc.n	8001fa2 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3304      	adds	r3, #4
 800203e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002040:	f003 f9a2 	bl	8005388 <USB_DevInit>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00c      	b.n	8002070 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f005 fc22 	bl	80078b2 <USB_DevDisconnect>

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_PCD_Start+0x16>
 800208a:	2302      	movs	r3, #2
 800208c:	e016      	b.n	80020bc <HAL_PCD_Start+0x44>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f003 f938 	bl	8005310 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80020a0:	2101      	movs	r1, #1
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f007 fc39 	bl	800991a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fbf6 	bl	800789e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f005 fbf8 	bl	80078c6 <USB_ReadInterrupts>
 80020d6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fb1a 	bl	800271c <PCD_EP_ISR_Handler>

    return;
 80020e8:	e119      	b.n	800231e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002106:	b292      	uxth	r2, r2
 8002108:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f007 fa0c 	bl	800952a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002112:	2100      	movs	r1, #0
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f905 	bl	8002324 <HAL_PCD_SetAddress>

    return;
 800211a:	e100      	b.n	800231e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00c      	beq.n	8002140 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800212e:	b29a      	uxth	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002138:	b292      	uxth	r2, r2
 800213a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800213e:	e0ee      	b.n	800231e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800215c:	b292      	uxth	r2, r2
 800215e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002162:	e0dc      	b.n	800231e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d027      	beq.n	80021be <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002176:	b29a      	uxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0204 	bic.w	r2, r2, #4
 8002180:	b292      	uxth	r2, r2
 8002182:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	b292      	uxth	r2, r2
 800219a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f007 f9fc 	bl	800959c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021b6:	b292      	uxth	r2, r2
 80021b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80021bc:	e0af      	b.n	800231e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8083 	beq.w	80022d0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	77fb      	strb	r3, [r7, #31]
 80021ce:	e010      	b.n	80021f2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	7ffb      	ldrb	r3, [r7, #31]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	441a      	add	r2, r3
 80021dc:	7ffb      	ldrb	r3, [r7, #31]
 80021de:	8812      	ldrh	r2, [r2, #0]
 80021e0:	b292      	uxth	r2, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	3320      	adds	r3, #32
 80021e6:	443b      	add	r3, r7
 80021e8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80021ec:	7ffb      	ldrb	r3, [r7, #31]
 80021ee:	3301      	adds	r3, #1
 80021f0:	77fb      	strb	r3, [r7, #31]
 80021f2:	7ffb      	ldrb	r3, [r7, #31]
 80021f4:	2b07      	cmp	r3, #7
 80021f6:	d9eb      	bls.n	80021d0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002200:	b29a      	uxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	b292      	uxth	r2, r2
 800220c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002218:	b29a      	uxth	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	b292      	uxth	r2, r2
 8002224:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002228:	bf00      	nop
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002232:	b29b      	uxth	r3, r3
 8002234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f6      	beq.n	800222a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002244:	b29a      	uxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800224e:	b292      	uxth	r2, r2
 8002250:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002254:	2300      	movs	r3, #0
 8002256:	77fb      	strb	r3, [r7, #31]
 8002258:	e00f      	b.n	800227a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	4611      	mov	r1, r2
 8002262:	7ffa      	ldrb	r2, [r7, #31]
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	440a      	add	r2, r1
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	3320      	adds	r3, #32
 800226c:	443b      	add	r3, r7
 800226e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002272:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002274:	7ffb      	ldrb	r3, [r7, #31]
 8002276:	3301      	adds	r3, #1
 8002278:	77fb      	strb	r3, [r7, #31]
 800227a:	7ffb      	ldrb	r3, [r7, #31]
 800227c:	2b07      	cmp	r3, #7
 800227e:	d9ec      	bls.n	800225a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0208 	orr.w	r2, r2, #8
 8002292:	b292      	uxth	r2, r2
 8002294:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022aa:	b292      	uxth	r2, r2
 80022ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0204 	orr.w	r2, r2, #4
 80022c2:	b292      	uxth	r2, r2
 80022c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f007 f94d 	bl	8009568 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80022ce:	e026      	b.n	800231e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00f      	beq.n	80022fa <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022ec:	b292      	uxth	r2, r2
 80022ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f007 f90b 	bl	800950e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80022f8:	e011      	b.n	800231e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00c      	beq.n	800231e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800230c:	b29a      	uxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002316:	b292      	uxth	r2, r2
 8002318:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800231c:	bf00      	nop
  }
}
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_PCD_SetAddress+0x1a>
 800233a:	2302      	movs	r3, #2
 800233c:	e012      	b.n	8002364 <HAL_PCD_SetAddress+0x40>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f005 fa8f 	bl	8007878 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	4608      	mov	r0, r1
 8002376:	4611      	mov	r1, r2
 8002378:	461a      	mov	r2, r3
 800237a:	4603      	mov	r3, r0
 800237c:	70fb      	strb	r3, [r7, #3]
 800237e:	460b      	mov	r3, r1
 8002380:	803b      	strh	r3, [r7, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800238a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	da0e      	bge.n	80023b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 0207 	and.w	r2, r3, #7
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	3310      	adds	r3, #16
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	705a      	strb	r2, [r3, #1]
 80023ae:	e00e      	b.n	80023ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 0207 	and.w	r2, r3, #7
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023da:	883a      	ldrh	r2, [r7, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	78ba      	ldrb	r2, [r7, #2]
 80023e4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023e6:	78bb      	ldrb	r3, [r7, #2]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d102      	bne.n	80023f2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_EP_Open+0x94>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e00e      	b.n	800241e <HAL_PCD_EP_Open+0xb2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	4618      	mov	r0, r3
 8002410:	f002 ffd8 	bl	80053c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800241c:	7afb      	ldrb	r3, [r7, #11]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da0e      	bge.n	8002458 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 0207 	and.w	r2, r3, #7
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	3310      	adds	r3, #16
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	705a      	strb	r2, [r3, #1]
 8002456:	e00e      	b.n	8002476 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 0207 	and.w	r2, r3, #7
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_PCD_EP_Close+0x6a>
 800248c:	2302      	movs	r3, #2
 800248e:	e00e      	b.n	80024ae <HAL_PCD_EP_Close+0x88>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 fb50 	bl	8005b44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	460b      	mov	r3, r1
 80024c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	f003 0207 	and.w	r2, r3, #7
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2200      	movs	r2, #0
 80024f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6979      	ldr	r1, [r7, #20]
 8002508:	4618      	mov	r0, r3
 800250a:	f003 fd07 	bl	8005f1c <USB_EPStartXfer>

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	f003 0207 	and.w	r2, r3, #7
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	460b      	mov	r3, r1
 8002554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002556:	7afb      	ldrb	r3, [r7, #11]
 8002558:	f003 0207 	and.w	r2, r3, #7
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3310      	adds	r3, #16
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2200      	movs	r2, #0
 800258a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2201      	movs	r2, #1
 8002590:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	b2da      	uxtb	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6979      	ldr	r1, [r7, #20]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 fcb9 	bl	8005f1c <USB_EPStartXfer>

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	7912      	ldrb	r2, [r2, #4]
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e04c      	b.n	800266c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	da0e      	bge.n	80025f8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 0207 	and.w	r2, r3, #7
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	3310      	adds	r3, #16
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	705a      	strb	r2, [r3, #1]
 80025f6:	e00c      	b.n	8002612 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	b2da      	uxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_PCD_EP_SetStall+0x7e>
 800262e:	2302      	movs	r3, #2
 8002630:	e01c      	b.n	800266c <HAL_PCD_EP_SetStall+0xb8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	4618      	mov	r0, r3
 8002642:	f005 f81c 	bl	800767e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	2b00      	cmp	r3, #0
 800264e:	d108      	bne.n	8002662 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f005 f941 	bl	80078e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	7912      	ldrb	r2, [r2, #4]
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e040      	b.n	8002714 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002696:	2b00      	cmp	r3, #0
 8002698:	da0e      	bge.n	80026b8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 0207 	and.w	r2, r3, #7
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	3310      	adds	r3, #16
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	705a      	strb	r2, [r3, #1]
 80026b6:	e00e      	b.n	80026d6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 0207 	and.w	r2, r3, #7
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_EP_ClrStall+0x82>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e00e      	b.n	8002714 <HAL_PCD_EP_ClrStall+0xa0>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68f9      	ldr	r1, [r7, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	f005 f80a 	bl	800771e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b096      	sub	sp, #88	@ 0x58
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002724:	e3bb      	b.n	8002e9e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800272e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002732:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002740:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 8175 	bne.w	8002a34 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800274a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d14e      	bne.n	80027f4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	b29b      	uxth	r3, r3
 800275e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002766:	81fb      	strh	r3, [r7, #14]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	89fb      	ldrh	r3, [r7, #14]
 800276e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002776:	b29b      	uxth	r3, r3
 8002778:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3310      	adds	r3, #16
 800277e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	3302      	adds	r3, #2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	441a      	add	r2, r3
 80027b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027ba:	2100      	movs	r1, #0
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f006 fe8c 	bl	80094da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7b5b      	ldrb	r3, [r3, #13]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8368 	beq.w	8002e9e <PCD_EP_ISR_Handler+0x782>
 80027ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 8363 	bne.w	8002e9e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7b5b      	ldrb	r3, [r3, #13]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	735a      	strb	r2, [r3, #13]
 80027f2:	e354      	b.n	8002e9e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027fa:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002806:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800280a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800280e:	2b00      	cmp	r3, #0
 8002810:	d034      	beq.n	800287c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	3306      	adds	r3, #6
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800283a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800283c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800284a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800284c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800284e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002850:	b29b      	uxth	r3, r3
 8002852:	f005 f898 	bl	8007986 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29a      	uxth	r2, r3
 800285e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002862:	4013      	ands	r3, r2
 8002864:	823b      	strh	r3, [r7, #16]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	8a3a      	ldrh	r2, [r7, #16]
 800286c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002870:	b292      	uxth	r2, r2
 8002872:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f006 fe03 	bl	8009480 <HAL_PCD_SetupStageCallback>
 800287a:	e310      	b.n	8002e9e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800287c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002880:	2b00      	cmp	r3, #0
 8002882:	f280 830c 	bge.w	8002e9e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29a      	uxth	r2, r3
 800288e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002892:	4013      	ands	r3, r2
 8002894:	83fb      	strh	r3, [r7, #30]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	8bfa      	ldrh	r2, [r7, #30]
 800289c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028a0:	b292      	uxth	r2, r2
 80028a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	3306      	adds	r3, #6
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d019      	beq.n	800290c <PCD_EP_ISR_Handler+0x1f0>
 80028d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d015      	beq.n	800290c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e6:	6959      	ldr	r1, [r3, #20]
 80028e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80028ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f005 f848 	bl	8007986 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80028f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	441a      	add	r2, r3
 8002900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002902:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002904:	2100      	movs	r1, #0
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f006 fdcc 	bl	80094a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002916:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800291a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800291e:	2b00      	cmp	r3, #0
 8002920:	f040 82bd 	bne.w	8002e9e <PCD_EP_ISR_Handler+0x782>
 8002924:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002928:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800292c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002930:	f000 82b5 	beq.w	8002e9e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002942:	b29b      	uxth	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4413      	add	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295e:	b29a      	uxth	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	801a      	strh	r2, [r3, #0]
 8002964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b3e      	cmp	r3, #62	@ 0x3e
 800296a:	d91d      	bls.n	80029a8 <PCD_EP_ISR_Handler+0x28c>
 800296c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	647b      	str	r3, [r7, #68]	@ 0x44
 8002974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <PCD_EP_ISR_Handler+0x26a>
 8002980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002982:	3b01      	subs	r3, #1
 8002984:	647b      	str	r3, [r7, #68]	@ 0x44
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29a      	uxth	r2, r3
 800298c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800298e:	b29b      	uxth	r3, r3
 8002990:	029b      	lsls	r3, r3, #10
 8002992:	b29b      	uxth	r3, r3
 8002994:	4313      	orrs	r3, r2
 8002996:	b29b      	uxth	r3, r3
 8002998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	801a      	strh	r2, [r3, #0]
 80029a6:	e026      	b.n	80029f6 <PCD_EP_ISR_Handler+0x2da>
 80029a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <PCD_EP_ISR_Handler+0x2aa>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029be:	b29a      	uxth	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	801a      	strh	r2, [r3, #0]
 80029c4:	e017      	b.n	80029f6 <PCD_EP_ISR_Handler+0x2da>
 80029c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <PCD_EP_ISR_Handler+0x2c4>
 80029da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029dc:	3301      	adds	r3, #1
 80029de:	647b      	str	r3, [r7, #68]	@ 0x44
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	029b      	lsls	r3, r3, #10
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a06:	827b      	strh	r3, [r7, #18]
 8002a08:	8a7b      	ldrh	r3, [r7, #18]
 8002a0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002a0e:	827b      	strh	r3, [r7, #18]
 8002a10:	8a7b      	ldrh	r3, [r7, #18]
 8002a12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a16:	827b      	strh	r3, [r7, #18]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	8a7b      	ldrh	r3, [r7, #18]
 8002a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	8013      	strh	r3, [r2, #0]
 8002a32:	e234      	b.n	8002e9e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a48:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f280 80fc 	bge.w	8002c4a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a68:	4013      	ands	r3, r2
 8002a6a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002a80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a84:	b292      	uxth	r2, r2
 8002a86:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a88:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa0:	7b1b      	ldrb	r3, [r3, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d125      	bne.n	8002af2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3306      	adds	r3, #6
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ace:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002ad2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8092 	beq.w	8002c00 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae2:	6959      	ldr	r1, [r3, #20]
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae6:	88da      	ldrh	r2, [r3, #6]
 8002ae8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002aec:	f004 ff4b 	bl	8007986 <USB_ReadPMA>
 8002af0:	e086      	b.n	8002c00 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af4:	78db      	ldrb	r3, [r3, #3]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d10a      	bne.n	8002b10 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002afa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002afe:	461a      	mov	r2, r3
 8002b00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f9d9 	bl	8002eba <HAL_PCD_EP_DB_Receive>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002b0e:	e077      	b.n	8002c00 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	441a      	add	r2, r3
 8002b3c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d024      	beq.n	8002bb8 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	3302      	adds	r3, #2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b96:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002b9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d02e      	beq.n	8002c00 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba8:	6959      	ldr	r1, [r3, #20]
 8002baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bac:	891a      	ldrh	r2, [r3, #8]
 8002bae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bb2:	f004 fee8 	bl	8007986 <USB_ReadPMA>
 8002bb6:	e023      	b.n	8002c00 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3306      	adds	r3, #6
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002be4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf2:	6959      	ldr	r1, [r3, #20]
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf6:	895a      	ldrh	r2, [r3, #10]
 8002bf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bfc:	f004 fec3 	bl	8007986 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c08:	441a      	add	r2, r3
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c16:	441a      	add	r2, r3
 8002c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <PCD_EP_ISR_Handler+0x514>
 8002c24:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d206      	bcs.n	8002c3e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f006 fc34 	bl	80094a4 <HAL_PCD_DataOutStageCallback>
 8002c3c:	e005      	b.n	8002c4a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 f969 	bl	8005f1c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8123 	beq.w	8002e9e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c58:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	3310      	adds	r3, #16
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	441a      	add	r2, r3
 8002c98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002caa:	78db      	ldrb	r3, [r3, #3]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	f040 80a2 	bne.w	8002df6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cba:	7b1b      	ldrb	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8093 	beq.w	8002de8 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d046      	beq.n	8002d5c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d126      	bne.n	8002d24 <PCD_EP_ISR_Handler+0x608>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	4413      	add	r3, r2
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	011a      	lsls	r2, r3, #4
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cfc:	623b      	str	r3, [r7, #32]
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	801a      	strh	r2, [r3, #0]
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	e061      	b.n	8002de8 <PCD_EP_ISR_Handler+0x6cc>
 8002d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d15d      	bne.n	8002de8 <PCD_EP_ISR_Handler+0x6cc>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d40:	4413      	add	r3, r2
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	011a      	lsls	r2, r3, #4
 8002d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d56:	2200      	movs	r2, #0
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e045      	b.n	8002de8 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d64:	785b      	ldrb	r3, [r3, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d126      	bne.n	8002db8 <PCD_EP_ISR_Handler+0x69c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7e:	4413      	add	r3, r2
 8002d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	011a      	lsls	r2, r3, #4
 8002d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	e017      	b.n	8002de8 <PCD_EP_ISR_Handler+0x6cc>
 8002db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dba:	785b      	ldrb	r3, [r3, #1]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d113      	bne.n	8002de8 <PCD_EP_ISR_Handler+0x6cc>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dce:	4413      	add	r3, r2
 8002dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	011a      	lsls	r2, r3, #4
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dda:	4413      	add	r3, r2
 8002ddc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002de0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de4:	2200      	movs	r2, #0
 8002de6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f006 fb73 	bl	80094da <HAL_PCD_DataInStageCallback>
 8002df4:	e053      	b.n	8002e9e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002df6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d146      	bne.n	8002e90 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	3302      	adds	r3, #2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d907      	bls.n	8002e4a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e42:	1ad2      	subs	r2, r2, r3
 8002e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e46:	619a      	str	r2, [r3, #24]
 8002e48:	e002      	b.n	8002e50 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f006 fb3b 	bl	80094da <HAL_PCD_DataInStageCallback>
 8002e64:	e01b      	b.n	8002e9e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e6e:	441a      	add	r2, r3
 8002e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e72:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e7c:	441a      	add	r2, r3
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e80:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f003 f847 	bl	8005f1c <USB_EPStartXfer>
 8002e8e:	e006      	b.n	8002e9e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e94:	461a      	mov	r2, r3
 8002e96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f91b 	bl	80030d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f6ff ac3b 	blt.w	8002726 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3758      	adds	r7, #88	@ 0x58
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b088      	sub	sp, #32
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d07e      	beq.n	8002fd0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	8b7b      	ldrh	r3, [r7, #26]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d306      	bcc.n	8002f14 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	8b7b      	ldrh	r3, [r7, #26]
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	619a      	str	r2, [r3, #24]
 8002f12:	e002      	b.n	8002f1a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d123      	bne.n	8002f6a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f3c:	833b      	strh	r3, [r7, #24]
 8002f3e:	8b3b      	ldrh	r3, [r7, #24]
 8002f40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f44:	833b      	strh	r3, [r7, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	441a      	add	r2, r3
 8002f54:	8b3b      	ldrh	r3, [r7, #24]
 8002f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01f      	beq.n	8002fb4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f8e:	82fb      	strh	r3, [r7, #22]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	8afb      	ldrh	r3, [r7, #22]
 8002fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fb4:	8b7b      	ldrh	r3, [r7, #26]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8087 	beq.w	80030ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	6959      	ldr	r1, [r3, #20]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	891a      	ldrh	r2, [r3, #8]
 8002fc8:	8b7b      	ldrh	r3, [r7, #26]
 8002fca:	f004 fcdc 	bl	8007986 <USB_ReadPMA>
 8002fce:	e07c      	b.n	80030ca <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3306      	adds	r3, #6
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	8b7b      	ldrh	r3, [r7, #26]
 8003000:	429a      	cmp	r2, r3
 8003002:	d306      	bcc.n	8003012 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	8b7b      	ldrh	r3, [r7, #26]
 800300a:	1ad2      	subs	r2, r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	619a      	str	r2, [r3, #24]
 8003010:	e002      	b.n	8003018 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2200      	movs	r2, #0
 8003016:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d123      	bne.n	8003068 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303a:	83fb      	strh	r3, [r7, #30]
 800303c:	8bfb      	ldrh	r3, [r7, #30]
 800303e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003042:	83fb      	strh	r3, [r7, #30]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	441a      	add	r2, r3
 8003052:	8bfb      	ldrh	r3, [r7, #30]
 8003054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003058:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800305c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003064:	b29b      	uxth	r3, r3
 8003066:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11f      	bne.n	80030b2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800308c:	83bb      	strh	r3, [r7, #28]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	441a      	add	r2, r3
 800309c:	8bbb      	ldrh	r3, [r7, #28]
 800309e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030b2:	8b7b      	ldrh	r3, [r7, #26]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6959      	ldr	r1, [r3, #20]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	895a      	ldrh	r2, [r3, #10]
 80030c4:	8b7b      	ldrh	r3, [r7, #26]
 80030c6:	f004 fc5e 	bl	8007986 <USB_ReadPMA>
    }
  }

  return count;
 80030ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b0a4      	sub	sp, #144	@ 0x90
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 81dd 	beq.w	80034a8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	3302      	adds	r3, #2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003116:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003122:	429a      	cmp	r2, r3
 8003124:	d907      	bls.n	8003136 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800312e:	1ad2      	subs	r2, r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	619a      	str	r2, [r3, #24]
 8003134:	e002      	b.n	800313c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 80b9 	bne.w	80032b8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d126      	bne.n	800319c <HAL_PCD_EP_DB_Transmit+0xc8>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800315c:	b29b      	uxth	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	4413      	add	r3, r2
 8003164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	011a      	lsls	r2, r3, #4
 800316c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316e:	4413      	add	r3, r2
 8003170:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003174:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003180:	b29a      	uxth	r2, r3
 8003182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003184:	801a      	strh	r2, [r3, #0]
 8003186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003194:	b29a      	uxth	r2, r3
 8003196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	e01a      	b.n	80031d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d116      	bne.n	80031d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b8:	4413      	add	r3, r2
 80031ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	011a      	lsls	r2, r3, #4
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	4413      	add	r3, r2
 80031c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	2200      	movs	r2, #0
 80031d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d126      	bne.n	800322e <HAL_PCD_EP_DB_Transmit+0x15a>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4413      	add	r3, r2
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	011a      	lsls	r2, r3, #4
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003212:	b29a      	uxth	r2, r3
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	801a      	strh	r2, [r3, #0]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003226:	b29a      	uxth	r2, r3
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	801a      	strh	r2, [r3, #0]
 800322c:	e017      	b.n	800325e <HAL_PCD_EP_DB_Transmit+0x18a>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d113      	bne.n	800325e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	4413      	add	r3, r2
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	011a      	lsls	r2, r3, #4
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	4413      	add	r3, r2
 8003252:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	2200      	movs	r2, #0
 800325c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	4619      	mov	r1, r3
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f006 f938 	bl	80094da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 82fc 	beq.w	800386e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800328c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003290:	82fb      	strh	r3, [r7, #22]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	441a      	add	r2, r3
 80032a0:	8afb      	ldrh	r3, [r7, #22]
 80032a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	8013      	strh	r3, [r2, #0]
 80032b6:	e2da      	b.n	800386e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d021      	beq.n	8003306 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80032f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003302:	b29b      	uxth	r3, r3
 8003304:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800330c:	2b01      	cmp	r3, #1
 800330e:	f040 82ae 	bne.w	800386e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800331a:	441a      	add	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003328:	441a      	add	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6a1a      	ldr	r2, [r3, #32]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	429a      	cmp	r2, r3
 8003338:	d30b      	bcc.n	8003352 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	6a1a      	ldr	r2, [r3, #32]
 8003346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	621a      	str	r2, [r3, #32]
 8003350:	e017      	b.n	8003382 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d108      	bne.n	800336c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800335a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800335e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800336a:	e00a      	b.n	8003382 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2200      	movs	r2, #0
 8003380:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d165      	bne.n	8003456 <HAL_PCD_EP_DB_Transmit+0x382>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003398:	b29b      	uxth	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800339e:	4413      	add	r3, r2
 80033a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	011a      	lsls	r2, r3, #4
 80033a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033aa:	4413      	add	r3, r2
 80033ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033bc:	b29a      	uxth	r2, r3
 80033be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80033c8:	d91d      	bls.n	8003406 <HAL_PCD_EP_DB_Transmit+0x332>
 80033ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <HAL_PCD_EP_DB_Transmit+0x310>
 80033de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033e0:	3b01      	subs	r3, #1
 80033e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	029b      	lsls	r3, r3, #10
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4313      	orrs	r3, r2
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033fe:	b29a      	uxth	r2, r3
 8003400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003402:	801a      	strh	r2, [r3, #0]
 8003404:	e044      	b.n	8003490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_PCD_EP_DB_Transmit+0x350>
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800341c:	b29a      	uxth	r2, r3
 800341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003420:	801a      	strh	r2, [r3, #0]
 8003422:	e035      	b.n	8003490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003428:	085b      	lsrs	r3, r3, #1
 800342a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800342c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800343a:	3301      	adds	r3, #1
 800343c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29a      	uxth	r2, r3
 8003444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003446:	b29b      	uxth	r3, r3
 8003448:	029b      	lsls	r3, r3, #10
 800344a:	b29b      	uxth	r3, r3
 800344c:	4313      	orrs	r3, r2
 800344e:	b29a      	uxth	r2, r3
 8003450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003452:	801a      	strh	r2, [r3, #0]
 8003454:	e01c      	b.n	8003490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	785b      	ldrb	r3, [r3, #1]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d118      	bne.n	8003490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	647b      	str	r3, [r7, #68]	@ 0x44
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800346c:	b29b      	uxth	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003472:	4413      	add	r3, r2
 8003474:	647b      	str	r3, [r7, #68]	@ 0x44
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	011a      	lsls	r2, r3, #4
 800347c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800347e:	4413      	add	r3, r2
 8003480:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003484:	643b      	str	r3, [r7, #64]	@ 0x40
 8003486:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800348a:	b29a      	uxth	r2, r3
 800348c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800348e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	6959      	ldr	r1, [r3, #20]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	891a      	ldrh	r2, [r3, #8]
 800349c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f004 fa2a 	bl	80078fa <USB_WritePMA>
 80034a6:	e1e2      	b.n	800386e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	3306      	adds	r3, #6
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034d0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	699a      	ldr	r2, [r3, #24]
 80034d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034dc:	429a      	cmp	r2, r3
 80034de:	d307      	bcc.n	80034f0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034e8:	1ad2      	subs	r2, r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	619a      	str	r2, [r3, #24]
 80034ee:	e002      	b.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2200      	movs	r2, #0
 80034f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 80c0 	bne.w	8003680 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	785b      	ldrb	r3, [r3, #1]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d126      	bne.n	8003556 <HAL_PCD_EP_DB_Transmit+0x482>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800351c:	4413      	add	r3, r2
 800351e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	011a      	lsls	r2, r3, #4
 8003526:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003528:	4413      	add	r3, r2
 800352a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800352e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800353a:	b29a      	uxth	r2, r3
 800353c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800353e:	801a      	strh	r2, [r3, #0]
 8003540:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800354a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800354e:	b29a      	uxth	r2, r3
 8003550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003552:	801a      	strh	r2, [r3, #0]
 8003554:	e01a      	b.n	800358c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	785b      	ldrb	r3, [r3, #1]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d116      	bne.n	800358c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	667b      	str	r3, [r7, #100]	@ 0x64
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800356c:	b29b      	uxth	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003572:	4413      	add	r3, r2
 8003574:	667b      	str	r3, [r7, #100]	@ 0x64
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	011a      	lsls	r2, r3, #4
 800357c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800357e:	4413      	add	r3, r2
 8003580:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003584:	663b      	str	r3, [r7, #96]	@ 0x60
 8003586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003588:	2200      	movs	r2, #0
 800358a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	677b      	str	r3, [r7, #116]	@ 0x74
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	785b      	ldrb	r3, [r3, #1]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d12b      	bne.n	80035f2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ae:	4413      	add	r3, r2
 80035b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	011a      	lsls	r2, r3, #4
 80035b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ba:	4413      	add	r3, r2
 80035bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035d6:	801a      	strh	r2, [r3, #0]
 80035d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035ee:	801a      	strh	r2, [r3, #0]
 80035f0:	e017      	b.n	8003622 <HAL_PCD_EP_DB_Transmit+0x54e>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	785b      	ldrb	r3, [r3, #1]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d113      	bne.n	8003622 <HAL_PCD_EP_DB_Transmit+0x54e>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003602:	b29b      	uxth	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003608:	4413      	add	r3, r2
 800360a:	677b      	str	r3, [r7, #116]	@ 0x74
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	011a      	lsls	r2, r3, #4
 8003612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003614:	4413      	add	r3, r2
 8003616:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800361a:	673b      	str	r3, [r7, #112]	@ 0x70
 800361c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800361e:	2200      	movs	r2, #0
 8003620:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	4619      	mov	r1, r3
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f005 ff56 	bl	80094da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003634:	2b00      	cmp	r3, #0
 8003636:	f040 811a 	bne.w	800386e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003654:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	441a      	add	r2, r3
 8003666:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800366a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800366e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800367a:	b29b      	uxth	r3, r3
 800367c:	8013      	strh	r3, [r2, #0]
 800367e:	e0f6      	b.n	800386e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d121      	bne.n	80036ce <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80036ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	f040 80ca 	bne.w	800386e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036e2:	441a      	add	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036f0:	441a      	add	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	6a1a      	ldr	r2, [r3, #32]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d30b      	bcc.n	800371a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	6a1a      	ldr	r2, [r3, #32]
 800370e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003712:	1ad2      	subs	r2, r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	621a      	str	r2, [r3, #32]
 8003718:	e017      	b.n	800374a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003722:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003732:	e00a      	b.n	800374a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2200      	movs	r2, #0
 8003740:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d165      	bne.n	8003824 <HAL_PCD_EP_DB_Transmit+0x750>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003766:	b29b      	uxth	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800376c:	4413      	add	r3, r2
 800376e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	011a      	lsls	r2, r3, #4
 8003776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003778:	4413      	add	r3, r2
 800377a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800377e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003780:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378a:	b29a      	uxth	r2, r3
 800378c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800378e:	801a      	strh	r2, [r3, #0]
 8003790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003794:	2b3e      	cmp	r3, #62	@ 0x3e
 8003796:	d91d      	bls.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x700>
 8003798:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d102      	bne.n	80037b2 <HAL_PCD_EP_DB_Transmit+0x6de>
 80037ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ae:	3b01      	subs	r3, #1
 80037b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037d0:	801a      	strh	r2, [r3, #0]
 80037d2:	e041      	b.n	8003858 <HAL_PCD_EP_DB_Transmit+0x784>
 80037d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80037dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037ee:	801a      	strh	r2, [r3, #0]
 80037f0:	e032      	b.n	8003858 <HAL_PCD_EP_DB_Transmit+0x784>
 80037f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_PCD_EP_DB_Transmit+0x738>
 8003806:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003808:	3301      	adds	r3, #1
 800380a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800380c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29a      	uxth	r2, r3
 8003812:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003814:	b29b      	uxth	r3, r3
 8003816:	029b      	lsls	r3, r3, #10
 8003818:	b29b      	uxth	r3, r3
 800381a:	4313      	orrs	r3, r2
 800381c:	b29a      	uxth	r2, r3
 800381e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003820:	801a      	strh	r2, [r3, #0]
 8003822:	e019      	b.n	8003858 <HAL_PCD_EP_DB_Transmit+0x784>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	785b      	ldrb	r3, [r3, #1]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d115      	bne.n	8003858 <HAL_PCD_EP_DB_Transmit+0x784>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003834:	b29b      	uxth	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383a:	4413      	add	r3, r2
 800383c:	657b      	str	r3, [r7, #84]	@ 0x54
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	011a      	lsls	r2, r3, #4
 8003844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003846:	4413      	add	r3, r2
 8003848:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800384c:	653b      	str	r3, [r7, #80]	@ 0x50
 800384e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003852:	b29a      	uxth	r2, r3
 8003854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003856:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	6959      	ldr	r1, [r3, #20]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	895a      	ldrh	r2, [r3, #10]
 8003864:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003868:	b29b      	uxth	r3, r3
 800386a:	f004 f846 	bl	80078fa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003888:	82bb      	strh	r3, [r7, #20]
 800388a:	8abb      	ldrh	r3, [r7, #20]
 800388c:	f083 0310 	eor.w	r3, r3, #16
 8003890:	82bb      	strh	r3, [r7, #20]
 8003892:	8abb      	ldrh	r3, [r7, #20]
 8003894:	f083 0320 	eor.w	r3, r3, #32
 8003898:	82bb      	strh	r3, [r7, #20]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	441a      	add	r2, r3
 80038a8:	8abb      	ldrh	r3, [r7, #20]
 80038aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3790      	adds	r7, #144	@ 0x90
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	817b      	strh	r3, [r7, #10]
 80038d6:	4613      	mov	r3, r2
 80038d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80038da:	897b      	ldrh	r3, [r7, #10]
 80038dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e6:	897b      	ldrh	r3, [r7, #10]
 80038e8:	f003 0207 	and.w	r2, r3, #7
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	3310      	adds	r3, #16
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e009      	b.n	8003912 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038fe:	897a      	ldrh	r2, [r7, #10]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003912:	893b      	ldrh	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2200      	movs	r2, #0
 800391c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	b29a      	uxth	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	80da      	strh	r2, [r3, #6]
 8003926:	e00b      	b.n	8003940 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2201      	movs	r2, #1
 800392c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	b29a      	uxth	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	b29a      	uxth	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e272      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8087 	beq.w	8003a7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800396c:	4b92      	ldr	r3, [pc, #584]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b04      	cmp	r3, #4
 8003976:	d00c      	beq.n	8003992 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003978:	4b8f      	ldr	r3, [pc, #572]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d112      	bne.n	80039aa <HAL_RCC_OscConfig+0x5e>
 8003984:	4b8c      	ldr	r3, [pc, #560]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003990:	d10b      	bne.n	80039aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003992:	4b89      	ldr	r3, [pc, #548]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d06c      	beq.n	8003a78 <HAL_RCC_OscConfig+0x12c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d168      	bne.n	8003a78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e24c      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x76>
 80039b4:	4b80      	ldr	r3, [pc, #512]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a7f      	ldr	r2, [pc, #508]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e02e      	b.n	8003a20 <HAL_RCC_OscConfig+0xd4>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x98>
 80039ca:	4b7b      	ldr	r3, [pc, #492]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7a      	ldr	r2, [pc, #488]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b78      	ldr	r3, [pc, #480]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a77      	ldr	r2, [pc, #476]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e01d      	b.n	8003a20 <HAL_RCC_OscConfig+0xd4>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0xbc>
 80039ee:	4b72      	ldr	r3, [pc, #456]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a71      	ldr	r2, [pc, #452]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6e      	ldr	r2, [pc, #440]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0xd4>
 8003a08:	4b6b      	ldr	r3, [pc, #428]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b68      	ldr	r3, [pc, #416]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a67      	ldr	r2, [pc, #412]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fd ff64 	bl	80018f4 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fd ff60 	bl	80018f4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	@ 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e200      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	4b5d      	ldr	r3, [pc, #372]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0xe4>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fd ff50 	bl	80018f4 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fd ff4c 	bl	80018f4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	@ 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1ec      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	4b53      	ldr	r3, [pc, #332]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x10c>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d063      	beq.n	8003b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a86:	4b4c      	ldr	r3, [pc, #304]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a92:	4b49      	ldr	r3, [pc, #292]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d11c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x18c>
 8003a9e:	4b46      	ldr	r3, [pc, #280]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d116      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	4b43      	ldr	r3, [pc, #268]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x176>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e1c0      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4939      	ldr	r1, [pc, #228]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	e03a      	b.n	8003b4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d020      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae0:	4b36      	ldr	r3, [pc, #216]	@ (8003bbc <HAL_RCC_OscConfig+0x270>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7fd ff05 	bl	80018f4 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aee:	f7fd ff01 	bl	80018f4 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e1a1      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b00:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4927      	ldr	r1, [pc, #156]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]
 8003b20:	e015      	b.n	8003b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b22:	4b26      	ldr	r3, [pc, #152]	@ (8003bbc <HAL_RCC_OscConfig+0x270>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fd fee4 	bl	80018f4 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b30:	f7fd fee0 	bl	80018f4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e180      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b42:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d03a      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d019      	beq.n	8003b96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b62:	4b17      	ldr	r3, [pc, #92]	@ (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b68:	f7fd fec4 	bl	80018f4 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b70:	f7fd fec0 	bl	80018f4 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e160      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b82:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb8 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f000 fa9c 	bl	80040cc <RCC_Delay>
 8003b94:	e01c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9c:	f7fd feaa 	bl	80018f4 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba2:	e00f      	b.n	8003bc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba4:	f7fd fea6 	bl	80018f4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d908      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e146      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	42420000 	.word	0x42420000
 8003bc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc4:	4b92      	ldr	r3, [pc, #584]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e9      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a6 	beq.w	8003d2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bde:	2300      	movs	r3, #0
 8003be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be2:	4b8b      	ldr	r3, [pc, #556]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bee:	4b88      	ldr	r3, [pc, #544]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4a87      	ldr	r2, [pc, #540]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	61d3      	str	r3, [r2, #28]
 8003bfa:	4b85      	ldr	r3, [pc, #532]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c06:	2301      	movs	r3, #1
 8003c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0a:	4b82      	ldr	r3, [pc, #520]	@ (8003e14 <HAL_RCC_OscConfig+0x4c8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d118      	bne.n	8003c48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c16:	4b7f      	ldr	r3, [pc, #508]	@ (8003e14 <HAL_RCC_OscConfig+0x4c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e14 <HAL_RCC_OscConfig+0x4c8>)
 8003c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c22:	f7fd fe67 	bl	80018f4 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2a:	f7fd fe63 	bl	80018f4 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b64      	cmp	r3, #100	@ 0x64
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e103      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	4b75      	ldr	r3, [pc, #468]	@ (8003e14 <HAL_RCC_OscConfig+0x4c8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCC_OscConfig+0x312>
 8003c50:	4b6f      	ldr	r3, [pc, #444]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4a6e      	ldr	r2, [pc, #440]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6213      	str	r3, [r2, #32]
 8003c5c:	e02d      	b.n	8003cba <HAL_RCC_OscConfig+0x36e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x334>
 8003c66:	4b6a      	ldr	r3, [pc, #424]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4a69      	ldr	r2, [pc, #420]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	6213      	str	r3, [r2, #32]
 8003c72:	4b67      	ldr	r3, [pc, #412]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	4a66      	ldr	r2, [pc, #408]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	f023 0304 	bic.w	r3, r3, #4
 8003c7c:	6213      	str	r3, [r2, #32]
 8003c7e:	e01c      	b.n	8003cba <HAL_RCC_OscConfig+0x36e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b05      	cmp	r3, #5
 8003c86:	d10c      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x356>
 8003c88:	4b61      	ldr	r3, [pc, #388]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4a60      	ldr	r2, [pc, #384]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	f043 0304 	orr.w	r3, r3, #4
 8003c92:	6213      	str	r3, [r2, #32]
 8003c94:	4b5e      	ldr	r3, [pc, #376]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	4a5d      	ldr	r2, [pc, #372]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6213      	str	r3, [r2, #32]
 8003ca0:	e00b      	b.n	8003cba <HAL_RCC_OscConfig+0x36e>
 8003ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4a5a      	ldr	r2, [pc, #360]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	f023 0301 	bic.w	r3, r3, #1
 8003cac:	6213      	str	r3, [r2, #32]
 8003cae:	4b58      	ldr	r3, [pc, #352]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4a57      	ldr	r2, [pc, #348]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d015      	beq.n	8003cee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc2:	f7fd fe17 	bl	80018f4 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fd fe13 	bl	80018f4 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e0b1      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ee      	beq.n	8003cca <HAL_RCC_OscConfig+0x37e>
 8003cec:	e014      	b.n	8003d18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cee:	f7fd fe01 	bl	80018f4 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fd fdfd 	bl	80018f4 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e09b      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0c:	4b40      	ldr	r3, [pc, #256]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1ee      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d105      	bne.n	8003d2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 8087 	beq.w	8003e42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d34:	4b36      	ldr	r3, [pc, #216]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 030c 	and.w	r3, r3, #12
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d061      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d146      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d48:	4b33      	ldr	r3, [pc, #204]	@ (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fd fdd1 	bl	80018f4 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d56:	f7fd fdcd 	bl	80018f4 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e06d      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d68:	4b29      	ldr	r3, [pc, #164]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f0      	bne.n	8003d56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d7c:	d108      	bne.n	8003d90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d7e:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4921      	ldr	r1, [pc, #132]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d90:	4b1f      	ldr	r3, [pc, #124]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a19      	ldr	r1, [r3, #32]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	430b      	orrs	r3, r1
 8003da2:	491b      	ldr	r1, [pc, #108]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fd fda1 	bl	80018f4 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fd fd9d 	bl	80018f4 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e03d      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dc8:	4b11      	ldr	r3, [pc, #68]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x46a>
 8003dd4:	e035      	b.n	8003e42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fd8a 	bl	80018f4 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fd fd86 	bl	80018f4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e026      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x498>
 8003e02:	e01e      	b.n	8003e42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e019      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_RCC_OscConfig+0x500>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000

08003e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0d0      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d910      	bls.n	8003e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b67      	ldr	r3, [pc, #412]	@ (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 0207 	bic.w	r2, r3, #7
 8003e7a:	4965      	ldr	r1, [pc, #404]	@ (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b63      	ldr	r3, [pc, #396]	@ (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0b8      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eac:	4b59      	ldr	r3, [pc, #356]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003eb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec4:	4b53      	ldr	r3, [pc, #332]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a52      	ldr	r2, [pc, #328]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ece:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed0:	4b50      	ldr	r3, [pc, #320]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	494d      	ldr	r1, [pc, #308]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d040      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b47      	ldr	r3, [pc, #284]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d115      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e07f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0e:	4b41      	ldr	r3, [pc, #260]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e073      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e06b      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2e:	4b39      	ldr	r3, [pc, #228]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f023 0203 	bic.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4936      	ldr	r1, [pc, #216]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f40:	f7fd fcd8 	bl	80018f4 <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fd fcd4 	bl	80018f4 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e053      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 020c 	and.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d1eb      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f70:	4b27      	ldr	r3, [pc, #156]	@ (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d210      	bcs.n	8003fa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b24      	ldr	r3, [pc, #144]	@ (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 0207 	bic.w	r2, r3, #7
 8003f86:	4922      	ldr	r1, [pc, #136]	@ (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b20      	ldr	r3, [pc, #128]	@ (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e032      	b.n	8004006 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fac:	4b19      	ldr	r3, [pc, #100]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4916      	ldr	r1, [pc, #88]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fca:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	490e      	ldr	r1, [pc, #56]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fde:	f000 f821 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	490a      	ldr	r1, [pc, #40]	@ (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	5ccb      	ldrb	r3, [r1, r3]
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	4a09      	ldr	r2, [pc, #36]	@ (800401c <HAL_RCC_ClockConfig+0x1cc>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	@ (8004020 <HAL_RCC_ClockConfig+0x1d0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd fc36 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40022000 	.word	0x40022000
 8004014:	40021000 	.word	0x40021000
 8004018:	0800c304 	.word	0x0800c304
 800401c:	20000004 	.word	0x20000004
 8004020:	20000008 	.word	0x20000008

08004024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800403e:	4b1e      	ldr	r3, [pc, #120]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b04      	cmp	r3, #4
 800404c:	d002      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x30>
 800404e:	2b08      	cmp	r3, #8
 8004050:	d003      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0x36>
 8004052:	e027      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004054:	4b19      	ldr	r3, [pc, #100]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004056:	613b      	str	r3, [r7, #16]
      break;
 8004058:	e027      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	0c9b      	lsrs	r3, r3, #18
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	4a17      	ldr	r2, [pc, #92]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004064:	5cd3      	ldrb	r3, [r2, r3]
 8004066:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d010      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004072:	4b11      	ldr	r3, [pc, #68]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	0c5b      	lsrs	r3, r3, #17
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800407e:	5cd3      	ldrb	r3, [r2, r3]
 8004080:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004086:	fb03 f202 	mul.w	r2, r3, r2
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e004      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0c      	ldr	r2, [pc, #48]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004098:	fb02 f303 	mul.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	613b      	str	r3, [r7, #16]
      break;
 80040a2:	e002      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x98>)
 80040a6:	613b      	str	r3, [r7, #16]
      break;
 80040a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040aa:	693b      	ldr	r3, [r7, #16]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	007a1200 	.word	0x007a1200
 80040c0:	0800c314 	.word	0x0800c314
 80040c4:	0800c324 	.word	0x0800c324
 80040c8:	003d0900 	.word	0x003d0900

080040cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <RCC_Delay+0x34>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <RCC_Delay+0x38>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	0a5b      	lsrs	r3, r3, #9
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040e8:	bf00      	nop
  }
  while (Delay --);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1e5a      	subs	r2, r3, #1
 80040ee:	60fa      	str	r2, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f9      	bne.n	80040e8 <RCC_Delay+0x1c>
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	20000004 	.word	0x20000004
 8004104:	10624dd3 	.word	0x10624dd3

08004108 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d07d      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004124:	2300      	movs	r3, #0
 8004126:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004128:	4b4f      	ldr	r3, [pc, #316]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10d      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004134:	4b4c      	ldr	r3, [pc, #304]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4a4b      	ldr	r2, [pc, #300]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800413e:	61d3      	str	r3, [r2, #28]
 8004140:	4b49      	ldr	r3, [pc, #292]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b46      	ldr	r3, [pc, #280]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d118      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415c:	4b43      	ldr	r3, [pc, #268]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a42      	ldr	r2, [pc, #264]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004166:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004168:	f7fd fbc4 	bl	80018f4 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	e008      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004170:	f7fd fbc0 	bl	80018f4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e06d      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004182:	4b3a      	ldr	r3, [pc, #232]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800418e:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004196:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d02e      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d027      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041c2:	4a29      	ldr	r2, [pc, #164]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d014      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7fd fb8f 	bl	80018f4 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041da:	f7fd fb8b 	bl	80018f4 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e036      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0ee      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4917      	ldr	r1, [pc, #92]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	4313      	orrs	r3, r2
 800420c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004214:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	4a13      	ldr	r2, [pc, #76]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800422c:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	490b      	ldr	r1, [pc, #44]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	4313      	orrs	r3, r2
 800423c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800424a:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4904      	ldr	r1, [pc, #16]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	40007000 	.word	0x40007000
 8004270:	42420440 	.word	0x42420440

08004274 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e041      	b.n	800430a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fd fa14 	bl	80016c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f000 fc36 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e041      	b.n	80043a8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fd f9e3 	bl	8001704 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f000 fbe7 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_IC_Start_IT+0x1e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	e013      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x46>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d104      	bne.n	80043de <HAL_TIM_IC_Start_IT+0x2e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e00b      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x46>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_IC_Start_IT+0x3e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	e003      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x46>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <HAL_TIM_IC_Start_IT+0x58>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004404:	b2db      	uxtb	r3, r3
 8004406:	e013      	b.n	8004430 <HAL_TIM_IC_Start_IT+0x80>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b04      	cmp	r3, #4
 800440c:	d104      	bne.n	8004418 <HAL_TIM_IC_Start_IT+0x68>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e00b      	b.n	8004430 <HAL_TIM_IC_Start_IT+0x80>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b08      	cmp	r3, #8
 800441c:	d104      	bne.n	8004428 <HAL_TIM_IC_Start_IT+0x78>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e003      	b.n	8004430 <HAL_TIM_IC_Start_IT+0x80>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800442e:	b2db      	uxtb	r3, r3
 8004430:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004432:	7bbb      	ldrb	r3, [r7, #14]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d102      	bne.n	800443e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004438:	7b7b      	ldrb	r3, [r7, #13]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d001      	beq.n	8004442 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e0b8      	b.n	80045b4 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_TIM_IC_Start_IT+0xa2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004450:	e013      	b.n	800447a <HAL_TIM_IC_Start_IT+0xca>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d104      	bne.n	8004462 <HAL_TIM_IC_Start_IT+0xb2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004460:	e00b      	b.n	800447a <HAL_TIM_IC_Start_IT+0xca>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d104      	bne.n	8004472 <HAL_TIM_IC_Start_IT+0xc2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004470:	e003      	b.n	800447a <HAL_TIM_IC_Start_IT+0xca>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <HAL_TIM_IC_Start_IT+0xda>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004488:	e013      	b.n	80044b2 <HAL_TIM_IC_Start_IT+0x102>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d104      	bne.n	800449a <HAL_TIM_IC_Start_IT+0xea>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004498:	e00b      	b.n	80044b2 <HAL_TIM_IC_Start_IT+0x102>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d104      	bne.n	80044aa <HAL_TIM_IC_Start_IT+0xfa>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044a8:	e003      	b.n	80044b2 <HAL_TIM_IC_Start_IT+0x102>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	d841      	bhi.n	800453c <HAL_TIM_IC_Start_IT+0x18c>
 80044b8:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <HAL_TIM_IC_Start_IT+0x110>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044f5 	.word	0x080044f5
 80044c4:	0800453d 	.word	0x0800453d
 80044c8:	0800453d 	.word	0x0800453d
 80044cc:	0800453d 	.word	0x0800453d
 80044d0:	08004507 	.word	0x08004507
 80044d4:	0800453d 	.word	0x0800453d
 80044d8:	0800453d 	.word	0x0800453d
 80044dc:	0800453d 	.word	0x0800453d
 80044e0:	08004519 	.word	0x08004519
 80044e4:	0800453d 	.word	0x0800453d
 80044e8:	0800453d 	.word	0x0800453d
 80044ec:	0800453d 	.word	0x0800453d
 80044f0:	0800452b 	.word	0x0800452b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0202 	orr.w	r2, r2, #2
 8004502:	60da      	str	r2, [r3, #12]
      break;
 8004504:	e01d      	b.n	8004542 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0204 	orr.w	r2, r2, #4
 8004514:	60da      	str	r2, [r3, #12]
      break;
 8004516:	e014      	b.n	8004542 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0208 	orr.w	r2, r2, #8
 8004526:	60da      	str	r2, [r3, #12]
      break;
 8004528:	e00b      	b.n	8004542 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0210 	orr.w	r2, r2, #16
 8004538:	60da      	str	r2, [r3, #12]
      break;
 800453a:	e002      	b.n	8004542 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
      break;
 8004540:	bf00      	nop
  }

  if (status == HAL_OK)
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d134      	bne.n	80045b2 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2201      	movs	r2, #1
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fdea 	bl	800512a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a18      	ldr	r2, [pc, #96]	@ (80045bc <HAL_TIM_IC_Start_IT+0x20c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_TIM_IC_Start_IT+0x1ce>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004568:	d009      	beq.n	800457e <HAL_TIM_IC_Start_IT+0x1ce>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a14      	ldr	r2, [pc, #80]	@ (80045c0 <HAL_TIM_IC_Start_IT+0x210>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_TIM_IC_Start_IT+0x1ce>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <HAL_TIM_IC_Start_IT+0x214>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d111      	bne.n	80045a2 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b06      	cmp	r3, #6
 800458e:	d010      	beq.n	80045b2 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a0:	e007      	b.n	80045b2 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800

080045c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d020      	beq.n	800462c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01b      	beq.n	800462c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0202 	mvn.w	r2, #2
 80045fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fdb0 	bl	8001178 <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa66 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fa6c 	bl	8004afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d020      	beq.n	8004678 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01b      	beq.n	8004678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0204 	mvn.w	r2, #4
 8004648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fc fd8a 	bl	8001178 <HAL_TIM_IC_CaptureCallback>
 8004664:	e005      	b.n	8004672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fa40 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fa46 	bl	8004afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d020      	beq.n	80046c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01b      	beq.n	80046c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0208 	mvn.w	r2, #8
 8004694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2204      	movs	r2, #4
 800469a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc fd64 	bl	8001178 <HAL_TIM_IC_CaptureCallback>
 80046b0:	e005      	b.n	80046be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fa1a 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fa20 	bl	8004afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d020      	beq.n	8004710 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01b      	beq.n	8004710 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0210 	mvn.w	r2, #16
 80046e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2208      	movs	r2, #8
 80046e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fd3e 	bl	8001178 <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f9f4 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f9fa 	bl	8004afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0201 	mvn.w	r2, #1
 800472c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fd0a 	bl	8001148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00c      	beq.n	8004758 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fdc6 	bl	80052e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00c      	beq.n	800477c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f9ca 	bl	8004b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0220 	mvn.w	r2, #32
 8004798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fd99 	bl	80052d2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e088      	b.n	80048d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d11b      	bne.n	800480c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80047e4:	f000 fb94 	bl	8004f10 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 020c 	bic.w	r2, r2, #12
 80047f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6999      	ldr	r1, [r3, #24]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	619a      	str	r2, [r3, #24]
 800480a:	e060      	b.n	80048ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b04      	cmp	r3, #4
 8004810:	d11c      	bne.n	800484c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004822:	f000 fbcf 	bl	8004fc4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004834:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6999      	ldr	r1, [r3, #24]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	021a      	lsls	r2, r3, #8
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	619a      	str	r2, [r3, #24]
 800484a:	e040      	b.n	80048ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b08      	cmp	r3, #8
 8004850:	d11b      	bne.n	800488a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004862:	f000 fbeb 	bl	800503c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69da      	ldr	r2, [r3, #28]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 020c 	bic.w	r2, r2, #12
 8004874:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69d9      	ldr	r1, [r3, #28]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	61da      	str	r2, [r3, #28]
 8004888:	e021      	b.n	80048ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b0c      	cmp	r3, #12
 800488e:	d11c      	bne.n	80048ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80048a0:	f000 fc07 	bl	80050b2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80048b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69d9      	ldr	r1, [r3, #28]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	021a      	lsls	r2, r3, #8
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	61da      	str	r2, [r3, #28]
 80048c8:	e001      	b.n	80048ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0ae      	b.n	8004a5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	f200 809f 	bhi.w	8004a4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800490e:	a201      	add	r2, pc, #4	@ (adr r2, 8004914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004949 	.word	0x08004949
 8004918:	08004a4d 	.word	0x08004a4d
 800491c:	08004a4d 	.word	0x08004a4d
 8004920:	08004a4d 	.word	0x08004a4d
 8004924:	08004989 	.word	0x08004989
 8004928:	08004a4d 	.word	0x08004a4d
 800492c:	08004a4d 	.word	0x08004a4d
 8004930:	08004a4d 	.word	0x08004a4d
 8004934:	080049cb 	.word	0x080049cb
 8004938:	08004a4d 	.word	0x08004a4d
 800493c:	08004a4d 	.word	0x08004a4d
 8004940:	08004a4d 	.word	0x08004a4d
 8004944:	08004a0b 	.word	0x08004a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f956 	bl	8004c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0208 	orr.w	r2, r2, #8
 8004962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0204 	bic.w	r2, r2, #4
 8004972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6999      	ldr	r1, [r3, #24]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	619a      	str	r2, [r3, #24]
      break;
 8004986:	e064      	b.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f99c 	bl	8004ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6999      	ldr	r1, [r3, #24]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	021a      	lsls	r2, r3, #8
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	619a      	str	r2, [r3, #24]
      break;
 80049c8:	e043      	b.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f9e5 	bl	8004da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0208 	orr.w	r2, r2, #8
 80049e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0204 	bic.w	r2, r2, #4
 80049f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69d9      	ldr	r1, [r3, #28]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	61da      	str	r2, [r3, #28]
      break;
 8004a08:	e023      	b.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fa2f 	bl	8004e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69d9      	ldr	r1, [r3, #28]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	021a      	lsls	r2, r3, #8
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	61da      	str	r2, [r3, #28]
      break;
 8004a4a:	e002      	b.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d831      	bhi.n	8004adc <HAL_TIM_ReadCapturedValue+0x78>
 8004a78:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004add 	.word	0x08004add
 8004a88:	08004add 	.word	0x08004add
 8004a8c:	08004add 	.word	0x08004add
 8004a90:	08004abf 	.word	0x08004abf
 8004a94:	08004add 	.word	0x08004add
 8004a98:	08004add 	.word	0x08004add
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004add 	.word	0x08004add
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004ad3 	.word	0x08004ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aba:	60fb      	str	r3, [r7, #12]

      break;
 8004abc:	e00f      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac4:	60fb      	str	r3, [r7, #12]

      break;
 8004ac6:	e00a      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	60fb      	str	r3, [r7, #12]

      break;
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	60fb      	str	r3, [r7, #12]

      break;
 8004ada:	e000      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004adc:	bf00      	nop
  }

  return tmpreg;
 8004ade:	68fb      	ldr	r3, [r7, #12]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop

08004aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
	...

08004b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a2f      	ldr	r2, [pc, #188]	@ (8004bf4 <TIM_Base_SetConfig+0xd0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <TIM_Base_SetConfig+0x30>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b42:	d007      	beq.n	8004b54 <TIM_Base_SetConfig+0x30>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf8 <TIM_Base_SetConfig+0xd4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_Base_SetConfig+0x30>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8004bfc <TIM_Base_SetConfig+0xd8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d108      	bne.n	8004b66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a22      	ldr	r2, [pc, #136]	@ (8004bf4 <TIM_Base_SetConfig+0xd0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00b      	beq.n	8004b86 <TIM_Base_SetConfig+0x62>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b74:	d007      	beq.n	8004b86 <TIM_Base_SetConfig+0x62>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf8 <TIM_Base_SetConfig+0xd4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <TIM_Base_SetConfig+0x62>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1e      	ldr	r2, [pc, #120]	@ (8004bfc <TIM_Base_SetConfig+0xd8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d108      	bne.n	8004b98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf4 <TIM_Base_SetConfig+0xd0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d103      	bne.n	8004bcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f023 0201 	bic.w	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	611a      	str	r2, [r3, #16]
  }
}
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800

08004c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f023 0201 	bic.w	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f023 0302 	bic.w	r3, r3, #2
 8004c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc8 <TIM_OC1_SetConfig+0xc8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d10c      	bne.n	8004c76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0308 	bic.w	r3, r3, #8
 8004c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f023 0304 	bic.w	r3, r3, #4
 8004c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a13      	ldr	r2, [pc, #76]	@ (8004cc8 <TIM_OC1_SetConfig+0xc8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d111      	bne.n	8004ca2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	621a      	str	r2, [r3, #32]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00

08004ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f023 0210 	bic.w	r2, r3, #16
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0320 	bic.w	r3, r3, #32
 8004d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1d      	ldr	r2, [pc, #116]	@ (8004d9c <TIM_OC2_SetConfig+0xd0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10d      	bne.n	8004d48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a14      	ldr	r2, [pc, #80]	@ (8004d9c <TIM_OC2_SetConfig+0xd0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d113      	bne.n	8004d78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	40012c00 	.word	0x40012c00

08004da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e70 <TIM_OC3_SetConfig+0xd0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10d      	bne.n	8004e1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a14      	ldr	r2, [pc, #80]	@ (8004e70 <TIM_OC3_SetConfig+0xd0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d113      	bne.n	8004e4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	621a      	str	r2, [r3, #32]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40012c00 	.word	0x40012c00

08004e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	031b      	lsls	r3, r3, #12
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a0f      	ldr	r2, [pc, #60]	@ (8004f0c <TIM_OC4_SetConfig+0x98>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d109      	bne.n	8004ee8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	621a      	str	r2, [r3, #32]
}
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	40012c00 	.word	0x40012c00

08004f10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f023 0201 	bic.w	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb8 <TIM_TI1_SetConfig+0xa8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00b      	beq.n	8004f56 <TIM_TI1_SetConfig+0x46>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f44:	d007      	beq.n	8004f56 <TIM_TI1_SetConfig+0x46>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a1c      	ldr	r2, [pc, #112]	@ (8004fbc <TIM_TI1_SetConfig+0xac>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d003      	beq.n	8004f56 <TIM_TI1_SetConfig+0x46>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc0 <TIM_TI1_SetConfig+0xb0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <TIM_TI1_SetConfig+0x4a>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <TIM_TI1_SetConfig+0x4c>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d008      	beq.n	8004f72 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e003      	b.n	8004f7a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f023 030a 	bic.w	r3, r3, #10
 8004f94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f003 030a 	and.w	r3, r3, #10
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800

08004fc4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f023 0210 	bic.w	r2, r3, #16
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	031b      	lsls	r3, r3, #12
 8005008:	b29b      	uxth	r3, r3
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005016:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f023 0303 	bic.w	r3, r3, #3
 8005068:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005078:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	b2db      	uxtb	r3, r3
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800508c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	621a      	str	r2, [r3, #32]
}
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr

080050b2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b087      	sub	sp, #28
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
 80050be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	031b      	lsls	r3, r3, #12
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005104:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	031b      	lsls	r3, r3, #12
 800510a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	621a      	str	r2, [r3, #32]
}
 8005120:	bf00      	nop
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800512a:	b480      	push	{r7}
 800512c:	b087      	sub	sp, #28
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	2201      	movs	r2, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	43db      	mvns	r3, r3
 800514c:	401a      	ands	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	fa01 f303 	lsl.w	r3, r1, r3
 8005162:	431a      	orrs	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr
	...

08005174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005188:	2302      	movs	r3, #2
 800518a:	e046      	b.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a16      	ldr	r2, [pc, #88]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d8:	d009      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a12      	ldr	r2, [pc, #72]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a10      	ldr	r2, [pc, #64]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d10c      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800

08005230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005248:	2302      	movs	r3, #2
 800524a:	e03d      	b.n	80052c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr

080052f6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	4638      	mov	r0, r7
 8005300:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005320:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005324:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	b29a      	uxth	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005344:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005348:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	b29b      	uxth	r3, r3
 8005356:	43db      	mvns	r3, r3
 8005358:	b29b      	uxth	r3, r3
 800535a:	4013      	ands	r3, r2
 800535c:	b29a      	uxth	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	4638      	mov	r0, r7
 8005392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
	...

080053c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b09d      	sub	sp, #116	@ 0x74
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80053e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	78db      	ldrb	r3, [r3, #3]
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d81f      	bhi.n	8005436 <USB_ActivateEndpoint+0x72>
 80053f6:	a201      	add	r2, pc, #4	@ (adr r2, 80053fc <USB_ActivateEndpoint+0x38>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	0800540d 	.word	0x0800540d
 8005400:	08005429 	.word	0x08005429
 8005404:	0800543f 	.word	0x0800543f
 8005408:	0800541b 	.word	0x0800541b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800540c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005410:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005414:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005418:	e012      	b.n	8005440 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800541a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800541e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005422:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005426:	e00b      	b.n	8005440 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005428:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800542c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005430:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005434:	e004      	b.n	8005440 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800543c:	e000      	b.n	8005440 <USB_ActivateEndpoint+0x7c>
      break;
 800543e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	441a      	add	r2, r3
 800544a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800544e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800545a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800545e:	b29b      	uxth	r3, r3
 8005460:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b29b      	uxth	r3, r3
 8005470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005478:	b29b      	uxth	r3, r3
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	7812      	ldrb	r2, [r2, #0]
 800547e:	4313      	orrs	r3, r2
 8005480:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	441a      	add	r2, r3
 800548e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800549a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800549e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	7b1b      	ldrb	r3, [r3, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f040 8178 	bne.w	80057a0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8084 	beq.w	80055c2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	4413      	add	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	011a      	lsls	r2, r3, #4
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	88db      	ldrh	r3, [r3, #6]
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	827b      	strh	r3, [r7, #18]
 80054fc:	8a7b      	ldrh	r3, [r7, #18]
 80054fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01b      	beq.n	800553e <USB_ActivateEndpoint+0x17a>
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551c:	823b      	strh	r3, [r7, #16]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	441a      	add	r2, r3
 8005528:	8a3b      	ldrh	r3, [r7, #16]
 800552a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800552e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005536:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800553a:	b29b      	uxth	r3, r3
 800553c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	78db      	ldrb	r3, [r3, #3]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d020      	beq.n	8005588 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800555c:	81bb      	strh	r3, [r7, #12]
 800555e:	89bb      	ldrh	r3, [r7, #12]
 8005560:	f083 0320 	eor.w	r3, r3, #32
 8005564:	81bb      	strh	r3, [r7, #12]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	441a      	add	r2, r3
 8005570:	89bb      	ldrh	r3, [r7, #12]
 8005572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800557a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800557e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005582:	b29b      	uxth	r3, r3
 8005584:	8013      	strh	r3, [r2, #0]
 8005586:	e2d5      	b.n	8005b34 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800559a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800559e:	81fb      	strh	r3, [r7, #14]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	89fb      	ldrh	r3, [r7, #14]
 80055ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8013      	strh	r3, [r2, #0]
 80055c0:	e2b8      	b.n	8005b34 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	4413      	add	r3, r2
 80055d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	011a      	lsls	r2, r3, #4
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80055e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	88db      	ldrh	r3, [r3, #6]
 80055ea:	085b      	lsrs	r3, r3, #1
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005600:	b29b      	uxth	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	4413      	add	r3, r2
 8005608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	011a      	lsls	r2, r3, #4
 8005610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005612:	4413      	add	r3, r2
 8005614:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005624:	b29a      	uxth	r2, r3
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005630:	d91d      	bls.n	800566e <USB_ActivateEndpoint+0x2aa>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	66bb      	str	r3, [r7, #104]	@ 0x68
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <USB_ActivateEndpoint+0x288>
 8005646:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005648:	3b01      	subs	r3, #1
 800564a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29a      	uxth	r2, r3
 8005652:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005654:	b29b      	uxth	r3, r3
 8005656:	029b      	lsls	r3, r3, #10
 8005658:	b29b      	uxth	r3, r3
 800565a:	4313      	orrs	r3, r2
 800565c:	b29b      	uxth	r3, r3
 800565e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005666:	b29a      	uxth	r2, r3
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	801a      	strh	r2, [r3, #0]
 800566c:	e026      	b.n	80056bc <USB_ActivateEndpoint+0x2f8>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10a      	bne.n	800568c <USB_ActivateEndpoint+0x2c8>
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005684:	b29a      	uxth	r2, r3
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	e017      	b.n	80056bc <USB_ActivateEndpoint+0x2f8>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <USB_ActivateEndpoint+0x2e2>
 80056a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056a2:	3301      	adds	r3, #1
 80056a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	029b      	lsls	r3, r3, #10
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4313      	orrs	r3, r2
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80056ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01b      	beq.n	800570c <USB_ActivateEndpoint+0x348>
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ea:	843b      	strh	r3, [r7, #32]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	8c3b      	ldrh	r3, [r7, #32]
 80056f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005700:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005708:	b29b      	uxth	r3, r3
 800570a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d124      	bne.n	800575e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572a:	83bb      	strh	r3, [r7, #28]
 800572c:	8bbb      	ldrh	r3, [r7, #28]
 800572e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005732:	83bb      	strh	r3, [r7, #28]
 8005734:	8bbb      	ldrh	r3, [r7, #28]
 8005736:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800573a:	83bb      	strh	r3, [r7, #28]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	441a      	add	r2, r3
 8005746:	8bbb      	ldrh	r3, [r7, #28]
 8005748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800574c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005758:	b29b      	uxth	r3, r3
 800575a:	8013      	strh	r3, [r2, #0]
 800575c:	e1ea      	b.n	8005b34 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005774:	83fb      	strh	r3, [r7, #30]
 8005776:	8bfb      	ldrh	r3, [r7, #30]
 8005778:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800577c:	83fb      	strh	r3, [r7, #30]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	441a      	add	r2, r3
 8005788:	8bfb      	ldrh	r3, [r7, #30]
 800578a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800578e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005792:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800579a:	b29b      	uxth	r3, r3
 800579c:	8013      	strh	r3, [r2, #0]
 800579e:	e1c9      	b.n	8005b34 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	78db      	ldrb	r3, [r3, #3]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d11e      	bne.n	80057e6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057be:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	441a      	add	r2, r3
 80057cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80057d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057d8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80057dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	8013      	strh	r3, [r2, #0]
 80057e4:	e01d      	b.n	8005822 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80057f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800580e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800581a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800581e:	b29b      	uxth	r3, r3
 8005820:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800582c:	b29b      	uxth	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005832:	4413      	add	r3, r2
 8005834:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	011a      	lsls	r2, r3, #4
 800583c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800583e:	4413      	add	r3, r2
 8005840:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005844:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	891b      	ldrh	r3, [r3, #8]
 800584a:	085b      	lsrs	r3, r3, #1
 800584c:	b29b      	uxth	r3, r3
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	657b      	str	r3, [r7, #84]	@ 0x54
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005860:	b29b      	uxth	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005866:	4413      	add	r3, r2
 8005868:	657b      	str	r3, [r7, #84]	@ 0x54
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	011a      	lsls	r2, r3, #4
 8005870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005872:	4413      	add	r3, r2
 8005874:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005878:	653b      	str	r3, [r7, #80]	@ 0x50
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	895b      	ldrh	r3, [r3, #10]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	b29b      	uxth	r3, r3
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005888:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f040 8093 	bne.w	80059ba <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80058a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80058a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01b      	beq.n	80058e8 <USB_ActivateEndpoint+0x524>
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80058f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80058f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01b      	beq.n	8005938 <USB_ActivateEndpoint+0x574>
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005916:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	441a      	add	r2, r3
 8005922:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800592c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005930:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005934:	b29b      	uxth	r3, r3
 8005936:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800594a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005950:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005952:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005956:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005958:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800595a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800595e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	441a      	add	r2, r3
 800596a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800596c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800597c:	b29b      	uxth	r3, r3
 800597e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005996:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	441a      	add	r2, r3
 80059a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80059a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	8013      	strh	r3, [r2, #0]
 80059b8:	e0bc      	b.n	8005b34 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80059ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80059ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d01d      	beq.n	8005a12 <USB_ActivateEndpoint+0x64e>
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ec:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	441a      	add	r2, r3
 80059fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80059fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005a22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01d      	beq.n	8005a6a <USB_ActivateEndpoint+0x6a6>
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a44:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	78db      	ldrb	r3, [r3, #3]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d024      	beq.n	8005abc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a88:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005a8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005a90:	f083 0320 	eor.w	r3, r3, #32
 8005a94:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	441a      	add	r2, r3
 8005aa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	8013      	strh	r3, [r2, #0]
 8005aba:	e01d      	b.n	8005af8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ad2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	441a      	add	r2, r3
 8005ae0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ae4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	441a      	add	r2, r3
 8005b1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005b20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005b34:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3774      	adds	r7, #116	@ 0x74
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop

08005b44 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b08d      	sub	sp, #52	@ 0x34
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	7b1b      	ldrb	r3, [r3, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f040 808e 	bne.w	8005c74 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d044      	beq.n	8005bea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	81bb      	strh	r3, [r7, #12]
 8005b6e:	89bb      	ldrh	r3, [r7, #12]
 8005b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01b      	beq.n	8005bb0 <USB_DeactivateEndpoint+0x6c>
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8e:	817b      	strh	r3, [r7, #10]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	897b      	ldrh	r3, [r7, #10]
 8005b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc6:	813b      	strh	r3, [r7, #8]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	893b      	ldrh	r3, [r7, #8]
 8005bd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	8013      	strh	r3, [r2, #0]
 8005be8:	e192      	b.n	8005f10 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	827b      	strh	r3, [r7, #18]
 8005bf8:	8a7b      	ldrh	r3, [r7, #18]
 8005bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01b      	beq.n	8005c3a <USB_DeactivateEndpoint+0xf6>
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c18:	823b      	strh	r3, [r7, #16]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	8a3b      	ldrh	r3, [r7, #16]
 8005c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c50:	81fb      	strh	r3, [r7, #14]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	441a      	add	r2, r3
 8005c5c:	89fb      	ldrh	r3, [r7, #14]
 8005c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	8013      	strh	r3, [r2, #0]
 8005c72:	e14d      	b.n	8005f10 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f040 80a5 	bne.w	8005dc8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	843b      	strh	r3, [r7, #32]
 8005c8c:	8c3b      	ldrh	r3, [r7, #32]
 8005c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d01b      	beq.n	8005cce <USB_DeactivateEndpoint+0x18a>
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cac:	83fb      	strh	r3, [r7, #30]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	441a      	add	r2, r3
 8005cb8:	8bfb      	ldrh	r3, [r7, #30]
 8005cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	83bb      	strh	r3, [r7, #28]
 8005cdc:	8bbb      	ldrh	r3, [r7, #28]
 8005cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01b      	beq.n	8005d1e <USB_DeactivateEndpoint+0x1da>
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfc:	837b      	strh	r3, [r7, #26]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	8b7b      	ldrh	r3, [r7, #26]
 8005d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d34:	833b      	strh	r3, [r7, #24]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	441a      	add	r2, r3
 8005d40:	8b3b      	ldrh	r3, [r7, #24]
 8005d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6c:	82fb      	strh	r3, [r7, #22]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	441a      	add	r2, r3
 8005d78:	8afb      	ldrh	r3, [r7, #22]
 8005d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da4:	82bb      	strh	r3, [r7, #20]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	441a      	add	r2, r3
 8005db0:	8abb      	ldrh	r3, [r7, #20]
 8005db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	8013      	strh	r3, [r2, #0]
 8005dc6:	e0a3      	b.n	8005f10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005dd6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01b      	beq.n	8005e18 <USB_DeactivateEndpoint+0x2d4>
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	441a      	add	r2, r3
 8005e02:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005e26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01b      	beq.n	8005e68 <USB_DeactivateEndpoint+0x324>
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e46:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005efc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3734      	adds	r7, #52	@ 0x34
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b0c2      	sub	sp, #264	@ 0x108
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2a:	6018      	str	r0, [r3, #0]
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f34:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	f040 86b7 	bne.w	8006cb6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699a      	ldr	r2, [r3, #24]
 8005f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d908      	bls.n	8005f76 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005f74:	e007      	b.n	8005f86 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	7b1b      	ldrb	r3, [r3, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d13a      	bne.n	800600c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6959      	ldr	r1, [r3, #20]
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	88da      	ldrh	r2, [r3, #6]
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005fb8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fbc:	6800      	ldr	r0, [r0, #0]
 8005fbe:	f001 fc9c 	bl	80078fa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	011a      	lsls	r2, r3, #4
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	f000 be1f 	b.w	8006c4a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	78db      	ldrb	r3, [r3, #3]
 8006018:	2b02      	cmp	r3, #2
 800601a:	f040 8462 	bne.w	80068e2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800601e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6a1a      	ldr	r2, [r3, #32]
 800602a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	f240 83df 	bls.w	80067fa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800603c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006040:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800605e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006062:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	441a      	add	r2, r3
 8006080:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006094:	b29b      	uxth	r3, r3
 8006096:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6a1a      	ldr	r2, [r3, #32]
 80060a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a8:	1ad2      	subs	r2, r2, r3
 80060aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 81c7 	beq.w	800646c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80060ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d177      	bne.n	80061ea <USB_EPStartXfer+0x2ce>
 80060fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006114:	b29b      	uxth	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	4413      	add	r3, r2
 800611c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800611e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	011a      	lsls	r2, r3, #4
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	4413      	add	r3, r2
 8006130:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006134:	627b      	str	r3, [r7, #36]	@ 0x24
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006140:	b29a      	uxth	r2, r3
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614a:	2b3e      	cmp	r3, #62	@ 0x3e
 800614c:	d921      	bls.n	8006192 <USB_EPStartXfer+0x276>
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <USB_EPStartXfer+0x252>
 8006164:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006168:	3b01      	subs	r3, #1
 800616a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29a      	uxth	r2, r3
 8006174:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006178:	b29b      	uxth	r3, r3
 800617a:	029b      	lsls	r3, r3, #10
 800617c:	b29b      	uxth	r3, r3
 800617e:	4313      	orrs	r3, r2
 8006180:	b29b      	uxth	r3, r3
 8006182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618a:	b29a      	uxth	r2, r3
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e050      	b.n	8006234 <USB_EPStartXfer+0x318>
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <USB_EPStartXfer+0x294>
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	e041      	b.n	8006234 <USB_EPStartXfer+0x318>
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <USB_EPStartXfer+0x2b4>
 80061c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80061ca:	3301      	adds	r3, #1
 80061cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80061da:	b29b      	uxth	r3, r3
 80061dc:	029b      	lsls	r3, r3, #10
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4313      	orrs	r3, r2
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	e024      	b.n	8006234 <USB_EPStartXfer+0x318>
 80061ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d11c      	bne.n	8006234 <USB_EPStartXfer+0x318>
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006208:	b29b      	uxth	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	4413      	add	r3, r2
 8006210:	633b      	str	r3, [r7, #48]	@ 0x30
 8006212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	011a      	lsls	r2, r3, #4
 8006220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006222:	4413      	add	r3, r2
 8006224:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622e:	b29a      	uxth	r2, r3
 8006230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006232:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	895b      	ldrh	r3, [r3, #10]
 8006240:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6959      	ldr	r1, [r3, #20]
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006254:	b29b      	uxth	r3, r3
 8006256:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800625a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800625e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006262:	6800      	ldr	r0, [r0, #0]
 8006264:	f001 fb49 	bl	80078fa <USB_WritePMA>
            ep->xfer_buff += len;
 8006268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006278:	441a      	add	r2, r3
 800627a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d90f      	bls.n	80062c2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80062a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a1a      	ldr	r2, [r3, #32]
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	621a      	str	r2, [r3, #32]
 80062c0:	e00e      	b.n	80062e0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80062c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80062d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2200      	movs	r2, #0
 80062de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d177      	bne.n	80063e0 <USB_EPStartXfer+0x4c4>
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800630a:	b29b      	uxth	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	4413      	add	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	011a      	lsls	r2, r3, #4
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	4413      	add	r3, r2
 8006326:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006336:	b29a      	uxth	r2, r3
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	801a      	strh	r2, [r3, #0]
 800633c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006340:	2b3e      	cmp	r3, #62	@ 0x3e
 8006342:	d921      	bls.n	8006388 <USB_EPStartXfer+0x46c>
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006352:	f003 031f 	and.w	r3, r3, #31
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <USB_EPStartXfer+0x448>
 800635a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800635e:	3b01      	subs	r3, #1
 8006360:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29a      	uxth	r2, r3
 800636a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800636e:	b29b      	uxth	r3, r3
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	b29b      	uxth	r3, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	b29b      	uxth	r3, r3
 8006378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800637c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006380:	b29a      	uxth	r2, r3
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	801a      	strh	r2, [r3, #0]
 8006386:	e056      	b.n	8006436 <USB_EPStartXfer+0x51a>
 8006388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <USB_EPStartXfer+0x48a>
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639e:	b29a      	uxth	r2, r3
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	e047      	b.n	8006436 <USB_EPStartXfer+0x51a>
 80063a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <USB_EPStartXfer+0x4aa>
 80063bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063c0:	3301      	adds	r3, #1
 80063c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	4313      	orrs	r3, r2
 80063d8:	b29a      	uxth	r2, r3
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	e02a      	b.n	8006436 <USB_EPStartXfer+0x51a>
 80063e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d122      	bne.n	8006436 <USB_EPStartXfer+0x51a>
 80063f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	623b      	str	r3, [r7, #32]
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800640a:	b29b      	uxth	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	4413      	add	r3, r2
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	011a      	lsls	r2, r3, #4
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	4413      	add	r3, r2
 8006426:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006430:	b29a      	uxth	r2, r3
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	891b      	ldrh	r3, [r3, #8]
 8006442:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6959      	ldr	r1, [r3, #20]
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006456:	b29b      	uxth	r3, r3
 8006458:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800645c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006460:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006464:	6800      	ldr	r0, [r0, #0]
 8006466:	f001 fa48 	bl	80078fa <USB_WritePMA>
 800646a:	e3ee      	b.n	8006c4a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d177      	bne.n	800656c <USB_EPStartXfer+0x650>
 800647c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006496:	b29b      	uxth	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800649c:	4413      	add	r3, r2
 800649e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	011a      	lsls	r2, r3, #4
 80064ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064b0:	4413      	add	r3, r2
 80064b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064c6:	801a      	strh	r2, [r3, #0]
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80064ce:	d921      	bls.n	8006514 <USB_EPStartXfer+0x5f8>
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <USB_EPStartXfer+0x5d4>
 80064e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064ea:	3b01      	subs	r3, #1
 80064ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	029b      	lsls	r3, r3, #10
 80064fe:	b29b      	uxth	r3, r3
 8006500:	4313      	orrs	r3, r2
 8006502:	b29b      	uxth	r3, r3
 8006504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650c:	b29a      	uxth	r2, r3
 800650e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	e056      	b.n	80065c2 <USB_EPStartXfer+0x6a6>
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <USB_EPStartXfer+0x616>
 800651c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652a:	b29a      	uxth	r2, r3
 800652c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e047      	b.n	80065c2 <USB_EPStartXfer+0x6a6>
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <USB_EPStartXfer+0x636>
 8006548:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800654c:	3301      	adds	r3, #1
 800654e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29a      	uxth	r2, r3
 8006558:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800655c:	b29b      	uxth	r3, r3
 800655e:	029b      	lsls	r3, r3, #10
 8006560:	b29b      	uxth	r3, r3
 8006562:	4313      	orrs	r3, r2
 8006564:	b29a      	uxth	r2, r3
 8006566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	e02a      	b.n	80065c2 <USB_EPStartXfer+0x6a6>
 800656c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d122      	bne.n	80065c2 <USB_EPStartXfer+0x6a6>
 800657c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	653b      	str	r3, [r7, #80]	@ 0x50
 8006588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006596:	b29b      	uxth	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800659c:	4413      	add	r3, r2
 800659e:	653b      	str	r3, [r7, #80]	@ 0x50
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	011a      	lsls	r2, r3, #4
 80065ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065bc:	b29a      	uxth	r2, r3
 80065be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	891b      	ldrh	r3, [r3, #8]
 80065ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6959      	ldr	r1, [r3, #20]
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065f0:	6800      	ldr	r0, [r0, #0]
 80065f2:	f001 f982 	bl	80078fa <USB_WritePMA>
            ep->xfer_buff += len;
 80065f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695a      	ldr	r2, [r3, #20]
 8006602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006606:	441a      	add	r2, r3
 8006608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6a1a      	ldr	r2, [r3, #32]
 8006620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	429a      	cmp	r2, r3
 800662e:	d90f      	bls.n	8006650 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6a1a      	ldr	r2, [r3, #32]
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006640:	1ad2      	subs	r2, r2, r3
 8006642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	621a      	str	r2, [r3, #32]
 800664e:	e00e      	b.n	800666e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2200      	movs	r2, #0
 800666c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800666e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	643b      	str	r3, [r7, #64]	@ 0x40
 800667a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d177      	bne.n	800677a <USB_EPStartXfer+0x85e>
 800668a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	4413      	add	r3, r2
 80066ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	011a      	lsls	r2, r3, #4
 80066bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066be:	4413      	add	r3, r2
 80066c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d4:	801a      	strh	r2, [r3, #0]
 80066d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066da:	2b3e      	cmp	r3, #62	@ 0x3e
 80066dc:	d921      	bls.n	8006722 <USB_EPStartXfer+0x806>
 80066de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d104      	bne.n	80066fe <USB_EPStartXfer+0x7e2>
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f8:	3b01      	subs	r3, #1
 80066fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29a      	uxth	r2, r3
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006708:	b29b      	uxth	r3, r3
 800670a:	029b      	lsls	r3, r3, #10
 800670c:	b29b      	uxth	r3, r3
 800670e:	4313      	orrs	r3, r2
 8006710:	b29b      	uxth	r3, r3
 8006712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800671a:	b29a      	uxth	r2, r3
 800671c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800671e:	801a      	strh	r2, [r3, #0]
 8006720:	e050      	b.n	80067c4 <USB_EPStartXfer+0x8a8>
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <USB_EPStartXfer+0x824>
 800672a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006738:	b29a      	uxth	r2, r3
 800673a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800673c:	801a      	strh	r2, [r3, #0]
 800673e:	e041      	b.n	80067c4 <USB_EPStartXfer+0x8a8>
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006744:	085b      	lsrs	r3, r3, #1
 8006746:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <USB_EPStartXfer+0x844>
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675a:	3301      	adds	r3, #1
 800675c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29a      	uxth	r2, r3
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676a:	b29b      	uxth	r3, r3
 800676c:	029b      	lsls	r3, r3, #10
 800676e:	b29b      	uxth	r3, r3
 8006770:	4313      	orrs	r3, r2
 8006772:	b29a      	uxth	r2, r3
 8006774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	e024      	b.n	80067c4 <USB_EPStartXfer+0x8a8>
 800677a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d11c      	bne.n	80067c4 <USB_EPStartXfer+0x8a8>
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006798:	b29b      	uxth	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800679e:	4413      	add	r3, r2
 80067a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80067a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	011a      	lsls	r2, r3, #4
 80067b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b2:	4413      	add	r3, r2
 80067b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067be:	b29a      	uxth	r2, r3
 80067c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	895b      	ldrh	r3, [r3, #10]
 80067d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6959      	ldr	r1, [r3, #20]
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067f2:	6800      	ldr	r0, [r0, #0]
 80067f4:	f001 f881 	bl	80078fa <USB_WritePMA>
 80067f8:	e227      	b.n	8006c4a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80067fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800680a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800682c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006830:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	441a      	add	r2, r3
 800684e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800685a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800685e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006862:	b29b      	uxth	r3, r3
 8006864:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006880:	b29b      	uxth	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006886:	4413      	add	r3, r2
 8006888:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800688a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	011a      	lsls	r2, r3, #4
 8006898:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800689a:	4413      	add	r3, r2
 800689c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	891b      	ldrh	r3, [r3, #8]
 80068b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6959      	ldr	r1, [r3, #20]
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068d2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068d6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068da:	6800      	ldr	r0, [r0, #0]
 80068dc:	f001 f80d 	bl	80078fa <USB_WritePMA>
 80068e0:	e1b3      	b.n	8006c4a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80068e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6a1a      	ldr	r2, [r3, #32]
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f2:	1ad2      	subs	r2, r2, r3
 80068f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80c6 	beq.w	8006ab4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	673b      	str	r3, [r7, #112]	@ 0x70
 8006934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d177      	bne.n	8006a34 <USB_EPStartXfer+0xb18>
 8006944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006954:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800695e:	b29b      	uxth	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006964:	4413      	add	r3, r2
 8006966:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	011a      	lsls	r2, r3, #4
 8006976:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006978:	4413      	add	r3, r2
 800697a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800697e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800698a:	b29a      	uxth	r2, r3
 800698c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800698e:	801a      	strh	r2, [r3, #0]
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006994:	2b3e      	cmp	r3, #62	@ 0x3e
 8006996:	d921      	bls.n	80069dc <USB_EPStartXfer+0xac0>
 8006998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d104      	bne.n	80069b8 <USB_EPStartXfer+0xa9c>
 80069ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80069b2:	3b01      	subs	r3, #1
 80069b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80069b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	029b      	lsls	r3, r3, #10
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	4313      	orrs	r3, r2
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e050      	b.n	8006a7e <USB_EPStartXfer+0xb62>
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <USB_EPStartXfer+0xade>
 80069e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	e041      	b.n	8006a7e <USB_EPStartXfer+0xb62>
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d004      	beq.n	8006a1a <USB_EPStartXfer+0xafe>
 8006a10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a14:	3301      	adds	r3, #1
 8006a16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	029b      	lsls	r3, r3, #10
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e024      	b.n	8006a7e <USB_EPStartXfer+0xb62>
 8006a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d11c      	bne.n	8006a7e <USB_EPStartXfer+0xb62>
 8006a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a58:	4413      	add	r3, r2
 8006a5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	011a      	lsls	r2, r3, #4
 8006a6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	895b      	ldrh	r3, [r3, #10]
 8006a8a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6959      	ldr	r1, [r3, #20]
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006aa4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006aa8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006aac:	6800      	ldr	r0, [r0, #0]
 8006aae:	f000 ff24 	bl	80078fa <USB_WritePMA>
 8006ab2:	e0ca      	b.n	8006c4a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d177      	bne.n	8006bb4 <USB_EPStartXfer+0xc98>
 8006ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ae4:	4413      	add	r3, r2
 8006ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	011a      	lsls	r2, r3, #4
 8006af6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006af8:	4413      	add	r3, r2
 8006afa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006afe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b14:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b16:	d921      	bls.n	8006b5c <USB_EPStartXfer+0xc40>
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d104      	bne.n	8006b38 <USB_EPStartXfer+0xc1c>
 8006b2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006b32:	3b01      	subs	r3, #1
 8006b34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	029b      	lsls	r3, r3, #10
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b58:	801a      	strh	r2, [r3, #0]
 8006b5a:	e05c      	b.n	8006c16 <USB_EPStartXfer+0xcfa>
 8006b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <USB_EPStartXfer+0xc5e>
 8006b64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	e04d      	b.n	8006c16 <USB_EPStartXfer+0xcfa>
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <USB_EPStartXfer+0xc7e>
 8006b90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006b94:	3301      	adds	r3, #1
 8006b96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	029b      	lsls	r3, r3, #10
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	4313      	orrs	r3, r2
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bb0:	801a      	strh	r2, [r3, #0]
 8006bb2:	e030      	b.n	8006c16 <USB_EPStartXfer+0xcfa>
 8006bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d128      	bne.n	8006c16 <USB_EPStartXfer+0xcfa>
 8006bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006be8:	4413      	add	r3, r2
 8006bea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	011a      	lsls	r2, r3, #4
 8006bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c00:	4413      	add	r3, r2
 8006c02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	891b      	ldrh	r3, [r3, #8]
 8006c22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6959      	ldr	r1, [r3, #20]
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c3c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c40:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c44:	6800      	ldr	r0, [r0, #0]
 8006c46:	f000 fe58 	bl	80078fa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c70:	817b      	strh	r3, [r7, #10]
 8006c72:	897b      	ldrh	r3, [r7, #10]
 8006c74:	f083 0310 	eor.w	r3, r3, #16
 8006c78:	817b      	strh	r3, [r7, #10]
 8006c7a:	897b      	ldrh	r3, [r7, #10]
 8006c7c:	f083 0320 	eor.w	r3, r3, #32
 8006c80:	817b      	strh	r3, [r7, #10]
 8006c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	441a      	add	r2, r3
 8006c9c:	897b      	ldrh	r3, [r7, #10]
 8006c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	8013      	strh	r3, [r2, #0]
 8006cb2:	f000 bcde 	b.w	8007672 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	7b1b      	ldrb	r3, [r3, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 80bb 	bne.w	8006e3e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699a      	ldr	r2, [r3, #24]
 8006cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d917      	bls.n	8006d14 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d04:	1ad2      	subs	r2, r2, r3
 8006d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	619a      	str	r2, [r3, #24]
 8006d12:	e00e      	b.n	8006d32 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d56:	4413      	add	r3, r2
 8006d58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	011a      	lsls	r2, r3, #4
 8006d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d6e:	4413      	add	r3, r2
 8006d70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d8a:	801a      	strh	r2, [r3, #0]
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d90:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d92:	d924      	bls.n	8006dde <USB_EPStartXfer+0xec2>
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <USB_EPStartXfer+0xe98>
 8006daa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006dae:	3b01      	subs	r3, #1
 8006db0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	029b      	lsls	r3, r3, #10
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	f000 bc10 	b.w	80075fe <USB_EPStartXfer+0x16e2>
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10c      	bne.n	8006e00 <USB_EPStartXfer+0xee4>
 8006de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dfc:	801a      	strh	r2, [r3, #0]
 8006dfe:	e3fe      	b.n	80075fe <USB_EPStartXfer+0x16e2>
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <USB_EPStartXfer+0xf04>
 8006e16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	029b      	lsls	r3, r3, #10
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	4313      	orrs	r3, r2
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	e3df      	b.n	80075fe <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	78db      	ldrb	r3, [r3, #3]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	f040 8218 	bne.w	8007280 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f040 809d 	bne.w	8006f9c <USB_EPStartXfer+0x1080>
 8006e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	461a      	mov	r2, r3
 8006e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e86:	4413      	add	r3, r2
 8006e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	011a      	lsls	r2, r3, #4
 8006e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eca:	d92b      	bls.n	8006f24 <USB_EPStartXfer+0x1008>
 8006ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 031f 	and.w	r3, r3, #31
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <USB_EPStartXfer+0xfe0>
 8006ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	029b      	lsls	r3, r3, #10
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e070      	b.n	8007006 <USB_EPStartXfer+0x10ea>
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10c      	bne.n	8006f4e <USB_EPStartXfer+0x1032>
 8006f34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e05b      	b.n	8007006 <USB_EPStartXfer+0x10ea>
 8006f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <USB_EPStartXfer+0x1062>
 8006f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f78:	3301      	adds	r3, #1
 8006f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	029b      	lsls	r3, r3, #10
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	4313      	orrs	r3, r2
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	e034      	b.n	8007006 <USB_EPStartXfer+0x10ea>
 8006f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d12c      	bne.n	8007006 <USB_EPStartXfer+0x10ea>
 8006fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	011a      	lsls	r2, r3, #4
 8006fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fe8:	4413      	add	r3, r2
 8006fea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 809d 	bne.w	8007160 <USB_EPStartXfer+0x1244>
 8007026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800704a:	4413      	add	r3, r2
 800704c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	011a      	lsls	r2, r3, #4
 800705e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007062:	4413      	add	r3, r2
 8007064:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800706c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007078:	b29a      	uxth	r2, r3
 800707a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800707e:	801a      	strh	r2, [r3, #0]
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b3e      	cmp	r3, #62	@ 0x3e
 800708e:	d92b      	bls.n	80070e8 <USB_EPStartXfer+0x11cc>
 8007090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d104      	bne.n	80070c0 <USB_EPStartXfer+0x11a4>
 80070b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ba:	3b01      	subs	r3, #1
 80070bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	029b      	lsls	r3, r3, #10
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	4313      	orrs	r3, r2
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070de:	b29a      	uxth	r2, r3
 80070e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070e4:	801a      	strh	r2, [r3, #0]
 80070e6:	e069      	b.n	80071bc <USB_EPStartXfer+0x12a0>
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10c      	bne.n	8007112 <USB_EPStartXfer+0x11f6>
 80070f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007108:	b29a      	uxth	r2, r3
 800710a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e054      	b.n	80071bc <USB_EPStartXfer+0x12a0>
 8007112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	085b      	lsrs	r3, r3, #1
 8007120:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <USB_EPStartXfer+0x1226>
 8007138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800713c:	3301      	adds	r3, #1
 800713e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007142:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29a      	uxth	r2, r3
 800714a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800714e:	b29b      	uxth	r3, r3
 8007150:	029b      	lsls	r3, r3, #10
 8007152:	b29b      	uxth	r3, r3
 8007154:	4313      	orrs	r3, r2
 8007156:	b29a      	uxth	r2, r3
 8007158:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800715c:	801a      	strh	r2, [r3, #0]
 800715e:	e02d      	b.n	80071bc <USB_EPStartXfer+0x12a0>
 8007160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	785b      	ldrb	r3, [r3, #1]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d125      	bne.n	80071bc <USB_EPStartXfer+0x12a0>
 8007170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800717e:	b29b      	uxth	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007186:	4413      	add	r3, r2
 8007188:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800718c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	011a      	lsls	r2, r3, #4
 800719a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800719e:	4413      	add	r3, r2
 80071a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071ba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 8218 	beq.w	80075fe <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80071ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80071f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <USB_EPStartXfer+0x12ea>
 80071fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80071fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10d      	bne.n	8007222 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007206:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800720a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800720e:	2b00      	cmp	r3, #0
 8007210:	f040 81f5 	bne.w	80075fe <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007214:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800721c:	2b00      	cmp	r3, #0
 800721e:	f040 81ee 	bne.w	80075fe <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007248:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800724c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	441a      	add	r2, r3
 8007266:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800726a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800726e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007276:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800727a:	b29b      	uxth	r3, r3
 800727c:	8013      	strh	r3, [r2, #0]
 800727e:	e1be      	b.n	80075fe <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	78db      	ldrb	r3, [r3, #3]
 800728c:	2b01      	cmp	r3, #1
 800728e:	f040 81b4 	bne.w	80075fa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d917      	bls.n	80072de <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80072ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80072be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699a      	ldr	r2, [r3, #24]
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	619a      	str	r2, [r3, #24]
 80072dc:	e00e      	b.n	80072fc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80072de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80072ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2200      	movs	r2, #0
 80072fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f040 8085 	bne.w	8007418 <USB_EPStartXfer+0x14fc>
 800730e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800731c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800732a:	b29b      	uxth	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007332:	4413      	add	r3, r2
 8007334:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	011a      	lsls	r2, r3, #4
 8007346:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800734a:	4413      	add	r3, r2
 800734c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007350:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007360:	b29a      	uxth	r2, r3
 8007362:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007366:	801a      	strh	r2, [r3, #0]
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736c:	2b3e      	cmp	r3, #62	@ 0x3e
 800736e:	d923      	bls.n	80073b8 <USB_EPStartXfer+0x149c>
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007374:	095b      	lsrs	r3, r3, #5
 8007376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <USB_EPStartXfer+0x1474>
 8007386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800738a:	3b01      	subs	r3, #1
 800738c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29a      	uxth	r2, r3
 8007398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800739c:	b29b      	uxth	r3, r3
 800739e:	029b      	lsls	r3, r3, #10
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	4313      	orrs	r3, r2
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	e060      	b.n	800747a <USB_EPStartXfer+0x155e>
 80073b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10c      	bne.n	80073da <USB_EPStartXfer+0x14be>
 80073c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	e04f      	b.n	800747a <USB_EPStartXfer+0x155e>
 80073da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d004      	beq.n	80073fa <USB_EPStartXfer+0x14de>
 80073f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073f4:	3301      	adds	r3, #1
 80073f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29a      	uxth	r2, r3
 8007402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007406:	b29b      	uxth	r3, r3
 8007408:	029b      	lsls	r3, r3, #10
 800740a:	b29b      	uxth	r3, r3
 800740c:	4313      	orrs	r3, r2
 800740e:	b29a      	uxth	r2, r3
 8007410:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	e030      	b.n	800747a <USB_EPStartXfer+0x155e>
 8007418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d128      	bne.n	800747a <USB_EPStartXfer+0x155e>
 8007428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007444:	b29b      	uxth	r3, r3
 8007446:	461a      	mov	r2, r3
 8007448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800744c:	4413      	add	r3, r2
 800744e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	011a      	lsls	r2, r3, #4
 8007460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007464:	4413      	add	r3, r2
 8007466:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800746a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007472:	b29a      	uxth	r2, r3
 8007474:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b00      	cmp	r3, #0
 8007496:	f040 8085 	bne.w	80075a4 <USB_EPStartXfer+0x1688>
 800749a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80074a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80074be:	4413      	add	r3, r2
 80074c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80074c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	011a      	lsls	r2, r3, #4
 80074d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80074d6:	4413      	add	r3, r2
 80074d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80074fa:	d923      	bls.n	8007544 <USB_EPStartXfer+0x1628>
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <USB_EPStartXfer+0x1600>
 8007512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007516:	3b01      	subs	r3, #1
 8007518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800751c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29a      	uxth	r2, r3
 8007524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007528:	b29b      	uxth	r3, r3
 800752a:	029b      	lsls	r3, r3, #10
 800752c:	b29b      	uxth	r3, r3
 800752e:	4313      	orrs	r3, r2
 8007530:	b29b      	uxth	r3, r3
 8007532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753a:	b29a      	uxth	r2, r3
 800753c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	e05c      	b.n	80075fe <USB_EPStartXfer+0x16e2>
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10c      	bne.n	8007566 <USB_EPStartXfer+0x164a>
 800754c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755c:	b29a      	uxth	r2, r3
 800755e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	e04b      	b.n	80075fe <USB_EPStartXfer+0x16e2>
 8007566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <USB_EPStartXfer+0x166a>
 800757c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007580:	3301      	adds	r3, #1
 8007582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29a      	uxth	r2, r3
 800758e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007592:	b29b      	uxth	r3, r3
 8007594:	029b      	lsls	r3, r3, #10
 8007596:	b29b      	uxth	r3, r3
 8007598:	4313      	orrs	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075a0:	801a      	strh	r2, [r3, #0]
 80075a2:	e02c      	b.n	80075fe <USB_EPStartXfer+0x16e2>
 80075a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d124      	bne.n	80075fe <USB_EPStartXfer+0x16e2>
 80075b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075ca:	4413      	add	r3, r2
 80075cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	011a      	lsls	r2, r3, #4
 80075de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075e2:	4413      	add	r3, r2
 80075e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	e001      	b.n	80075fe <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e03a      	b.n	8007674 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007624:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007628:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800762c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007630:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007634:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007638:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800763c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	441a      	add	r2, r3
 800765a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800765e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800766a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800766e:	b29b      	uxth	r3, r3
 8007670:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d020      	beq.n	80076d2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076a6:	81bb      	strh	r3, [r7, #12]
 80076a8:	89bb      	ldrh	r3, [r7, #12]
 80076aa:	f083 0310 	eor.w	r3, r3, #16
 80076ae:	81bb      	strh	r3, [r7, #12]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	441a      	add	r2, r3
 80076ba:	89bb      	ldrh	r3, [r7, #12]
 80076bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	8013      	strh	r3, [r2, #0]
 80076d0:	e01f      	b.n	8007712 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e8:	81fb      	strh	r3, [r7, #14]
 80076ea:	89fb      	ldrh	r3, [r7, #14]
 80076ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076f0:	81fb      	strh	r3, [r7, #14]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	441a      	add	r2, r3
 80076fc:	89fb      	ldrh	r3, [r7, #14]
 80076fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800770a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800770e:	b29b      	uxth	r3, r3
 8007710:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr

0800771e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800771e:	b480      	push	{r7}
 8007720:	b087      	sub	sp, #28
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	7b1b      	ldrb	r3, [r3, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f040 809d 	bne.w	800786c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d04c      	beq.n	80077d4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	823b      	strh	r3, [r7, #16]
 8007748:	8a3b      	ldrh	r3, [r7, #16]
 800774a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d01b      	beq.n	800778a <USB_EPClearStall+0x6c>
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007768:	81fb      	strh	r3, [r7, #14]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	441a      	add	r2, r3
 8007774:	89fb      	ldrh	r3, [r7, #14]
 8007776:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800777a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800777e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007782:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007786:	b29b      	uxth	r3, r3
 8007788:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	78db      	ldrb	r3, [r3, #3]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d06c      	beq.n	800786c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077a8:	81bb      	strh	r3, [r7, #12]
 80077aa:	89bb      	ldrh	r3, [r7, #12]
 80077ac:	f083 0320 	eor.w	r3, r3, #32
 80077b0:	81bb      	strh	r3, [r7, #12]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	441a      	add	r2, r3
 80077bc:	89bb      	ldrh	r3, [r7, #12]
 80077be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8013      	strh	r3, [r2, #0]
 80077d2:	e04b      	b.n	800786c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	82fb      	strh	r3, [r7, #22]
 80077e2:	8afb      	ldrh	r3, [r7, #22]
 80077e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01b      	beq.n	8007824 <USB_EPClearStall+0x106>
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007802:	82bb      	strh	r3, [r7, #20]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	441a      	add	r2, r3
 800780e:	8abb      	ldrh	r3, [r7, #20]
 8007810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007818:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800781c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007820:	b29b      	uxth	r3, r3
 8007822:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800783a:	827b      	strh	r3, [r7, #18]
 800783c:	8a7b      	ldrh	r3, [r7, #18]
 800783e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007842:	827b      	strh	r3, [r7, #18]
 8007844:	8a7b      	ldrh	r3, [r7, #18]
 8007846:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800784a:	827b      	strh	r3, [r7, #18]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	441a      	add	r2, r3
 8007856:	8a7b      	ldrh	r3, [r7, #18]
 8007858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800785c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007868:	b29b      	uxth	r3, r3
 800786a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr

08007878 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007884:	78fb      	ldrb	r3, [r7, #3]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d103      	bne.n	8007892 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2280      	movs	r2, #128	@ 0x80
 800788e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr

0800789e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr

080078b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr

080078c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80078d8:	68fb      	ldr	r3, [r7, #12]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	bc80      	pop	{r7}
 80078e2:	4770      	bx	lr

080078e4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr

080078fa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b08b      	sub	sp, #44	@ 0x2c
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	4611      	mov	r1, r2
 8007906:	461a      	mov	r2, r3
 8007908:	460b      	mov	r3, r1
 800790a:	80fb      	strh	r3, [r7, #6]
 800790c:	4613      	mov	r3, r2
 800790e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007910:	88bb      	ldrh	r3, [r7, #4]
 8007912:	3301      	adds	r3, #1
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007920:	88fb      	ldrh	r3, [r7, #6]
 8007922:	005a      	lsls	r2, r3, #1
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800792c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	627b      	str	r3, [r7, #36]	@ 0x24
 8007932:	e01f      	b.n	8007974 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	3301      	adds	r3, #1
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	b21b      	sxth	r3, r3
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	b21a      	sxth	r2, r3
 8007946:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800794a:	4313      	orrs	r3, r2
 800794c:	b21b      	sxth	r3, r3
 800794e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	8a7a      	ldrh	r2, [r7, #18]
 8007954:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	3302      	adds	r3, #2
 800795a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	3302      	adds	r3, #2
 8007960:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	3301      	adds	r3, #1
 8007966:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	3301      	adds	r3, #1
 800796c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	3b01      	subs	r3, #1
 8007972:	627b      	str	r3, [r7, #36]	@ 0x24
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1dc      	bne.n	8007934 <USB_WritePMA+0x3a>
  }
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	372c      	adds	r7, #44	@ 0x2c
 8007980:	46bd      	mov	sp, r7
 8007982:	bc80      	pop	{r7}
 8007984:	4770      	bx	lr

08007986 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007986:	b480      	push	{r7}
 8007988:	b08b      	sub	sp, #44	@ 0x2c
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	4611      	mov	r1, r2
 8007992:	461a      	mov	r2, r3
 8007994:	460b      	mov	r3, r1
 8007996:	80fb      	strh	r3, [r7, #6]
 8007998:	4613      	mov	r3, r2
 800799a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800799c:	88bb      	ldrh	r3, [r7, #4]
 800799e:	085b      	lsrs	r3, r3, #1
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	005a      	lsls	r2, r3, #1
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80079be:	e01b      	b.n	80079f8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	3302      	adds	r3, #2
 80079cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	3301      	adds	r3, #1
 80079da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	0a1b      	lsrs	r3, r3, #8
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	3301      	adds	r3, #1
 80079ea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	3302      	adds	r3, #2
 80079f0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	3b01      	subs	r3, #1
 80079f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e0      	bne.n	80079c0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80079fe:	88bb      	ldrh	r3, [r7, #4]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d007      	beq.n	8007a1a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	701a      	strb	r2, [r3, #0]
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	372c      	adds	r7, #44	@ 0x2c
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr

08007a24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	7c1b      	ldrb	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d115      	bne.n	8007a68 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a40:	2202      	movs	r2, #2
 8007a42:	2181      	movs	r1, #129	@ 0x81
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 fe2c 	bl	80096a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a54:	2202      	movs	r2, #2
 8007a56:	2101      	movs	r1, #1
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 fe22 	bl	80096a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007a66:	e012      	b.n	8007a8e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a68:	2340      	movs	r3, #64	@ 0x40
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	2181      	movs	r1, #129	@ 0x81
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 fe17 	bl	80096a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a7a:	2340      	movs	r3, #64	@ 0x40
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	2101      	movs	r1, #1
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 fe0e 	bl	80096a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a8e:	2308      	movs	r3, #8
 8007a90:	2203      	movs	r2, #3
 8007a92:	2182      	movs	r1, #130	@ 0x82
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 fe04 	bl	80096a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007aa0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007aa4:	f001 ff24 	bl	80098f0 <USBD_static_malloc>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d102      	bne.n	8007ac0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
 8007abe:	e026      	b.n	8007b0e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ac6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	7c1b      	ldrb	r3, [r3, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d109      	bne.n	8007afe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007af4:	2101      	movs	r1, #1
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fec3 	bl	8009882 <USBD_LL_PrepareReceive>
 8007afc:	e007      	b.n	8007b0e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b04:	2340      	movs	r3, #64	@ 0x40
 8007b06:	2101      	movs	r1, #1
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 feba 	bl	8009882 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b28:	2181      	movs	r1, #129	@ 0x81
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 fddf 	bl	80096ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b36:	2101      	movs	r1, #1
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 fdd8 	bl	80096ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b46:	2182      	movs	r1, #130	@ 0x82
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 fdd0 	bl	80096ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00e      	beq.n	8007b7c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 feca 	bl	8009908 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b086      	sub	sp, #24
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b96:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d039      	beq.n	8007c24 <USBD_CDC_Setup+0x9e>
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	d17f      	bne.n	8007cb4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	88db      	ldrh	r3, [r3, #6]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d029      	beq.n	8007c10 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	b25b      	sxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da11      	bge.n	8007bea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007bd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	88d2      	ldrh	r2, [r2, #6]
 8007bd8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007bda:	6939      	ldr	r1, [r7, #16]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	88db      	ldrh	r3, [r3, #6]
 8007be0:	461a      	mov	r2, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 f9d6 	bl	8008f94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007be8:	e06b      	b.n	8007cc2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	785a      	ldrb	r2, [r3, #1]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	88db      	ldrh	r3, [r3, #6]
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c00:	6939      	ldr	r1, [r7, #16]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	88db      	ldrh	r3, [r3, #6]
 8007c06:	461a      	mov	r2, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f9f1 	bl	8008ff0 <USBD_CtlPrepareRx>
      break;
 8007c0e:	e058      	b.n	8007cc2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	7850      	ldrb	r0, [r2, #1]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	4798      	blx	r3
      break;
 8007c22:	e04e      	b.n	8007cc2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	785b      	ldrb	r3, [r3, #1]
 8007c28:	2b0b      	cmp	r3, #11
 8007c2a:	d02e      	beq.n	8007c8a <USBD_CDC_Setup+0x104>
 8007c2c:	2b0b      	cmp	r3, #11
 8007c2e:	dc38      	bgt.n	8007ca2 <USBD_CDC_Setup+0x11c>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <USBD_CDC_Setup+0xb4>
 8007c34:	2b0a      	cmp	r3, #10
 8007c36:	d014      	beq.n	8007c62 <USBD_CDC_Setup+0xdc>
 8007c38:	e033      	b.n	8007ca2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d107      	bne.n	8007c54 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007c44:	f107 030c 	add.w	r3, r7, #12
 8007c48:	2202      	movs	r2, #2
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f9a1 	bl	8008f94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c52:	e02e      	b.n	8007cb2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f001 f932 	bl	8008ec0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8007c60:	e027      	b.n	8007cb2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d107      	bne.n	8007c7c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c6c:	f107 030f 	add.w	r3, r7, #15
 8007c70:	2201      	movs	r2, #1
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 f98d 	bl	8008f94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c7a:	e01a      	b.n	8007cb2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f001 f91e 	bl	8008ec0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c84:	2302      	movs	r3, #2
 8007c86:	75fb      	strb	r3, [r7, #23]
          break;
 8007c88:	e013      	b.n	8007cb2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d00d      	beq.n	8007cb0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 f912 	bl	8008ec0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ca0:	e006      	b.n	8007cb0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 f90b 	bl	8008ec0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007caa:	2302      	movs	r3, #2
 8007cac:	75fb      	strb	r3, [r7, #23]
          break;
 8007cae:	e000      	b.n	8007cb2 <USBD_CDC_Setup+0x12c>
          break;
 8007cb0:	bf00      	nop
      }
      break;
 8007cb2:	e006      	b.n	8007cc2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 f902 	bl	8008ec0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc0:	bf00      	nop
  }

  return ret;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cde:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ce6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d03a      	beq.n	8007d68 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	331c      	adds	r3, #28
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d029      	beq.n	8007d5c <USBD_CDC_DataIn+0x90>
 8007d08:	78fa      	ldrb	r2, [r7, #3]
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	440b      	add	r3, r1
 8007d16:	331c      	adds	r3, #28
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	78f9      	ldrb	r1, [r7, #3]
 8007d1c:	68b8      	ldr	r0, [r7, #8]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	4403      	add	r3, r0
 8007d28:	3320      	adds	r3, #32
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d30:	fb01 f303 	mul.w	r3, r1, r3
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d110      	bne.n	8007d5c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	331c      	adds	r3, #28
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d4e:	78f9      	ldrb	r1, [r7, #3]
 8007d50:	2300      	movs	r3, #0
 8007d52:	2200      	movs	r2, #0
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 fd71 	bl	800983c <USBD_LL_Transmit>
 8007d5a:	e003      	b.n	8007d64 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	e000      	b.n	8007d6a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007d68:	2302      	movs	r3, #2
  }
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fd9c 	bl	80098c8 <USBD_LL_GetRxDataSize>
 8007d90:	4602      	mov	r2, r0
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00d      	beq.n	8007dbe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007db6:	4611      	mov	r1, r2
 8007db8:	4798      	blx	r3

    return USBD_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e000      	b.n	8007dc0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007dbe:	2302      	movs	r3, #2
  }
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d014      	beq.n	8007e0c <USBD_CDC_EP0_RxReady+0x44>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007de8:	2bff      	cmp	r3, #255	@ 0xff
 8007dea:	d00f      	beq.n	8007e0c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007dfa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	22ff      	movs	r2, #255	@ 0xff
 8007e08:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2243      	movs	r2, #67	@ 0x43
 8007e24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007e26:	4b03      	ldr	r3, [pc, #12]	@ (8007e34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20000098 	.word	0x20000098

08007e38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2243      	movs	r2, #67	@ 0x43
 8007e44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007e46:	4b03      	ldr	r3, [pc, #12]	@ (8007e54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bc80      	pop	{r7}
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20000054 	.word	0x20000054

08007e58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2243      	movs	r2, #67	@ 0x43
 8007e64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007e66:	4b03      	ldr	r3, [pc, #12]	@ (8007e74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	200000dc 	.word	0x200000dc

08007e78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	220a      	movs	r2, #10
 8007e84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007e86:	4b03      	ldr	r3, [pc, #12]	@ (8007e94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20000010 	.word	0x20000010

08007e98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr

08007ec4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ed8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007ee2:	88fa      	ldrh	r2, [r7, #6]
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bc80      	pop	{r7}
 8007ef4:	4770      	bx	lr

08007ef6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f06:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr

08007f1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d017      	beq.n	8007f66 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	7c1b      	ldrb	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f48:	2101      	movs	r1, #1
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fc99 	bl	8009882 <USBD_LL_PrepareReceive>
 8007f50:	e007      	b.n	8007f62 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f58:	2340      	movs	r3, #64	@ 0x40
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fc90 	bl	8009882 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	e000      	b.n	8007f68 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007f66:	2302      	movs	r3, #2
  }
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f84:	2302      	movs	r3, #2
 8007f86:	e01a      	b.n	8007fbe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	79fa      	ldrb	r2, [r7, #7]
 8007fb4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f001 fafe 	bl	80095b8 <USBD_LL_Init>

  return USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d006      	beq.n	8007fe8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
 8007fe6:	e001      	b.n	8007fec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fe8:	2302      	movs	r3, #2
 8007fea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr

08007ff8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 fb33 	bl	800966c <USBD_LL_Start>

  return USBD_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr

08008024 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008030:	2302      	movs	r3, #2
 8008032:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00c      	beq.n	8008058 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	78fa      	ldrb	r2, [r7, #3]
 8008048:	4611      	mov	r1, r2
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	4611      	mov	r1, r2
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	4798      	blx	r3

  return USBD_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fed7 	bl	8008e4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80080ae:	461a      	mov	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80080bc:	f003 031f 	and.w	r3, r3, #31
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d016      	beq.n	80080f2 <USBD_LL_SetupStage+0x6a>
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d81c      	bhi.n	8008102 <USBD_LL_SetupStage+0x7a>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <USBD_LL_SetupStage+0x4a>
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d008      	beq.n	80080e2 <USBD_LL_SetupStage+0x5a>
 80080d0:	e017      	b.n	8008102 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f9ca 	bl	8008474 <USBD_StdDevReq>
      break;
 80080e0:	e01a      	b.n	8008118 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa2c 	bl	8008548 <USBD_StdItfReq>
      break;
 80080f0:	e012      	b.n	8008118 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fa6c 	bl	80085d8 <USBD_StdEPReq>
      break;
 8008100:	e00a      	b.n	8008118 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008108:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800810c:	b2db      	uxtb	r3, r3
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f001 fb0b 	bl	800972c <USBD_LL_StallEP>
      break;
 8008116:	bf00      	nop
  }

  return USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b086      	sub	sp, #24
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	460b      	mov	r3, r1
 800812c:	607a      	str	r2, [r7, #4]
 800812e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008130:	7afb      	ldrb	r3, [r7, #11]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d14b      	bne.n	80081ce <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800813c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008144:	2b03      	cmp	r3, #3
 8008146:	d134      	bne.n	80081b2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	429a      	cmp	r2, r3
 8008152:	d919      	bls.n	8008188 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	1ad2      	subs	r2, r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800816a:	429a      	cmp	r2, r3
 800816c:	d203      	bcs.n	8008176 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008172:	b29b      	uxth	r3, r3
 8008174:	e002      	b.n	800817c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800817a:	b29b      	uxth	r3, r3
 800817c:	461a      	mov	r2, r3
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 ff53 	bl	800902c <USBD_CtlContinueRx>
 8008186:	e038      	b.n	80081fa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800819a:	2b03      	cmp	r3, #3
 800819c:	d105      	bne.n	80081aa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 ff50 	bl	8009050 <USBD_CtlSendStatus>
 80081b0:	e023      	b.n	80081fa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80081b8:	2b05      	cmp	r3, #5
 80081ba:	d11e      	bne.n	80081fa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80081c4:	2100      	movs	r1, #0
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f001 fab0 	bl	800972c <USBD_LL_StallEP>
 80081cc:	e015      	b.n	80081fa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00d      	beq.n	80081f6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d108      	bne.n	80081f6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	7afa      	ldrb	r2, [r7, #11]
 80081ee:	4611      	mov	r1, r2
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	4798      	blx	r3
 80081f4:	e001      	b.n	80081fa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081f6:	2302      	movs	r3, #2
 80081f8:	e000      	b.n	80081fc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	460b      	mov	r3, r1
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008212:	7afb      	ldrb	r3, [r7, #11]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d17f      	bne.n	8008318 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3314      	adds	r3, #20
 800821c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008224:	2b02      	cmp	r3, #2
 8008226:	d15c      	bne.n	80082e2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	429a      	cmp	r2, r3
 8008232:	d915      	bls.n	8008260 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	1ad2      	subs	r2, r2, r3
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	b29b      	uxth	r3, r3
 8008248:	461a      	mov	r2, r3
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 febd 	bl	8008fcc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008252:	2300      	movs	r3, #0
 8008254:	2200      	movs	r2, #0
 8008256:	2100      	movs	r1, #0
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f001 fb12 	bl	8009882 <USBD_LL_PrepareReceive>
 800825e:	e04e      	b.n	80082fe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	6912      	ldr	r2, [r2, #16]
 8008268:	fbb3 f1f2 	udiv	r1, r3, r2
 800826c:	fb01 f202 	mul.w	r2, r1, r2
 8008270:	1a9b      	subs	r3, r3, r2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d11c      	bne.n	80082b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800827e:	429a      	cmp	r2, r3
 8008280:	d316      	bcc.n	80082b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800828c:	429a      	cmp	r2, r3
 800828e:	d20f      	bcs.n	80082b0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008290:	2200      	movs	r2, #0
 8008292:	2100      	movs	r1, #0
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 fe99 	bl	8008fcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082a2:	2300      	movs	r3, #0
 80082a4:	2200      	movs	r2, #0
 80082a6:	2100      	movs	r1, #0
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f001 faea 	bl	8009882 <USBD_LL_PrepareReceive>
 80082ae:	e026      	b.n	80082fe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d105      	bne.n	80082d2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082d2:	2180      	movs	r1, #128	@ 0x80
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f001 fa29 	bl	800972c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 fecb 	bl	8009076 <USBD_CtlReceiveStatus>
 80082e0:	e00d      	b.n	80082fe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d004      	beq.n	80082f6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082f6:	2180      	movs	r1, #128	@ 0x80
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f001 fa17 	bl	800972c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008304:	2b01      	cmp	r3, #1
 8008306:	d11d      	bne.n	8008344 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff fe81 	bl	8008010 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008316:	e015      	b.n	8008344 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00d      	beq.n	8008340 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800832a:	2b03      	cmp	r3, #3
 800832c:	d108      	bne.n	8008340 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	7afa      	ldrb	r2, [r7, #11]
 8008338:	4611      	mov	r1, r2
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	4798      	blx	r3
 800833e:	e001      	b.n	8008344 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008340:	2302      	movs	r3, #2
 8008342:	e000      	b.n	8008346 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3718      	adds	r7, #24
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008356:	2340      	movs	r3, #64	@ 0x40
 8008358:	2200      	movs	r2, #0
 800835a:	2100      	movs	r1, #0
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 f9a0 	bl	80096a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2240      	movs	r2, #64	@ 0x40
 800836e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008372:	2340      	movs	r3, #64	@ 0x40
 8008374:	2200      	movs	r2, #0
 8008376:	2180      	movs	r1, #128	@ 0x80
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 f992 	bl	80096a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2240      	movs	r2, #64	@ 0x40
 8008388:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d009      	beq.n	80083c6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6852      	ldr	r2, [r2, #4]
 80083be:	b2d2      	uxtb	r2, r2
 80083c0:	4611      	mov	r1, r2
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4798      	blx	r3
  }

  return USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	78fa      	ldrb	r2, [r7, #3]
 80083e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr

080083ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2204      	movs	r2, #4
 8008406:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	bc80      	pop	{r7}
 8008414:	4770      	bx	lr

08008416 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008424:	2b04      	cmp	r3, #4
 8008426:	d105      	bne.n	8008434 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	bc80      	pop	{r7}
 800843e:	4770      	bx	lr

08008440 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800844e:	2b03      	cmp	r3, #3
 8008450:	d10b      	bne.n	800846a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800848a:	2b40      	cmp	r3, #64	@ 0x40
 800848c:	d005      	beq.n	800849a <USBD_StdDevReq+0x26>
 800848e:	2b40      	cmp	r3, #64	@ 0x40
 8008490:	d84f      	bhi.n	8008532 <USBD_StdDevReq+0xbe>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d009      	beq.n	80084aa <USBD_StdDevReq+0x36>
 8008496:	2b20      	cmp	r3, #32
 8008498:	d14b      	bne.n	8008532 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	4798      	blx	r3
      break;
 80084a8:	e048      	b.n	800853c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	2b09      	cmp	r3, #9
 80084b0:	d839      	bhi.n	8008526 <USBD_StdDevReq+0xb2>
 80084b2:	a201      	add	r2, pc, #4	@ (adr r2, 80084b8 <USBD_StdDevReq+0x44>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	08008509 	.word	0x08008509
 80084bc:	0800851d 	.word	0x0800851d
 80084c0:	08008527 	.word	0x08008527
 80084c4:	08008513 	.word	0x08008513
 80084c8:	08008527 	.word	0x08008527
 80084cc:	080084eb 	.word	0x080084eb
 80084d0:	080084e1 	.word	0x080084e1
 80084d4:	08008527 	.word	0x08008527
 80084d8:	080084ff 	.word	0x080084ff
 80084dc:	080084f5 	.word	0x080084f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f9dc 	bl	80088a0 <USBD_GetDescriptor>
          break;
 80084e8:	e022      	b.n	8008530 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fb3f 	bl	8008b70 <USBD_SetAddress>
          break;
 80084f2:	e01d      	b.n	8008530 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fb7e 	bl	8008bf8 <USBD_SetConfig>
          break;
 80084fc:	e018      	b.n	8008530 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fc07 	bl	8008d14 <USBD_GetConfig>
          break;
 8008506:	e013      	b.n	8008530 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fc37 	bl	8008d7e <USBD_GetStatus>
          break;
 8008510:	e00e      	b.n	8008530 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fc65 	bl	8008de4 <USBD_SetFeature>
          break;
 800851a:	e009      	b.n	8008530 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fc74 	bl	8008e0c <USBD_ClrFeature>
          break;
 8008524:	e004      	b.n	8008530 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fcc9 	bl	8008ec0 <USBD_CtlError>
          break;
 800852e:	bf00      	nop
      }
      break;
 8008530:	e004      	b.n	800853c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fcc3 	bl	8008ec0 <USBD_CtlError>
      break;
 800853a:	bf00      	nop
  }

  return ret;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop

08008548 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800855e:	2b40      	cmp	r3, #64	@ 0x40
 8008560:	d005      	beq.n	800856e <USBD_StdItfReq+0x26>
 8008562:	2b40      	cmp	r3, #64	@ 0x40
 8008564:	d82e      	bhi.n	80085c4 <USBD_StdItfReq+0x7c>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <USBD_StdItfReq+0x26>
 800856a:	2b20      	cmp	r3, #32
 800856c:	d12a      	bne.n	80085c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008574:	3b01      	subs	r3, #1
 8008576:	2b02      	cmp	r3, #2
 8008578:	d81d      	bhi.n	80085b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	889b      	ldrh	r3, [r3, #4]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b01      	cmp	r3, #1
 8008582:	d813      	bhi.n	80085ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	88db      	ldrh	r3, [r3, #6]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d110      	bne.n	80085c0 <USBD_StdItfReq+0x78>
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10d      	bne.n	80085c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fd53 	bl	8009050 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085aa:	e009      	b.n	80085c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fc86 	bl	8008ec0 <USBD_CtlError>
          break;
 80085b4:	e004      	b.n	80085c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fc81 	bl	8008ec0 <USBD_CtlError>
          break;
 80085be:	e000      	b.n	80085c2 <USBD_StdItfReq+0x7a>
          break;
 80085c0:	bf00      	nop
      }
      break;
 80085c2:	e004      	b.n	80085ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fc7a 	bl	8008ec0 <USBD_CtlError>
      break;
 80085cc:	bf00      	nop
  }

  return USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	889b      	ldrh	r3, [r3, #4]
 80085ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085f4:	2b40      	cmp	r3, #64	@ 0x40
 80085f6:	d007      	beq.n	8008608 <USBD_StdEPReq+0x30>
 80085f8:	2b40      	cmp	r3, #64	@ 0x40
 80085fa:	f200 8146 	bhi.w	800888a <USBD_StdEPReq+0x2b2>
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <USBD_StdEPReq+0x40>
 8008602:	2b20      	cmp	r3, #32
 8008604:	f040 8141 	bne.w	800888a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
      break;
 8008616:	e13d      	b.n	8008894 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008620:	2b20      	cmp	r3, #32
 8008622:	d10a      	bne.n	800863a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	4798      	blx	r3
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	e12d      	b.n	8008896 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	2b03      	cmp	r3, #3
 8008640:	d007      	beq.n	8008652 <USBD_StdEPReq+0x7a>
 8008642:	2b03      	cmp	r3, #3
 8008644:	f300 811b 	bgt.w	800887e <USBD_StdEPReq+0x2a6>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d072      	beq.n	8008732 <USBD_StdEPReq+0x15a>
 800864c:	2b01      	cmp	r3, #1
 800864e:	d03a      	beq.n	80086c6 <USBD_StdEPReq+0xee>
 8008650:	e115      	b.n	800887e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008658:	2b02      	cmp	r3, #2
 800865a:	d002      	beq.n	8008662 <USBD_StdEPReq+0x8a>
 800865c:	2b03      	cmp	r3, #3
 800865e:	d015      	beq.n	800868c <USBD_StdEPReq+0xb4>
 8008660:	e02b      	b.n	80086ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00c      	beq.n	8008682 <USBD_StdEPReq+0xaa>
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	2b80      	cmp	r3, #128	@ 0x80
 800866c:	d009      	beq.n	8008682 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 f85a 	bl	800972c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008678:	2180      	movs	r1, #128	@ 0x80
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 f856 	bl	800972c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008680:	e020      	b.n	80086c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fc1b 	bl	8008ec0 <USBD_CtlError>
              break;
 800868a:	e01b      	b.n	80086c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	885b      	ldrh	r3, [r3, #2]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10e      	bne.n	80086b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00b      	beq.n	80086b2 <USBD_StdEPReq+0xda>
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	2b80      	cmp	r3, #128	@ 0x80
 800869e:	d008      	beq.n	80086b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	88db      	ldrh	r3, [r3, #6]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d104      	bne.n	80086b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f001 f83d 	bl	800972c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fccc 	bl	8009050 <USBD_CtlSendStatus>

              break;
 80086b8:	e004      	b.n	80086c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fbff 	bl	8008ec0 <USBD_CtlError>
              break;
 80086c2:	bf00      	nop
          }
          break;
 80086c4:	e0e0      	b.n	8008888 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d002      	beq.n	80086d6 <USBD_StdEPReq+0xfe>
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d015      	beq.n	8008700 <USBD_StdEPReq+0x128>
 80086d4:	e026      	b.n	8008724 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00c      	beq.n	80086f6 <USBD_StdEPReq+0x11e>
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	2b80      	cmp	r3, #128	@ 0x80
 80086e0:	d009      	beq.n	80086f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f001 f820 	bl	800972c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086ec:	2180      	movs	r1, #128	@ 0x80
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 f81c 	bl	800972c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086f4:	e01c      	b.n	8008730 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fbe1 	bl	8008ec0 <USBD_CtlError>
              break;
 80086fe:	e017      	b.n	8008730 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	885b      	ldrh	r3, [r3, #2]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d112      	bne.n	800872e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800870e:	2b00      	cmp	r3, #0
 8008710:	d004      	beq.n	800871c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 f827 	bl	800976a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fc97 	bl	8009050 <USBD_CtlSendStatus>
              }
              break;
 8008722:	e004      	b.n	800872e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fbca 	bl	8008ec0 <USBD_CtlError>
              break;
 800872c:	e000      	b.n	8008730 <USBD_StdEPReq+0x158>
              break;
 800872e:	bf00      	nop
          }
          break;
 8008730:	e0aa      	b.n	8008888 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008738:	2b02      	cmp	r3, #2
 800873a:	d002      	beq.n	8008742 <USBD_StdEPReq+0x16a>
 800873c:	2b03      	cmp	r3, #3
 800873e:	d032      	beq.n	80087a6 <USBD_StdEPReq+0x1ce>
 8008740:	e097      	b.n	8008872 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d007      	beq.n	8008758 <USBD_StdEPReq+0x180>
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	2b80      	cmp	r3, #128	@ 0x80
 800874c:	d004      	beq.n	8008758 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fbb5 	bl	8008ec0 <USBD_CtlError>
                break;
 8008756:	e091      	b.n	800887c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800875c:	2b00      	cmp	r3, #0
 800875e:	da0b      	bge.n	8008778 <USBD_StdEPReq+0x1a0>
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	3310      	adds	r3, #16
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	4413      	add	r3, r2
 8008774:	3304      	adds	r3, #4
 8008776:	e00b      	b.n	8008790 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	4413      	add	r3, r2
 800878e:	3304      	adds	r3, #4
 8008790:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2202      	movs	r2, #2
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fbf8 	bl	8008f94 <USBD_CtlSendData>
              break;
 80087a4:	e06a      	b.n	800887c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	da11      	bge.n	80087d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
 80087b0:	f003 020f 	and.w	r2, r3, #15
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	440b      	add	r3, r1
 80087c0:	3318      	adds	r3, #24
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d117      	bne.n	80087f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fb78 	bl	8008ec0 <USBD_CtlError>
                  break;
 80087d0:	e054      	b.n	800887c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	f003 020f 	and.w	r2, r3, #15
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	440b      	add	r3, r1
 80087e4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fb65 	bl	8008ec0 <USBD_CtlError>
                  break;
 80087f6:	e041      	b.n	800887c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	da0b      	bge.n	8008818 <USBD_StdEPReq+0x240>
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	3310      	adds	r3, #16
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	4413      	add	r3, r2
 8008814:	3304      	adds	r3, #4
 8008816:	e00b      	b.n	8008830 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	4413      	add	r3, r2
 800882e:	3304      	adds	r3, #4
 8008830:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <USBD_StdEPReq+0x266>
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	2b80      	cmp	r3, #128	@ 0x80
 800883c:	d103      	bne.n	8008846 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	e00e      	b.n	8008864 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 ffac 	bl	80097a8 <USBD_LL_IsStallEP>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2201      	movs	r2, #1
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	e002      	b.n	8008864 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2202      	movs	r2, #2
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fb92 	bl	8008f94 <USBD_CtlSendData>
              break;
 8008870:	e004      	b.n	800887c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fb23 	bl	8008ec0 <USBD_CtlError>
              break;
 800887a:	bf00      	nop
          }
          break;
 800887c:	e004      	b.n	8008888 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fb1d 	bl	8008ec0 <USBD_CtlError>
          break;
 8008886:	bf00      	nop
      }
      break;
 8008888:	e004      	b.n	8008894 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fb17 	bl	8008ec0 <USBD_CtlError>
      break;
 8008892:	bf00      	nop
  }

  return ret;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088aa:	2300      	movs	r3, #0
 80088ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	885b      	ldrh	r3, [r3, #2]
 80088ba:	0a1b      	lsrs	r3, r3, #8
 80088bc:	b29b      	uxth	r3, r3
 80088be:	3b01      	subs	r3, #1
 80088c0:	2b06      	cmp	r3, #6
 80088c2:	f200 8128 	bhi.w	8008b16 <USBD_GetDescriptor+0x276>
 80088c6:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <USBD_GetDescriptor+0x2c>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088e9 	.word	0x080088e9
 80088d0:	08008901 	.word	0x08008901
 80088d4:	08008941 	.word	0x08008941
 80088d8:	08008b17 	.word	0x08008b17
 80088dc:	08008b17 	.word	0x08008b17
 80088e0:	08008ab7 	.word	0x08008ab7
 80088e4:	08008ae3 	.word	0x08008ae3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	7c12      	ldrb	r2, [r2, #16]
 80088f4:	f107 0108 	add.w	r1, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
      break;
 80088fe:	e112      	b.n	8008b26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7c1b      	ldrb	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10d      	bne.n	8008924 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800890e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008910:	f107 0208 	add.w	r2, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008922:	e100      	b.n	8008b26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892c:	f107 0208 	add.w	r2, r7, #8
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3301      	adds	r3, #1
 800893a:	2202      	movs	r2, #2
 800893c:	701a      	strb	r2, [r3, #0]
      break;
 800893e:	e0f2      	b.n	8008b26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	885b      	ldrh	r3, [r3, #2]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b05      	cmp	r3, #5
 8008948:	f200 80ac 	bhi.w	8008aa4 <USBD_GetDescriptor+0x204>
 800894c:	a201      	add	r2, pc, #4	@ (adr r2, 8008954 <USBD_GetDescriptor+0xb4>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	0800896d 	.word	0x0800896d
 8008958:	080089a1 	.word	0x080089a1
 800895c:	080089d5 	.word	0x080089d5
 8008960:	08008a09 	.word	0x08008a09
 8008964:	08008a3d 	.word	0x08008a3d
 8008968:	08008a71 	.word	0x08008a71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	7c12      	ldrb	r2, [r2, #16]
 8008984:	f107 0108 	add.w	r1, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898e:	e091      	b.n	8008ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa94 	bl	8008ec0 <USBD_CtlError>
            err++;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	3301      	adds	r3, #1
 800899c:	72fb      	strb	r3, [r7, #11]
          break;
 800899e:	e089      	b.n	8008ab4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00b      	beq.n	80089c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	7c12      	ldrb	r2, [r2, #16]
 80089b8:	f107 0108 	add.w	r1, r7, #8
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
 80089c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c2:	e077      	b.n	8008ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa7a 	bl	8008ec0 <USBD_CtlError>
            err++;
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	3301      	adds	r3, #1
 80089d0:	72fb      	strb	r3, [r7, #11]
          break;
 80089d2:	e06f      	b.n	8008ab4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	7c12      	ldrb	r2, [r2, #16]
 80089ec:	f107 0108 	add.w	r1, r7, #8
 80089f0:	4610      	mov	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f6:	e05d      	b.n	8008ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa60 	bl	8008ec0 <USBD_CtlError>
            err++;
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	3301      	adds	r3, #1
 8008a04:	72fb      	strb	r3, [r7, #11]
          break;
 8008a06:	e055      	b.n	8008ab4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	7c12      	ldrb	r2, [r2, #16]
 8008a20:	f107 0108 	add.w	r1, r7, #8
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2a:	e043      	b.n	8008ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa46 	bl	8008ec0 <USBD_CtlError>
            err++;
 8008a34:	7afb      	ldrb	r3, [r7, #11]
 8008a36:	3301      	adds	r3, #1
 8008a38:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3a:	e03b      	b.n	8008ab4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	7c12      	ldrb	r2, [r2, #16]
 8008a54:	f107 0108 	add.w	r1, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5e:	e029      	b.n	8008ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa2c 	bl	8008ec0 <USBD_CtlError>
            err++;
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6e:	e021      	b.n	8008ab4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	7c12      	ldrb	r2, [r2, #16]
 8008a88:	f107 0108 	add.w	r1, r7, #8
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
 8008a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a92:	e00f      	b.n	8008ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa12 	bl	8008ec0 <USBD_CtlError>
            err++;
 8008a9c:	7afb      	ldrb	r3, [r7, #11]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8008aa2:	e007      	b.n	8008ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa0a 	bl	8008ec0 <USBD_CtlError>
          err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008ab2:	e038      	b.n	8008b26 <USBD_GetDescriptor+0x286>
 8008ab4:	e037      	b.n	8008b26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7c1b      	ldrb	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d109      	bne.n	8008ad2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac6:	f107 0208 	add.w	r2, r7, #8
 8008aca:	4610      	mov	r0, r2
 8008acc:	4798      	blx	r3
 8008ace:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad0:	e029      	b.n	8008b26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f9f3 	bl	8008ec0 <USBD_CtlError>
        err++;
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	3301      	adds	r3, #1
 8008ade:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae0:	e021      	b.n	8008b26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	7c1b      	ldrb	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10d      	bne.n	8008b06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af2:	f107 0208 	add.w	r2, r7, #8
 8008af6:	4610      	mov	r0, r2
 8008af8:	4798      	blx	r3
 8008afa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	2207      	movs	r2, #7
 8008b02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b04:	e00f      	b.n	8008b26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f9d9 	bl	8008ec0 <USBD_CtlError>
        err++;
 8008b0e:	7afb      	ldrb	r3, [r7, #11]
 8008b10:	3301      	adds	r3, #1
 8008b12:	72fb      	strb	r3, [r7, #11]
      break;
 8008b14:	e007      	b.n	8008b26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f9d1 	bl	8008ec0 <USBD_CtlError>
      err++;
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
 8008b20:	3301      	adds	r3, #1
 8008b22:	72fb      	strb	r3, [r7, #11]
      break;
 8008b24:	bf00      	nop
  }

  if (err != 0U)
 8008b26:	7afb      	ldrb	r3, [r7, #11]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d11c      	bne.n	8008b66 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b2c:	893b      	ldrh	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d011      	beq.n	8008b56 <USBD_GetDescriptor+0x2b6>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	88db      	ldrh	r3, [r3, #6]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00d      	beq.n	8008b56 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	88da      	ldrh	r2, [r3, #6]
 8008b3e:	893b      	ldrh	r3, [r7, #8]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	bf28      	it	cs
 8008b44:	4613      	movcs	r3, r2
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b4a:	893b      	ldrh	r3, [r7, #8]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	68f9      	ldr	r1, [r7, #12]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fa1f 	bl	8008f94 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	88db      	ldrh	r3, [r3, #6]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d104      	bne.n	8008b68 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fa76 	bl	8009050 <USBD_CtlSendStatus>
 8008b64:	e000      	b.n	8008b68 <USBD_GetDescriptor+0x2c8>
    return;
 8008b66:	bf00      	nop
    }
  }
}
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop

08008b70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	889b      	ldrh	r3, [r3, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d130      	bne.n	8008be4 <USBD_SetAddress+0x74>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	88db      	ldrh	r3, [r3, #6]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d12c      	bne.n	8008be4 <USBD_SetAddress+0x74>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	885b      	ldrh	r3, [r3, #2]
 8008b8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b90:	d828      	bhi.n	8008be4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	885b      	ldrh	r3, [r3, #2]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d104      	bne.n	8008bb2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f988 	bl	8008ec0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb0:	e01d      	b.n	8008bee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7bfa      	ldrb	r2, [r7, #15]
 8008bb6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fe1d 	bl	80097fe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fa43 	bl	8009050 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd8:	e009      	b.n	8008bee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be2:	e004      	b.n	8008bee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f96a 	bl	8008ec0 <USBD_CtlError>
  }
}
 8008bec:	bf00      	nop
 8008bee:	bf00      	nop
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	885b      	ldrh	r3, [r3, #2]
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	4b41      	ldr	r3, [pc, #260]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008c0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c0c:	4b40      	ldr	r3, [pc, #256]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d904      	bls.n	8008c1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f952 	bl	8008ec0 <USBD_CtlError>
 8008c1c:	e075      	b.n	8008d0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d002      	beq.n	8008c2e <USBD_SetConfig+0x36>
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d023      	beq.n	8008c74 <USBD_SetConfig+0x7c>
 8008c2c:	e062      	b.n	8008cf4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c2e:	4b38      	ldr	r3, [pc, #224]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d01a      	beq.n	8008c6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c36:	4b36      	ldr	r3, [pc, #216]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2203      	movs	r2, #3
 8008c44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c48:	4b31      	ldr	r3, [pc, #196]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff f9e8 	bl	8008024 <USBD_SetClassConfig>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d104      	bne.n	8008c64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f92f 	bl	8008ec0 <USBD_CtlError>
            return;
 8008c62:	e052      	b.n	8008d0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f9f3 	bl	8009050 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c6a:	e04e      	b.n	8008d0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f9ef 	bl	8009050 <USBD_CtlSendStatus>
        break;
 8008c72:	e04a      	b.n	8008d0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c74:	4b26      	ldr	r3, [pc, #152]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d112      	bne.n	8008ca2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008c84:	4b22      	ldr	r3, [pc, #136]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c8e:	4b20      	ldr	r3, [pc, #128]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff f9e4 	bl	8008062 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f9d8 	bl	8009050 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ca0:	e033      	b.n	8008d0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d01d      	beq.n	8008cec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff f9d2 	bl	8008062 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008cbe:	4b14      	ldr	r3, [pc, #80]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008cc8:	4b11      	ldr	r3, [pc, #68]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7ff f9a8 	bl	8008024 <USBD_SetClassConfig>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d104      	bne.n	8008ce4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f8ef 	bl	8008ec0 <USBD_CtlError>
            return;
 8008ce2:	e012      	b.n	8008d0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f9b3 	bl	8009050 <USBD_CtlSendStatus>
        break;
 8008cea:	e00e      	b.n	8008d0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f9af 	bl	8009050 <USBD_CtlSendStatus>
        break;
 8008cf2:	e00a      	b.n	8008d0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f8e2 	bl	8008ec0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008cfc:	4b04      	ldr	r3, [pc, #16]	@ (8008d10 <USBD_SetConfig+0x118>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff f9ad 	bl	8008062 <USBD_ClrClassConfig>
        break;
 8008d08:	bf00      	nop
    }
  }
}
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000414 	.word	0x20000414

08008d14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	88db      	ldrh	r3, [r3, #6]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d004      	beq.n	8008d30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f8c9 	bl	8008ec0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d2e:	e022      	b.n	8008d76 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	dc02      	bgt.n	8008d40 <USBD_GetConfig+0x2c>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dc03      	bgt.n	8008d46 <USBD_GetConfig+0x32>
 8008d3e:	e015      	b.n	8008d6c <USBD_GetConfig+0x58>
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d00b      	beq.n	8008d5c <USBD_GetConfig+0x48>
 8008d44:	e012      	b.n	8008d6c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3308      	adds	r3, #8
 8008d50:	2201      	movs	r2, #1
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f91d 	bl	8008f94 <USBD_CtlSendData>
        break;
 8008d5a:	e00c      	b.n	8008d76 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	3304      	adds	r3, #4
 8008d60:	2201      	movs	r2, #1
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f915 	bl	8008f94 <USBD_CtlSendData>
        break;
 8008d6a:	e004      	b.n	8008d76 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f8a6 	bl	8008ec0 <USBD_CtlError>
        break;
 8008d74:	bf00      	nop
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d81e      	bhi.n	8008dd2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	88db      	ldrh	r3, [r3, #6]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d004      	beq.n	8008da6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f88e 	bl	8008ec0 <USBD_CtlError>
        break;
 8008da4:	e01a      	b.n	8008ddc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	f043 0202 	orr.w	r2, r3, #2
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	330c      	adds	r3, #12
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f8e2 	bl	8008f94 <USBD_CtlSendData>
      break;
 8008dd0:	e004      	b.n	8008ddc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f873 	bl	8008ec0 <USBD_CtlError>
      break;
 8008dda:	bf00      	nop
  }
}
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	885b      	ldrh	r3, [r3, #2]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d106      	bne.n	8008e04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f926 	bl	8009050 <USBD_CtlSendStatus>
  }
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d80b      	bhi.n	8008e3a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	885b      	ldrh	r3, [r3, #2]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d10c      	bne.n	8008e44 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f90c 	bl	8009050 <USBD_CtlSendStatus>
      }
      break;
 8008e38:	e004      	b.n	8008e44 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f83f 	bl	8008ec0 <USBD_CtlError>
      break;
 8008e42:	e000      	b.n	8008e46 <USBD_ClrFeature+0x3a>
      break;
 8008e44:	bf00      	nop
  }
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	785a      	ldrb	r2, [r3, #1]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	3302      	adds	r3, #2
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	3303      	adds	r3, #3
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	021b      	lsls	r3, r3, #8
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	4413      	add	r3, r2
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	3304      	adds	r3, #4
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	3305      	adds	r3, #5
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4413      	add	r3, r2
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	3306      	adds	r3, #6
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	3307      	adds	r3, #7
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	021b      	lsls	r3, r3, #8
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	4413      	add	r3, r2
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	80da      	strh	r2, [r3, #6]

}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bc80      	pop	{r7}
 8008ebe:	4770      	bx	lr

08008ec0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008eca:	2180      	movs	r1, #128	@ 0x80
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fc2d 	bl	800972c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fc29 	bl	800972c <USBD_LL_StallEP>
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b086      	sub	sp, #24
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d032      	beq.n	8008f5e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 f834 	bl	8008f66 <USBD_GetLen>
 8008efe:	4603      	mov	r3, r0
 8008f00:	3301      	adds	r3, #1
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	75fa      	strb	r2, [r7, #23]
 8008f12:	461a      	mov	r2, r3
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	4413      	add	r3, r2
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	7812      	ldrb	r2, [r2, #0]
 8008f1c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	75fa      	strb	r2, [r7, #23]
 8008f24:	461a      	mov	r2, r3
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	4413      	add	r3, r2
 8008f2a:	2203      	movs	r2, #3
 8008f2c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f2e:	e012      	b.n	8008f56 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	60fa      	str	r2, [r7, #12]
 8008f36:	7dfa      	ldrb	r2, [r7, #23]
 8008f38:	1c51      	adds	r1, r2, #1
 8008f3a:	75f9      	strb	r1, [r7, #23]
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	440a      	add	r2, r1
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	75fa      	strb	r2, [r7, #23]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	2200      	movs	r2, #0
 8008f54:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e8      	bne.n	8008f30 <USBD_GetString+0x4e>
    }
  }
}
 8008f5e:	bf00      	nop
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f72:	e005      	b.n	8008f80 <USBD_GetLen+0x1a>
  {
    len++;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	3301      	adds	r3, #1
 8008f78:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1f5      	bne.n	8008f74 <USBD_GetLen+0xe>
  }

  return len;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bc80      	pop	{r7}
 8008f92:	4770      	bx	lr

08008f94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008fb0:	88fa      	ldrh	r2, [r7, #6]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb6:	88fb      	ldrh	r3, [r7, #6]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	2100      	movs	r1, #0
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 fc3d 	bl	800983c <USBD_LL_Transmit>

  return USBD_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	2100      	movs	r1, #0
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 fc2b 	bl	800983c <USBD_LL_Transmit>

  return USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2203      	movs	r2, #3
 8009002:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009006:	88fa      	ldrh	r2, [r7, #6]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800900e:	88fa      	ldrh	r2, [r7, #6]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009016:	88fb      	ldrh	r3, [r7, #6]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	2100      	movs	r1, #0
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 fc30 	bl	8009882 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4613      	mov	r3, r2
 8009038:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800903a:	88fb      	ldrh	r3, [r7, #6]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	2100      	movs	r1, #0
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 fc1e 	bl	8009882 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2204      	movs	r2, #4
 800905c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009060:	2300      	movs	r3, #0
 8009062:	2200      	movs	r2, #0
 8009064:	2100      	movs	r1, #0
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fbe8 	bl	800983c <USBD_LL_Transmit>

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b082      	sub	sp, #8
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2205      	movs	r2, #5
 8009082:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009086:	2300      	movs	r3, #0
 8009088:	2200      	movs	r2, #0
 800908a:	2100      	movs	r1, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fbf8 	bl	8009882 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090a0:	2200      	movs	r2, #0
 80090a2:	4912      	ldr	r1, [pc, #72]	@ (80090ec <MX_USB_DEVICE_Init+0x50>)
 80090a4:	4812      	ldr	r0, [pc, #72]	@ (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090a6:	f7fe ff63 	bl	8007f70 <USBD_Init>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090b0:	f7f8 f8ea 	bl	8001288 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090b4:	490f      	ldr	r1, [pc, #60]	@ (80090f4 <MX_USB_DEVICE_Init+0x58>)
 80090b6:	480e      	ldr	r0, [pc, #56]	@ (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090b8:	f7fe ff85 	bl	8007fc6 <USBD_RegisterClass>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090c2:	f7f8 f8e1 	bl	8001288 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090c6:	490c      	ldr	r1, [pc, #48]	@ (80090f8 <MX_USB_DEVICE_Init+0x5c>)
 80090c8:	4809      	ldr	r0, [pc, #36]	@ (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090ca:	f7fe fee5 	bl	8007e98 <USBD_CDC_RegisterInterface>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090d4:	f7f8 f8d8 	bl	8001288 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090d8:	4805      	ldr	r0, [pc, #20]	@ (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090da:	f7fe ff8d 	bl	8007ff8 <USBD_Start>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090e4:	f7f8 f8d0 	bl	8001288 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090e8:	bf00      	nop
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	20000130 	.word	0x20000130
 80090f0:	20000418 	.word	0x20000418
 80090f4:	2000001c 	.word	0x2000001c
 80090f8:	20000120 	.word	0x20000120

080090fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009100:	2200      	movs	r2, #0
 8009102:	4905      	ldr	r1, [pc, #20]	@ (8009118 <CDC_Init_FS+0x1c>)
 8009104:	4805      	ldr	r0, [pc, #20]	@ (800911c <CDC_Init_FS+0x20>)
 8009106:	f7fe fedd 	bl	8007ec4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800910a:	4905      	ldr	r1, [pc, #20]	@ (8009120 <CDC_Init_FS+0x24>)
 800910c:	4803      	ldr	r0, [pc, #12]	@ (800911c <CDC_Init_FS+0x20>)
 800910e:	f7fe fef2 	bl	8007ef6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009112:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009114:	4618      	mov	r0, r3
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20000adc 	.word	0x20000adc
 800911c:	20000418 	.word	0x20000418
 8009120:	200006dc 	.word	0x200006dc

08009124 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009128:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800912a:	4618      	mov	r0, r3
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr
	...

08009134 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	6039      	str	r1, [r7, #0]
 800913e:	71fb      	strb	r3, [r7, #7]
 8009140:	4613      	mov	r3, r2
 8009142:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	2b23      	cmp	r3, #35	@ 0x23
 8009148:	d84a      	bhi.n	80091e0 <CDC_Control_FS+0xac>
 800914a:	a201      	add	r2, pc, #4	@ (adr r2, 8009150 <CDC_Control_FS+0x1c>)
 800914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009150:	080091e1 	.word	0x080091e1
 8009154:	080091e1 	.word	0x080091e1
 8009158:	080091e1 	.word	0x080091e1
 800915c:	080091e1 	.word	0x080091e1
 8009160:	080091e1 	.word	0x080091e1
 8009164:	080091e1 	.word	0x080091e1
 8009168:	080091e1 	.word	0x080091e1
 800916c:	080091e1 	.word	0x080091e1
 8009170:	080091e1 	.word	0x080091e1
 8009174:	080091e1 	.word	0x080091e1
 8009178:	080091e1 	.word	0x080091e1
 800917c:	080091e1 	.word	0x080091e1
 8009180:	080091e1 	.word	0x080091e1
 8009184:	080091e1 	.word	0x080091e1
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091e1 	.word	0x080091e1
 8009190:	080091e1 	.word	0x080091e1
 8009194:	080091e1 	.word	0x080091e1
 8009198:	080091e1 	.word	0x080091e1
 800919c:	080091e1 	.word	0x080091e1
 80091a0:	080091e1 	.word	0x080091e1
 80091a4:	080091e1 	.word	0x080091e1
 80091a8:	080091e1 	.word	0x080091e1
 80091ac:	080091e1 	.word	0x080091e1
 80091b0:	080091e1 	.word	0x080091e1
 80091b4:	080091e1 	.word	0x080091e1
 80091b8:	080091e1 	.word	0x080091e1
 80091bc:	080091e1 	.word	0x080091e1
 80091c0:	080091e1 	.word	0x080091e1
 80091c4:	080091e1 	.word	0x080091e1
 80091c8:	080091e1 	.word	0x080091e1
 80091cc:	080091e1 	.word	0x080091e1
 80091d0:	080091e1 	.word	0x080091e1
 80091d4:	080091e1 	.word	0x080091e1
 80091d8:	080091e1 	.word	0x080091e1
 80091dc:	080091e1 	.word	0x080091e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091e0:	bf00      	nop
  }

  return (USBD_OK);
 80091e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bc80      	pop	{r7}
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop

080091f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091fa:	6879      	ldr	r1, [r7, #4]
 80091fc:	4805      	ldr	r0, [pc, #20]	@ (8009214 <CDC_Receive_FS+0x24>)
 80091fe:	f7fe fe7a 	bl	8007ef6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009202:	4804      	ldr	r0, [pc, #16]	@ (8009214 <CDC_Receive_FS+0x24>)
 8009204:	f7fe fe8a 	bl	8007f1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009208:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	20000418 	.word	0x20000418

08009218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	6039      	str	r1, [r7, #0]
 8009222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2212      	movs	r2, #18
 8009228:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800922a:	4b03      	ldr	r3, [pc, #12]	@ (8009238 <USBD_FS_DeviceDescriptor+0x20>)
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	2000014c 	.word	0x2000014c

0800923c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	6039      	str	r1, [r7, #0]
 8009246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2204      	movs	r2, #4
 800924c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800924e:	4b03      	ldr	r3, [pc, #12]	@ (800925c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	bc80      	pop	{r7}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20000160 	.word	0x20000160

08009260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800926c:	79fb      	ldrb	r3, [r7, #7]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d105      	bne.n	800927e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	4907      	ldr	r1, [pc, #28]	@ (8009294 <USBD_FS_ProductStrDescriptor+0x34>)
 8009276:	4808      	ldr	r0, [pc, #32]	@ (8009298 <USBD_FS_ProductStrDescriptor+0x38>)
 8009278:	f7ff fe33 	bl	8008ee2 <USBD_GetString>
 800927c:	e004      	b.n	8009288 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	4904      	ldr	r1, [pc, #16]	@ (8009294 <USBD_FS_ProductStrDescriptor+0x34>)
 8009282:	4805      	ldr	r0, [pc, #20]	@ (8009298 <USBD_FS_ProductStrDescriptor+0x38>)
 8009284:	f7ff fe2d 	bl	8008ee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009288:	4b02      	ldr	r3, [pc, #8]	@ (8009294 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800928a:	4618      	mov	r0, r3
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20000edc 	.word	0x20000edc
 8009298:	0800c2c0 	.word	0x0800c2c0

0800929c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	6039      	str	r1, [r7, #0]
 80092a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	4904      	ldr	r1, [pc, #16]	@ (80092bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092ac:	4804      	ldr	r0, [pc, #16]	@ (80092c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092ae:	f7ff fe18 	bl	8008ee2 <USBD_GetString>
  return USBD_StrDesc;
 80092b2:	4b02      	ldr	r3, [pc, #8]	@ (80092bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20000edc 	.word	0x20000edc
 80092c0:	0800c2d4 	.word	0x0800c2d4

080092c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	6039      	str	r1, [r7, #0]
 80092ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	221a      	movs	r2, #26
 80092d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092d6:	f000 f843 	bl	8009360 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092da:	4b02      	ldr	r3, [pc, #8]	@ (80092e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20000164 	.word	0x20000164

080092e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d105      	bne.n	8009306 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	4907      	ldr	r1, [pc, #28]	@ (800931c <USBD_FS_ConfigStrDescriptor+0x34>)
 80092fe:	4808      	ldr	r0, [pc, #32]	@ (8009320 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009300:	f7ff fdef 	bl	8008ee2 <USBD_GetString>
 8009304:	e004      	b.n	8009310 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	4904      	ldr	r1, [pc, #16]	@ (800931c <USBD_FS_ConfigStrDescriptor+0x34>)
 800930a:	4805      	ldr	r0, [pc, #20]	@ (8009320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800930c:	f7ff fde9 	bl	8008ee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009310:	4b02      	ldr	r3, [pc, #8]	@ (800931c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	20000edc 	.word	0x20000edc
 8009320:	0800c2e8 	.word	0x0800c2e8

08009324 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	4603      	mov	r3, r0
 800932c:	6039      	str	r1, [r7, #0]
 800932e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d105      	bne.n	8009342 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	4907      	ldr	r1, [pc, #28]	@ (8009358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800933a:	4808      	ldr	r0, [pc, #32]	@ (800935c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800933c:	f7ff fdd1 	bl	8008ee2 <USBD_GetString>
 8009340:	e004      	b.n	800934c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4904      	ldr	r1, [pc, #16]	@ (8009358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009346:	4805      	ldr	r0, [pc, #20]	@ (800935c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009348:	f7ff fdcb 	bl	8008ee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800934c:	4b02      	ldr	r3, [pc, #8]	@ (8009358 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000edc 	.word	0x20000edc
 800935c:	0800c2f4 	.word	0x0800c2f4

08009360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009366:	4b0f      	ldr	r3, [pc, #60]	@ (80093a4 <Get_SerialNum+0x44>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800936c:	4b0e      	ldr	r3, [pc, #56]	@ (80093a8 <Get_SerialNum+0x48>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009372:	4b0e      	ldr	r3, [pc, #56]	@ (80093ac <Get_SerialNum+0x4c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4413      	add	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d009      	beq.n	800939a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009386:	2208      	movs	r2, #8
 8009388:	4909      	ldr	r1, [pc, #36]	@ (80093b0 <Get_SerialNum+0x50>)
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f814 	bl	80093b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009390:	2204      	movs	r2, #4
 8009392:	4908      	ldr	r1, [pc, #32]	@ (80093b4 <Get_SerialNum+0x54>)
 8009394:	68b8      	ldr	r0, [r7, #8]
 8009396:	f000 f80f 	bl	80093b8 <IntToUnicode>
  }
}
 800939a:	bf00      	nop
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	1ffff7e8 	.word	0x1ffff7e8
 80093a8:	1ffff7ec 	.word	0x1ffff7ec
 80093ac:	1ffff7f0 	.word	0x1ffff7f0
 80093b0:	20000166 	.word	0x20000166
 80093b4:	20000176 	.word	0x20000176

080093b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	4613      	mov	r3, r2
 80093c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093ca:	2300      	movs	r3, #0
 80093cc:	75fb      	strb	r3, [r7, #23]
 80093ce:	e027      	b.n	8009420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	0f1b      	lsrs	r3, r3, #28
 80093d4:	2b09      	cmp	r3, #9
 80093d6:	d80b      	bhi.n	80093f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	0f1b      	lsrs	r3, r3, #28
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	4619      	mov	r1, r3
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	440b      	add	r3, r1
 80093e8:	3230      	adds	r2, #48	@ 0x30
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]
 80093ee:	e00a      	b.n	8009406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	0f1b      	lsrs	r3, r3, #28
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	4619      	mov	r1, r3
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	440b      	add	r3, r1
 8009400:	3237      	adds	r2, #55	@ 0x37
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	011b      	lsls	r3, r3, #4
 800940a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	3301      	adds	r3, #1
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	4413      	add	r3, r2
 8009416:	2200      	movs	r2, #0
 8009418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	3301      	adds	r3, #1
 800941e:	75fb      	strb	r3, [r7, #23]
 8009420:	7dfa      	ldrb	r2, [r7, #23]
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	429a      	cmp	r2, r3
 8009426:	d3d3      	bcc.n	80093d0 <IntToUnicode+0x18>
  }
}
 8009428:	bf00      	nop
 800942a:	bf00      	nop
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	bc80      	pop	{r7}
 8009432:	4770      	bx	lr

08009434 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a0d      	ldr	r2, [pc, #52]	@ (8009478 <HAL_PCD_MspInit+0x44>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d113      	bne.n	800946e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009446:	4b0d      	ldr	r3, [pc, #52]	@ (800947c <HAL_PCD_MspInit+0x48>)
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	4a0c      	ldr	r2, [pc, #48]	@ (800947c <HAL_PCD_MspInit+0x48>)
 800944c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009450:	61d3      	str	r3, [r2, #28]
 8009452:	4b0a      	ldr	r3, [pc, #40]	@ (800947c <HAL_PCD_MspInit+0x48>)
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800945e:	2200      	movs	r2, #0
 8009460:	2100      	movs	r1, #0
 8009462:	2014      	movs	r0, #20
 8009464:	f7f8 fb27 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009468:	2014      	movs	r0, #20
 800946a:	f7f8 fb40 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800946e:	bf00      	nop
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40005c00 	.word	0x40005c00
 800947c:	40021000 	.word	0x40021000

08009480 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7fe fdf6 	bl	8008088 <USBD_LL_SetupStage>
}
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80094b6:	78fa      	ldrb	r2, [r7, #3]
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	440b      	add	r3, r1
 80094c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	78fb      	ldrb	r3, [r7, #3]
 80094cc:	4619      	mov	r1, r3
 80094ce:	f7fe fe28 	bl	8008122 <USBD_LL_DataOutStage>
}
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b082      	sub	sp, #8
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	440b      	add	r3, r1
 80094fa:	3324      	adds	r3, #36	@ 0x24
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	4619      	mov	r1, r3
 8009502:	f7fe fe7f 	bl	8008204 <USBD_LL_DataInStage>
}
 8009506:	bf00      	nop
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800951c:	4618      	mov	r0, r3
 800951e:	f7fe ff8f 	bl	8008440 <USBD_LL_SOF>
}
 8009522:	bf00      	nop
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009532:	2301      	movs	r3, #1
 8009534:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	799b      	ldrb	r3, [r3, #6]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d001      	beq.n	8009542 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800953e:	f7f7 fea3 	bl	8001288 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009548:	7bfa      	ldrb	r2, [r7, #15]
 800954a:	4611      	mov	r1, r2
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe ff3f 	bl	80083d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe fef8 	bl	800834e <USBD_LL_Reset>
}
 800955e:	bf00      	nop
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe ff39 	bl	80083ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	7a9b      	ldrb	r3, [r3, #10]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d005      	beq.n	8009590 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009584:	4b04      	ldr	r3, [pc, #16]	@ (8009598 <HAL_PCD_SuspendCallback+0x30>)
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	4a03      	ldr	r2, [pc, #12]	@ (8009598 <HAL_PCD_SuspendCallback+0x30>)
 800958a:	f043 0306 	orr.w	r3, r3, #6
 800958e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	e000ed00 	.word	0xe000ed00

0800959c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe ff33 	bl	8008416 <USBD_LL_Resume>
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80095c0:	4a28      	ldr	r2, [pc, #160]	@ (8009664 <USBD_LL_Init+0xac>)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a26      	ldr	r2, [pc, #152]	@ (8009664 <USBD_LL_Init+0xac>)
 80095cc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095d0:	4b24      	ldr	r3, [pc, #144]	@ (8009664 <USBD_LL_Init+0xac>)
 80095d2:	4a25      	ldr	r2, [pc, #148]	@ (8009668 <USBD_LL_Init+0xb0>)
 80095d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095d6:	4b23      	ldr	r3, [pc, #140]	@ (8009664 <USBD_LL_Init+0xac>)
 80095d8:	2208      	movs	r2, #8
 80095da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095dc:	4b21      	ldr	r3, [pc, #132]	@ (8009664 <USBD_LL_Init+0xac>)
 80095de:	2202      	movs	r2, #2
 80095e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095e2:	4b20      	ldr	r3, [pc, #128]	@ (8009664 <USBD_LL_Init+0xac>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009664 <USBD_LL_Init+0xac>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009664 <USBD_LL_Init+0xac>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095f4:	481b      	ldr	r0, [pc, #108]	@ (8009664 <USBD_LL_Init+0xac>)
 80095f6:	f7f8 fc49 	bl	8001e8c <HAL_PCD_Init>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009600:	f7f7 fe42 	bl	8001288 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800960a:	2318      	movs	r3, #24
 800960c:	2200      	movs	r2, #0
 800960e:	2100      	movs	r1, #0
 8009610:	f7fa f95a 	bl	80038c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800961a:	2358      	movs	r3, #88	@ 0x58
 800961c:	2200      	movs	r2, #0
 800961e:	2180      	movs	r1, #128	@ 0x80
 8009620:	f7fa f952 	bl	80038c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800962a:	23c0      	movs	r3, #192	@ 0xc0
 800962c:	2200      	movs	r2, #0
 800962e:	2181      	movs	r1, #129	@ 0x81
 8009630:	f7fa f94a 	bl	80038c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800963a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800963e:	2200      	movs	r2, #0
 8009640:	2101      	movs	r1, #1
 8009642:	f7fa f941 	bl	80038c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800964c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009650:	2200      	movs	r2, #0
 8009652:	2182      	movs	r1, #130	@ 0x82
 8009654:	f7fa f938 	bl	80038c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	200010dc 	.word	0x200010dc
 8009668:	40005c00 	.word	0x40005c00

0800966c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009682:	4618      	mov	r0, r3
 8009684:	f7f8 fcf8 	bl	8002078 <HAL_PCD_Start>
 8009688:	4603      	mov	r3, r0
 800968a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	4618      	mov	r0, r3
 8009690:	f000 f94e 	bl	8009930 <USBD_Get_USB_Status>
 8009694:	4603      	mov	r3, r0
 8009696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009698:	7bbb      	ldrb	r3, [r7, #14]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	4608      	mov	r0, r1
 80096ac:	4611      	mov	r1, r2
 80096ae:	461a      	mov	r2, r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	70fb      	strb	r3, [r7, #3]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70bb      	strb	r3, [r7, #2]
 80096b8:	4613      	mov	r3, r2
 80096ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096ca:	78bb      	ldrb	r3, [r7, #2]
 80096cc:	883a      	ldrh	r2, [r7, #0]
 80096ce:	78f9      	ldrb	r1, [r7, #3]
 80096d0:	f7f8 fe4c 	bl	800236c <HAL_PCD_EP_Open>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 f928 	bl	8009930 <USBD_Get_USB_Status>
 80096e0:	4603      	mov	r3, r0
 80096e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	460b      	mov	r3, r1
 80096f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009708:	78fa      	ldrb	r2, [r7, #3]
 800970a:	4611      	mov	r1, r2
 800970c:	4618      	mov	r0, r3
 800970e:	f7f8 fe8a 	bl	8002426 <HAL_PCD_EP_Close>
 8009712:	4603      	mov	r3, r0
 8009714:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	4618      	mov	r0, r3
 800971a:	f000 f909 	bl	8009930 <USBD_Get_USB_Status>
 800971e:	4603      	mov	r3, r0
 8009720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009722:	7bbb      	ldrb	r3, [r7, #14]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7f8 ff32 	bl	80025b4 <HAL_PCD_EP_SetStall>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 f8ea 	bl	8009930 <USBD_Get_USB_Status>
 800975c:	4603      	mov	r3, r0
 800975e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009760:	7bbb      	ldrb	r3, [r7, #14]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009784:	78fa      	ldrb	r2, [r7, #3]
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f7f8 ff73 	bl	8002674 <HAL_PCD_EP_ClrStall>
 800978e:	4603      	mov	r3, r0
 8009790:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	4618      	mov	r0, r3
 8009796:	f000 f8cb 	bl	8009930 <USBD_Get_USB_Status>
 800979a:	4603      	mov	r3, r0
 800979c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800979e:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	da0b      	bge.n	80097dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097ca:	68f9      	ldr	r1, [r7, #12]
 80097cc:	4613      	mov	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	440b      	add	r3, r1
 80097d6:	3312      	adds	r3, #18
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	e00b      	b.n	80097f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097e2:	68f9      	ldr	r1, [r7, #12]
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	440b      	add	r3, r1
 80097ee:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80097f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bc80      	pop	{r7}
 80097fc:	4770      	bx	lr

080097fe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	460b      	mov	r3, r1
 8009808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009818:	78fa      	ldrb	r2, [r7, #3]
 800981a:	4611      	mov	r1, r2
 800981c:	4618      	mov	r0, r3
 800981e:	f7f8 fd81 	bl	8002324 <HAL_PCD_SetAddress>
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 f881 	bl	8009930 <USBD_Get_USB_Status>
 800982e:	4603      	mov	r3, r0
 8009830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009832:	7bbb      	ldrb	r3, [r7, #14]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	607a      	str	r2, [r7, #4]
 8009846:	461a      	mov	r2, r3
 8009848:	460b      	mov	r3, r1
 800984a:	72fb      	strb	r3, [r7, #11]
 800984c:	4613      	mov	r3, r2
 800984e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800985e:	893b      	ldrh	r3, [r7, #8]
 8009860:	7af9      	ldrb	r1, [r7, #11]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	f7f8 fe6f 	bl	8002546 <HAL_PCD_EP_Transmit>
 8009868:	4603      	mov	r3, r0
 800986a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 f85e 	bl	8009930 <USBD_Get_USB_Status>
 8009874:	4603      	mov	r3, r0
 8009876:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009878:	7dbb      	ldrb	r3, [r7, #22]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b086      	sub	sp, #24
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	461a      	mov	r2, r3
 800988e:	460b      	mov	r3, r1
 8009890:	72fb      	strb	r3, [r7, #11]
 8009892:	4613      	mov	r3, r2
 8009894:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80098a4:	893b      	ldrh	r3, [r7, #8]
 80098a6:	7af9      	ldrb	r1, [r7, #11]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	f7f8 fe04 	bl	80024b6 <HAL_PCD_EP_Receive>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 f83b 	bl	8009930 <USBD_Get_USB_Status>
 80098ba:	4603      	mov	r3, r0
 80098bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098be:	7dbb      	ldrb	r3, [r7, #22]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098da:	78fa      	ldrb	r2, [r7, #3]
 80098dc:	4611      	mov	r1, r2
 80098de:	4618      	mov	r0, r3
 80098e0:	f7f8 fe1a 	bl	8002518 <HAL_PCD_EP_GetRxCount>
 80098e4:	4603      	mov	r3, r0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
	...

080098f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098f8:	4b02      	ldr	r3, [pc, #8]	@ (8009904 <USBD_static_malloc+0x14>)
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	bc80      	pop	{r7}
 8009902:	4770      	bx	lr
 8009904:	200013b4 	.word	0x200013b4

08009908 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]

}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	bc80      	pop	{r7}
 8009918:	4770      	bx	lr

0800991a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800991a:	b480      	push	{r7}
 800991c:	b083      	sub	sp, #12
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	460b      	mov	r3, r1
 8009924:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009926:	bf00      	nop
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	bc80      	pop	{r7}
 800992e:	4770      	bx	lr

08009930 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	4603      	mov	r3, r0
 8009938:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800993e:	79fb      	ldrb	r3, [r7, #7]
 8009940:	2b03      	cmp	r3, #3
 8009942:	d817      	bhi.n	8009974 <USBD_Get_USB_Status+0x44>
 8009944:	a201      	add	r2, pc, #4	@ (adr r2, 800994c <USBD_Get_USB_Status+0x1c>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	0800995d 	.word	0x0800995d
 8009950:	08009963 	.word	0x08009963
 8009954:	08009969 	.word	0x08009969
 8009958:	0800996f 	.word	0x0800996f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]
    break;
 8009960:	e00b      	b.n	800997a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009962:	2302      	movs	r3, #2
 8009964:	73fb      	strb	r3, [r7, #15]
    break;
 8009966:	e008      	b.n	800997a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009968:	2301      	movs	r3, #1
 800996a:	73fb      	strb	r3, [r7, #15]
    break;
 800996c:	e005      	b.n	800997a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800996e:	2302      	movs	r3, #2
 8009970:	73fb      	strb	r3, [r7, #15]
    break;
 8009972:	e002      	b.n	800997a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009974:	2302      	movs	r3, #2
 8009976:	73fb      	strb	r3, [r7, #15]
    break;
 8009978:	bf00      	nop
  }
  return usb_status;
 800997a:	7bfb      	ldrb	r3, [r7, #15]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	bc80      	pop	{r7}
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop

08009988 <__cvt>:
 8009988:	2b00      	cmp	r3, #0
 800998a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800998e:	461d      	mov	r5, r3
 8009990:	bfbb      	ittet	lt
 8009992:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009996:	461d      	movlt	r5, r3
 8009998:	2300      	movge	r3, #0
 800999a:	232d      	movlt	r3, #45	@ 0x2d
 800999c:	b088      	sub	sp, #32
 800999e:	4614      	mov	r4, r2
 80099a0:	bfb8      	it	lt
 80099a2:	4614      	movlt	r4, r2
 80099a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80099a6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80099a8:	7013      	strb	r3, [r2, #0]
 80099aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80099b0:	f023 0820 	bic.w	r8, r3, #32
 80099b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099b8:	d005      	beq.n	80099c6 <__cvt+0x3e>
 80099ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80099be:	d100      	bne.n	80099c2 <__cvt+0x3a>
 80099c0:	3601      	adds	r6, #1
 80099c2:	2302      	movs	r3, #2
 80099c4:	e000      	b.n	80099c8 <__cvt+0x40>
 80099c6:	2303      	movs	r3, #3
 80099c8:	aa07      	add	r2, sp, #28
 80099ca:	9204      	str	r2, [sp, #16]
 80099cc:	aa06      	add	r2, sp, #24
 80099ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80099d2:	e9cd 3600 	strd	r3, r6, [sp]
 80099d6:	4622      	mov	r2, r4
 80099d8:	462b      	mov	r3, r5
 80099da:	f000 fe4d 	bl	800a678 <_dtoa_r>
 80099de:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80099e2:	4607      	mov	r7, r0
 80099e4:	d119      	bne.n	8009a1a <__cvt+0x92>
 80099e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099e8:	07db      	lsls	r3, r3, #31
 80099ea:	d50e      	bpl.n	8009a0a <__cvt+0x82>
 80099ec:	eb00 0906 	add.w	r9, r0, r6
 80099f0:	2200      	movs	r2, #0
 80099f2:	2300      	movs	r3, #0
 80099f4:	4620      	mov	r0, r4
 80099f6:	4629      	mov	r1, r5
 80099f8:	f7f6 ffd6 	bl	80009a8 <__aeabi_dcmpeq>
 80099fc:	b108      	cbz	r0, 8009a02 <__cvt+0x7a>
 80099fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a02:	2230      	movs	r2, #48	@ 0x30
 8009a04:	9b07      	ldr	r3, [sp, #28]
 8009a06:	454b      	cmp	r3, r9
 8009a08:	d31e      	bcc.n	8009a48 <__cvt+0xc0>
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	9b07      	ldr	r3, [sp, #28]
 8009a0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009a10:	1bdb      	subs	r3, r3, r7
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	b008      	add	sp, #32
 8009a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a1e:	eb00 0906 	add.w	r9, r0, r6
 8009a22:	d1e5      	bne.n	80099f0 <__cvt+0x68>
 8009a24:	7803      	ldrb	r3, [r0, #0]
 8009a26:	2b30      	cmp	r3, #48	@ 0x30
 8009a28:	d10a      	bne.n	8009a40 <__cvt+0xb8>
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f6 ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 8009a36:	b918      	cbnz	r0, 8009a40 <__cvt+0xb8>
 8009a38:	f1c6 0601 	rsb	r6, r6, #1
 8009a3c:	f8ca 6000 	str.w	r6, [sl]
 8009a40:	f8da 3000 	ldr.w	r3, [sl]
 8009a44:	4499      	add	r9, r3
 8009a46:	e7d3      	b.n	80099f0 <__cvt+0x68>
 8009a48:	1c59      	adds	r1, r3, #1
 8009a4a:	9107      	str	r1, [sp, #28]
 8009a4c:	701a      	strb	r2, [r3, #0]
 8009a4e:	e7d9      	b.n	8009a04 <__cvt+0x7c>

08009a50 <__exponent>:
 8009a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a52:	2900      	cmp	r1, #0
 8009a54:	bfb6      	itet	lt
 8009a56:	232d      	movlt	r3, #45	@ 0x2d
 8009a58:	232b      	movge	r3, #43	@ 0x2b
 8009a5a:	4249      	neglt	r1, r1
 8009a5c:	2909      	cmp	r1, #9
 8009a5e:	7002      	strb	r2, [r0, #0]
 8009a60:	7043      	strb	r3, [r0, #1]
 8009a62:	dd29      	ble.n	8009ab8 <__exponent+0x68>
 8009a64:	f10d 0307 	add.w	r3, sp, #7
 8009a68:	461d      	mov	r5, r3
 8009a6a:	270a      	movs	r7, #10
 8009a6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a70:	461a      	mov	r2, r3
 8009a72:	fb07 1416 	mls	r4, r7, r6, r1
 8009a76:	3430      	adds	r4, #48	@ 0x30
 8009a78:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	2c63      	cmp	r4, #99	@ 0x63
 8009a80:	4631      	mov	r1, r6
 8009a82:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a86:	dcf1      	bgt.n	8009a6c <__exponent+0x1c>
 8009a88:	3130      	adds	r1, #48	@ 0x30
 8009a8a:	1e94      	subs	r4, r2, #2
 8009a8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a90:	4623      	mov	r3, r4
 8009a92:	1c41      	adds	r1, r0, #1
 8009a94:	42ab      	cmp	r3, r5
 8009a96:	d30a      	bcc.n	8009aae <__exponent+0x5e>
 8009a98:	f10d 0309 	add.w	r3, sp, #9
 8009a9c:	1a9b      	subs	r3, r3, r2
 8009a9e:	42ac      	cmp	r4, r5
 8009aa0:	bf88      	it	hi
 8009aa2:	2300      	movhi	r3, #0
 8009aa4:	3302      	adds	r3, #2
 8009aa6:	4403      	add	r3, r0
 8009aa8:	1a18      	subs	r0, r3, r0
 8009aaa:	b003      	add	sp, #12
 8009aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aae:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ab2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009ab6:	e7ed      	b.n	8009a94 <__exponent+0x44>
 8009ab8:	2330      	movs	r3, #48	@ 0x30
 8009aba:	3130      	adds	r1, #48	@ 0x30
 8009abc:	7083      	strb	r3, [r0, #2]
 8009abe:	70c1      	strb	r1, [r0, #3]
 8009ac0:	1d03      	adds	r3, r0, #4
 8009ac2:	e7f1      	b.n	8009aa8 <__exponent+0x58>

08009ac4 <_printf_float>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	b091      	sub	sp, #68	@ 0x44
 8009aca:	460c      	mov	r4, r1
 8009acc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	461f      	mov	r7, r3
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	f000 fcbf 	bl	800a458 <_localeconv_r>
 8009ada:	6803      	ldr	r3, [r0, #0]
 8009adc:	4618      	mov	r0, r3
 8009ade:	9308      	str	r3, [sp, #32]
 8009ae0:	f7f6 fb36 	bl	8000150 <strlen>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	930e      	str	r3, [sp, #56]	@ 0x38
 8009ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8009aec:	9009      	str	r0, [sp, #36]	@ 0x24
 8009aee:	3307      	adds	r3, #7
 8009af0:	f023 0307 	bic.w	r3, r3, #7
 8009af4:	f103 0208 	add.w	r2, r3, #8
 8009af8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009afc:	f8d4 b000 	ldr.w	fp, [r4]
 8009b00:	f8c8 2000 	str.w	r2, [r8]
 8009b04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b0e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009b12:	f04f 32ff 	mov.w	r2, #4294967295
 8009b16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b1e:	4b9c      	ldr	r3, [pc, #624]	@ (8009d90 <_printf_float+0x2cc>)
 8009b20:	f7f6 ff74 	bl	8000a0c <__aeabi_dcmpun>
 8009b24:	bb70      	cbnz	r0, 8009b84 <_printf_float+0xc0>
 8009b26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2e:	4b98      	ldr	r3, [pc, #608]	@ (8009d90 <_printf_float+0x2cc>)
 8009b30:	f7f6 ff4e 	bl	80009d0 <__aeabi_dcmple>
 8009b34:	bb30      	cbnz	r0, 8009b84 <_printf_float+0xc0>
 8009b36:	2200      	movs	r2, #0
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	f7f6 ff3d 	bl	80009bc <__aeabi_dcmplt>
 8009b42:	b110      	cbz	r0, 8009b4a <_printf_float+0x86>
 8009b44:	232d      	movs	r3, #45	@ 0x2d
 8009b46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b4a:	4a92      	ldr	r2, [pc, #584]	@ (8009d94 <_printf_float+0x2d0>)
 8009b4c:	4b92      	ldr	r3, [pc, #584]	@ (8009d98 <_printf_float+0x2d4>)
 8009b4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b52:	bf8c      	ite	hi
 8009b54:	4690      	movhi	r8, r2
 8009b56:	4698      	movls	r8, r3
 8009b58:	2303      	movs	r3, #3
 8009b5a:	f04f 0900 	mov.w	r9, #0
 8009b5e:	6123      	str	r3, [r4, #16]
 8009b60:	f02b 0304 	bic.w	r3, fp, #4
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	4633      	mov	r3, r6
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	9700      	str	r7, [sp, #0]
 8009b6e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009b70:	f000 f9d4 	bl	8009f1c <_printf_common>
 8009b74:	3001      	adds	r0, #1
 8009b76:	f040 8090 	bne.w	8009c9a <_printf_float+0x1d6>
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7e:	b011      	add	sp, #68	@ 0x44
 8009b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b84:	4642      	mov	r2, r8
 8009b86:	464b      	mov	r3, r9
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	f7f6 ff3e 	bl	8000a0c <__aeabi_dcmpun>
 8009b90:	b148      	cbz	r0, 8009ba6 <_printf_float+0xe2>
 8009b92:	464b      	mov	r3, r9
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bfb8      	it	lt
 8009b98:	232d      	movlt	r3, #45	@ 0x2d
 8009b9a:	4a80      	ldr	r2, [pc, #512]	@ (8009d9c <_printf_float+0x2d8>)
 8009b9c:	bfb8      	it	lt
 8009b9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ba2:	4b7f      	ldr	r3, [pc, #508]	@ (8009da0 <_printf_float+0x2dc>)
 8009ba4:	e7d3      	b.n	8009b4e <_printf_float+0x8a>
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	d13f      	bne.n	8009c30 <_printf_float+0x16c>
 8009bb0:	2306      	movs	r3, #6
 8009bb2:	6063      	str	r3, [r4, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	9206      	str	r2, [sp, #24]
 8009bbe:	aa0e      	add	r2, sp, #56	@ 0x38
 8009bc0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009bc4:	aa0d      	add	r2, sp, #52	@ 0x34
 8009bc6:	9203      	str	r2, [sp, #12]
 8009bc8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009bcc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	4642      	mov	r2, r8
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	464b      	mov	r3, r9
 8009bda:	910a      	str	r1, [sp, #40]	@ 0x28
 8009bdc:	f7ff fed4 	bl	8009988 <__cvt>
 8009be0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009be2:	4680      	mov	r8, r0
 8009be4:	2947      	cmp	r1, #71	@ 0x47
 8009be6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009be8:	d128      	bne.n	8009c3c <_printf_float+0x178>
 8009bea:	1cc8      	adds	r0, r1, #3
 8009bec:	db02      	blt.n	8009bf4 <_printf_float+0x130>
 8009bee:	6863      	ldr	r3, [r4, #4]
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	dd40      	ble.n	8009c76 <_printf_float+0x1b2>
 8009bf4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009bf8:	fa5f fa8a 	uxtb.w	sl, sl
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	3901      	subs	r1, #1
 8009c00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c04:	910d      	str	r1, [sp, #52]	@ 0x34
 8009c06:	f7ff ff23 	bl	8009a50 <__exponent>
 8009c0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c0c:	4681      	mov	r9, r0
 8009c0e:	1813      	adds	r3, r2, r0
 8009c10:	2a01      	cmp	r2, #1
 8009c12:	6123      	str	r3, [r4, #16]
 8009c14:	dc02      	bgt.n	8009c1c <_printf_float+0x158>
 8009c16:	6822      	ldr	r2, [r4, #0]
 8009c18:	07d2      	lsls	r2, r2, #31
 8009c1a:	d501      	bpl.n	8009c20 <_printf_float+0x15c>
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	6123      	str	r3, [r4, #16]
 8009c20:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d09e      	beq.n	8009b66 <_printf_float+0xa2>
 8009c28:	232d      	movs	r3, #45	@ 0x2d
 8009c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c2e:	e79a      	b.n	8009b66 <_printf_float+0xa2>
 8009c30:	2947      	cmp	r1, #71	@ 0x47
 8009c32:	d1bf      	bne.n	8009bb4 <_printf_float+0xf0>
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1bd      	bne.n	8009bb4 <_printf_float+0xf0>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e7ba      	b.n	8009bb2 <_printf_float+0xee>
 8009c3c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c40:	d9dc      	bls.n	8009bfc <_printf_float+0x138>
 8009c42:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c46:	d118      	bne.n	8009c7a <_printf_float+0x1b6>
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	6863      	ldr	r3, [r4, #4]
 8009c4c:	dd0b      	ble.n	8009c66 <_printf_float+0x1a2>
 8009c4e:	6121      	str	r1, [r4, #16]
 8009c50:	b913      	cbnz	r3, 8009c58 <_printf_float+0x194>
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	07d0      	lsls	r0, r2, #31
 8009c56:	d502      	bpl.n	8009c5e <_printf_float+0x19a>
 8009c58:	3301      	adds	r3, #1
 8009c5a:	440b      	add	r3, r1
 8009c5c:	6123      	str	r3, [r4, #16]
 8009c5e:	f04f 0900 	mov.w	r9, #0
 8009c62:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c64:	e7dc      	b.n	8009c20 <_printf_float+0x15c>
 8009c66:	b913      	cbnz	r3, 8009c6e <_printf_float+0x1aa>
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	07d2      	lsls	r2, r2, #31
 8009c6c:	d501      	bpl.n	8009c72 <_printf_float+0x1ae>
 8009c6e:	3302      	adds	r3, #2
 8009c70:	e7f4      	b.n	8009c5c <_printf_float+0x198>
 8009c72:	2301      	movs	r3, #1
 8009c74:	e7f2      	b.n	8009c5c <_printf_float+0x198>
 8009c76:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c7c:	4299      	cmp	r1, r3
 8009c7e:	db05      	blt.n	8009c8c <_printf_float+0x1c8>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	6121      	str	r1, [r4, #16]
 8009c84:	07d8      	lsls	r0, r3, #31
 8009c86:	d5ea      	bpl.n	8009c5e <_printf_float+0x19a>
 8009c88:	1c4b      	adds	r3, r1, #1
 8009c8a:	e7e7      	b.n	8009c5c <_printf_float+0x198>
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	bfcc      	ite	gt
 8009c90:	2201      	movgt	r2, #1
 8009c92:	f1c1 0202 	rsble	r2, r1, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	e7e0      	b.n	8009c5c <_printf_float+0x198>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	055a      	lsls	r2, r3, #21
 8009c9e:	d407      	bmi.n	8009cb0 <_printf_float+0x1ec>
 8009ca0:	6923      	ldr	r3, [r4, #16]
 8009ca2:	4642      	mov	r2, r8
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	d12b      	bne.n	8009d06 <_printf_float+0x242>
 8009cae:	e764      	b.n	8009b7a <_printf_float+0xb6>
 8009cb0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cb4:	f240 80dc 	bls.w	8009e70 <_printf_float+0x3ac>
 8009cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f7f6 fe72 	bl	80009a8 <__aeabi_dcmpeq>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d033      	beq.n	8009d30 <_printf_float+0x26c>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4628      	mov	r0, r5
 8009cce:	4a35      	ldr	r2, [pc, #212]	@ (8009da4 <_printf_float+0x2e0>)
 8009cd0:	47b8      	blx	r7
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	f43f af51 	beq.w	8009b7a <_printf_float+0xb6>
 8009cd8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009cdc:	4543      	cmp	r3, r8
 8009cde:	db02      	blt.n	8009ce6 <_printf_float+0x222>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	07d8      	lsls	r0, r3, #31
 8009ce4:	d50f      	bpl.n	8009d06 <_printf_float+0x242>
 8009ce6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	f43f af42 	beq.w	8009b7a <_printf_float+0xb6>
 8009cf6:	f04f 0900 	mov.w	r9, #0
 8009cfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cfe:	f104 0a1a 	add.w	sl, r4, #26
 8009d02:	45c8      	cmp	r8, r9
 8009d04:	dc09      	bgt.n	8009d1a <_printf_float+0x256>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	079b      	lsls	r3, r3, #30
 8009d0a:	f100 8102 	bmi.w	8009f12 <_printf_float+0x44e>
 8009d0e:	68e0      	ldr	r0, [r4, #12]
 8009d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d12:	4298      	cmp	r0, r3
 8009d14:	bfb8      	it	lt
 8009d16:	4618      	movlt	r0, r3
 8009d18:	e731      	b.n	8009b7e <_printf_float+0xba>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	4652      	mov	r2, sl
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4628      	mov	r0, r5
 8009d22:	47b8      	blx	r7
 8009d24:	3001      	adds	r0, #1
 8009d26:	f43f af28 	beq.w	8009b7a <_printf_float+0xb6>
 8009d2a:	f109 0901 	add.w	r9, r9, #1
 8009d2e:	e7e8      	b.n	8009d02 <_printf_float+0x23e>
 8009d30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	dc38      	bgt.n	8009da8 <_printf_float+0x2e4>
 8009d36:	2301      	movs	r3, #1
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	4a19      	ldr	r2, [pc, #100]	@ (8009da4 <_printf_float+0x2e0>)
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	f43f af1a 	beq.w	8009b7a <_printf_float+0xb6>
 8009d46:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009d4a:	ea59 0303 	orrs.w	r3, r9, r3
 8009d4e:	d102      	bne.n	8009d56 <_printf_float+0x292>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	07d9      	lsls	r1, r3, #31
 8009d54:	d5d7      	bpl.n	8009d06 <_printf_float+0x242>
 8009d56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	47b8      	blx	r7
 8009d60:	3001      	adds	r0, #1
 8009d62:	f43f af0a 	beq.w	8009b7a <_printf_float+0xb6>
 8009d66:	f04f 0a00 	mov.w	sl, #0
 8009d6a:	f104 0b1a 	add.w	fp, r4, #26
 8009d6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d70:	425b      	negs	r3, r3
 8009d72:	4553      	cmp	r3, sl
 8009d74:	dc01      	bgt.n	8009d7a <_printf_float+0x2b6>
 8009d76:	464b      	mov	r3, r9
 8009d78:	e793      	b.n	8009ca2 <_printf_float+0x1de>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	465a      	mov	r2, fp
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b8      	blx	r7
 8009d84:	3001      	adds	r0, #1
 8009d86:	f43f aef8 	beq.w	8009b7a <_printf_float+0xb6>
 8009d8a:	f10a 0a01 	add.w	sl, sl, #1
 8009d8e:	e7ee      	b.n	8009d6e <_printf_float+0x2aa>
 8009d90:	7fefffff 	.word	0x7fefffff
 8009d94:	0800c32a 	.word	0x0800c32a
 8009d98:	0800c326 	.word	0x0800c326
 8009d9c:	0800c332 	.word	0x0800c332
 8009da0:	0800c32e 	.word	0x0800c32e
 8009da4:	0800c336 	.word	0x0800c336
 8009da8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009daa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009dae:	4553      	cmp	r3, sl
 8009db0:	bfa8      	it	ge
 8009db2:	4653      	movge	r3, sl
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	4699      	mov	r9, r3
 8009db8:	dc36      	bgt.n	8009e28 <_printf_float+0x364>
 8009dba:	f04f 0b00 	mov.w	fp, #0
 8009dbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dc2:	f104 021a 	add.w	r2, r4, #26
 8009dc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dca:	eba3 0309 	sub.w	r3, r3, r9
 8009dce:	455b      	cmp	r3, fp
 8009dd0:	dc31      	bgt.n	8009e36 <_printf_float+0x372>
 8009dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009dd4:	459a      	cmp	sl, r3
 8009dd6:	dc3a      	bgt.n	8009e4e <_printf_float+0x38a>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	07da      	lsls	r2, r3, #31
 8009ddc:	d437      	bmi.n	8009e4e <_printf_float+0x38a>
 8009dde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009de0:	ebaa 0903 	sub.w	r9, sl, r3
 8009de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009de6:	ebaa 0303 	sub.w	r3, sl, r3
 8009dea:	4599      	cmp	r9, r3
 8009dec:	bfa8      	it	ge
 8009dee:	4699      	movge	r9, r3
 8009df0:	f1b9 0f00 	cmp.w	r9, #0
 8009df4:	dc33      	bgt.n	8009e5e <_printf_float+0x39a>
 8009df6:	f04f 0800 	mov.w	r8, #0
 8009dfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dfe:	f104 0b1a 	add.w	fp, r4, #26
 8009e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e04:	ebaa 0303 	sub.w	r3, sl, r3
 8009e08:	eba3 0309 	sub.w	r3, r3, r9
 8009e0c:	4543      	cmp	r3, r8
 8009e0e:	f77f af7a 	ble.w	8009d06 <_printf_float+0x242>
 8009e12:	2301      	movs	r3, #1
 8009e14:	465a      	mov	r2, fp
 8009e16:	4631      	mov	r1, r6
 8009e18:	4628      	mov	r0, r5
 8009e1a:	47b8      	blx	r7
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	f43f aeac 	beq.w	8009b7a <_printf_float+0xb6>
 8009e22:	f108 0801 	add.w	r8, r8, #1
 8009e26:	e7ec      	b.n	8009e02 <_printf_float+0x33e>
 8009e28:	4642      	mov	r2, r8
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b8      	blx	r7
 8009e30:	3001      	adds	r0, #1
 8009e32:	d1c2      	bne.n	8009dba <_printf_float+0x2f6>
 8009e34:	e6a1      	b.n	8009b7a <_printf_float+0xb6>
 8009e36:	2301      	movs	r3, #1
 8009e38:	4631      	mov	r1, r6
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	920a      	str	r2, [sp, #40]	@ 0x28
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	f43f ae9a 	beq.w	8009b7a <_printf_float+0xb6>
 8009e46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e48:	f10b 0b01 	add.w	fp, fp, #1
 8009e4c:	e7bb      	b.n	8009dc6 <_printf_float+0x302>
 8009e4e:	4631      	mov	r1, r6
 8009e50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b8      	blx	r7
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d1c0      	bne.n	8009dde <_printf_float+0x31a>
 8009e5c:	e68d      	b.n	8009b7a <_printf_float+0xb6>
 8009e5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e60:	464b      	mov	r3, r9
 8009e62:	4631      	mov	r1, r6
 8009e64:	4628      	mov	r0, r5
 8009e66:	4442      	add	r2, r8
 8009e68:	47b8      	blx	r7
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d1c3      	bne.n	8009df6 <_printf_float+0x332>
 8009e6e:	e684      	b.n	8009b7a <_printf_float+0xb6>
 8009e70:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009e74:	f1ba 0f01 	cmp.w	sl, #1
 8009e78:	dc01      	bgt.n	8009e7e <_printf_float+0x3ba>
 8009e7a:	07db      	lsls	r3, r3, #31
 8009e7c:	d536      	bpl.n	8009eec <_printf_float+0x428>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4642      	mov	r2, r8
 8009e82:	4631      	mov	r1, r6
 8009e84:	4628      	mov	r0, r5
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	f43f ae76 	beq.w	8009b7a <_printf_float+0xb6>
 8009e8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b8      	blx	r7
 8009e98:	3001      	adds	r0, #1
 8009e9a:	f43f ae6e 	beq.w	8009b7a <_printf_float+0xb6>
 8009e9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009eaa:	f7f6 fd7d 	bl	80009a8 <__aeabi_dcmpeq>
 8009eae:	b9c0      	cbnz	r0, 8009ee2 <_printf_float+0x41e>
 8009eb0:	4653      	mov	r3, sl
 8009eb2:	f108 0201 	add.w	r2, r8, #1
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d10c      	bne.n	8009eda <_printf_float+0x416>
 8009ec0:	e65b      	b.n	8009b7a <_printf_float+0xb6>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	465a      	mov	r2, fp
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4628      	mov	r0, r5
 8009eca:	47b8      	blx	r7
 8009ecc:	3001      	adds	r0, #1
 8009ece:	f43f ae54 	beq.w	8009b7a <_printf_float+0xb6>
 8009ed2:	f108 0801 	add.w	r8, r8, #1
 8009ed6:	45d0      	cmp	r8, sl
 8009ed8:	dbf3      	blt.n	8009ec2 <_printf_float+0x3fe>
 8009eda:	464b      	mov	r3, r9
 8009edc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ee0:	e6e0      	b.n	8009ca4 <_printf_float+0x1e0>
 8009ee2:	f04f 0800 	mov.w	r8, #0
 8009ee6:	f104 0b1a 	add.w	fp, r4, #26
 8009eea:	e7f4      	b.n	8009ed6 <_printf_float+0x412>
 8009eec:	2301      	movs	r3, #1
 8009eee:	4642      	mov	r2, r8
 8009ef0:	e7e1      	b.n	8009eb6 <_printf_float+0x3f2>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	464a      	mov	r2, r9
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4628      	mov	r0, r5
 8009efa:	47b8      	blx	r7
 8009efc:	3001      	adds	r0, #1
 8009efe:	f43f ae3c 	beq.w	8009b7a <_printf_float+0xb6>
 8009f02:	f108 0801 	add.w	r8, r8, #1
 8009f06:	68e3      	ldr	r3, [r4, #12]
 8009f08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009f0a:	1a5b      	subs	r3, r3, r1
 8009f0c:	4543      	cmp	r3, r8
 8009f0e:	dcf0      	bgt.n	8009ef2 <_printf_float+0x42e>
 8009f10:	e6fd      	b.n	8009d0e <_printf_float+0x24a>
 8009f12:	f04f 0800 	mov.w	r8, #0
 8009f16:	f104 0919 	add.w	r9, r4, #25
 8009f1a:	e7f4      	b.n	8009f06 <_printf_float+0x442>

08009f1c <_printf_common>:
 8009f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	4616      	mov	r6, r2
 8009f22:	4698      	mov	r8, r3
 8009f24:	688a      	ldr	r2, [r1, #8]
 8009f26:	690b      	ldr	r3, [r1, #16]
 8009f28:	4607      	mov	r7, r0
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	bfb8      	it	lt
 8009f2e:	4613      	movlt	r3, r2
 8009f30:	6033      	str	r3, [r6, #0]
 8009f32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f36:	460c      	mov	r4, r1
 8009f38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f3c:	b10a      	cbz	r2, 8009f42 <_printf_common+0x26>
 8009f3e:	3301      	adds	r3, #1
 8009f40:	6033      	str	r3, [r6, #0]
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	0699      	lsls	r1, r3, #26
 8009f46:	bf42      	ittt	mi
 8009f48:	6833      	ldrmi	r3, [r6, #0]
 8009f4a:	3302      	addmi	r3, #2
 8009f4c:	6033      	strmi	r3, [r6, #0]
 8009f4e:	6825      	ldr	r5, [r4, #0]
 8009f50:	f015 0506 	ands.w	r5, r5, #6
 8009f54:	d106      	bne.n	8009f64 <_printf_common+0x48>
 8009f56:	f104 0a19 	add.w	sl, r4, #25
 8009f5a:	68e3      	ldr	r3, [r4, #12]
 8009f5c:	6832      	ldr	r2, [r6, #0]
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	42ab      	cmp	r3, r5
 8009f62:	dc2b      	bgt.n	8009fbc <_printf_common+0xa0>
 8009f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f68:	6822      	ldr	r2, [r4, #0]
 8009f6a:	3b00      	subs	r3, #0
 8009f6c:	bf18      	it	ne
 8009f6e:	2301      	movne	r3, #1
 8009f70:	0692      	lsls	r2, r2, #26
 8009f72:	d430      	bmi.n	8009fd6 <_printf_common+0xba>
 8009f74:	4641      	mov	r1, r8
 8009f76:	4638      	mov	r0, r7
 8009f78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f7c:	47c8      	blx	r9
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d023      	beq.n	8009fca <_printf_common+0xae>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	6922      	ldr	r2, [r4, #16]
 8009f86:	f003 0306 	and.w	r3, r3, #6
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	bf14      	ite	ne
 8009f8e:	2500      	movne	r5, #0
 8009f90:	6833      	ldreq	r3, [r6, #0]
 8009f92:	f04f 0600 	mov.w	r6, #0
 8009f96:	bf08      	it	eq
 8009f98:	68e5      	ldreq	r5, [r4, #12]
 8009f9a:	f104 041a 	add.w	r4, r4, #26
 8009f9e:	bf08      	it	eq
 8009fa0:	1aed      	subeq	r5, r5, r3
 8009fa2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009fa6:	bf08      	it	eq
 8009fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fac:	4293      	cmp	r3, r2
 8009fae:	bfc4      	itt	gt
 8009fb0:	1a9b      	subgt	r3, r3, r2
 8009fb2:	18ed      	addgt	r5, r5, r3
 8009fb4:	42b5      	cmp	r5, r6
 8009fb6:	d11a      	bne.n	8009fee <_printf_common+0xd2>
 8009fb8:	2000      	movs	r0, #0
 8009fba:	e008      	b.n	8009fce <_printf_common+0xb2>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	4652      	mov	r2, sl
 8009fc0:	4641      	mov	r1, r8
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	47c8      	blx	r9
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d103      	bne.n	8009fd2 <_printf_common+0xb6>
 8009fca:	f04f 30ff 	mov.w	r0, #4294967295
 8009fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd2:	3501      	adds	r5, #1
 8009fd4:	e7c1      	b.n	8009f5a <_printf_common+0x3e>
 8009fd6:	2030      	movs	r0, #48	@ 0x30
 8009fd8:	18e1      	adds	r1, r4, r3
 8009fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fe4:	4422      	add	r2, r4
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fec:	e7c2      	b.n	8009f74 <_printf_common+0x58>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4641      	mov	r1, r8
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	47c8      	blx	r9
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d0e6      	beq.n	8009fca <_printf_common+0xae>
 8009ffc:	3601      	adds	r6, #1
 8009ffe:	e7d9      	b.n	8009fb4 <_printf_common+0x98>

0800a000 <_printf_i>:
 800a000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a004:	7e0f      	ldrb	r7, [r1, #24]
 800a006:	4691      	mov	r9, r2
 800a008:	2f78      	cmp	r7, #120	@ 0x78
 800a00a:	4680      	mov	r8, r0
 800a00c:	460c      	mov	r4, r1
 800a00e:	469a      	mov	sl, r3
 800a010:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a016:	d807      	bhi.n	800a028 <_printf_i+0x28>
 800a018:	2f62      	cmp	r7, #98	@ 0x62
 800a01a:	d80a      	bhi.n	800a032 <_printf_i+0x32>
 800a01c:	2f00      	cmp	r7, #0
 800a01e:	f000 80d1 	beq.w	800a1c4 <_printf_i+0x1c4>
 800a022:	2f58      	cmp	r7, #88	@ 0x58
 800a024:	f000 80b8 	beq.w	800a198 <_printf_i+0x198>
 800a028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a02c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a030:	e03a      	b.n	800a0a8 <_printf_i+0xa8>
 800a032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a036:	2b15      	cmp	r3, #21
 800a038:	d8f6      	bhi.n	800a028 <_printf_i+0x28>
 800a03a:	a101      	add	r1, pc, #4	@ (adr r1, 800a040 <_printf_i+0x40>)
 800a03c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a040:	0800a099 	.word	0x0800a099
 800a044:	0800a0ad 	.word	0x0800a0ad
 800a048:	0800a029 	.word	0x0800a029
 800a04c:	0800a029 	.word	0x0800a029
 800a050:	0800a029 	.word	0x0800a029
 800a054:	0800a029 	.word	0x0800a029
 800a058:	0800a0ad 	.word	0x0800a0ad
 800a05c:	0800a029 	.word	0x0800a029
 800a060:	0800a029 	.word	0x0800a029
 800a064:	0800a029 	.word	0x0800a029
 800a068:	0800a029 	.word	0x0800a029
 800a06c:	0800a1ab 	.word	0x0800a1ab
 800a070:	0800a0d7 	.word	0x0800a0d7
 800a074:	0800a165 	.word	0x0800a165
 800a078:	0800a029 	.word	0x0800a029
 800a07c:	0800a029 	.word	0x0800a029
 800a080:	0800a1cd 	.word	0x0800a1cd
 800a084:	0800a029 	.word	0x0800a029
 800a088:	0800a0d7 	.word	0x0800a0d7
 800a08c:	0800a029 	.word	0x0800a029
 800a090:	0800a029 	.word	0x0800a029
 800a094:	0800a16d 	.word	0x0800a16d
 800a098:	6833      	ldr	r3, [r6, #0]
 800a09a:	1d1a      	adds	r2, r3, #4
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6032      	str	r2, [r6, #0]
 800a0a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e09c      	b.n	800a1e6 <_printf_i+0x1e6>
 800a0ac:	6833      	ldr	r3, [r6, #0]
 800a0ae:	6820      	ldr	r0, [r4, #0]
 800a0b0:	1d19      	adds	r1, r3, #4
 800a0b2:	6031      	str	r1, [r6, #0]
 800a0b4:	0606      	lsls	r6, r0, #24
 800a0b6:	d501      	bpl.n	800a0bc <_printf_i+0xbc>
 800a0b8:	681d      	ldr	r5, [r3, #0]
 800a0ba:	e003      	b.n	800a0c4 <_printf_i+0xc4>
 800a0bc:	0645      	lsls	r5, r0, #25
 800a0be:	d5fb      	bpl.n	800a0b8 <_printf_i+0xb8>
 800a0c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0c4:	2d00      	cmp	r5, #0
 800a0c6:	da03      	bge.n	800a0d0 <_printf_i+0xd0>
 800a0c8:	232d      	movs	r3, #45	@ 0x2d
 800a0ca:	426d      	negs	r5, r5
 800a0cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0d0:	230a      	movs	r3, #10
 800a0d2:	4858      	ldr	r0, [pc, #352]	@ (800a234 <_printf_i+0x234>)
 800a0d4:	e011      	b.n	800a0fa <_printf_i+0xfa>
 800a0d6:	6821      	ldr	r1, [r4, #0]
 800a0d8:	6833      	ldr	r3, [r6, #0]
 800a0da:	0608      	lsls	r0, r1, #24
 800a0dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0e0:	d402      	bmi.n	800a0e8 <_printf_i+0xe8>
 800a0e2:	0649      	lsls	r1, r1, #25
 800a0e4:	bf48      	it	mi
 800a0e6:	b2ad      	uxthmi	r5, r5
 800a0e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0ea:	6033      	str	r3, [r6, #0]
 800a0ec:	bf14      	ite	ne
 800a0ee:	230a      	movne	r3, #10
 800a0f0:	2308      	moveq	r3, #8
 800a0f2:	4850      	ldr	r0, [pc, #320]	@ (800a234 <_printf_i+0x234>)
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0fa:	6866      	ldr	r6, [r4, #4]
 800a0fc:	2e00      	cmp	r6, #0
 800a0fe:	60a6      	str	r6, [r4, #8]
 800a100:	db05      	blt.n	800a10e <_printf_i+0x10e>
 800a102:	6821      	ldr	r1, [r4, #0]
 800a104:	432e      	orrs	r6, r5
 800a106:	f021 0104 	bic.w	r1, r1, #4
 800a10a:	6021      	str	r1, [r4, #0]
 800a10c:	d04b      	beq.n	800a1a6 <_printf_i+0x1a6>
 800a10e:	4616      	mov	r6, r2
 800a110:	fbb5 f1f3 	udiv	r1, r5, r3
 800a114:	fb03 5711 	mls	r7, r3, r1, r5
 800a118:	5dc7      	ldrb	r7, [r0, r7]
 800a11a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a11e:	462f      	mov	r7, r5
 800a120:	42bb      	cmp	r3, r7
 800a122:	460d      	mov	r5, r1
 800a124:	d9f4      	bls.n	800a110 <_printf_i+0x110>
 800a126:	2b08      	cmp	r3, #8
 800a128:	d10b      	bne.n	800a142 <_printf_i+0x142>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	07df      	lsls	r7, r3, #31
 800a12e:	d508      	bpl.n	800a142 <_printf_i+0x142>
 800a130:	6923      	ldr	r3, [r4, #16]
 800a132:	6861      	ldr	r1, [r4, #4]
 800a134:	4299      	cmp	r1, r3
 800a136:	bfde      	ittt	le
 800a138:	2330      	movle	r3, #48	@ 0x30
 800a13a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a13e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a142:	1b92      	subs	r2, r2, r6
 800a144:	6122      	str	r2, [r4, #16]
 800a146:	464b      	mov	r3, r9
 800a148:	4621      	mov	r1, r4
 800a14a:	4640      	mov	r0, r8
 800a14c:	f8cd a000 	str.w	sl, [sp]
 800a150:	aa03      	add	r2, sp, #12
 800a152:	f7ff fee3 	bl	8009f1c <_printf_common>
 800a156:	3001      	adds	r0, #1
 800a158:	d14a      	bne.n	800a1f0 <_printf_i+0x1f0>
 800a15a:	f04f 30ff 	mov.w	r0, #4294967295
 800a15e:	b004      	add	sp, #16
 800a160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	f043 0320 	orr.w	r3, r3, #32
 800a16a:	6023      	str	r3, [r4, #0]
 800a16c:	2778      	movs	r7, #120	@ 0x78
 800a16e:	4832      	ldr	r0, [pc, #200]	@ (800a238 <_printf_i+0x238>)
 800a170:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	6831      	ldr	r1, [r6, #0]
 800a178:	061f      	lsls	r7, r3, #24
 800a17a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a17e:	d402      	bmi.n	800a186 <_printf_i+0x186>
 800a180:	065f      	lsls	r7, r3, #25
 800a182:	bf48      	it	mi
 800a184:	b2ad      	uxthmi	r5, r5
 800a186:	6031      	str	r1, [r6, #0]
 800a188:	07d9      	lsls	r1, r3, #31
 800a18a:	bf44      	itt	mi
 800a18c:	f043 0320 	orrmi.w	r3, r3, #32
 800a190:	6023      	strmi	r3, [r4, #0]
 800a192:	b11d      	cbz	r5, 800a19c <_printf_i+0x19c>
 800a194:	2310      	movs	r3, #16
 800a196:	e7ad      	b.n	800a0f4 <_printf_i+0xf4>
 800a198:	4826      	ldr	r0, [pc, #152]	@ (800a234 <_printf_i+0x234>)
 800a19a:	e7e9      	b.n	800a170 <_printf_i+0x170>
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	f023 0320 	bic.w	r3, r3, #32
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	e7f6      	b.n	800a194 <_printf_i+0x194>
 800a1a6:	4616      	mov	r6, r2
 800a1a8:	e7bd      	b.n	800a126 <_printf_i+0x126>
 800a1aa:	6833      	ldr	r3, [r6, #0]
 800a1ac:	6825      	ldr	r5, [r4, #0]
 800a1ae:	1d18      	adds	r0, r3, #4
 800a1b0:	6961      	ldr	r1, [r4, #20]
 800a1b2:	6030      	str	r0, [r6, #0]
 800a1b4:	062e      	lsls	r6, r5, #24
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	d501      	bpl.n	800a1be <_printf_i+0x1be>
 800a1ba:	6019      	str	r1, [r3, #0]
 800a1bc:	e002      	b.n	800a1c4 <_printf_i+0x1c4>
 800a1be:	0668      	lsls	r0, r5, #25
 800a1c0:	d5fb      	bpl.n	800a1ba <_printf_i+0x1ba>
 800a1c2:	8019      	strh	r1, [r3, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4616      	mov	r6, r2
 800a1c8:	6123      	str	r3, [r4, #16]
 800a1ca:	e7bc      	b.n	800a146 <_printf_i+0x146>
 800a1cc:	6833      	ldr	r3, [r6, #0]
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	1d1a      	adds	r2, r3, #4
 800a1d2:	6032      	str	r2, [r6, #0]
 800a1d4:	681e      	ldr	r6, [r3, #0]
 800a1d6:	6862      	ldr	r2, [r4, #4]
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f000 f9b4 	bl	800a546 <memchr>
 800a1de:	b108      	cbz	r0, 800a1e4 <_printf_i+0x1e4>
 800a1e0:	1b80      	subs	r0, r0, r6
 800a1e2:	6060      	str	r0, [r4, #4]
 800a1e4:	6863      	ldr	r3, [r4, #4]
 800a1e6:	6123      	str	r3, [r4, #16]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1ee:	e7aa      	b.n	800a146 <_printf_i+0x146>
 800a1f0:	4632      	mov	r2, r6
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	6923      	ldr	r3, [r4, #16]
 800a1f8:	47d0      	blx	sl
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d0ad      	beq.n	800a15a <_printf_i+0x15a>
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	079b      	lsls	r3, r3, #30
 800a202:	d413      	bmi.n	800a22c <_printf_i+0x22c>
 800a204:	68e0      	ldr	r0, [r4, #12]
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	4298      	cmp	r0, r3
 800a20a:	bfb8      	it	lt
 800a20c:	4618      	movlt	r0, r3
 800a20e:	e7a6      	b.n	800a15e <_printf_i+0x15e>
 800a210:	2301      	movs	r3, #1
 800a212:	4632      	mov	r2, r6
 800a214:	4649      	mov	r1, r9
 800a216:	4640      	mov	r0, r8
 800a218:	47d0      	blx	sl
 800a21a:	3001      	adds	r0, #1
 800a21c:	d09d      	beq.n	800a15a <_printf_i+0x15a>
 800a21e:	3501      	adds	r5, #1
 800a220:	68e3      	ldr	r3, [r4, #12]
 800a222:	9903      	ldr	r1, [sp, #12]
 800a224:	1a5b      	subs	r3, r3, r1
 800a226:	42ab      	cmp	r3, r5
 800a228:	dcf2      	bgt.n	800a210 <_printf_i+0x210>
 800a22a:	e7eb      	b.n	800a204 <_printf_i+0x204>
 800a22c:	2500      	movs	r5, #0
 800a22e:	f104 0619 	add.w	r6, r4, #25
 800a232:	e7f5      	b.n	800a220 <_printf_i+0x220>
 800a234:	0800c338 	.word	0x0800c338
 800a238:	0800c349 	.word	0x0800c349

0800a23c <std>:
 800a23c:	2300      	movs	r3, #0
 800a23e:	b510      	push	{r4, lr}
 800a240:	4604      	mov	r4, r0
 800a242:	e9c0 3300 	strd	r3, r3, [r0]
 800a246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a24a:	6083      	str	r3, [r0, #8]
 800a24c:	8181      	strh	r1, [r0, #12]
 800a24e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a250:	81c2      	strh	r2, [r0, #14]
 800a252:	6183      	str	r3, [r0, #24]
 800a254:	4619      	mov	r1, r3
 800a256:	2208      	movs	r2, #8
 800a258:	305c      	adds	r0, #92	@ 0x5c
 800a25a:	f000 f8f4 	bl	800a446 <memset>
 800a25e:	4b0d      	ldr	r3, [pc, #52]	@ (800a294 <std+0x58>)
 800a260:	6224      	str	r4, [r4, #32]
 800a262:	6263      	str	r3, [r4, #36]	@ 0x24
 800a264:	4b0c      	ldr	r3, [pc, #48]	@ (800a298 <std+0x5c>)
 800a266:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a268:	4b0c      	ldr	r3, [pc, #48]	@ (800a29c <std+0x60>)
 800a26a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a26c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2a0 <std+0x64>)
 800a26e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a270:	4b0c      	ldr	r3, [pc, #48]	@ (800a2a4 <std+0x68>)
 800a272:	429c      	cmp	r4, r3
 800a274:	d006      	beq.n	800a284 <std+0x48>
 800a276:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a27a:	4294      	cmp	r4, r2
 800a27c:	d002      	beq.n	800a284 <std+0x48>
 800a27e:	33d0      	adds	r3, #208	@ 0xd0
 800a280:	429c      	cmp	r4, r3
 800a282:	d105      	bne.n	800a290 <std+0x54>
 800a284:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a28c:	f000 b958 	b.w	800a540 <__retarget_lock_init_recursive>
 800a290:	bd10      	pop	{r4, pc}
 800a292:	bf00      	nop
 800a294:	0800a3c1 	.word	0x0800a3c1
 800a298:	0800a3e3 	.word	0x0800a3e3
 800a29c:	0800a41b 	.word	0x0800a41b
 800a2a0:	0800a43f 	.word	0x0800a43f
 800a2a4:	200015d4 	.word	0x200015d4

0800a2a8 <stdio_exit_handler>:
 800a2a8:	4a02      	ldr	r2, [pc, #8]	@ (800a2b4 <stdio_exit_handler+0xc>)
 800a2aa:	4903      	ldr	r1, [pc, #12]	@ (800a2b8 <stdio_exit_handler+0x10>)
 800a2ac:	4803      	ldr	r0, [pc, #12]	@ (800a2bc <stdio_exit_handler+0x14>)
 800a2ae:	f000 b869 	b.w	800a384 <_fwalk_sglue>
 800a2b2:	bf00      	nop
 800a2b4:	20000180 	.word	0x20000180
 800a2b8:	0800bc11 	.word	0x0800bc11
 800a2bc:	20000190 	.word	0x20000190

0800a2c0 <cleanup_stdio>:
 800a2c0:	6841      	ldr	r1, [r0, #4]
 800a2c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f4 <cleanup_stdio+0x34>)
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	4299      	cmp	r1, r3
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	d001      	beq.n	800a2d0 <cleanup_stdio+0x10>
 800a2cc:	f001 fca0 	bl	800bc10 <_fflush_r>
 800a2d0:	68a1      	ldr	r1, [r4, #8]
 800a2d2:	4b09      	ldr	r3, [pc, #36]	@ (800a2f8 <cleanup_stdio+0x38>)
 800a2d4:	4299      	cmp	r1, r3
 800a2d6:	d002      	beq.n	800a2de <cleanup_stdio+0x1e>
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f001 fc99 	bl	800bc10 <_fflush_r>
 800a2de:	68e1      	ldr	r1, [r4, #12]
 800a2e0:	4b06      	ldr	r3, [pc, #24]	@ (800a2fc <cleanup_stdio+0x3c>)
 800a2e2:	4299      	cmp	r1, r3
 800a2e4:	d004      	beq.n	800a2f0 <cleanup_stdio+0x30>
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ec:	f001 bc90 	b.w	800bc10 <_fflush_r>
 800a2f0:	bd10      	pop	{r4, pc}
 800a2f2:	bf00      	nop
 800a2f4:	200015d4 	.word	0x200015d4
 800a2f8:	2000163c 	.word	0x2000163c
 800a2fc:	200016a4 	.word	0x200016a4

0800a300 <global_stdio_init.part.0>:
 800a300:	b510      	push	{r4, lr}
 800a302:	4b0b      	ldr	r3, [pc, #44]	@ (800a330 <global_stdio_init.part.0+0x30>)
 800a304:	4c0b      	ldr	r4, [pc, #44]	@ (800a334 <global_stdio_init.part.0+0x34>)
 800a306:	4a0c      	ldr	r2, [pc, #48]	@ (800a338 <global_stdio_init.part.0+0x38>)
 800a308:	4620      	mov	r0, r4
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	2104      	movs	r1, #4
 800a30e:	2200      	movs	r2, #0
 800a310:	f7ff ff94 	bl	800a23c <std>
 800a314:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a318:	2201      	movs	r2, #1
 800a31a:	2109      	movs	r1, #9
 800a31c:	f7ff ff8e 	bl	800a23c <std>
 800a320:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a324:	2202      	movs	r2, #2
 800a326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a32a:	2112      	movs	r1, #18
 800a32c:	f7ff bf86 	b.w	800a23c <std>
 800a330:	2000170c 	.word	0x2000170c
 800a334:	200015d4 	.word	0x200015d4
 800a338:	0800a2a9 	.word	0x0800a2a9

0800a33c <__sfp_lock_acquire>:
 800a33c:	4801      	ldr	r0, [pc, #4]	@ (800a344 <__sfp_lock_acquire+0x8>)
 800a33e:	f000 b900 	b.w	800a542 <__retarget_lock_acquire_recursive>
 800a342:	bf00      	nop
 800a344:	20001715 	.word	0x20001715

0800a348 <__sfp_lock_release>:
 800a348:	4801      	ldr	r0, [pc, #4]	@ (800a350 <__sfp_lock_release+0x8>)
 800a34a:	f000 b8fb 	b.w	800a544 <__retarget_lock_release_recursive>
 800a34e:	bf00      	nop
 800a350:	20001715 	.word	0x20001715

0800a354 <__sinit>:
 800a354:	b510      	push	{r4, lr}
 800a356:	4604      	mov	r4, r0
 800a358:	f7ff fff0 	bl	800a33c <__sfp_lock_acquire>
 800a35c:	6a23      	ldr	r3, [r4, #32]
 800a35e:	b11b      	cbz	r3, 800a368 <__sinit+0x14>
 800a360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a364:	f7ff bff0 	b.w	800a348 <__sfp_lock_release>
 800a368:	4b04      	ldr	r3, [pc, #16]	@ (800a37c <__sinit+0x28>)
 800a36a:	6223      	str	r3, [r4, #32]
 800a36c:	4b04      	ldr	r3, [pc, #16]	@ (800a380 <__sinit+0x2c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1f5      	bne.n	800a360 <__sinit+0xc>
 800a374:	f7ff ffc4 	bl	800a300 <global_stdio_init.part.0>
 800a378:	e7f2      	b.n	800a360 <__sinit+0xc>
 800a37a:	bf00      	nop
 800a37c:	0800a2c1 	.word	0x0800a2c1
 800a380:	2000170c 	.word	0x2000170c

0800a384 <_fwalk_sglue>:
 800a384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a388:	4607      	mov	r7, r0
 800a38a:	4688      	mov	r8, r1
 800a38c:	4614      	mov	r4, r2
 800a38e:	2600      	movs	r6, #0
 800a390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a394:	f1b9 0901 	subs.w	r9, r9, #1
 800a398:	d505      	bpl.n	800a3a6 <_fwalk_sglue+0x22>
 800a39a:	6824      	ldr	r4, [r4, #0]
 800a39c:	2c00      	cmp	r4, #0
 800a39e:	d1f7      	bne.n	800a390 <_fwalk_sglue+0xc>
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a6:	89ab      	ldrh	r3, [r5, #12]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d907      	bls.n	800a3bc <_fwalk_sglue+0x38>
 800a3ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	d003      	beq.n	800a3bc <_fwalk_sglue+0x38>
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	47c0      	blx	r8
 800a3ba:	4306      	orrs	r6, r0
 800a3bc:	3568      	adds	r5, #104	@ 0x68
 800a3be:	e7e9      	b.n	800a394 <_fwalk_sglue+0x10>

0800a3c0 <__sread>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c8:	f000 f86c 	bl	800a4a4 <_read_r>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	bfab      	itete	ge
 800a3d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a3d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3d4:	181b      	addge	r3, r3, r0
 800a3d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a3da:	bfac      	ite	ge
 800a3dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a3de:	81a3      	strhlt	r3, [r4, #12]
 800a3e0:	bd10      	pop	{r4, pc}

0800a3e2 <__swrite>:
 800a3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e6:	461f      	mov	r7, r3
 800a3e8:	898b      	ldrh	r3, [r1, #12]
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	05db      	lsls	r3, r3, #23
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	d505      	bpl.n	800a400 <__swrite+0x1e>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fc:	f000 f840 	bl	800a480 <_lseek_r>
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	4632      	mov	r2, r6
 800a404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	4628      	mov	r0, r5
 800a40c:	463b      	mov	r3, r7
 800a40e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a416:	f000 b857 	b.w	800a4c8 <_write_r>

0800a41a <__sseek>:
 800a41a:	b510      	push	{r4, lr}
 800a41c:	460c      	mov	r4, r1
 800a41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a422:	f000 f82d 	bl	800a480 <_lseek_r>
 800a426:	1c43      	adds	r3, r0, #1
 800a428:	89a3      	ldrh	r3, [r4, #12]
 800a42a:	bf15      	itete	ne
 800a42c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a42e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a436:	81a3      	strheq	r3, [r4, #12]
 800a438:	bf18      	it	ne
 800a43a:	81a3      	strhne	r3, [r4, #12]
 800a43c:	bd10      	pop	{r4, pc}

0800a43e <__sclose>:
 800a43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a442:	f000 b80d 	b.w	800a460 <_close_r>

0800a446 <memset>:
 800a446:	4603      	mov	r3, r0
 800a448:	4402      	add	r2, r0
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d100      	bne.n	800a450 <memset+0xa>
 800a44e:	4770      	bx	lr
 800a450:	f803 1b01 	strb.w	r1, [r3], #1
 800a454:	e7f9      	b.n	800a44a <memset+0x4>
	...

0800a458 <_localeconv_r>:
 800a458:	4800      	ldr	r0, [pc, #0]	@ (800a45c <_localeconv_r+0x4>)
 800a45a:	4770      	bx	lr
 800a45c:	200002cc 	.word	0x200002cc

0800a460 <_close_r>:
 800a460:	b538      	push	{r3, r4, r5, lr}
 800a462:	2300      	movs	r3, #0
 800a464:	4d05      	ldr	r5, [pc, #20]	@ (800a47c <_close_r+0x1c>)
 800a466:	4604      	mov	r4, r0
 800a468:	4608      	mov	r0, r1
 800a46a:	602b      	str	r3, [r5, #0]
 800a46c:	f7f6 ffe7 	bl	800143e <_close>
 800a470:	1c43      	adds	r3, r0, #1
 800a472:	d102      	bne.n	800a47a <_close_r+0x1a>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	b103      	cbz	r3, 800a47a <_close_r+0x1a>
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	bd38      	pop	{r3, r4, r5, pc}
 800a47c:	20001710 	.word	0x20001710

0800a480 <_lseek_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	2200      	movs	r2, #0
 800a48a:	4d05      	ldr	r5, [pc, #20]	@ (800a4a0 <_lseek_r+0x20>)
 800a48c:	602a      	str	r2, [r5, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	f7f6 fff9 	bl	8001486 <_lseek>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_lseek_r+0x1e>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_lseek_r+0x1e>
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	20001710 	.word	0x20001710

0800a4a4 <_read_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	4d05      	ldr	r5, [pc, #20]	@ (800a4c4 <_read_r+0x20>)
 800a4b0:	602a      	str	r2, [r5, #0]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f7f6 ff8a 	bl	80013cc <_read>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_read_r+0x1e>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_read_r+0x1e>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	20001710 	.word	0x20001710

0800a4c8 <_write_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	4d05      	ldr	r5, [pc, #20]	@ (800a4e8 <_write_r+0x20>)
 800a4d4:	602a      	str	r2, [r5, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f7f6 ff95 	bl	8001406 <_write>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <_write_r+0x1e>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	b103      	cbz	r3, 800a4e6 <_write_r+0x1e>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	20001710 	.word	0x20001710

0800a4ec <__errno>:
 800a4ec:	4b01      	ldr	r3, [pc, #4]	@ (800a4f4 <__errno+0x8>)
 800a4ee:	6818      	ldr	r0, [r3, #0]
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	2000018c 	.word	0x2000018c

0800a4f8 <__libc_init_array>:
 800a4f8:	b570      	push	{r4, r5, r6, lr}
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	4d0c      	ldr	r5, [pc, #48]	@ (800a530 <__libc_init_array+0x38>)
 800a4fe:	4c0d      	ldr	r4, [pc, #52]	@ (800a534 <__libc_init_array+0x3c>)
 800a500:	1b64      	subs	r4, r4, r5
 800a502:	10a4      	asrs	r4, r4, #2
 800a504:	42a6      	cmp	r6, r4
 800a506:	d109      	bne.n	800a51c <__libc_init_array+0x24>
 800a508:	f001 fece 	bl	800c2a8 <_init>
 800a50c:	2600      	movs	r6, #0
 800a50e:	4d0a      	ldr	r5, [pc, #40]	@ (800a538 <__libc_init_array+0x40>)
 800a510:	4c0a      	ldr	r4, [pc, #40]	@ (800a53c <__libc_init_array+0x44>)
 800a512:	1b64      	subs	r4, r4, r5
 800a514:	10a4      	asrs	r4, r4, #2
 800a516:	42a6      	cmp	r6, r4
 800a518:	d105      	bne.n	800a526 <__libc_init_array+0x2e>
 800a51a:	bd70      	pop	{r4, r5, r6, pc}
 800a51c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a520:	4798      	blx	r3
 800a522:	3601      	adds	r6, #1
 800a524:	e7ee      	b.n	800a504 <__libc_init_array+0xc>
 800a526:	f855 3b04 	ldr.w	r3, [r5], #4
 800a52a:	4798      	blx	r3
 800a52c:	3601      	adds	r6, #1
 800a52e:	e7f2      	b.n	800a516 <__libc_init_array+0x1e>
 800a530:	0800c6a4 	.word	0x0800c6a4
 800a534:	0800c6a4 	.word	0x0800c6a4
 800a538:	0800c6a4 	.word	0x0800c6a4
 800a53c:	0800c6a8 	.word	0x0800c6a8

0800a540 <__retarget_lock_init_recursive>:
 800a540:	4770      	bx	lr

0800a542 <__retarget_lock_acquire_recursive>:
 800a542:	4770      	bx	lr

0800a544 <__retarget_lock_release_recursive>:
 800a544:	4770      	bx	lr

0800a546 <memchr>:
 800a546:	4603      	mov	r3, r0
 800a548:	b510      	push	{r4, lr}
 800a54a:	b2c9      	uxtb	r1, r1
 800a54c:	4402      	add	r2, r0
 800a54e:	4293      	cmp	r3, r2
 800a550:	4618      	mov	r0, r3
 800a552:	d101      	bne.n	800a558 <memchr+0x12>
 800a554:	2000      	movs	r0, #0
 800a556:	e003      	b.n	800a560 <memchr+0x1a>
 800a558:	7804      	ldrb	r4, [r0, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	428c      	cmp	r4, r1
 800a55e:	d1f6      	bne.n	800a54e <memchr+0x8>
 800a560:	bd10      	pop	{r4, pc}

0800a562 <quorem>:
 800a562:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a566:	6903      	ldr	r3, [r0, #16]
 800a568:	690c      	ldr	r4, [r1, #16]
 800a56a:	4607      	mov	r7, r0
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	db7e      	blt.n	800a66e <quorem+0x10c>
 800a570:	3c01      	subs	r4, #1
 800a572:	00a3      	lsls	r3, r4, #2
 800a574:	f100 0514 	add.w	r5, r0, #20
 800a578:	f101 0814 	add.w	r8, r1, #20
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a582:	9301      	str	r3, [sp, #4]
 800a584:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a58c:	3301      	adds	r3, #1
 800a58e:	429a      	cmp	r2, r3
 800a590:	fbb2 f6f3 	udiv	r6, r2, r3
 800a594:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a598:	d32e      	bcc.n	800a5f8 <quorem+0x96>
 800a59a:	f04f 0a00 	mov.w	sl, #0
 800a59e:	46c4      	mov	ip, r8
 800a5a0:	46ae      	mov	lr, r5
 800a5a2:	46d3      	mov	fp, sl
 800a5a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5a8:	b298      	uxth	r0, r3
 800a5aa:	fb06 a000 	mla	r0, r6, r0, sl
 800a5ae:	0c1b      	lsrs	r3, r3, #16
 800a5b0:	0c02      	lsrs	r2, r0, #16
 800a5b2:	fb06 2303 	mla	r3, r6, r3, r2
 800a5b6:	f8de 2000 	ldr.w	r2, [lr]
 800a5ba:	b280      	uxth	r0, r0
 800a5bc:	b292      	uxth	r2, r2
 800a5be:	1a12      	subs	r2, r2, r0
 800a5c0:	445a      	add	r2, fp
 800a5c2:	f8de 0000 	ldr.w	r0, [lr]
 800a5c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5d4:	b292      	uxth	r2, r2
 800a5d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5da:	45e1      	cmp	r9, ip
 800a5dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a5e0:	f84e 2b04 	str.w	r2, [lr], #4
 800a5e4:	d2de      	bcs.n	800a5a4 <quorem+0x42>
 800a5e6:	9b00      	ldr	r3, [sp, #0]
 800a5e8:	58eb      	ldr	r3, [r5, r3]
 800a5ea:	b92b      	cbnz	r3, 800a5f8 <quorem+0x96>
 800a5ec:	9b01      	ldr	r3, [sp, #4]
 800a5ee:	3b04      	subs	r3, #4
 800a5f0:	429d      	cmp	r5, r3
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	d32f      	bcc.n	800a656 <quorem+0xf4>
 800a5f6:	613c      	str	r4, [r7, #16]
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f001 f981 	bl	800b900 <__mcmp>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	db25      	blt.n	800a64e <quorem+0xec>
 800a602:	4629      	mov	r1, r5
 800a604:	2000      	movs	r0, #0
 800a606:	f858 2b04 	ldr.w	r2, [r8], #4
 800a60a:	f8d1 c000 	ldr.w	ip, [r1]
 800a60e:	fa1f fe82 	uxth.w	lr, r2
 800a612:	fa1f f38c 	uxth.w	r3, ip
 800a616:	eba3 030e 	sub.w	r3, r3, lr
 800a61a:	4403      	add	r3, r0
 800a61c:	0c12      	lsrs	r2, r2, #16
 800a61e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a622:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a626:	b29b      	uxth	r3, r3
 800a628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a62c:	45c1      	cmp	r9, r8
 800a62e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a632:	f841 3b04 	str.w	r3, [r1], #4
 800a636:	d2e6      	bcs.n	800a606 <quorem+0xa4>
 800a638:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a63c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a640:	b922      	cbnz	r2, 800a64c <quorem+0xea>
 800a642:	3b04      	subs	r3, #4
 800a644:	429d      	cmp	r5, r3
 800a646:	461a      	mov	r2, r3
 800a648:	d30b      	bcc.n	800a662 <quorem+0x100>
 800a64a:	613c      	str	r4, [r7, #16]
 800a64c:	3601      	adds	r6, #1
 800a64e:	4630      	mov	r0, r6
 800a650:	b003      	add	sp, #12
 800a652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a656:	6812      	ldr	r2, [r2, #0]
 800a658:	3b04      	subs	r3, #4
 800a65a:	2a00      	cmp	r2, #0
 800a65c:	d1cb      	bne.n	800a5f6 <quorem+0x94>
 800a65e:	3c01      	subs	r4, #1
 800a660:	e7c6      	b.n	800a5f0 <quorem+0x8e>
 800a662:	6812      	ldr	r2, [r2, #0]
 800a664:	3b04      	subs	r3, #4
 800a666:	2a00      	cmp	r2, #0
 800a668:	d1ef      	bne.n	800a64a <quorem+0xe8>
 800a66a:	3c01      	subs	r4, #1
 800a66c:	e7ea      	b.n	800a644 <quorem+0xe2>
 800a66e:	2000      	movs	r0, #0
 800a670:	e7ee      	b.n	800a650 <quorem+0xee>
 800a672:	0000      	movs	r0, r0
 800a674:	0000      	movs	r0, r0
	...

0800a678 <_dtoa_r>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	4614      	mov	r4, r2
 800a67e:	461d      	mov	r5, r3
 800a680:	69c7      	ldr	r7, [r0, #28]
 800a682:	b097      	sub	sp, #92	@ 0x5c
 800a684:	4681      	mov	r9, r0
 800a686:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a68a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a68c:	b97f      	cbnz	r7, 800a6ae <_dtoa_r+0x36>
 800a68e:	2010      	movs	r0, #16
 800a690:	f000 fe0e 	bl	800b2b0 <malloc>
 800a694:	4602      	mov	r2, r0
 800a696:	f8c9 001c 	str.w	r0, [r9, #28]
 800a69a:	b920      	cbnz	r0, 800a6a6 <_dtoa_r+0x2e>
 800a69c:	21ef      	movs	r1, #239	@ 0xef
 800a69e:	4bac      	ldr	r3, [pc, #688]	@ (800a950 <_dtoa_r+0x2d8>)
 800a6a0:	48ac      	ldr	r0, [pc, #688]	@ (800a954 <_dtoa_r+0x2dc>)
 800a6a2:	f001 fafb 	bl	800bc9c <__assert_func>
 800a6a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6aa:	6007      	str	r7, [r0, #0]
 800a6ac:	60c7      	str	r7, [r0, #12]
 800a6ae:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6b2:	6819      	ldr	r1, [r3, #0]
 800a6b4:	b159      	cbz	r1, 800a6ce <_dtoa_r+0x56>
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	4093      	lsls	r3, r2
 800a6bc:	604a      	str	r2, [r1, #4]
 800a6be:	608b      	str	r3, [r1, #8]
 800a6c0:	4648      	mov	r0, r9
 800a6c2:	f000 feeb 	bl	800b49c <_Bfree>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	1e2b      	subs	r3, r5, #0
 800a6d0:	bfaf      	iteee	ge
 800a6d2:	2300      	movge	r3, #0
 800a6d4:	2201      	movlt	r2, #1
 800a6d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6da:	9307      	strlt	r3, [sp, #28]
 800a6dc:	bfa8      	it	ge
 800a6de:	6033      	strge	r3, [r6, #0]
 800a6e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a6e4:	4b9c      	ldr	r3, [pc, #624]	@ (800a958 <_dtoa_r+0x2e0>)
 800a6e6:	bfb8      	it	lt
 800a6e8:	6032      	strlt	r2, [r6, #0]
 800a6ea:	ea33 0308 	bics.w	r3, r3, r8
 800a6ee:	d112      	bne.n	800a716 <_dtoa_r+0x9e>
 800a6f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a6f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a6fc:	4323      	orrs	r3, r4
 800a6fe:	f000 855e 	beq.w	800b1be <_dtoa_r+0xb46>
 800a702:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a704:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a95c <_dtoa_r+0x2e4>
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 8560 	beq.w	800b1ce <_dtoa_r+0xb56>
 800a70e:	f10a 0303 	add.w	r3, sl, #3
 800a712:	f000 bd5a 	b.w	800b1ca <_dtoa_r+0xb52>
 800a716:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a71a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a71e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a722:	2200      	movs	r2, #0
 800a724:	2300      	movs	r3, #0
 800a726:	f7f6 f93f 	bl	80009a8 <__aeabi_dcmpeq>
 800a72a:	4607      	mov	r7, r0
 800a72c:	b158      	cbz	r0, 800a746 <_dtoa_r+0xce>
 800a72e:	2301      	movs	r3, #1
 800a730:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a732:	6013      	str	r3, [r2, #0]
 800a734:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a736:	b113      	cbz	r3, 800a73e <_dtoa_r+0xc6>
 800a738:	4b89      	ldr	r3, [pc, #548]	@ (800a960 <_dtoa_r+0x2e8>)
 800a73a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a964 <_dtoa_r+0x2ec>
 800a742:	f000 bd44 	b.w	800b1ce <_dtoa_r+0xb56>
 800a746:	ab14      	add	r3, sp, #80	@ 0x50
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	ab15      	add	r3, sp, #84	@ 0x54
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	4648      	mov	r0, r9
 800a750:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a754:	f001 f984 	bl	800ba60 <__d2b>
 800a758:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a75c:	9003      	str	r0, [sp, #12]
 800a75e:	2e00      	cmp	r6, #0
 800a760:	d078      	beq.n	800a854 <_dtoa_r+0x1dc>
 800a762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a768:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a76c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a770:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a774:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a778:	9712      	str	r7, [sp, #72]	@ 0x48
 800a77a:	4619      	mov	r1, r3
 800a77c:	2200      	movs	r2, #0
 800a77e:	4b7a      	ldr	r3, [pc, #488]	@ (800a968 <_dtoa_r+0x2f0>)
 800a780:	f7f5 fcf2 	bl	8000168 <__aeabi_dsub>
 800a784:	a36c      	add	r3, pc, #432	@ (adr r3, 800a938 <_dtoa_r+0x2c0>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fea5 	bl	80004d8 <__aeabi_dmul>
 800a78e:	a36c      	add	r3, pc, #432	@ (adr r3, 800a940 <_dtoa_r+0x2c8>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	f7f5 fcea 	bl	800016c <__adddf3>
 800a798:	4604      	mov	r4, r0
 800a79a:	4630      	mov	r0, r6
 800a79c:	460d      	mov	r5, r1
 800a79e:	f7f5 fe31 	bl	8000404 <__aeabi_i2d>
 800a7a2:	a369      	add	r3, pc, #420	@ (adr r3, 800a948 <_dtoa_r+0x2d0>)
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f7f5 fe96 	bl	80004d8 <__aeabi_dmul>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	f7f5 fcda 	bl	800016c <__adddf3>
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	460d      	mov	r5, r1
 800a7bc:	f7f6 f93c 	bl	8000a38 <__aeabi_d2iz>
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	4607      	mov	r7, r0
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7f6 f8f7 	bl	80009bc <__aeabi_dcmplt>
 800a7ce:	b140      	cbz	r0, 800a7e2 <_dtoa_r+0x16a>
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f7f5 fe17 	bl	8000404 <__aeabi_i2d>
 800a7d6:	4622      	mov	r2, r4
 800a7d8:	462b      	mov	r3, r5
 800a7da:	f7f6 f8e5 	bl	80009a8 <__aeabi_dcmpeq>
 800a7de:	b900      	cbnz	r0, 800a7e2 <_dtoa_r+0x16a>
 800a7e0:	3f01      	subs	r7, #1
 800a7e2:	2f16      	cmp	r7, #22
 800a7e4:	d854      	bhi.n	800a890 <_dtoa_r+0x218>
 800a7e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7ea:	4b60      	ldr	r3, [pc, #384]	@ (800a96c <_dtoa_r+0x2f4>)
 800a7ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f7f6 f8e2 	bl	80009bc <__aeabi_dcmplt>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d04b      	beq.n	800a894 <_dtoa_r+0x21c>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	3f01      	subs	r7, #1
 800a800:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a802:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a804:	1b9b      	subs	r3, r3, r6
 800a806:	1e5a      	subs	r2, r3, #1
 800a808:	bf49      	itett	mi
 800a80a:	f1c3 0301 	rsbmi	r3, r3, #1
 800a80e:	2300      	movpl	r3, #0
 800a810:	9304      	strmi	r3, [sp, #16]
 800a812:	2300      	movmi	r3, #0
 800a814:	9209      	str	r2, [sp, #36]	@ 0x24
 800a816:	bf54      	ite	pl
 800a818:	9304      	strpl	r3, [sp, #16]
 800a81a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a81c:	2f00      	cmp	r7, #0
 800a81e:	db3b      	blt.n	800a898 <_dtoa_r+0x220>
 800a820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a822:	970e      	str	r7, [sp, #56]	@ 0x38
 800a824:	443b      	add	r3, r7
 800a826:	9309      	str	r3, [sp, #36]	@ 0x24
 800a828:	2300      	movs	r3, #0
 800a82a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a82c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a82e:	2b09      	cmp	r3, #9
 800a830:	d865      	bhi.n	800a8fe <_dtoa_r+0x286>
 800a832:	2b05      	cmp	r3, #5
 800a834:	bfc4      	itt	gt
 800a836:	3b04      	subgt	r3, #4
 800a838:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a83a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a83c:	bfc8      	it	gt
 800a83e:	2400      	movgt	r4, #0
 800a840:	f1a3 0302 	sub.w	r3, r3, #2
 800a844:	bfd8      	it	le
 800a846:	2401      	movle	r4, #1
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d864      	bhi.n	800a916 <_dtoa_r+0x29e>
 800a84c:	e8df f003 	tbb	[pc, r3]
 800a850:	2c385553 	.word	0x2c385553
 800a854:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a858:	441e      	add	r6, r3
 800a85a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a85e:	2b20      	cmp	r3, #32
 800a860:	bfc1      	itttt	gt
 800a862:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a866:	fa08 f803 	lslgt.w	r8, r8, r3
 800a86a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a86e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a872:	bfd6      	itet	le
 800a874:	f1c3 0320 	rsble	r3, r3, #32
 800a878:	ea48 0003 	orrgt.w	r0, r8, r3
 800a87c:	fa04 f003 	lslle.w	r0, r4, r3
 800a880:	f7f5 fdb0 	bl	80003e4 <__aeabi_ui2d>
 800a884:	2201      	movs	r2, #1
 800a886:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a88a:	3e01      	subs	r6, #1
 800a88c:	9212      	str	r2, [sp, #72]	@ 0x48
 800a88e:	e774      	b.n	800a77a <_dtoa_r+0x102>
 800a890:	2301      	movs	r3, #1
 800a892:	e7b5      	b.n	800a800 <_dtoa_r+0x188>
 800a894:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a896:	e7b4      	b.n	800a802 <_dtoa_r+0x18a>
 800a898:	9b04      	ldr	r3, [sp, #16]
 800a89a:	1bdb      	subs	r3, r3, r7
 800a89c:	9304      	str	r3, [sp, #16]
 800a89e:	427b      	negs	r3, r7
 800a8a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a8a6:	e7c1      	b.n	800a82c <_dtoa_r+0x1b4>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8ae:	eb07 0b03 	add.w	fp, r7, r3
 800a8b2:	f10b 0301 	add.w	r3, fp, #1
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	9308      	str	r3, [sp, #32]
 800a8ba:	bfb8      	it	lt
 800a8bc:	2301      	movlt	r3, #1
 800a8be:	e006      	b.n	800a8ce <_dtoa_r+0x256>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dd28      	ble.n	800a91c <_dtoa_r+0x2a4>
 800a8ca:	469b      	mov	fp, r3
 800a8cc:	9308      	str	r3, [sp, #32]
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	2204      	movs	r2, #4
 800a8d2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a8d6:	f102 0514 	add.w	r5, r2, #20
 800a8da:	429d      	cmp	r5, r3
 800a8dc:	d926      	bls.n	800a92c <_dtoa_r+0x2b4>
 800a8de:	6041      	str	r1, [r0, #4]
 800a8e0:	4648      	mov	r0, r9
 800a8e2:	f000 fd9b 	bl	800b41c <_Balloc>
 800a8e6:	4682      	mov	sl, r0
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d143      	bne.n	800a974 <_dtoa_r+0x2fc>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800a8f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a970 <_dtoa_r+0x2f8>)
 800a8f4:	e6d4      	b.n	800a6a0 <_dtoa_r+0x28>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e7e3      	b.n	800a8c2 <_dtoa_r+0x24a>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	e7d5      	b.n	800a8aa <_dtoa_r+0x232>
 800a8fe:	2401      	movs	r4, #1
 800a900:	2300      	movs	r3, #0
 800a902:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a904:	9320      	str	r3, [sp, #128]	@ 0x80
 800a906:	f04f 3bff 	mov.w	fp, #4294967295
 800a90a:	2200      	movs	r2, #0
 800a90c:	2312      	movs	r3, #18
 800a90e:	f8cd b020 	str.w	fp, [sp, #32]
 800a912:	9221      	str	r2, [sp, #132]	@ 0x84
 800a914:	e7db      	b.n	800a8ce <_dtoa_r+0x256>
 800a916:	2301      	movs	r3, #1
 800a918:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a91a:	e7f4      	b.n	800a906 <_dtoa_r+0x28e>
 800a91c:	f04f 0b01 	mov.w	fp, #1
 800a920:	465b      	mov	r3, fp
 800a922:	f8cd b020 	str.w	fp, [sp, #32]
 800a926:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800a92a:	e7d0      	b.n	800a8ce <_dtoa_r+0x256>
 800a92c:	3101      	adds	r1, #1
 800a92e:	0052      	lsls	r2, r2, #1
 800a930:	e7d1      	b.n	800a8d6 <_dtoa_r+0x25e>
 800a932:	bf00      	nop
 800a934:	f3af 8000 	nop.w
 800a938:	636f4361 	.word	0x636f4361
 800a93c:	3fd287a7 	.word	0x3fd287a7
 800a940:	8b60c8b3 	.word	0x8b60c8b3
 800a944:	3fc68a28 	.word	0x3fc68a28
 800a948:	509f79fb 	.word	0x509f79fb
 800a94c:	3fd34413 	.word	0x3fd34413
 800a950:	0800c367 	.word	0x0800c367
 800a954:	0800c37e 	.word	0x0800c37e
 800a958:	7ff00000 	.word	0x7ff00000
 800a95c:	0800c363 	.word	0x0800c363
 800a960:	0800c337 	.word	0x0800c337
 800a964:	0800c336 	.word	0x0800c336
 800a968:	3ff80000 	.word	0x3ff80000
 800a96c:	0800c4d0 	.word	0x0800c4d0
 800a970:	0800c3d6 	.word	0x0800c3d6
 800a974:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a978:	6018      	str	r0, [r3, #0]
 800a97a:	9b08      	ldr	r3, [sp, #32]
 800a97c:	2b0e      	cmp	r3, #14
 800a97e:	f200 80a1 	bhi.w	800aac4 <_dtoa_r+0x44c>
 800a982:	2c00      	cmp	r4, #0
 800a984:	f000 809e 	beq.w	800aac4 <_dtoa_r+0x44c>
 800a988:	2f00      	cmp	r7, #0
 800a98a:	dd33      	ble.n	800a9f4 <_dtoa_r+0x37c>
 800a98c:	4b9c      	ldr	r3, [pc, #624]	@ (800ac00 <_dtoa_r+0x588>)
 800a98e:	f007 020f 	and.w	r2, r7, #15
 800a992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a996:	05f8      	lsls	r0, r7, #23
 800a998:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a99c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800a9a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9a4:	d516      	bpl.n	800a9d4 <_dtoa_r+0x35c>
 800a9a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9aa:	4b96      	ldr	r3, [pc, #600]	@ (800ac04 <_dtoa_r+0x58c>)
 800a9ac:	2603      	movs	r6, #3
 800a9ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9b2:	f7f5 febb 	bl	800072c <__aeabi_ddiv>
 800a9b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9ba:	f004 040f 	and.w	r4, r4, #15
 800a9be:	4d91      	ldr	r5, [pc, #580]	@ (800ac04 <_dtoa_r+0x58c>)
 800a9c0:	b954      	cbnz	r4, 800a9d8 <_dtoa_r+0x360>
 800a9c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9ca:	f7f5 feaf 	bl	800072c <__aeabi_ddiv>
 800a9ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9d2:	e028      	b.n	800aa26 <_dtoa_r+0x3ae>
 800a9d4:	2602      	movs	r6, #2
 800a9d6:	e7f2      	b.n	800a9be <_dtoa_r+0x346>
 800a9d8:	07e1      	lsls	r1, r4, #31
 800a9da:	d508      	bpl.n	800a9ee <_dtoa_r+0x376>
 800a9dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a9e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9e4:	f7f5 fd78 	bl	80004d8 <__aeabi_dmul>
 800a9e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9ec:	3601      	adds	r6, #1
 800a9ee:	1064      	asrs	r4, r4, #1
 800a9f0:	3508      	adds	r5, #8
 800a9f2:	e7e5      	b.n	800a9c0 <_dtoa_r+0x348>
 800a9f4:	f000 80af 	beq.w	800ab56 <_dtoa_r+0x4de>
 800a9f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9fc:	427c      	negs	r4, r7
 800a9fe:	4b80      	ldr	r3, [pc, #512]	@ (800ac00 <_dtoa_r+0x588>)
 800aa00:	f004 020f 	and.w	r2, r4, #15
 800aa04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	f7f5 fd64 	bl	80004d8 <__aeabi_dmul>
 800aa10:	2602      	movs	r6, #2
 800aa12:	2300      	movs	r3, #0
 800aa14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa18:	4d7a      	ldr	r5, [pc, #488]	@ (800ac04 <_dtoa_r+0x58c>)
 800aa1a:	1124      	asrs	r4, r4, #4
 800aa1c:	2c00      	cmp	r4, #0
 800aa1e:	f040 808f 	bne.w	800ab40 <_dtoa_r+0x4c8>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1d3      	bne.n	800a9ce <_dtoa_r+0x356>
 800aa26:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800aa2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 8094 	beq.w	800ab5a <_dtoa_r+0x4e2>
 800aa32:	2200      	movs	r2, #0
 800aa34:	4620      	mov	r0, r4
 800aa36:	4629      	mov	r1, r5
 800aa38:	4b73      	ldr	r3, [pc, #460]	@ (800ac08 <_dtoa_r+0x590>)
 800aa3a:	f7f5 ffbf 	bl	80009bc <__aeabi_dcmplt>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	f000 808b 	beq.w	800ab5a <_dtoa_r+0x4e2>
 800aa44:	9b08      	ldr	r3, [sp, #32]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 8087 	beq.w	800ab5a <_dtoa_r+0x4e2>
 800aa4c:	f1bb 0f00 	cmp.w	fp, #0
 800aa50:	dd34      	ble.n	800aabc <_dtoa_r+0x444>
 800aa52:	4620      	mov	r0, r4
 800aa54:	2200      	movs	r2, #0
 800aa56:	4629      	mov	r1, r5
 800aa58:	4b6c      	ldr	r3, [pc, #432]	@ (800ac0c <_dtoa_r+0x594>)
 800aa5a:	f7f5 fd3d 	bl	80004d8 <__aeabi_dmul>
 800aa5e:	465c      	mov	r4, fp
 800aa60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa64:	f107 38ff 	add.w	r8, r7, #4294967295
 800aa68:	3601      	adds	r6, #1
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7f5 fcca 	bl	8000404 <__aeabi_i2d>
 800aa70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa74:	f7f5 fd30 	bl	80004d8 <__aeabi_dmul>
 800aa78:	2200      	movs	r2, #0
 800aa7a:	4b65      	ldr	r3, [pc, #404]	@ (800ac10 <_dtoa_r+0x598>)
 800aa7c:	f7f5 fb76 	bl	800016c <__adddf3>
 800aa80:	4605      	mov	r5, r0
 800aa82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa86:	2c00      	cmp	r4, #0
 800aa88:	d16a      	bne.n	800ab60 <_dtoa_r+0x4e8>
 800aa8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4b60      	ldr	r3, [pc, #384]	@ (800ac14 <_dtoa_r+0x59c>)
 800aa92:	f7f5 fb69 	bl	8000168 <__aeabi_dsub>
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa9e:	462a      	mov	r2, r5
 800aaa0:	4633      	mov	r3, r6
 800aaa2:	f7f5 ffa9 	bl	80009f8 <__aeabi_dcmpgt>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f040 8298 	bne.w	800afdc <_dtoa_r+0x964>
 800aaac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aab0:	462a      	mov	r2, r5
 800aab2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aab6:	f7f5 ff81 	bl	80009bc <__aeabi_dcmplt>
 800aaba:	bb38      	cbnz	r0, 800ab0c <_dtoa_r+0x494>
 800aabc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aac0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aac4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f2c0 8157 	blt.w	800ad7a <_dtoa_r+0x702>
 800aacc:	2f0e      	cmp	r7, #14
 800aace:	f300 8154 	bgt.w	800ad7a <_dtoa_r+0x702>
 800aad2:	4b4b      	ldr	r3, [pc, #300]	@ (800ac00 <_dtoa_r+0x588>)
 800aad4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aad8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aadc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aae0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f280 80e5 	bge.w	800acb2 <_dtoa_r+0x63a>
 800aae8:	9b08      	ldr	r3, [sp, #32]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f300 80e1 	bgt.w	800acb2 <_dtoa_r+0x63a>
 800aaf0:	d10c      	bne.n	800ab0c <_dtoa_r+0x494>
 800aaf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	4b46      	ldr	r3, [pc, #280]	@ (800ac14 <_dtoa_r+0x59c>)
 800aafa:	f7f5 fced 	bl	80004d8 <__aeabi_dmul>
 800aafe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab02:	f7f5 ff6f 	bl	80009e4 <__aeabi_dcmpge>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f000 8266 	beq.w	800afd8 <_dtoa_r+0x960>
 800ab0c:	2400      	movs	r4, #0
 800ab0e:	4625      	mov	r5, r4
 800ab10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab12:	4656      	mov	r6, sl
 800ab14:	ea6f 0803 	mvn.w	r8, r3
 800ab18:	2700      	movs	r7, #0
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4648      	mov	r0, r9
 800ab1e:	f000 fcbd 	bl	800b49c <_Bfree>
 800ab22:	2d00      	cmp	r5, #0
 800ab24:	f000 80bd 	beq.w	800aca2 <_dtoa_r+0x62a>
 800ab28:	b12f      	cbz	r7, 800ab36 <_dtoa_r+0x4be>
 800ab2a:	42af      	cmp	r7, r5
 800ab2c:	d003      	beq.n	800ab36 <_dtoa_r+0x4be>
 800ab2e:	4639      	mov	r1, r7
 800ab30:	4648      	mov	r0, r9
 800ab32:	f000 fcb3 	bl	800b49c <_Bfree>
 800ab36:	4629      	mov	r1, r5
 800ab38:	4648      	mov	r0, r9
 800ab3a:	f000 fcaf 	bl	800b49c <_Bfree>
 800ab3e:	e0b0      	b.n	800aca2 <_dtoa_r+0x62a>
 800ab40:	07e2      	lsls	r2, r4, #31
 800ab42:	d505      	bpl.n	800ab50 <_dtoa_r+0x4d8>
 800ab44:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab48:	f7f5 fcc6 	bl	80004d8 <__aeabi_dmul>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	3601      	adds	r6, #1
 800ab50:	1064      	asrs	r4, r4, #1
 800ab52:	3508      	adds	r5, #8
 800ab54:	e762      	b.n	800aa1c <_dtoa_r+0x3a4>
 800ab56:	2602      	movs	r6, #2
 800ab58:	e765      	b.n	800aa26 <_dtoa_r+0x3ae>
 800ab5a:	46b8      	mov	r8, r7
 800ab5c:	9c08      	ldr	r4, [sp, #32]
 800ab5e:	e784      	b.n	800aa6a <_dtoa_r+0x3f2>
 800ab60:	4b27      	ldr	r3, [pc, #156]	@ (800ac00 <_dtoa_r+0x588>)
 800ab62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab6c:	4454      	add	r4, sl
 800ab6e:	2900      	cmp	r1, #0
 800ab70:	d054      	beq.n	800ac1c <_dtoa_r+0x5a4>
 800ab72:	2000      	movs	r0, #0
 800ab74:	4928      	ldr	r1, [pc, #160]	@ (800ac18 <_dtoa_r+0x5a0>)
 800ab76:	f7f5 fdd9 	bl	800072c <__aeabi_ddiv>
 800ab7a:	4633      	mov	r3, r6
 800ab7c:	462a      	mov	r2, r5
 800ab7e:	f7f5 faf3 	bl	8000168 <__aeabi_dsub>
 800ab82:	4656      	mov	r6, sl
 800ab84:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab8c:	f7f5 ff54 	bl	8000a38 <__aeabi_d2iz>
 800ab90:	4605      	mov	r5, r0
 800ab92:	f7f5 fc37 	bl	8000404 <__aeabi_i2d>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab9e:	f7f5 fae3 	bl	8000168 <__aeabi_dsub>
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	3530      	adds	r5, #48	@ 0x30
 800aba8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abb0:	f806 5b01 	strb.w	r5, [r6], #1
 800abb4:	f7f5 ff02 	bl	80009bc <__aeabi_dcmplt>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d172      	bne.n	800aca2 <_dtoa_r+0x62a>
 800abbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abc0:	2000      	movs	r0, #0
 800abc2:	4911      	ldr	r1, [pc, #68]	@ (800ac08 <_dtoa_r+0x590>)
 800abc4:	f7f5 fad0 	bl	8000168 <__aeabi_dsub>
 800abc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abcc:	f7f5 fef6 	bl	80009bc <__aeabi_dcmplt>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	f040 80b4 	bne.w	800ad3e <_dtoa_r+0x6c6>
 800abd6:	42a6      	cmp	r6, r4
 800abd8:	f43f af70 	beq.w	800aabc <_dtoa_r+0x444>
 800abdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800abe0:	2200      	movs	r2, #0
 800abe2:	4b0a      	ldr	r3, [pc, #40]	@ (800ac0c <_dtoa_r+0x594>)
 800abe4:	f7f5 fc78 	bl	80004d8 <__aeabi_dmul>
 800abe8:	2200      	movs	r2, #0
 800abea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abf2:	4b06      	ldr	r3, [pc, #24]	@ (800ac0c <_dtoa_r+0x594>)
 800abf4:	f7f5 fc70 	bl	80004d8 <__aeabi_dmul>
 800abf8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abfc:	e7c4      	b.n	800ab88 <_dtoa_r+0x510>
 800abfe:	bf00      	nop
 800ac00:	0800c4d0 	.word	0x0800c4d0
 800ac04:	0800c4a8 	.word	0x0800c4a8
 800ac08:	3ff00000 	.word	0x3ff00000
 800ac0c:	40240000 	.word	0x40240000
 800ac10:	401c0000 	.word	0x401c0000
 800ac14:	40140000 	.word	0x40140000
 800ac18:	3fe00000 	.word	0x3fe00000
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4628      	mov	r0, r5
 800ac20:	f7f5 fc5a 	bl	80004d8 <__aeabi_dmul>
 800ac24:	4656      	mov	r6, sl
 800ac26:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac2a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ac2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac30:	f7f5 ff02 	bl	8000a38 <__aeabi_d2iz>
 800ac34:	4605      	mov	r5, r0
 800ac36:	f7f5 fbe5 	bl	8000404 <__aeabi_i2d>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac42:	f7f5 fa91 	bl	8000168 <__aeabi_dsub>
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	3530      	adds	r5, #48	@ 0x30
 800ac4c:	f806 5b01 	strb.w	r5, [r6], #1
 800ac50:	42a6      	cmp	r6, r4
 800ac52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac56:	f04f 0200 	mov.w	r2, #0
 800ac5a:	d124      	bne.n	800aca6 <_dtoa_r+0x62e>
 800ac5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac60:	4bae      	ldr	r3, [pc, #696]	@ (800af1c <_dtoa_r+0x8a4>)
 800ac62:	f7f5 fa83 	bl	800016c <__adddf3>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac6e:	f7f5 fec3 	bl	80009f8 <__aeabi_dcmpgt>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d163      	bne.n	800ad3e <_dtoa_r+0x6c6>
 800ac76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	49a7      	ldr	r1, [pc, #668]	@ (800af1c <_dtoa_r+0x8a4>)
 800ac7e:	f7f5 fa73 	bl	8000168 <__aeabi_dsub>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac8a:	f7f5 fe97 	bl	80009bc <__aeabi_dcmplt>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f43f af14 	beq.w	800aabc <_dtoa_r+0x444>
 800ac94:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ac96:	1e73      	subs	r3, r6, #1
 800ac98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac9e:	2b30      	cmp	r3, #48	@ 0x30
 800aca0:	d0f8      	beq.n	800ac94 <_dtoa_r+0x61c>
 800aca2:	4647      	mov	r7, r8
 800aca4:	e03b      	b.n	800ad1e <_dtoa_r+0x6a6>
 800aca6:	4b9e      	ldr	r3, [pc, #632]	@ (800af20 <_dtoa_r+0x8a8>)
 800aca8:	f7f5 fc16 	bl	80004d8 <__aeabi_dmul>
 800acac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800acb0:	e7bc      	b.n	800ac2c <_dtoa_r+0x5b4>
 800acb2:	4656      	mov	r6, sl
 800acb4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800acb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acbc:	4620      	mov	r0, r4
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7f5 fd34 	bl	800072c <__aeabi_ddiv>
 800acc4:	f7f5 feb8 	bl	8000a38 <__aeabi_d2iz>
 800acc8:	4680      	mov	r8, r0
 800acca:	f7f5 fb9b 	bl	8000404 <__aeabi_i2d>
 800acce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acd2:	f7f5 fc01 	bl	80004d8 <__aeabi_dmul>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4620      	mov	r0, r4
 800acdc:	4629      	mov	r1, r5
 800acde:	f7f5 fa43 	bl	8000168 <__aeabi_dsub>
 800ace2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ace6:	9d08      	ldr	r5, [sp, #32]
 800ace8:	f806 4b01 	strb.w	r4, [r6], #1
 800acec:	eba6 040a 	sub.w	r4, r6, sl
 800acf0:	42a5      	cmp	r5, r4
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	d133      	bne.n	800ad60 <_dtoa_r+0x6e8>
 800acf8:	f7f5 fa38 	bl	800016c <__adddf3>
 800acfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad00:	4604      	mov	r4, r0
 800ad02:	460d      	mov	r5, r1
 800ad04:	f7f5 fe78 	bl	80009f8 <__aeabi_dcmpgt>
 800ad08:	b9c0      	cbnz	r0, 800ad3c <_dtoa_r+0x6c4>
 800ad0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad0e:	4620      	mov	r0, r4
 800ad10:	4629      	mov	r1, r5
 800ad12:	f7f5 fe49 	bl	80009a8 <__aeabi_dcmpeq>
 800ad16:	b110      	cbz	r0, 800ad1e <_dtoa_r+0x6a6>
 800ad18:	f018 0f01 	tst.w	r8, #1
 800ad1c:	d10e      	bne.n	800ad3c <_dtoa_r+0x6c4>
 800ad1e:	4648      	mov	r0, r9
 800ad20:	9903      	ldr	r1, [sp, #12]
 800ad22:	f000 fbbb 	bl	800b49c <_Bfree>
 800ad26:	2300      	movs	r3, #0
 800ad28:	7033      	strb	r3, [r6, #0]
 800ad2a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ad2c:	3701      	adds	r7, #1
 800ad2e:	601f      	str	r7, [r3, #0]
 800ad30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 824b 	beq.w	800b1ce <_dtoa_r+0xb56>
 800ad38:	601e      	str	r6, [r3, #0]
 800ad3a:	e248      	b.n	800b1ce <_dtoa_r+0xb56>
 800ad3c:	46b8      	mov	r8, r7
 800ad3e:	4633      	mov	r3, r6
 800ad40:	461e      	mov	r6, r3
 800ad42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad46:	2a39      	cmp	r2, #57	@ 0x39
 800ad48:	d106      	bne.n	800ad58 <_dtoa_r+0x6e0>
 800ad4a:	459a      	cmp	sl, r3
 800ad4c:	d1f8      	bne.n	800ad40 <_dtoa_r+0x6c8>
 800ad4e:	2230      	movs	r2, #48	@ 0x30
 800ad50:	f108 0801 	add.w	r8, r8, #1
 800ad54:	f88a 2000 	strb.w	r2, [sl]
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	3201      	adds	r2, #1
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	e7a0      	b.n	800aca2 <_dtoa_r+0x62a>
 800ad60:	2200      	movs	r2, #0
 800ad62:	4b6f      	ldr	r3, [pc, #444]	@ (800af20 <_dtoa_r+0x8a8>)
 800ad64:	f7f5 fbb8 	bl	80004d8 <__aeabi_dmul>
 800ad68:	2200      	movs	r2, #0
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	460d      	mov	r5, r1
 800ad70:	f7f5 fe1a 	bl	80009a8 <__aeabi_dcmpeq>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d09f      	beq.n	800acb8 <_dtoa_r+0x640>
 800ad78:	e7d1      	b.n	800ad1e <_dtoa_r+0x6a6>
 800ad7a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad7c:	2a00      	cmp	r2, #0
 800ad7e:	f000 80ea 	beq.w	800af56 <_dtoa_r+0x8de>
 800ad82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ad84:	2a01      	cmp	r2, #1
 800ad86:	f300 80cd 	bgt.w	800af24 <_dtoa_r+0x8ac>
 800ad8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ad8c:	2a00      	cmp	r2, #0
 800ad8e:	f000 80c1 	beq.w	800af14 <_dtoa_r+0x89c>
 800ad92:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ad96:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad98:	9e04      	ldr	r6, [sp, #16]
 800ad9a:	9a04      	ldr	r2, [sp, #16]
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	441a      	add	r2, r3
 800ada0:	9204      	str	r2, [sp, #16]
 800ada2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ada4:	4648      	mov	r0, r9
 800ada6:	441a      	add	r2, r3
 800ada8:	9209      	str	r2, [sp, #36]	@ 0x24
 800adaa:	f000 fc2b 	bl	800b604 <__i2b>
 800adae:	4605      	mov	r5, r0
 800adb0:	b166      	cbz	r6, 800adcc <_dtoa_r+0x754>
 800adb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	dd09      	ble.n	800adcc <_dtoa_r+0x754>
 800adb8:	42b3      	cmp	r3, r6
 800adba:	bfa8      	it	ge
 800adbc:	4633      	movge	r3, r6
 800adbe:	9a04      	ldr	r2, [sp, #16]
 800adc0:	1af6      	subs	r6, r6, r3
 800adc2:	1ad2      	subs	r2, r2, r3
 800adc4:	9204      	str	r2, [sp, #16]
 800adc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	9309      	str	r3, [sp, #36]	@ 0x24
 800adcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adce:	b30b      	cbz	r3, 800ae14 <_dtoa_r+0x79c>
 800add0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 80c6 	beq.w	800af64 <_dtoa_r+0x8ec>
 800add8:	2c00      	cmp	r4, #0
 800adda:	f000 80c0 	beq.w	800af5e <_dtoa_r+0x8e6>
 800adde:	4629      	mov	r1, r5
 800ade0:	4622      	mov	r2, r4
 800ade2:	4648      	mov	r0, r9
 800ade4:	f000 fcc6 	bl	800b774 <__pow5mult>
 800ade8:	9a03      	ldr	r2, [sp, #12]
 800adea:	4601      	mov	r1, r0
 800adec:	4605      	mov	r5, r0
 800adee:	4648      	mov	r0, r9
 800adf0:	f000 fc1e 	bl	800b630 <__multiply>
 800adf4:	9903      	ldr	r1, [sp, #12]
 800adf6:	4680      	mov	r8, r0
 800adf8:	4648      	mov	r0, r9
 800adfa:	f000 fb4f 	bl	800b49c <_Bfree>
 800adfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae00:	1b1b      	subs	r3, r3, r4
 800ae02:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae04:	f000 80b1 	beq.w	800af6a <_dtoa_r+0x8f2>
 800ae08:	4641      	mov	r1, r8
 800ae0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae0c:	4648      	mov	r0, r9
 800ae0e:	f000 fcb1 	bl	800b774 <__pow5mult>
 800ae12:	9003      	str	r0, [sp, #12]
 800ae14:	2101      	movs	r1, #1
 800ae16:	4648      	mov	r0, r9
 800ae18:	f000 fbf4 	bl	800b604 <__i2b>
 800ae1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae1e:	4604      	mov	r4, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f000 81d8 	beq.w	800b1d6 <_dtoa_r+0xb5e>
 800ae26:	461a      	mov	r2, r3
 800ae28:	4601      	mov	r1, r0
 800ae2a:	4648      	mov	r0, r9
 800ae2c:	f000 fca2 	bl	800b774 <__pow5mult>
 800ae30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ae32:	4604      	mov	r4, r0
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	f300 809f 	bgt.w	800af78 <_dtoa_r+0x900>
 800ae3a:	9b06      	ldr	r3, [sp, #24]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f040 8097 	bne.w	800af70 <_dtoa_r+0x8f8>
 800ae42:	9b07      	ldr	r3, [sp, #28]
 800ae44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f040 8093 	bne.w	800af74 <_dtoa_r+0x8fc>
 800ae4e:	9b07      	ldr	r3, [sp, #28]
 800ae50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae54:	0d1b      	lsrs	r3, r3, #20
 800ae56:	051b      	lsls	r3, r3, #20
 800ae58:	b133      	cbz	r3, 800ae68 <_dtoa_r+0x7f0>
 800ae5a:	9b04      	ldr	r3, [sp, #16]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	9304      	str	r3, [sp, #16]
 800ae60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae62:	3301      	adds	r3, #1
 800ae64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae66:	2301      	movs	r3, #1
 800ae68:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 81b8 	beq.w	800b1e2 <_dtoa_r+0xb6a>
 800ae72:	6923      	ldr	r3, [r4, #16]
 800ae74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae78:	6918      	ldr	r0, [r3, #16]
 800ae7a:	f000 fb77 	bl	800b56c <__hi0bits>
 800ae7e:	f1c0 0020 	rsb	r0, r0, #32
 800ae82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae84:	4418      	add	r0, r3
 800ae86:	f010 001f 	ands.w	r0, r0, #31
 800ae8a:	f000 8082 	beq.w	800af92 <_dtoa_r+0x91a>
 800ae8e:	f1c0 0320 	rsb	r3, r0, #32
 800ae92:	2b04      	cmp	r3, #4
 800ae94:	dd73      	ble.n	800af7e <_dtoa_r+0x906>
 800ae96:	9b04      	ldr	r3, [sp, #16]
 800ae98:	f1c0 001c 	rsb	r0, r0, #28
 800ae9c:	4403      	add	r3, r0
 800ae9e:	9304      	str	r3, [sp, #16]
 800aea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea2:	4406      	add	r6, r0
 800aea4:	4403      	add	r3, r0
 800aea6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea8:	9b04      	ldr	r3, [sp, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	dd05      	ble.n	800aeba <_dtoa_r+0x842>
 800aeae:	461a      	mov	r2, r3
 800aeb0:	4648      	mov	r0, r9
 800aeb2:	9903      	ldr	r1, [sp, #12]
 800aeb4:	f000 fcb8 	bl	800b828 <__lshift>
 800aeb8:	9003      	str	r0, [sp, #12]
 800aeba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	dd05      	ble.n	800aecc <_dtoa_r+0x854>
 800aec0:	4621      	mov	r1, r4
 800aec2:	461a      	mov	r2, r3
 800aec4:	4648      	mov	r0, r9
 800aec6:	f000 fcaf 	bl	800b828 <__lshift>
 800aeca:	4604      	mov	r4, r0
 800aecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d061      	beq.n	800af96 <_dtoa_r+0x91e>
 800aed2:	4621      	mov	r1, r4
 800aed4:	9803      	ldr	r0, [sp, #12]
 800aed6:	f000 fd13 	bl	800b900 <__mcmp>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	da5b      	bge.n	800af96 <_dtoa_r+0x91e>
 800aede:	2300      	movs	r3, #0
 800aee0:	220a      	movs	r2, #10
 800aee2:	4648      	mov	r0, r9
 800aee4:	9903      	ldr	r1, [sp, #12]
 800aee6:	f000 fafb 	bl	800b4e0 <__multadd>
 800aeea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aeec:	f107 38ff 	add.w	r8, r7, #4294967295
 800aef0:	9003      	str	r0, [sp, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 8177 	beq.w	800b1e6 <_dtoa_r+0xb6e>
 800aef8:	4629      	mov	r1, r5
 800aefa:	2300      	movs	r3, #0
 800aefc:	220a      	movs	r2, #10
 800aefe:	4648      	mov	r0, r9
 800af00:	f000 faee 	bl	800b4e0 <__multadd>
 800af04:	f1bb 0f00 	cmp.w	fp, #0
 800af08:	4605      	mov	r5, r0
 800af0a:	dc6f      	bgt.n	800afec <_dtoa_r+0x974>
 800af0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800af0e:	2b02      	cmp	r3, #2
 800af10:	dc49      	bgt.n	800afa6 <_dtoa_r+0x92e>
 800af12:	e06b      	b.n	800afec <_dtoa_r+0x974>
 800af14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af1a:	e73c      	b.n	800ad96 <_dtoa_r+0x71e>
 800af1c:	3fe00000 	.word	0x3fe00000
 800af20:	40240000 	.word	0x40240000
 800af24:	9b08      	ldr	r3, [sp, #32]
 800af26:	1e5c      	subs	r4, r3, #1
 800af28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af2a:	42a3      	cmp	r3, r4
 800af2c:	db09      	blt.n	800af42 <_dtoa_r+0x8ca>
 800af2e:	1b1c      	subs	r4, r3, r4
 800af30:	9b08      	ldr	r3, [sp, #32]
 800af32:	2b00      	cmp	r3, #0
 800af34:	f6bf af30 	bge.w	800ad98 <_dtoa_r+0x720>
 800af38:	9b04      	ldr	r3, [sp, #16]
 800af3a:	9a08      	ldr	r2, [sp, #32]
 800af3c:	1a9e      	subs	r6, r3, r2
 800af3e:	2300      	movs	r3, #0
 800af40:	e72b      	b.n	800ad9a <_dtoa_r+0x722>
 800af42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af46:	1ae3      	subs	r3, r4, r3
 800af48:	441a      	add	r2, r3
 800af4a:	940a      	str	r4, [sp, #40]	@ 0x28
 800af4c:	9e04      	ldr	r6, [sp, #16]
 800af4e:	2400      	movs	r4, #0
 800af50:	9b08      	ldr	r3, [sp, #32]
 800af52:	920e      	str	r2, [sp, #56]	@ 0x38
 800af54:	e721      	b.n	800ad9a <_dtoa_r+0x722>
 800af56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af58:	9e04      	ldr	r6, [sp, #16]
 800af5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af5c:	e728      	b.n	800adb0 <_dtoa_r+0x738>
 800af5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800af62:	e751      	b.n	800ae08 <_dtoa_r+0x790>
 800af64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af66:	9903      	ldr	r1, [sp, #12]
 800af68:	e750      	b.n	800ae0c <_dtoa_r+0x794>
 800af6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af6e:	e751      	b.n	800ae14 <_dtoa_r+0x79c>
 800af70:	2300      	movs	r3, #0
 800af72:	e779      	b.n	800ae68 <_dtoa_r+0x7f0>
 800af74:	9b06      	ldr	r3, [sp, #24]
 800af76:	e777      	b.n	800ae68 <_dtoa_r+0x7f0>
 800af78:	2300      	movs	r3, #0
 800af7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800af7c:	e779      	b.n	800ae72 <_dtoa_r+0x7fa>
 800af7e:	d093      	beq.n	800aea8 <_dtoa_r+0x830>
 800af80:	9a04      	ldr	r2, [sp, #16]
 800af82:	331c      	adds	r3, #28
 800af84:	441a      	add	r2, r3
 800af86:	9204      	str	r2, [sp, #16]
 800af88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af8a:	441e      	add	r6, r3
 800af8c:	441a      	add	r2, r3
 800af8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800af90:	e78a      	b.n	800aea8 <_dtoa_r+0x830>
 800af92:	4603      	mov	r3, r0
 800af94:	e7f4      	b.n	800af80 <_dtoa_r+0x908>
 800af96:	9b08      	ldr	r3, [sp, #32]
 800af98:	46b8      	mov	r8, r7
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	dc20      	bgt.n	800afe0 <_dtoa_r+0x968>
 800af9e:	469b      	mov	fp, r3
 800afa0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	dd1e      	ble.n	800afe4 <_dtoa_r+0x96c>
 800afa6:	f1bb 0f00 	cmp.w	fp, #0
 800afaa:	f47f adb1 	bne.w	800ab10 <_dtoa_r+0x498>
 800afae:	4621      	mov	r1, r4
 800afb0:	465b      	mov	r3, fp
 800afb2:	2205      	movs	r2, #5
 800afb4:	4648      	mov	r0, r9
 800afb6:	f000 fa93 	bl	800b4e0 <__multadd>
 800afba:	4601      	mov	r1, r0
 800afbc:	4604      	mov	r4, r0
 800afbe:	9803      	ldr	r0, [sp, #12]
 800afc0:	f000 fc9e 	bl	800b900 <__mcmp>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	f77f ada3 	ble.w	800ab10 <_dtoa_r+0x498>
 800afca:	4656      	mov	r6, sl
 800afcc:	2331      	movs	r3, #49	@ 0x31
 800afce:	f108 0801 	add.w	r8, r8, #1
 800afd2:	f806 3b01 	strb.w	r3, [r6], #1
 800afd6:	e59f      	b.n	800ab18 <_dtoa_r+0x4a0>
 800afd8:	46b8      	mov	r8, r7
 800afda:	9c08      	ldr	r4, [sp, #32]
 800afdc:	4625      	mov	r5, r4
 800afde:	e7f4      	b.n	800afca <_dtoa_r+0x952>
 800afe0:	f8dd b020 	ldr.w	fp, [sp, #32]
 800afe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 8101 	beq.w	800b1ee <_dtoa_r+0xb76>
 800afec:	2e00      	cmp	r6, #0
 800afee:	dd05      	ble.n	800affc <_dtoa_r+0x984>
 800aff0:	4629      	mov	r1, r5
 800aff2:	4632      	mov	r2, r6
 800aff4:	4648      	mov	r0, r9
 800aff6:	f000 fc17 	bl	800b828 <__lshift>
 800affa:	4605      	mov	r5, r0
 800affc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800affe:	2b00      	cmp	r3, #0
 800b000:	d05c      	beq.n	800b0bc <_dtoa_r+0xa44>
 800b002:	4648      	mov	r0, r9
 800b004:	6869      	ldr	r1, [r5, #4]
 800b006:	f000 fa09 	bl	800b41c <_Balloc>
 800b00a:	4606      	mov	r6, r0
 800b00c:	b928      	cbnz	r0, 800b01a <_dtoa_r+0x9a2>
 800b00e:	4602      	mov	r2, r0
 800b010:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b014:	4b80      	ldr	r3, [pc, #512]	@ (800b218 <_dtoa_r+0xba0>)
 800b016:	f7ff bb43 	b.w	800a6a0 <_dtoa_r+0x28>
 800b01a:	692a      	ldr	r2, [r5, #16]
 800b01c:	f105 010c 	add.w	r1, r5, #12
 800b020:	3202      	adds	r2, #2
 800b022:	0092      	lsls	r2, r2, #2
 800b024:	300c      	adds	r0, #12
 800b026:	f000 fe2b 	bl	800bc80 <memcpy>
 800b02a:	2201      	movs	r2, #1
 800b02c:	4631      	mov	r1, r6
 800b02e:	4648      	mov	r0, r9
 800b030:	f000 fbfa 	bl	800b828 <__lshift>
 800b034:	462f      	mov	r7, r5
 800b036:	4605      	mov	r5, r0
 800b038:	f10a 0301 	add.w	r3, sl, #1
 800b03c:	9304      	str	r3, [sp, #16]
 800b03e:	eb0a 030b 	add.w	r3, sl, fp
 800b042:	930a      	str	r3, [sp, #40]	@ 0x28
 800b044:	9b06      	ldr	r3, [sp, #24]
 800b046:	f003 0301 	and.w	r3, r3, #1
 800b04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b04c:	9b04      	ldr	r3, [sp, #16]
 800b04e:	4621      	mov	r1, r4
 800b050:	9803      	ldr	r0, [sp, #12]
 800b052:	f103 3bff 	add.w	fp, r3, #4294967295
 800b056:	f7ff fa84 	bl	800a562 <quorem>
 800b05a:	4603      	mov	r3, r0
 800b05c:	4639      	mov	r1, r7
 800b05e:	3330      	adds	r3, #48	@ 0x30
 800b060:	9006      	str	r0, [sp, #24]
 800b062:	9803      	ldr	r0, [sp, #12]
 800b064:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b066:	f000 fc4b 	bl	800b900 <__mcmp>
 800b06a:	462a      	mov	r2, r5
 800b06c:	9008      	str	r0, [sp, #32]
 800b06e:	4621      	mov	r1, r4
 800b070:	4648      	mov	r0, r9
 800b072:	f000 fc61 	bl	800b938 <__mdiff>
 800b076:	68c2      	ldr	r2, [r0, #12]
 800b078:	4606      	mov	r6, r0
 800b07a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b07c:	bb02      	cbnz	r2, 800b0c0 <_dtoa_r+0xa48>
 800b07e:	4601      	mov	r1, r0
 800b080:	9803      	ldr	r0, [sp, #12]
 800b082:	f000 fc3d 	bl	800b900 <__mcmp>
 800b086:	4602      	mov	r2, r0
 800b088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b08a:	4631      	mov	r1, r6
 800b08c:	4648      	mov	r0, r9
 800b08e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800b092:	f000 fa03 	bl	800b49c <_Bfree>
 800b096:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b098:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b09a:	9e04      	ldr	r6, [sp, #16]
 800b09c:	ea42 0103 	orr.w	r1, r2, r3
 800b0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a2:	4319      	orrs	r1, r3
 800b0a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0a6:	d10d      	bne.n	800b0c4 <_dtoa_r+0xa4c>
 800b0a8:	2b39      	cmp	r3, #57	@ 0x39
 800b0aa:	d027      	beq.n	800b0fc <_dtoa_r+0xa84>
 800b0ac:	9a08      	ldr	r2, [sp, #32]
 800b0ae:	2a00      	cmp	r2, #0
 800b0b0:	dd01      	ble.n	800b0b6 <_dtoa_r+0xa3e>
 800b0b2:	9b06      	ldr	r3, [sp, #24]
 800b0b4:	3331      	adds	r3, #49	@ 0x31
 800b0b6:	f88b 3000 	strb.w	r3, [fp]
 800b0ba:	e52e      	b.n	800ab1a <_dtoa_r+0x4a2>
 800b0bc:	4628      	mov	r0, r5
 800b0be:	e7b9      	b.n	800b034 <_dtoa_r+0x9bc>
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	e7e2      	b.n	800b08a <_dtoa_r+0xa12>
 800b0c4:	9908      	ldr	r1, [sp, #32]
 800b0c6:	2900      	cmp	r1, #0
 800b0c8:	db04      	blt.n	800b0d4 <_dtoa_r+0xa5c>
 800b0ca:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b0cc:	4301      	orrs	r1, r0
 800b0ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0d0:	4301      	orrs	r1, r0
 800b0d2:	d120      	bne.n	800b116 <_dtoa_r+0xa9e>
 800b0d4:	2a00      	cmp	r2, #0
 800b0d6:	ddee      	ble.n	800b0b6 <_dtoa_r+0xa3e>
 800b0d8:	2201      	movs	r2, #1
 800b0da:	9903      	ldr	r1, [sp, #12]
 800b0dc:	4648      	mov	r0, r9
 800b0de:	9304      	str	r3, [sp, #16]
 800b0e0:	f000 fba2 	bl	800b828 <__lshift>
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	9003      	str	r0, [sp, #12]
 800b0e8:	f000 fc0a 	bl	800b900 <__mcmp>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	9b04      	ldr	r3, [sp, #16]
 800b0f0:	dc02      	bgt.n	800b0f8 <_dtoa_r+0xa80>
 800b0f2:	d1e0      	bne.n	800b0b6 <_dtoa_r+0xa3e>
 800b0f4:	07da      	lsls	r2, r3, #31
 800b0f6:	d5de      	bpl.n	800b0b6 <_dtoa_r+0xa3e>
 800b0f8:	2b39      	cmp	r3, #57	@ 0x39
 800b0fa:	d1da      	bne.n	800b0b2 <_dtoa_r+0xa3a>
 800b0fc:	2339      	movs	r3, #57	@ 0x39
 800b0fe:	f88b 3000 	strb.w	r3, [fp]
 800b102:	4633      	mov	r3, r6
 800b104:	461e      	mov	r6, r3
 800b106:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	2a39      	cmp	r2, #57	@ 0x39
 800b10e:	d04e      	beq.n	800b1ae <_dtoa_r+0xb36>
 800b110:	3201      	adds	r2, #1
 800b112:	701a      	strb	r2, [r3, #0]
 800b114:	e501      	b.n	800ab1a <_dtoa_r+0x4a2>
 800b116:	2a00      	cmp	r2, #0
 800b118:	dd03      	ble.n	800b122 <_dtoa_r+0xaaa>
 800b11a:	2b39      	cmp	r3, #57	@ 0x39
 800b11c:	d0ee      	beq.n	800b0fc <_dtoa_r+0xa84>
 800b11e:	3301      	adds	r3, #1
 800b120:	e7c9      	b.n	800b0b6 <_dtoa_r+0xa3e>
 800b122:	9a04      	ldr	r2, [sp, #16]
 800b124:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b126:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b12a:	428a      	cmp	r2, r1
 800b12c:	d028      	beq.n	800b180 <_dtoa_r+0xb08>
 800b12e:	2300      	movs	r3, #0
 800b130:	220a      	movs	r2, #10
 800b132:	9903      	ldr	r1, [sp, #12]
 800b134:	4648      	mov	r0, r9
 800b136:	f000 f9d3 	bl	800b4e0 <__multadd>
 800b13a:	42af      	cmp	r7, r5
 800b13c:	9003      	str	r0, [sp, #12]
 800b13e:	f04f 0300 	mov.w	r3, #0
 800b142:	f04f 020a 	mov.w	r2, #10
 800b146:	4639      	mov	r1, r7
 800b148:	4648      	mov	r0, r9
 800b14a:	d107      	bne.n	800b15c <_dtoa_r+0xae4>
 800b14c:	f000 f9c8 	bl	800b4e0 <__multadd>
 800b150:	4607      	mov	r7, r0
 800b152:	4605      	mov	r5, r0
 800b154:	9b04      	ldr	r3, [sp, #16]
 800b156:	3301      	adds	r3, #1
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	e777      	b.n	800b04c <_dtoa_r+0x9d4>
 800b15c:	f000 f9c0 	bl	800b4e0 <__multadd>
 800b160:	4629      	mov	r1, r5
 800b162:	4607      	mov	r7, r0
 800b164:	2300      	movs	r3, #0
 800b166:	220a      	movs	r2, #10
 800b168:	4648      	mov	r0, r9
 800b16a:	f000 f9b9 	bl	800b4e0 <__multadd>
 800b16e:	4605      	mov	r5, r0
 800b170:	e7f0      	b.n	800b154 <_dtoa_r+0xadc>
 800b172:	f1bb 0f00 	cmp.w	fp, #0
 800b176:	bfcc      	ite	gt
 800b178:	465e      	movgt	r6, fp
 800b17a:	2601      	movle	r6, #1
 800b17c:	2700      	movs	r7, #0
 800b17e:	4456      	add	r6, sl
 800b180:	2201      	movs	r2, #1
 800b182:	9903      	ldr	r1, [sp, #12]
 800b184:	4648      	mov	r0, r9
 800b186:	9304      	str	r3, [sp, #16]
 800b188:	f000 fb4e 	bl	800b828 <__lshift>
 800b18c:	4621      	mov	r1, r4
 800b18e:	9003      	str	r0, [sp, #12]
 800b190:	f000 fbb6 	bl	800b900 <__mcmp>
 800b194:	2800      	cmp	r0, #0
 800b196:	dcb4      	bgt.n	800b102 <_dtoa_r+0xa8a>
 800b198:	d102      	bne.n	800b1a0 <_dtoa_r+0xb28>
 800b19a:	9b04      	ldr	r3, [sp, #16]
 800b19c:	07db      	lsls	r3, r3, #31
 800b19e:	d4b0      	bmi.n	800b102 <_dtoa_r+0xa8a>
 800b1a0:	4633      	mov	r3, r6
 800b1a2:	461e      	mov	r6, r3
 800b1a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1a8:	2a30      	cmp	r2, #48	@ 0x30
 800b1aa:	d0fa      	beq.n	800b1a2 <_dtoa_r+0xb2a>
 800b1ac:	e4b5      	b.n	800ab1a <_dtoa_r+0x4a2>
 800b1ae:	459a      	cmp	sl, r3
 800b1b0:	d1a8      	bne.n	800b104 <_dtoa_r+0xa8c>
 800b1b2:	2331      	movs	r3, #49	@ 0x31
 800b1b4:	f108 0801 	add.w	r8, r8, #1
 800b1b8:	f88a 3000 	strb.w	r3, [sl]
 800b1bc:	e4ad      	b.n	800ab1a <_dtoa_r+0x4a2>
 800b1be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b1c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b21c <_dtoa_r+0xba4>
 800b1c4:	b11b      	cbz	r3, 800b1ce <_dtoa_r+0xb56>
 800b1c6:	f10a 0308 	add.w	r3, sl, #8
 800b1ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b1cc:	6013      	str	r3, [r2, #0]
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	b017      	add	sp, #92	@ 0x5c
 800b1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	f77f ae2e 	ble.w	800ae3a <_dtoa_r+0x7c2>
 800b1de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1e2:	2001      	movs	r0, #1
 800b1e4:	e64d      	b.n	800ae82 <_dtoa_r+0x80a>
 800b1e6:	f1bb 0f00 	cmp.w	fp, #0
 800b1ea:	f77f aed9 	ble.w	800afa0 <_dtoa_r+0x928>
 800b1ee:	4656      	mov	r6, sl
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	9803      	ldr	r0, [sp, #12]
 800b1f4:	f7ff f9b5 	bl	800a562 <quorem>
 800b1f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b1fc:	f806 3b01 	strb.w	r3, [r6], #1
 800b200:	eba6 020a 	sub.w	r2, r6, sl
 800b204:	4593      	cmp	fp, r2
 800b206:	ddb4      	ble.n	800b172 <_dtoa_r+0xafa>
 800b208:	2300      	movs	r3, #0
 800b20a:	220a      	movs	r2, #10
 800b20c:	4648      	mov	r0, r9
 800b20e:	9903      	ldr	r1, [sp, #12]
 800b210:	f000 f966 	bl	800b4e0 <__multadd>
 800b214:	9003      	str	r0, [sp, #12]
 800b216:	e7eb      	b.n	800b1f0 <_dtoa_r+0xb78>
 800b218:	0800c3d6 	.word	0x0800c3d6
 800b21c:	0800c35a 	.word	0x0800c35a

0800b220 <_free_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4605      	mov	r5, r0
 800b224:	2900      	cmp	r1, #0
 800b226:	d040      	beq.n	800b2aa <_free_r+0x8a>
 800b228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b22c:	1f0c      	subs	r4, r1, #4
 800b22e:	2b00      	cmp	r3, #0
 800b230:	bfb8      	it	lt
 800b232:	18e4      	addlt	r4, r4, r3
 800b234:	f000 f8e6 	bl	800b404 <__malloc_lock>
 800b238:	4a1c      	ldr	r2, [pc, #112]	@ (800b2ac <_free_r+0x8c>)
 800b23a:	6813      	ldr	r3, [r2, #0]
 800b23c:	b933      	cbnz	r3, 800b24c <_free_r+0x2c>
 800b23e:	6063      	str	r3, [r4, #4]
 800b240:	6014      	str	r4, [r2, #0]
 800b242:	4628      	mov	r0, r5
 800b244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b248:	f000 b8e2 	b.w	800b410 <__malloc_unlock>
 800b24c:	42a3      	cmp	r3, r4
 800b24e:	d908      	bls.n	800b262 <_free_r+0x42>
 800b250:	6820      	ldr	r0, [r4, #0]
 800b252:	1821      	adds	r1, r4, r0
 800b254:	428b      	cmp	r3, r1
 800b256:	bf01      	itttt	eq
 800b258:	6819      	ldreq	r1, [r3, #0]
 800b25a:	685b      	ldreq	r3, [r3, #4]
 800b25c:	1809      	addeq	r1, r1, r0
 800b25e:	6021      	streq	r1, [r4, #0]
 800b260:	e7ed      	b.n	800b23e <_free_r+0x1e>
 800b262:	461a      	mov	r2, r3
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	b10b      	cbz	r3, 800b26c <_free_r+0x4c>
 800b268:	42a3      	cmp	r3, r4
 800b26a:	d9fa      	bls.n	800b262 <_free_r+0x42>
 800b26c:	6811      	ldr	r1, [r2, #0]
 800b26e:	1850      	adds	r0, r2, r1
 800b270:	42a0      	cmp	r0, r4
 800b272:	d10b      	bne.n	800b28c <_free_r+0x6c>
 800b274:	6820      	ldr	r0, [r4, #0]
 800b276:	4401      	add	r1, r0
 800b278:	1850      	adds	r0, r2, r1
 800b27a:	4283      	cmp	r3, r0
 800b27c:	6011      	str	r1, [r2, #0]
 800b27e:	d1e0      	bne.n	800b242 <_free_r+0x22>
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	4408      	add	r0, r1
 800b286:	6010      	str	r0, [r2, #0]
 800b288:	6053      	str	r3, [r2, #4]
 800b28a:	e7da      	b.n	800b242 <_free_r+0x22>
 800b28c:	d902      	bls.n	800b294 <_free_r+0x74>
 800b28e:	230c      	movs	r3, #12
 800b290:	602b      	str	r3, [r5, #0]
 800b292:	e7d6      	b.n	800b242 <_free_r+0x22>
 800b294:	6820      	ldr	r0, [r4, #0]
 800b296:	1821      	adds	r1, r4, r0
 800b298:	428b      	cmp	r3, r1
 800b29a:	bf01      	itttt	eq
 800b29c:	6819      	ldreq	r1, [r3, #0]
 800b29e:	685b      	ldreq	r3, [r3, #4]
 800b2a0:	1809      	addeq	r1, r1, r0
 800b2a2:	6021      	streq	r1, [r4, #0]
 800b2a4:	6063      	str	r3, [r4, #4]
 800b2a6:	6054      	str	r4, [r2, #4]
 800b2a8:	e7cb      	b.n	800b242 <_free_r+0x22>
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
 800b2ac:	2000171c 	.word	0x2000171c

0800b2b0 <malloc>:
 800b2b0:	4b02      	ldr	r3, [pc, #8]	@ (800b2bc <malloc+0xc>)
 800b2b2:	4601      	mov	r1, r0
 800b2b4:	6818      	ldr	r0, [r3, #0]
 800b2b6:	f000 b825 	b.w	800b304 <_malloc_r>
 800b2ba:	bf00      	nop
 800b2bc:	2000018c 	.word	0x2000018c

0800b2c0 <sbrk_aligned>:
 800b2c0:	b570      	push	{r4, r5, r6, lr}
 800b2c2:	4e0f      	ldr	r6, [pc, #60]	@ (800b300 <sbrk_aligned+0x40>)
 800b2c4:	460c      	mov	r4, r1
 800b2c6:	6831      	ldr	r1, [r6, #0]
 800b2c8:	4605      	mov	r5, r0
 800b2ca:	b911      	cbnz	r1, 800b2d2 <sbrk_aligned+0x12>
 800b2cc:	f000 fcc8 	bl	800bc60 <_sbrk_r>
 800b2d0:	6030      	str	r0, [r6, #0]
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	f000 fcc3 	bl	800bc60 <_sbrk_r>
 800b2da:	1c43      	adds	r3, r0, #1
 800b2dc:	d103      	bne.n	800b2e6 <sbrk_aligned+0x26>
 800b2de:	f04f 34ff 	mov.w	r4, #4294967295
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	bd70      	pop	{r4, r5, r6, pc}
 800b2e6:	1cc4      	adds	r4, r0, #3
 800b2e8:	f024 0403 	bic.w	r4, r4, #3
 800b2ec:	42a0      	cmp	r0, r4
 800b2ee:	d0f8      	beq.n	800b2e2 <sbrk_aligned+0x22>
 800b2f0:	1a21      	subs	r1, r4, r0
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	f000 fcb4 	bl	800bc60 <_sbrk_r>
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	d1f2      	bne.n	800b2e2 <sbrk_aligned+0x22>
 800b2fc:	e7ef      	b.n	800b2de <sbrk_aligned+0x1e>
 800b2fe:	bf00      	nop
 800b300:	20001718 	.word	0x20001718

0800b304 <_malloc_r>:
 800b304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b308:	1ccd      	adds	r5, r1, #3
 800b30a:	f025 0503 	bic.w	r5, r5, #3
 800b30e:	3508      	adds	r5, #8
 800b310:	2d0c      	cmp	r5, #12
 800b312:	bf38      	it	cc
 800b314:	250c      	movcc	r5, #12
 800b316:	2d00      	cmp	r5, #0
 800b318:	4606      	mov	r6, r0
 800b31a:	db01      	blt.n	800b320 <_malloc_r+0x1c>
 800b31c:	42a9      	cmp	r1, r5
 800b31e:	d904      	bls.n	800b32a <_malloc_r+0x26>
 800b320:	230c      	movs	r3, #12
 800b322:	6033      	str	r3, [r6, #0]
 800b324:	2000      	movs	r0, #0
 800b326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b32a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b400 <_malloc_r+0xfc>
 800b32e:	f000 f869 	bl	800b404 <__malloc_lock>
 800b332:	f8d8 3000 	ldr.w	r3, [r8]
 800b336:	461c      	mov	r4, r3
 800b338:	bb44      	cbnz	r4, 800b38c <_malloc_r+0x88>
 800b33a:	4629      	mov	r1, r5
 800b33c:	4630      	mov	r0, r6
 800b33e:	f7ff ffbf 	bl	800b2c0 <sbrk_aligned>
 800b342:	1c43      	adds	r3, r0, #1
 800b344:	4604      	mov	r4, r0
 800b346:	d158      	bne.n	800b3fa <_malloc_r+0xf6>
 800b348:	f8d8 4000 	ldr.w	r4, [r8]
 800b34c:	4627      	mov	r7, r4
 800b34e:	2f00      	cmp	r7, #0
 800b350:	d143      	bne.n	800b3da <_malloc_r+0xd6>
 800b352:	2c00      	cmp	r4, #0
 800b354:	d04b      	beq.n	800b3ee <_malloc_r+0xea>
 800b356:	6823      	ldr	r3, [r4, #0]
 800b358:	4639      	mov	r1, r7
 800b35a:	4630      	mov	r0, r6
 800b35c:	eb04 0903 	add.w	r9, r4, r3
 800b360:	f000 fc7e 	bl	800bc60 <_sbrk_r>
 800b364:	4581      	cmp	r9, r0
 800b366:	d142      	bne.n	800b3ee <_malloc_r+0xea>
 800b368:	6821      	ldr	r1, [r4, #0]
 800b36a:	4630      	mov	r0, r6
 800b36c:	1a6d      	subs	r5, r5, r1
 800b36e:	4629      	mov	r1, r5
 800b370:	f7ff ffa6 	bl	800b2c0 <sbrk_aligned>
 800b374:	3001      	adds	r0, #1
 800b376:	d03a      	beq.n	800b3ee <_malloc_r+0xea>
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	442b      	add	r3, r5
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	f8d8 3000 	ldr.w	r3, [r8]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	bb62      	cbnz	r2, 800b3e0 <_malloc_r+0xdc>
 800b386:	f8c8 7000 	str.w	r7, [r8]
 800b38a:	e00f      	b.n	800b3ac <_malloc_r+0xa8>
 800b38c:	6822      	ldr	r2, [r4, #0]
 800b38e:	1b52      	subs	r2, r2, r5
 800b390:	d420      	bmi.n	800b3d4 <_malloc_r+0xd0>
 800b392:	2a0b      	cmp	r2, #11
 800b394:	d917      	bls.n	800b3c6 <_malloc_r+0xc2>
 800b396:	1961      	adds	r1, r4, r5
 800b398:	42a3      	cmp	r3, r4
 800b39a:	6025      	str	r5, [r4, #0]
 800b39c:	bf18      	it	ne
 800b39e:	6059      	strne	r1, [r3, #4]
 800b3a0:	6863      	ldr	r3, [r4, #4]
 800b3a2:	bf08      	it	eq
 800b3a4:	f8c8 1000 	streq.w	r1, [r8]
 800b3a8:	5162      	str	r2, [r4, r5]
 800b3aa:	604b      	str	r3, [r1, #4]
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	f000 f82f 	bl	800b410 <__malloc_unlock>
 800b3b2:	f104 000b 	add.w	r0, r4, #11
 800b3b6:	1d23      	adds	r3, r4, #4
 800b3b8:	f020 0007 	bic.w	r0, r0, #7
 800b3bc:	1ac2      	subs	r2, r0, r3
 800b3be:	bf1c      	itt	ne
 800b3c0:	1a1b      	subne	r3, r3, r0
 800b3c2:	50a3      	strne	r3, [r4, r2]
 800b3c4:	e7af      	b.n	800b326 <_malloc_r+0x22>
 800b3c6:	6862      	ldr	r2, [r4, #4]
 800b3c8:	42a3      	cmp	r3, r4
 800b3ca:	bf0c      	ite	eq
 800b3cc:	f8c8 2000 	streq.w	r2, [r8]
 800b3d0:	605a      	strne	r2, [r3, #4]
 800b3d2:	e7eb      	b.n	800b3ac <_malloc_r+0xa8>
 800b3d4:	4623      	mov	r3, r4
 800b3d6:	6864      	ldr	r4, [r4, #4]
 800b3d8:	e7ae      	b.n	800b338 <_malloc_r+0x34>
 800b3da:	463c      	mov	r4, r7
 800b3dc:	687f      	ldr	r7, [r7, #4]
 800b3de:	e7b6      	b.n	800b34e <_malloc_r+0x4a>
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	42a3      	cmp	r3, r4
 800b3e6:	d1fb      	bne.n	800b3e0 <_malloc_r+0xdc>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	6053      	str	r3, [r2, #4]
 800b3ec:	e7de      	b.n	800b3ac <_malloc_r+0xa8>
 800b3ee:	230c      	movs	r3, #12
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	6033      	str	r3, [r6, #0]
 800b3f4:	f000 f80c 	bl	800b410 <__malloc_unlock>
 800b3f8:	e794      	b.n	800b324 <_malloc_r+0x20>
 800b3fa:	6005      	str	r5, [r0, #0]
 800b3fc:	e7d6      	b.n	800b3ac <_malloc_r+0xa8>
 800b3fe:	bf00      	nop
 800b400:	2000171c 	.word	0x2000171c

0800b404 <__malloc_lock>:
 800b404:	4801      	ldr	r0, [pc, #4]	@ (800b40c <__malloc_lock+0x8>)
 800b406:	f7ff b89c 	b.w	800a542 <__retarget_lock_acquire_recursive>
 800b40a:	bf00      	nop
 800b40c:	20001714 	.word	0x20001714

0800b410 <__malloc_unlock>:
 800b410:	4801      	ldr	r0, [pc, #4]	@ (800b418 <__malloc_unlock+0x8>)
 800b412:	f7ff b897 	b.w	800a544 <__retarget_lock_release_recursive>
 800b416:	bf00      	nop
 800b418:	20001714 	.word	0x20001714

0800b41c <_Balloc>:
 800b41c:	b570      	push	{r4, r5, r6, lr}
 800b41e:	69c6      	ldr	r6, [r0, #28]
 800b420:	4604      	mov	r4, r0
 800b422:	460d      	mov	r5, r1
 800b424:	b976      	cbnz	r6, 800b444 <_Balloc+0x28>
 800b426:	2010      	movs	r0, #16
 800b428:	f7ff ff42 	bl	800b2b0 <malloc>
 800b42c:	4602      	mov	r2, r0
 800b42e:	61e0      	str	r0, [r4, #28]
 800b430:	b920      	cbnz	r0, 800b43c <_Balloc+0x20>
 800b432:	216b      	movs	r1, #107	@ 0x6b
 800b434:	4b17      	ldr	r3, [pc, #92]	@ (800b494 <_Balloc+0x78>)
 800b436:	4818      	ldr	r0, [pc, #96]	@ (800b498 <_Balloc+0x7c>)
 800b438:	f000 fc30 	bl	800bc9c <__assert_func>
 800b43c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b440:	6006      	str	r6, [r0, #0]
 800b442:	60c6      	str	r6, [r0, #12]
 800b444:	69e6      	ldr	r6, [r4, #28]
 800b446:	68f3      	ldr	r3, [r6, #12]
 800b448:	b183      	cbz	r3, 800b46c <_Balloc+0x50>
 800b44a:	69e3      	ldr	r3, [r4, #28]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b452:	b9b8      	cbnz	r0, 800b484 <_Balloc+0x68>
 800b454:	2101      	movs	r1, #1
 800b456:	fa01 f605 	lsl.w	r6, r1, r5
 800b45a:	1d72      	adds	r2, r6, #5
 800b45c:	4620      	mov	r0, r4
 800b45e:	0092      	lsls	r2, r2, #2
 800b460:	f000 fc3a 	bl	800bcd8 <_calloc_r>
 800b464:	b160      	cbz	r0, 800b480 <_Balloc+0x64>
 800b466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b46a:	e00e      	b.n	800b48a <_Balloc+0x6e>
 800b46c:	2221      	movs	r2, #33	@ 0x21
 800b46e:	2104      	movs	r1, #4
 800b470:	4620      	mov	r0, r4
 800b472:	f000 fc31 	bl	800bcd8 <_calloc_r>
 800b476:	69e3      	ldr	r3, [r4, #28]
 800b478:	60f0      	str	r0, [r6, #12]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1e4      	bne.n	800b44a <_Balloc+0x2e>
 800b480:	2000      	movs	r0, #0
 800b482:	bd70      	pop	{r4, r5, r6, pc}
 800b484:	6802      	ldr	r2, [r0, #0]
 800b486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b48a:	2300      	movs	r3, #0
 800b48c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b490:	e7f7      	b.n	800b482 <_Balloc+0x66>
 800b492:	bf00      	nop
 800b494:	0800c367 	.word	0x0800c367
 800b498:	0800c3e7 	.word	0x0800c3e7

0800b49c <_Bfree>:
 800b49c:	b570      	push	{r4, r5, r6, lr}
 800b49e:	69c6      	ldr	r6, [r0, #28]
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	b976      	cbnz	r6, 800b4c4 <_Bfree+0x28>
 800b4a6:	2010      	movs	r0, #16
 800b4a8:	f7ff ff02 	bl	800b2b0 <malloc>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	61e8      	str	r0, [r5, #28]
 800b4b0:	b920      	cbnz	r0, 800b4bc <_Bfree+0x20>
 800b4b2:	218f      	movs	r1, #143	@ 0x8f
 800b4b4:	4b08      	ldr	r3, [pc, #32]	@ (800b4d8 <_Bfree+0x3c>)
 800b4b6:	4809      	ldr	r0, [pc, #36]	@ (800b4dc <_Bfree+0x40>)
 800b4b8:	f000 fbf0 	bl	800bc9c <__assert_func>
 800b4bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4c0:	6006      	str	r6, [r0, #0]
 800b4c2:	60c6      	str	r6, [r0, #12]
 800b4c4:	b13c      	cbz	r4, 800b4d6 <_Bfree+0x3a>
 800b4c6:	69eb      	ldr	r3, [r5, #28]
 800b4c8:	6862      	ldr	r2, [r4, #4]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4d0:	6021      	str	r1, [r4, #0]
 800b4d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	0800c367 	.word	0x0800c367
 800b4dc:	0800c3e7 	.word	0x0800c3e7

0800b4e0 <__multadd>:
 800b4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e4:	4607      	mov	r7, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	461e      	mov	r6, r3
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	690d      	ldr	r5, [r1, #16]
 800b4ee:	f101 0c14 	add.w	ip, r1, #20
 800b4f2:	f8dc 3000 	ldr.w	r3, [ip]
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	b299      	uxth	r1, r3
 800b4fa:	fb02 6101 	mla	r1, r2, r1, r6
 800b4fe:	0c1e      	lsrs	r6, r3, #16
 800b500:	0c0b      	lsrs	r3, r1, #16
 800b502:	fb02 3306 	mla	r3, r2, r6, r3
 800b506:	b289      	uxth	r1, r1
 800b508:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b50c:	4285      	cmp	r5, r0
 800b50e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b512:	f84c 1b04 	str.w	r1, [ip], #4
 800b516:	dcec      	bgt.n	800b4f2 <__multadd+0x12>
 800b518:	b30e      	cbz	r6, 800b55e <__multadd+0x7e>
 800b51a:	68a3      	ldr	r3, [r4, #8]
 800b51c:	42ab      	cmp	r3, r5
 800b51e:	dc19      	bgt.n	800b554 <__multadd+0x74>
 800b520:	6861      	ldr	r1, [r4, #4]
 800b522:	4638      	mov	r0, r7
 800b524:	3101      	adds	r1, #1
 800b526:	f7ff ff79 	bl	800b41c <_Balloc>
 800b52a:	4680      	mov	r8, r0
 800b52c:	b928      	cbnz	r0, 800b53a <__multadd+0x5a>
 800b52e:	4602      	mov	r2, r0
 800b530:	21ba      	movs	r1, #186	@ 0xba
 800b532:	4b0c      	ldr	r3, [pc, #48]	@ (800b564 <__multadd+0x84>)
 800b534:	480c      	ldr	r0, [pc, #48]	@ (800b568 <__multadd+0x88>)
 800b536:	f000 fbb1 	bl	800bc9c <__assert_func>
 800b53a:	6922      	ldr	r2, [r4, #16]
 800b53c:	f104 010c 	add.w	r1, r4, #12
 800b540:	3202      	adds	r2, #2
 800b542:	0092      	lsls	r2, r2, #2
 800b544:	300c      	adds	r0, #12
 800b546:	f000 fb9b 	bl	800bc80 <memcpy>
 800b54a:	4621      	mov	r1, r4
 800b54c:	4638      	mov	r0, r7
 800b54e:	f7ff ffa5 	bl	800b49c <_Bfree>
 800b552:	4644      	mov	r4, r8
 800b554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b558:	3501      	adds	r5, #1
 800b55a:	615e      	str	r6, [r3, #20]
 800b55c:	6125      	str	r5, [r4, #16]
 800b55e:	4620      	mov	r0, r4
 800b560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b564:	0800c3d6 	.word	0x0800c3d6
 800b568:	0800c3e7 	.word	0x0800c3e7

0800b56c <__hi0bits>:
 800b56c:	4603      	mov	r3, r0
 800b56e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b572:	bf3a      	itte	cc
 800b574:	0403      	lslcc	r3, r0, #16
 800b576:	2010      	movcc	r0, #16
 800b578:	2000      	movcs	r0, #0
 800b57a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b57e:	bf3c      	itt	cc
 800b580:	021b      	lslcc	r3, r3, #8
 800b582:	3008      	addcc	r0, #8
 800b584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b588:	bf3c      	itt	cc
 800b58a:	011b      	lslcc	r3, r3, #4
 800b58c:	3004      	addcc	r0, #4
 800b58e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b592:	bf3c      	itt	cc
 800b594:	009b      	lslcc	r3, r3, #2
 800b596:	3002      	addcc	r0, #2
 800b598:	2b00      	cmp	r3, #0
 800b59a:	db05      	blt.n	800b5a8 <__hi0bits+0x3c>
 800b59c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5a0:	f100 0001 	add.w	r0, r0, #1
 800b5a4:	bf08      	it	eq
 800b5a6:	2020      	moveq	r0, #32
 800b5a8:	4770      	bx	lr

0800b5aa <__lo0bits>:
 800b5aa:	6803      	ldr	r3, [r0, #0]
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	f013 0007 	ands.w	r0, r3, #7
 800b5b2:	d00b      	beq.n	800b5cc <__lo0bits+0x22>
 800b5b4:	07d9      	lsls	r1, r3, #31
 800b5b6:	d421      	bmi.n	800b5fc <__lo0bits+0x52>
 800b5b8:	0798      	lsls	r0, r3, #30
 800b5ba:	bf49      	itett	mi
 800b5bc:	085b      	lsrmi	r3, r3, #1
 800b5be:	089b      	lsrpl	r3, r3, #2
 800b5c0:	2001      	movmi	r0, #1
 800b5c2:	6013      	strmi	r3, [r2, #0]
 800b5c4:	bf5c      	itt	pl
 800b5c6:	2002      	movpl	r0, #2
 800b5c8:	6013      	strpl	r3, [r2, #0]
 800b5ca:	4770      	bx	lr
 800b5cc:	b299      	uxth	r1, r3
 800b5ce:	b909      	cbnz	r1, 800b5d4 <__lo0bits+0x2a>
 800b5d0:	2010      	movs	r0, #16
 800b5d2:	0c1b      	lsrs	r3, r3, #16
 800b5d4:	b2d9      	uxtb	r1, r3
 800b5d6:	b909      	cbnz	r1, 800b5dc <__lo0bits+0x32>
 800b5d8:	3008      	adds	r0, #8
 800b5da:	0a1b      	lsrs	r3, r3, #8
 800b5dc:	0719      	lsls	r1, r3, #28
 800b5de:	bf04      	itt	eq
 800b5e0:	091b      	lsreq	r3, r3, #4
 800b5e2:	3004      	addeq	r0, #4
 800b5e4:	0799      	lsls	r1, r3, #30
 800b5e6:	bf04      	itt	eq
 800b5e8:	089b      	lsreq	r3, r3, #2
 800b5ea:	3002      	addeq	r0, #2
 800b5ec:	07d9      	lsls	r1, r3, #31
 800b5ee:	d403      	bmi.n	800b5f8 <__lo0bits+0x4e>
 800b5f0:	085b      	lsrs	r3, r3, #1
 800b5f2:	f100 0001 	add.w	r0, r0, #1
 800b5f6:	d003      	beq.n	800b600 <__lo0bits+0x56>
 800b5f8:	6013      	str	r3, [r2, #0]
 800b5fa:	4770      	bx	lr
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	4770      	bx	lr
 800b600:	2020      	movs	r0, #32
 800b602:	4770      	bx	lr

0800b604 <__i2b>:
 800b604:	b510      	push	{r4, lr}
 800b606:	460c      	mov	r4, r1
 800b608:	2101      	movs	r1, #1
 800b60a:	f7ff ff07 	bl	800b41c <_Balloc>
 800b60e:	4602      	mov	r2, r0
 800b610:	b928      	cbnz	r0, 800b61e <__i2b+0x1a>
 800b612:	f240 1145 	movw	r1, #325	@ 0x145
 800b616:	4b04      	ldr	r3, [pc, #16]	@ (800b628 <__i2b+0x24>)
 800b618:	4804      	ldr	r0, [pc, #16]	@ (800b62c <__i2b+0x28>)
 800b61a:	f000 fb3f 	bl	800bc9c <__assert_func>
 800b61e:	2301      	movs	r3, #1
 800b620:	6144      	str	r4, [r0, #20]
 800b622:	6103      	str	r3, [r0, #16]
 800b624:	bd10      	pop	{r4, pc}
 800b626:	bf00      	nop
 800b628:	0800c3d6 	.word	0x0800c3d6
 800b62c:	0800c3e7 	.word	0x0800c3e7

0800b630 <__multiply>:
 800b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	4617      	mov	r7, r2
 800b636:	690a      	ldr	r2, [r1, #16]
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	4689      	mov	r9, r1
 800b63c:	429a      	cmp	r2, r3
 800b63e:	bfa2      	ittt	ge
 800b640:	463b      	movge	r3, r7
 800b642:	460f      	movge	r7, r1
 800b644:	4699      	movge	r9, r3
 800b646:	693d      	ldr	r5, [r7, #16]
 800b648:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	6879      	ldr	r1, [r7, #4]
 800b650:	eb05 060a 	add.w	r6, r5, sl
 800b654:	42b3      	cmp	r3, r6
 800b656:	b085      	sub	sp, #20
 800b658:	bfb8      	it	lt
 800b65a:	3101      	addlt	r1, #1
 800b65c:	f7ff fede 	bl	800b41c <_Balloc>
 800b660:	b930      	cbnz	r0, 800b670 <__multiply+0x40>
 800b662:	4602      	mov	r2, r0
 800b664:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b668:	4b40      	ldr	r3, [pc, #256]	@ (800b76c <__multiply+0x13c>)
 800b66a:	4841      	ldr	r0, [pc, #260]	@ (800b770 <__multiply+0x140>)
 800b66c:	f000 fb16 	bl	800bc9c <__assert_func>
 800b670:	f100 0414 	add.w	r4, r0, #20
 800b674:	4623      	mov	r3, r4
 800b676:	2200      	movs	r2, #0
 800b678:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b67c:	4573      	cmp	r3, lr
 800b67e:	d320      	bcc.n	800b6c2 <__multiply+0x92>
 800b680:	f107 0814 	add.w	r8, r7, #20
 800b684:	f109 0114 	add.w	r1, r9, #20
 800b688:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b68c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b690:	9302      	str	r3, [sp, #8]
 800b692:	1beb      	subs	r3, r5, r7
 800b694:	3b15      	subs	r3, #21
 800b696:	f023 0303 	bic.w	r3, r3, #3
 800b69a:	3304      	adds	r3, #4
 800b69c:	3715      	adds	r7, #21
 800b69e:	42bd      	cmp	r5, r7
 800b6a0:	bf38      	it	cc
 800b6a2:	2304      	movcc	r3, #4
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	9b02      	ldr	r3, [sp, #8]
 800b6a8:	9103      	str	r1, [sp, #12]
 800b6aa:	428b      	cmp	r3, r1
 800b6ac:	d80c      	bhi.n	800b6c8 <__multiply+0x98>
 800b6ae:	2e00      	cmp	r6, #0
 800b6b0:	dd03      	ble.n	800b6ba <__multiply+0x8a>
 800b6b2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d055      	beq.n	800b766 <__multiply+0x136>
 800b6ba:	6106      	str	r6, [r0, #16]
 800b6bc:	b005      	add	sp, #20
 800b6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c2:	f843 2b04 	str.w	r2, [r3], #4
 800b6c6:	e7d9      	b.n	800b67c <__multiply+0x4c>
 800b6c8:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6cc:	f1ba 0f00 	cmp.w	sl, #0
 800b6d0:	d01f      	beq.n	800b712 <__multiply+0xe2>
 800b6d2:	46c4      	mov	ip, r8
 800b6d4:	46a1      	mov	r9, r4
 800b6d6:	2700      	movs	r7, #0
 800b6d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6dc:	f8d9 3000 	ldr.w	r3, [r9]
 800b6e0:	fa1f fb82 	uxth.w	fp, r2
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	fb0a 330b 	mla	r3, sl, fp, r3
 800b6ea:	443b      	add	r3, r7
 800b6ec:	f8d9 7000 	ldr.w	r7, [r9]
 800b6f0:	0c12      	lsrs	r2, r2, #16
 800b6f2:	0c3f      	lsrs	r7, r7, #16
 800b6f4:	fb0a 7202 	mla	r2, sl, r2, r7
 800b6f8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b702:	4565      	cmp	r5, ip
 800b704:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b708:	f849 3b04 	str.w	r3, [r9], #4
 800b70c:	d8e4      	bhi.n	800b6d8 <__multiply+0xa8>
 800b70e:	9b01      	ldr	r3, [sp, #4]
 800b710:	50e7      	str	r7, [r4, r3]
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	3104      	adds	r1, #4
 800b716:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b71a:	f1b9 0f00 	cmp.w	r9, #0
 800b71e:	d020      	beq.n	800b762 <__multiply+0x132>
 800b720:	4647      	mov	r7, r8
 800b722:	46a4      	mov	ip, r4
 800b724:	f04f 0a00 	mov.w	sl, #0
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	f8b7 b000 	ldrh.w	fp, [r7]
 800b72e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b732:	b29b      	uxth	r3, r3
 800b734:	fb09 220b 	mla	r2, r9, fp, r2
 800b738:	4452      	add	r2, sl
 800b73a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b73e:	f84c 3b04 	str.w	r3, [ip], #4
 800b742:	f857 3b04 	ldr.w	r3, [r7], #4
 800b746:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b74a:	f8bc 3000 	ldrh.w	r3, [ip]
 800b74e:	42bd      	cmp	r5, r7
 800b750:	fb09 330a 	mla	r3, r9, sl, r3
 800b754:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b758:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b75c:	d8e5      	bhi.n	800b72a <__multiply+0xfa>
 800b75e:	9a01      	ldr	r2, [sp, #4]
 800b760:	50a3      	str	r3, [r4, r2]
 800b762:	3404      	adds	r4, #4
 800b764:	e79f      	b.n	800b6a6 <__multiply+0x76>
 800b766:	3e01      	subs	r6, #1
 800b768:	e7a1      	b.n	800b6ae <__multiply+0x7e>
 800b76a:	bf00      	nop
 800b76c:	0800c3d6 	.word	0x0800c3d6
 800b770:	0800c3e7 	.word	0x0800c3e7

0800b774 <__pow5mult>:
 800b774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b778:	4615      	mov	r5, r2
 800b77a:	f012 0203 	ands.w	r2, r2, #3
 800b77e:	4607      	mov	r7, r0
 800b780:	460e      	mov	r6, r1
 800b782:	d007      	beq.n	800b794 <__pow5mult+0x20>
 800b784:	4c25      	ldr	r4, [pc, #148]	@ (800b81c <__pow5mult+0xa8>)
 800b786:	3a01      	subs	r2, #1
 800b788:	2300      	movs	r3, #0
 800b78a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b78e:	f7ff fea7 	bl	800b4e0 <__multadd>
 800b792:	4606      	mov	r6, r0
 800b794:	10ad      	asrs	r5, r5, #2
 800b796:	d03d      	beq.n	800b814 <__pow5mult+0xa0>
 800b798:	69fc      	ldr	r4, [r7, #28]
 800b79a:	b97c      	cbnz	r4, 800b7bc <__pow5mult+0x48>
 800b79c:	2010      	movs	r0, #16
 800b79e:	f7ff fd87 	bl	800b2b0 <malloc>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	61f8      	str	r0, [r7, #28]
 800b7a6:	b928      	cbnz	r0, 800b7b4 <__pow5mult+0x40>
 800b7a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7ac:	4b1c      	ldr	r3, [pc, #112]	@ (800b820 <__pow5mult+0xac>)
 800b7ae:	481d      	ldr	r0, [pc, #116]	@ (800b824 <__pow5mult+0xb0>)
 800b7b0:	f000 fa74 	bl	800bc9c <__assert_func>
 800b7b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7b8:	6004      	str	r4, [r0, #0]
 800b7ba:	60c4      	str	r4, [r0, #12]
 800b7bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7c4:	b94c      	cbnz	r4, 800b7da <__pow5mult+0x66>
 800b7c6:	f240 2171 	movw	r1, #625	@ 0x271
 800b7ca:	4638      	mov	r0, r7
 800b7cc:	f7ff ff1a 	bl	800b604 <__i2b>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	f04f 0900 	mov.w	r9, #0
 800b7de:	07eb      	lsls	r3, r5, #31
 800b7e0:	d50a      	bpl.n	800b7f8 <__pow5mult+0x84>
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	f7ff ff22 	bl	800b630 <__multiply>
 800b7ec:	4680      	mov	r8, r0
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f7ff fe53 	bl	800b49c <_Bfree>
 800b7f6:	4646      	mov	r6, r8
 800b7f8:	106d      	asrs	r5, r5, #1
 800b7fa:	d00b      	beq.n	800b814 <__pow5mult+0xa0>
 800b7fc:	6820      	ldr	r0, [r4, #0]
 800b7fe:	b938      	cbnz	r0, 800b810 <__pow5mult+0x9c>
 800b800:	4622      	mov	r2, r4
 800b802:	4621      	mov	r1, r4
 800b804:	4638      	mov	r0, r7
 800b806:	f7ff ff13 	bl	800b630 <__multiply>
 800b80a:	6020      	str	r0, [r4, #0]
 800b80c:	f8c0 9000 	str.w	r9, [r0]
 800b810:	4604      	mov	r4, r0
 800b812:	e7e4      	b.n	800b7de <__pow5mult+0x6a>
 800b814:	4630      	mov	r0, r6
 800b816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b81a:	bf00      	nop
 800b81c:	0800c498 	.word	0x0800c498
 800b820:	0800c367 	.word	0x0800c367
 800b824:	0800c3e7 	.word	0x0800c3e7

0800b828 <__lshift>:
 800b828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b82c:	460c      	mov	r4, r1
 800b82e:	4607      	mov	r7, r0
 800b830:	4691      	mov	r9, r2
 800b832:	6923      	ldr	r3, [r4, #16]
 800b834:	6849      	ldr	r1, [r1, #4]
 800b836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b83a:	68a3      	ldr	r3, [r4, #8]
 800b83c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b840:	f108 0601 	add.w	r6, r8, #1
 800b844:	42b3      	cmp	r3, r6
 800b846:	db0b      	blt.n	800b860 <__lshift+0x38>
 800b848:	4638      	mov	r0, r7
 800b84a:	f7ff fde7 	bl	800b41c <_Balloc>
 800b84e:	4605      	mov	r5, r0
 800b850:	b948      	cbnz	r0, 800b866 <__lshift+0x3e>
 800b852:	4602      	mov	r2, r0
 800b854:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b858:	4b27      	ldr	r3, [pc, #156]	@ (800b8f8 <__lshift+0xd0>)
 800b85a:	4828      	ldr	r0, [pc, #160]	@ (800b8fc <__lshift+0xd4>)
 800b85c:	f000 fa1e 	bl	800bc9c <__assert_func>
 800b860:	3101      	adds	r1, #1
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	e7ee      	b.n	800b844 <__lshift+0x1c>
 800b866:	2300      	movs	r3, #0
 800b868:	f100 0114 	add.w	r1, r0, #20
 800b86c:	f100 0210 	add.w	r2, r0, #16
 800b870:	4618      	mov	r0, r3
 800b872:	4553      	cmp	r3, sl
 800b874:	db33      	blt.n	800b8de <__lshift+0xb6>
 800b876:	6920      	ldr	r0, [r4, #16]
 800b878:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b87c:	f104 0314 	add.w	r3, r4, #20
 800b880:	f019 091f 	ands.w	r9, r9, #31
 800b884:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b888:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b88c:	d02b      	beq.n	800b8e6 <__lshift+0xbe>
 800b88e:	468a      	mov	sl, r1
 800b890:	2200      	movs	r2, #0
 800b892:	f1c9 0e20 	rsb	lr, r9, #32
 800b896:	6818      	ldr	r0, [r3, #0]
 800b898:	fa00 f009 	lsl.w	r0, r0, r9
 800b89c:	4310      	orrs	r0, r2
 800b89e:	f84a 0b04 	str.w	r0, [sl], #4
 800b8a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8a6:	459c      	cmp	ip, r3
 800b8a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8ac:	d8f3      	bhi.n	800b896 <__lshift+0x6e>
 800b8ae:	ebac 0304 	sub.w	r3, ip, r4
 800b8b2:	3b15      	subs	r3, #21
 800b8b4:	f023 0303 	bic.w	r3, r3, #3
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	f104 0015 	add.w	r0, r4, #21
 800b8be:	4560      	cmp	r0, ip
 800b8c0:	bf88      	it	hi
 800b8c2:	2304      	movhi	r3, #4
 800b8c4:	50ca      	str	r2, [r1, r3]
 800b8c6:	b10a      	cbz	r2, 800b8cc <__lshift+0xa4>
 800b8c8:	f108 0602 	add.w	r6, r8, #2
 800b8cc:	3e01      	subs	r6, #1
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	612e      	str	r6, [r5, #16]
 800b8d4:	f7ff fde2 	bl	800b49c <_Bfree>
 800b8d8:	4628      	mov	r0, r5
 800b8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8de:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	e7c5      	b.n	800b872 <__lshift+0x4a>
 800b8e6:	3904      	subs	r1, #4
 800b8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ec:	459c      	cmp	ip, r3
 800b8ee:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8f2:	d8f9      	bhi.n	800b8e8 <__lshift+0xc0>
 800b8f4:	e7ea      	b.n	800b8cc <__lshift+0xa4>
 800b8f6:	bf00      	nop
 800b8f8:	0800c3d6 	.word	0x0800c3d6
 800b8fc:	0800c3e7 	.word	0x0800c3e7

0800b900 <__mcmp>:
 800b900:	4603      	mov	r3, r0
 800b902:	690a      	ldr	r2, [r1, #16]
 800b904:	6900      	ldr	r0, [r0, #16]
 800b906:	b530      	push	{r4, r5, lr}
 800b908:	1a80      	subs	r0, r0, r2
 800b90a:	d10e      	bne.n	800b92a <__mcmp+0x2a>
 800b90c:	3314      	adds	r3, #20
 800b90e:	3114      	adds	r1, #20
 800b910:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b914:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b918:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b91c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b920:	4295      	cmp	r5, r2
 800b922:	d003      	beq.n	800b92c <__mcmp+0x2c>
 800b924:	d205      	bcs.n	800b932 <__mcmp+0x32>
 800b926:	f04f 30ff 	mov.w	r0, #4294967295
 800b92a:	bd30      	pop	{r4, r5, pc}
 800b92c:	42a3      	cmp	r3, r4
 800b92e:	d3f3      	bcc.n	800b918 <__mcmp+0x18>
 800b930:	e7fb      	b.n	800b92a <__mcmp+0x2a>
 800b932:	2001      	movs	r0, #1
 800b934:	e7f9      	b.n	800b92a <__mcmp+0x2a>
	...

0800b938 <__mdiff>:
 800b938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93c:	4689      	mov	r9, r1
 800b93e:	4606      	mov	r6, r0
 800b940:	4611      	mov	r1, r2
 800b942:	4648      	mov	r0, r9
 800b944:	4614      	mov	r4, r2
 800b946:	f7ff ffdb 	bl	800b900 <__mcmp>
 800b94a:	1e05      	subs	r5, r0, #0
 800b94c:	d112      	bne.n	800b974 <__mdiff+0x3c>
 800b94e:	4629      	mov	r1, r5
 800b950:	4630      	mov	r0, r6
 800b952:	f7ff fd63 	bl	800b41c <_Balloc>
 800b956:	4602      	mov	r2, r0
 800b958:	b928      	cbnz	r0, 800b966 <__mdiff+0x2e>
 800b95a:	f240 2137 	movw	r1, #567	@ 0x237
 800b95e:	4b3e      	ldr	r3, [pc, #248]	@ (800ba58 <__mdiff+0x120>)
 800b960:	483e      	ldr	r0, [pc, #248]	@ (800ba5c <__mdiff+0x124>)
 800b962:	f000 f99b 	bl	800bc9c <__assert_func>
 800b966:	2301      	movs	r3, #1
 800b968:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b96c:	4610      	mov	r0, r2
 800b96e:	b003      	add	sp, #12
 800b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b974:	bfbc      	itt	lt
 800b976:	464b      	movlt	r3, r9
 800b978:	46a1      	movlt	r9, r4
 800b97a:	4630      	mov	r0, r6
 800b97c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b980:	bfba      	itte	lt
 800b982:	461c      	movlt	r4, r3
 800b984:	2501      	movlt	r5, #1
 800b986:	2500      	movge	r5, #0
 800b988:	f7ff fd48 	bl	800b41c <_Balloc>
 800b98c:	4602      	mov	r2, r0
 800b98e:	b918      	cbnz	r0, 800b998 <__mdiff+0x60>
 800b990:	f240 2145 	movw	r1, #581	@ 0x245
 800b994:	4b30      	ldr	r3, [pc, #192]	@ (800ba58 <__mdiff+0x120>)
 800b996:	e7e3      	b.n	800b960 <__mdiff+0x28>
 800b998:	f100 0b14 	add.w	fp, r0, #20
 800b99c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9a0:	f109 0310 	add.w	r3, r9, #16
 800b9a4:	60c5      	str	r5, [r0, #12]
 800b9a6:	f04f 0c00 	mov.w	ip, #0
 800b9aa:	f109 0514 	add.w	r5, r9, #20
 800b9ae:	46d9      	mov	r9, fp
 800b9b0:	6926      	ldr	r6, [r4, #16]
 800b9b2:	f104 0e14 	add.w	lr, r4, #20
 800b9b6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9ba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	9b01      	ldr	r3, [sp, #4]
 800b9c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9ca:	b281      	uxth	r1, r0
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	fa1f f38a 	uxth.w	r3, sl
 800b9d2:	1a5b      	subs	r3, r3, r1
 800b9d4:	0c00      	lsrs	r0, r0, #16
 800b9d6:	4463      	add	r3, ip
 800b9d8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b9dc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b9e6:	4576      	cmp	r6, lr
 800b9e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9ec:	f849 3b04 	str.w	r3, [r9], #4
 800b9f0:	d8e6      	bhi.n	800b9c0 <__mdiff+0x88>
 800b9f2:	1b33      	subs	r3, r6, r4
 800b9f4:	3b15      	subs	r3, #21
 800b9f6:	f023 0303 	bic.w	r3, r3, #3
 800b9fa:	3415      	adds	r4, #21
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	42a6      	cmp	r6, r4
 800ba00:	bf38      	it	cc
 800ba02:	2304      	movcc	r3, #4
 800ba04:	441d      	add	r5, r3
 800ba06:	445b      	add	r3, fp
 800ba08:	461e      	mov	r6, r3
 800ba0a:	462c      	mov	r4, r5
 800ba0c:	4544      	cmp	r4, r8
 800ba0e:	d30e      	bcc.n	800ba2e <__mdiff+0xf6>
 800ba10:	f108 0103 	add.w	r1, r8, #3
 800ba14:	1b49      	subs	r1, r1, r5
 800ba16:	f021 0103 	bic.w	r1, r1, #3
 800ba1a:	3d03      	subs	r5, #3
 800ba1c:	45a8      	cmp	r8, r5
 800ba1e:	bf38      	it	cc
 800ba20:	2100      	movcc	r1, #0
 800ba22:	440b      	add	r3, r1
 800ba24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba28:	b199      	cbz	r1, 800ba52 <__mdiff+0x11a>
 800ba2a:	6117      	str	r7, [r2, #16]
 800ba2c:	e79e      	b.n	800b96c <__mdiff+0x34>
 800ba2e:	46e6      	mov	lr, ip
 800ba30:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba34:	fa1f fc81 	uxth.w	ip, r1
 800ba38:	44f4      	add	ip, lr
 800ba3a:	0c08      	lsrs	r0, r1, #16
 800ba3c:	4471      	add	r1, lr
 800ba3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba42:	b289      	uxth	r1, r1
 800ba44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba4c:	f846 1b04 	str.w	r1, [r6], #4
 800ba50:	e7dc      	b.n	800ba0c <__mdiff+0xd4>
 800ba52:	3f01      	subs	r7, #1
 800ba54:	e7e6      	b.n	800ba24 <__mdiff+0xec>
 800ba56:	bf00      	nop
 800ba58:	0800c3d6 	.word	0x0800c3d6
 800ba5c:	0800c3e7 	.word	0x0800c3e7

0800ba60 <__d2b>:
 800ba60:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ba64:	2101      	movs	r1, #1
 800ba66:	4690      	mov	r8, r2
 800ba68:	4699      	mov	r9, r3
 800ba6a:	9e08      	ldr	r6, [sp, #32]
 800ba6c:	f7ff fcd6 	bl	800b41c <_Balloc>
 800ba70:	4604      	mov	r4, r0
 800ba72:	b930      	cbnz	r0, 800ba82 <__d2b+0x22>
 800ba74:	4602      	mov	r2, r0
 800ba76:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba7a:	4b23      	ldr	r3, [pc, #140]	@ (800bb08 <__d2b+0xa8>)
 800ba7c:	4823      	ldr	r0, [pc, #140]	@ (800bb0c <__d2b+0xac>)
 800ba7e:	f000 f90d 	bl	800bc9c <__assert_func>
 800ba82:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba8a:	b10d      	cbz	r5, 800ba90 <__d2b+0x30>
 800ba8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba90:	9301      	str	r3, [sp, #4]
 800ba92:	f1b8 0300 	subs.w	r3, r8, #0
 800ba96:	d024      	beq.n	800bae2 <__d2b+0x82>
 800ba98:	4668      	mov	r0, sp
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	f7ff fd85 	bl	800b5aa <__lo0bits>
 800baa0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800baa4:	b1d8      	cbz	r0, 800bade <__d2b+0x7e>
 800baa6:	f1c0 0320 	rsb	r3, r0, #32
 800baaa:	fa02 f303 	lsl.w	r3, r2, r3
 800baae:	430b      	orrs	r3, r1
 800bab0:	40c2      	lsrs	r2, r0
 800bab2:	6163      	str	r3, [r4, #20]
 800bab4:	9201      	str	r2, [sp, #4]
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bf0c      	ite	eq
 800babc:	2201      	moveq	r2, #1
 800babe:	2202      	movne	r2, #2
 800bac0:	61a3      	str	r3, [r4, #24]
 800bac2:	6122      	str	r2, [r4, #16]
 800bac4:	b1ad      	cbz	r5, 800baf2 <__d2b+0x92>
 800bac6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800baca:	4405      	add	r5, r0
 800bacc:	6035      	str	r5, [r6, #0]
 800bace:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bad4:	6018      	str	r0, [r3, #0]
 800bad6:	4620      	mov	r0, r4
 800bad8:	b002      	add	sp, #8
 800bada:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bade:	6161      	str	r1, [r4, #20]
 800bae0:	e7e9      	b.n	800bab6 <__d2b+0x56>
 800bae2:	a801      	add	r0, sp, #4
 800bae4:	f7ff fd61 	bl	800b5aa <__lo0bits>
 800bae8:	9b01      	ldr	r3, [sp, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	6163      	str	r3, [r4, #20]
 800baee:	3020      	adds	r0, #32
 800baf0:	e7e7      	b.n	800bac2 <__d2b+0x62>
 800baf2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800baf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bafa:	6030      	str	r0, [r6, #0]
 800bafc:	6918      	ldr	r0, [r3, #16]
 800bafe:	f7ff fd35 	bl	800b56c <__hi0bits>
 800bb02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb06:	e7e4      	b.n	800bad2 <__d2b+0x72>
 800bb08:	0800c3d6 	.word	0x0800c3d6
 800bb0c:	0800c3e7 	.word	0x0800c3e7

0800bb10 <__sflush_r>:
 800bb10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	0716      	lsls	r6, r2, #28
 800bb18:	4605      	mov	r5, r0
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	d454      	bmi.n	800bbc8 <__sflush_r+0xb8>
 800bb1e:	684b      	ldr	r3, [r1, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	dc02      	bgt.n	800bb2a <__sflush_r+0x1a>
 800bb24:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	dd48      	ble.n	800bbbc <__sflush_r+0xac>
 800bb2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb2c:	2e00      	cmp	r6, #0
 800bb2e:	d045      	beq.n	800bbbc <__sflush_r+0xac>
 800bb30:	2300      	movs	r3, #0
 800bb32:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb36:	682f      	ldr	r7, [r5, #0]
 800bb38:	6a21      	ldr	r1, [r4, #32]
 800bb3a:	602b      	str	r3, [r5, #0]
 800bb3c:	d030      	beq.n	800bba0 <__sflush_r+0x90>
 800bb3e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb40:	89a3      	ldrh	r3, [r4, #12]
 800bb42:	0759      	lsls	r1, r3, #29
 800bb44:	d505      	bpl.n	800bb52 <__sflush_r+0x42>
 800bb46:	6863      	ldr	r3, [r4, #4]
 800bb48:	1ad2      	subs	r2, r2, r3
 800bb4a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb4c:	b10b      	cbz	r3, 800bb52 <__sflush_r+0x42>
 800bb4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb50:	1ad2      	subs	r2, r2, r3
 800bb52:	2300      	movs	r3, #0
 800bb54:	4628      	mov	r0, r5
 800bb56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb58:	6a21      	ldr	r1, [r4, #32]
 800bb5a:	47b0      	blx	r6
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	d106      	bne.n	800bb70 <__sflush_r+0x60>
 800bb62:	6829      	ldr	r1, [r5, #0]
 800bb64:	291d      	cmp	r1, #29
 800bb66:	d82b      	bhi.n	800bbc0 <__sflush_r+0xb0>
 800bb68:	4a28      	ldr	r2, [pc, #160]	@ (800bc0c <__sflush_r+0xfc>)
 800bb6a:	40ca      	lsrs	r2, r1
 800bb6c:	07d6      	lsls	r6, r2, #31
 800bb6e:	d527      	bpl.n	800bbc0 <__sflush_r+0xb0>
 800bb70:	2200      	movs	r2, #0
 800bb72:	6062      	str	r2, [r4, #4]
 800bb74:	6922      	ldr	r2, [r4, #16]
 800bb76:	04d9      	lsls	r1, r3, #19
 800bb78:	6022      	str	r2, [r4, #0]
 800bb7a:	d504      	bpl.n	800bb86 <__sflush_r+0x76>
 800bb7c:	1c42      	adds	r2, r0, #1
 800bb7e:	d101      	bne.n	800bb84 <__sflush_r+0x74>
 800bb80:	682b      	ldr	r3, [r5, #0]
 800bb82:	b903      	cbnz	r3, 800bb86 <__sflush_r+0x76>
 800bb84:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb88:	602f      	str	r7, [r5, #0]
 800bb8a:	b1b9      	cbz	r1, 800bbbc <__sflush_r+0xac>
 800bb8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb90:	4299      	cmp	r1, r3
 800bb92:	d002      	beq.n	800bb9a <__sflush_r+0x8a>
 800bb94:	4628      	mov	r0, r5
 800bb96:	f7ff fb43 	bl	800b220 <_free_r>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb9e:	e00d      	b.n	800bbbc <__sflush_r+0xac>
 800bba0:	2301      	movs	r3, #1
 800bba2:	4628      	mov	r0, r5
 800bba4:	47b0      	blx	r6
 800bba6:	4602      	mov	r2, r0
 800bba8:	1c50      	adds	r0, r2, #1
 800bbaa:	d1c9      	bne.n	800bb40 <__sflush_r+0x30>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0c6      	beq.n	800bb40 <__sflush_r+0x30>
 800bbb2:	2b1d      	cmp	r3, #29
 800bbb4:	d001      	beq.n	800bbba <__sflush_r+0xaa>
 800bbb6:	2b16      	cmp	r3, #22
 800bbb8:	d11d      	bne.n	800bbf6 <__sflush_r+0xe6>
 800bbba:	602f      	str	r7, [r5, #0]
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	e021      	b.n	800bc04 <__sflush_r+0xf4>
 800bbc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbc4:	b21b      	sxth	r3, r3
 800bbc6:	e01a      	b.n	800bbfe <__sflush_r+0xee>
 800bbc8:	690f      	ldr	r7, [r1, #16]
 800bbca:	2f00      	cmp	r7, #0
 800bbcc:	d0f6      	beq.n	800bbbc <__sflush_r+0xac>
 800bbce:	0793      	lsls	r3, r2, #30
 800bbd0:	bf18      	it	ne
 800bbd2:	2300      	movne	r3, #0
 800bbd4:	680e      	ldr	r6, [r1, #0]
 800bbd6:	bf08      	it	eq
 800bbd8:	694b      	ldreq	r3, [r1, #20]
 800bbda:	1bf6      	subs	r6, r6, r7
 800bbdc:	600f      	str	r7, [r1, #0]
 800bbde:	608b      	str	r3, [r1, #8]
 800bbe0:	2e00      	cmp	r6, #0
 800bbe2:	ddeb      	ble.n	800bbbc <__sflush_r+0xac>
 800bbe4:	4633      	mov	r3, r6
 800bbe6:	463a      	mov	r2, r7
 800bbe8:	4628      	mov	r0, r5
 800bbea:	6a21      	ldr	r1, [r4, #32]
 800bbec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800bbf0:	47e0      	blx	ip
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	dc07      	bgt.n	800bc06 <__sflush_r+0xf6>
 800bbf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbfe:	f04f 30ff 	mov.w	r0, #4294967295
 800bc02:	81a3      	strh	r3, [r4, #12]
 800bc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc06:	4407      	add	r7, r0
 800bc08:	1a36      	subs	r6, r6, r0
 800bc0a:	e7e9      	b.n	800bbe0 <__sflush_r+0xd0>
 800bc0c:	20400001 	.word	0x20400001

0800bc10 <_fflush_r>:
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	690b      	ldr	r3, [r1, #16]
 800bc14:	4605      	mov	r5, r0
 800bc16:	460c      	mov	r4, r1
 800bc18:	b913      	cbnz	r3, 800bc20 <_fflush_r+0x10>
 800bc1a:	2500      	movs	r5, #0
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}
 800bc20:	b118      	cbz	r0, 800bc2a <_fflush_r+0x1a>
 800bc22:	6a03      	ldr	r3, [r0, #32]
 800bc24:	b90b      	cbnz	r3, 800bc2a <_fflush_r+0x1a>
 800bc26:	f7fe fb95 	bl	800a354 <__sinit>
 800bc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d0f3      	beq.n	800bc1a <_fflush_r+0xa>
 800bc32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc34:	07d0      	lsls	r0, r2, #31
 800bc36:	d404      	bmi.n	800bc42 <_fflush_r+0x32>
 800bc38:	0599      	lsls	r1, r3, #22
 800bc3a:	d402      	bmi.n	800bc42 <_fflush_r+0x32>
 800bc3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc3e:	f7fe fc80 	bl	800a542 <__retarget_lock_acquire_recursive>
 800bc42:	4628      	mov	r0, r5
 800bc44:	4621      	mov	r1, r4
 800bc46:	f7ff ff63 	bl	800bb10 <__sflush_r>
 800bc4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	07da      	lsls	r2, r3, #31
 800bc50:	d4e4      	bmi.n	800bc1c <_fflush_r+0xc>
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	059b      	lsls	r3, r3, #22
 800bc56:	d4e1      	bmi.n	800bc1c <_fflush_r+0xc>
 800bc58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc5a:	f7fe fc73 	bl	800a544 <__retarget_lock_release_recursive>
 800bc5e:	e7dd      	b.n	800bc1c <_fflush_r+0xc>

0800bc60 <_sbrk_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	2300      	movs	r3, #0
 800bc64:	4d05      	ldr	r5, [pc, #20]	@ (800bc7c <_sbrk_r+0x1c>)
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	602b      	str	r3, [r5, #0]
 800bc6c:	f7f5 fc18 	bl	80014a0 <_sbrk>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d102      	bne.n	800bc7a <_sbrk_r+0x1a>
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	b103      	cbz	r3, 800bc7a <_sbrk_r+0x1a>
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	20001710 	.word	0x20001710

0800bc80 <memcpy>:
 800bc80:	440a      	add	r2, r1
 800bc82:	4291      	cmp	r1, r2
 800bc84:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc88:	d100      	bne.n	800bc8c <memcpy+0xc>
 800bc8a:	4770      	bx	lr
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc92:	4291      	cmp	r1, r2
 800bc94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc98:	d1f9      	bne.n	800bc8e <memcpy+0xe>
 800bc9a:	bd10      	pop	{r4, pc}

0800bc9c <__assert_func>:
 800bc9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc9e:	4614      	mov	r4, r2
 800bca0:	461a      	mov	r2, r3
 800bca2:	4b09      	ldr	r3, [pc, #36]	@ (800bcc8 <__assert_func+0x2c>)
 800bca4:	4605      	mov	r5, r0
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68d8      	ldr	r0, [r3, #12]
 800bcaa:	b14c      	cbz	r4, 800bcc0 <__assert_func+0x24>
 800bcac:	4b07      	ldr	r3, [pc, #28]	@ (800bccc <__assert_func+0x30>)
 800bcae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bcb2:	9100      	str	r1, [sp, #0]
 800bcb4:	462b      	mov	r3, r5
 800bcb6:	4906      	ldr	r1, [pc, #24]	@ (800bcd0 <__assert_func+0x34>)
 800bcb8:	f000 f842 	bl	800bd40 <fiprintf>
 800bcbc:	f000 f852 	bl	800bd64 <abort>
 800bcc0:	4b04      	ldr	r3, [pc, #16]	@ (800bcd4 <__assert_func+0x38>)
 800bcc2:	461c      	mov	r4, r3
 800bcc4:	e7f3      	b.n	800bcae <__assert_func+0x12>
 800bcc6:	bf00      	nop
 800bcc8:	2000018c 	.word	0x2000018c
 800bccc:	0800c44a 	.word	0x0800c44a
 800bcd0:	0800c457 	.word	0x0800c457
 800bcd4:	0800c485 	.word	0x0800c485

0800bcd8 <_calloc_r>:
 800bcd8:	b570      	push	{r4, r5, r6, lr}
 800bcda:	fba1 5402 	umull	r5, r4, r1, r2
 800bcde:	b934      	cbnz	r4, 800bcee <_calloc_r+0x16>
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7ff fb0f 	bl	800b304 <_malloc_r>
 800bce6:	4606      	mov	r6, r0
 800bce8:	b928      	cbnz	r0, 800bcf6 <_calloc_r+0x1e>
 800bcea:	4630      	mov	r0, r6
 800bcec:	bd70      	pop	{r4, r5, r6, pc}
 800bcee:	220c      	movs	r2, #12
 800bcf0:	2600      	movs	r6, #0
 800bcf2:	6002      	str	r2, [r0, #0]
 800bcf4:	e7f9      	b.n	800bcea <_calloc_r+0x12>
 800bcf6:	462a      	mov	r2, r5
 800bcf8:	4621      	mov	r1, r4
 800bcfa:	f7fe fba4 	bl	800a446 <memset>
 800bcfe:	e7f4      	b.n	800bcea <_calloc_r+0x12>

0800bd00 <__ascii_mbtowc>:
 800bd00:	b082      	sub	sp, #8
 800bd02:	b901      	cbnz	r1, 800bd06 <__ascii_mbtowc+0x6>
 800bd04:	a901      	add	r1, sp, #4
 800bd06:	b142      	cbz	r2, 800bd1a <__ascii_mbtowc+0x1a>
 800bd08:	b14b      	cbz	r3, 800bd1e <__ascii_mbtowc+0x1e>
 800bd0a:	7813      	ldrb	r3, [r2, #0]
 800bd0c:	600b      	str	r3, [r1, #0]
 800bd0e:	7812      	ldrb	r2, [r2, #0]
 800bd10:	1e10      	subs	r0, r2, #0
 800bd12:	bf18      	it	ne
 800bd14:	2001      	movne	r0, #1
 800bd16:	b002      	add	sp, #8
 800bd18:	4770      	bx	lr
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	e7fb      	b.n	800bd16 <__ascii_mbtowc+0x16>
 800bd1e:	f06f 0001 	mvn.w	r0, #1
 800bd22:	e7f8      	b.n	800bd16 <__ascii_mbtowc+0x16>

0800bd24 <__ascii_wctomb>:
 800bd24:	4603      	mov	r3, r0
 800bd26:	4608      	mov	r0, r1
 800bd28:	b141      	cbz	r1, 800bd3c <__ascii_wctomb+0x18>
 800bd2a:	2aff      	cmp	r2, #255	@ 0xff
 800bd2c:	d904      	bls.n	800bd38 <__ascii_wctomb+0x14>
 800bd2e:	228a      	movs	r2, #138	@ 0x8a
 800bd30:	f04f 30ff 	mov.w	r0, #4294967295
 800bd34:	601a      	str	r2, [r3, #0]
 800bd36:	4770      	bx	lr
 800bd38:	2001      	movs	r0, #1
 800bd3a:	700a      	strb	r2, [r1, #0]
 800bd3c:	4770      	bx	lr
	...

0800bd40 <fiprintf>:
 800bd40:	b40e      	push	{r1, r2, r3}
 800bd42:	b503      	push	{r0, r1, lr}
 800bd44:	4601      	mov	r1, r0
 800bd46:	ab03      	add	r3, sp, #12
 800bd48:	4805      	ldr	r0, [pc, #20]	@ (800bd60 <fiprintf+0x20>)
 800bd4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd4e:	6800      	ldr	r0, [r0, #0]
 800bd50:	9301      	str	r3, [sp, #4]
 800bd52:	f000 f835 	bl	800bdc0 <_vfiprintf_r>
 800bd56:	b002      	add	sp, #8
 800bd58:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd5c:	b003      	add	sp, #12
 800bd5e:	4770      	bx	lr
 800bd60:	2000018c 	.word	0x2000018c

0800bd64 <abort>:
 800bd64:	2006      	movs	r0, #6
 800bd66:	b508      	push	{r3, lr}
 800bd68:	f000 f9fe 	bl	800c168 <raise>
 800bd6c:	2001      	movs	r0, #1
 800bd6e:	f7f5 fb22 	bl	80013b6 <_exit>

0800bd72 <__sfputc_r>:
 800bd72:	6893      	ldr	r3, [r2, #8]
 800bd74:	b410      	push	{r4}
 800bd76:	3b01      	subs	r3, #1
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	6093      	str	r3, [r2, #8]
 800bd7c:	da07      	bge.n	800bd8e <__sfputc_r+0x1c>
 800bd7e:	6994      	ldr	r4, [r2, #24]
 800bd80:	42a3      	cmp	r3, r4
 800bd82:	db01      	blt.n	800bd88 <__sfputc_r+0x16>
 800bd84:	290a      	cmp	r1, #10
 800bd86:	d102      	bne.n	800bd8e <__sfputc_r+0x1c>
 800bd88:	bc10      	pop	{r4}
 800bd8a:	f000 b931 	b.w	800bff0 <__swbuf_r>
 800bd8e:	6813      	ldr	r3, [r2, #0]
 800bd90:	1c58      	adds	r0, r3, #1
 800bd92:	6010      	str	r0, [r2, #0]
 800bd94:	7019      	strb	r1, [r3, #0]
 800bd96:	4608      	mov	r0, r1
 800bd98:	bc10      	pop	{r4}
 800bd9a:	4770      	bx	lr

0800bd9c <__sfputs_r>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	4606      	mov	r6, r0
 800bda0:	460f      	mov	r7, r1
 800bda2:	4614      	mov	r4, r2
 800bda4:	18d5      	adds	r5, r2, r3
 800bda6:	42ac      	cmp	r4, r5
 800bda8:	d101      	bne.n	800bdae <__sfputs_r+0x12>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	e007      	b.n	800bdbe <__sfputs_r+0x22>
 800bdae:	463a      	mov	r2, r7
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb6:	f7ff ffdc 	bl	800bd72 <__sfputc_r>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	d1f3      	bne.n	800bda6 <__sfputs_r+0xa>
 800bdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bdc0 <_vfiprintf_r>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	460d      	mov	r5, r1
 800bdc6:	4614      	mov	r4, r2
 800bdc8:	4698      	mov	r8, r3
 800bdca:	4606      	mov	r6, r0
 800bdcc:	b09d      	sub	sp, #116	@ 0x74
 800bdce:	b118      	cbz	r0, 800bdd8 <_vfiprintf_r+0x18>
 800bdd0:	6a03      	ldr	r3, [r0, #32]
 800bdd2:	b90b      	cbnz	r3, 800bdd8 <_vfiprintf_r+0x18>
 800bdd4:	f7fe fabe 	bl	800a354 <__sinit>
 800bdd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdda:	07d9      	lsls	r1, r3, #31
 800bddc:	d405      	bmi.n	800bdea <_vfiprintf_r+0x2a>
 800bdde:	89ab      	ldrh	r3, [r5, #12]
 800bde0:	059a      	lsls	r2, r3, #22
 800bde2:	d402      	bmi.n	800bdea <_vfiprintf_r+0x2a>
 800bde4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bde6:	f7fe fbac 	bl	800a542 <__retarget_lock_acquire_recursive>
 800bdea:	89ab      	ldrh	r3, [r5, #12]
 800bdec:	071b      	lsls	r3, r3, #28
 800bdee:	d501      	bpl.n	800bdf4 <_vfiprintf_r+0x34>
 800bdf0:	692b      	ldr	r3, [r5, #16]
 800bdf2:	b99b      	cbnz	r3, 800be1c <_vfiprintf_r+0x5c>
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f000 f938 	bl	800c06c <__swsetup_r>
 800bdfc:	b170      	cbz	r0, 800be1c <_vfiprintf_r+0x5c>
 800bdfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be00:	07dc      	lsls	r4, r3, #31
 800be02:	d504      	bpl.n	800be0e <_vfiprintf_r+0x4e>
 800be04:	f04f 30ff 	mov.w	r0, #4294967295
 800be08:	b01d      	add	sp, #116	@ 0x74
 800be0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0e:	89ab      	ldrh	r3, [r5, #12]
 800be10:	0598      	lsls	r0, r3, #22
 800be12:	d4f7      	bmi.n	800be04 <_vfiprintf_r+0x44>
 800be14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be16:	f7fe fb95 	bl	800a544 <__retarget_lock_release_recursive>
 800be1a:	e7f3      	b.n	800be04 <_vfiprintf_r+0x44>
 800be1c:	2300      	movs	r3, #0
 800be1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be20:	2320      	movs	r3, #32
 800be22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be26:	2330      	movs	r3, #48	@ 0x30
 800be28:	f04f 0901 	mov.w	r9, #1
 800be2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be30:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bfdc <_vfiprintf_r+0x21c>
 800be34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be38:	4623      	mov	r3, r4
 800be3a:	469a      	mov	sl, r3
 800be3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be40:	b10a      	cbz	r2, 800be46 <_vfiprintf_r+0x86>
 800be42:	2a25      	cmp	r2, #37	@ 0x25
 800be44:	d1f9      	bne.n	800be3a <_vfiprintf_r+0x7a>
 800be46:	ebba 0b04 	subs.w	fp, sl, r4
 800be4a:	d00b      	beq.n	800be64 <_vfiprintf_r+0xa4>
 800be4c:	465b      	mov	r3, fp
 800be4e:	4622      	mov	r2, r4
 800be50:	4629      	mov	r1, r5
 800be52:	4630      	mov	r0, r6
 800be54:	f7ff ffa2 	bl	800bd9c <__sfputs_r>
 800be58:	3001      	adds	r0, #1
 800be5a:	f000 80a7 	beq.w	800bfac <_vfiprintf_r+0x1ec>
 800be5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be60:	445a      	add	r2, fp
 800be62:	9209      	str	r2, [sp, #36]	@ 0x24
 800be64:	f89a 3000 	ldrb.w	r3, [sl]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 809f 	beq.w	800bfac <_vfiprintf_r+0x1ec>
 800be6e:	2300      	movs	r3, #0
 800be70:	f04f 32ff 	mov.w	r2, #4294967295
 800be74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be78:	f10a 0a01 	add.w	sl, sl, #1
 800be7c:	9304      	str	r3, [sp, #16]
 800be7e:	9307      	str	r3, [sp, #28]
 800be80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be84:	931a      	str	r3, [sp, #104]	@ 0x68
 800be86:	4654      	mov	r4, sl
 800be88:	2205      	movs	r2, #5
 800be8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8e:	4853      	ldr	r0, [pc, #332]	@ (800bfdc <_vfiprintf_r+0x21c>)
 800be90:	f7fe fb59 	bl	800a546 <memchr>
 800be94:	9a04      	ldr	r2, [sp, #16]
 800be96:	b9d8      	cbnz	r0, 800bed0 <_vfiprintf_r+0x110>
 800be98:	06d1      	lsls	r1, r2, #27
 800be9a:	bf44      	itt	mi
 800be9c:	2320      	movmi	r3, #32
 800be9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bea2:	0713      	lsls	r3, r2, #28
 800bea4:	bf44      	itt	mi
 800bea6:	232b      	movmi	r3, #43	@ 0x2b
 800bea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800beac:	f89a 3000 	ldrb.w	r3, [sl]
 800beb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800beb2:	d015      	beq.n	800bee0 <_vfiprintf_r+0x120>
 800beb4:	4654      	mov	r4, sl
 800beb6:	2000      	movs	r0, #0
 800beb8:	f04f 0c0a 	mov.w	ip, #10
 800bebc:	9a07      	ldr	r2, [sp, #28]
 800bebe:	4621      	mov	r1, r4
 800bec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bec4:	3b30      	subs	r3, #48	@ 0x30
 800bec6:	2b09      	cmp	r3, #9
 800bec8:	d94b      	bls.n	800bf62 <_vfiprintf_r+0x1a2>
 800beca:	b1b0      	cbz	r0, 800befa <_vfiprintf_r+0x13a>
 800becc:	9207      	str	r2, [sp, #28]
 800bece:	e014      	b.n	800befa <_vfiprintf_r+0x13a>
 800bed0:	eba0 0308 	sub.w	r3, r0, r8
 800bed4:	fa09 f303 	lsl.w	r3, r9, r3
 800bed8:	4313      	orrs	r3, r2
 800beda:	46a2      	mov	sl, r4
 800bedc:	9304      	str	r3, [sp, #16]
 800bede:	e7d2      	b.n	800be86 <_vfiprintf_r+0xc6>
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	1d19      	adds	r1, r3, #4
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	9103      	str	r1, [sp, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bfbb      	ittet	lt
 800beec:	425b      	neglt	r3, r3
 800beee:	f042 0202 	orrlt.w	r2, r2, #2
 800bef2:	9307      	strge	r3, [sp, #28]
 800bef4:	9307      	strlt	r3, [sp, #28]
 800bef6:	bfb8      	it	lt
 800bef8:	9204      	strlt	r2, [sp, #16]
 800befa:	7823      	ldrb	r3, [r4, #0]
 800befc:	2b2e      	cmp	r3, #46	@ 0x2e
 800befe:	d10a      	bne.n	800bf16 <_vfiprintf_r+0x156>
 800bf00:	7863      	ldrb	r3, [r4, #1]
 800bf02:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf04:	d132      	bne.n	800bf6c <_vfiprintf_r+0x1ac>
 800bf06:	9b03      	ldr	r3, [sp, #12]
 800bf08:	3402      	adds	r4, #2
 800bf0a:	1d1a      	adds	r2, r3, #4
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	9203      	str	r2, [sp, #12]
 800bf10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf14:	9305      	str	r3, [sp, #20]
 800bf16:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bfe0 <_vfiprintf_r+0x220>
 800bf1a:	2203      	movs	r2, #3
 800bf1c:	4650      	mov	r0, sl
 800bf1e:	7821      	ldrb	r1, [r4, #0]
 800bf20:	f7fe fb11 	bl	800a546 <memchr>
 800bf24:	b138      	cbz	r0, 800bf36 <_vfiprintf_r+0x176>
 800bf26:	2240      	movs	r2, #64	@ 0x40
 800bf28:	9b04      	ldr	r3, [sp, #16]
 800bf2a:	eba0 000a 	sub.w	r0, r0, sl
 800bf2e:	4082      	lsls	r2, r0
 800bf30:	4313      	orrs	r3, r2
 800bf32:	3401      	adds	r4, #1
 800bf34:	9304      	str	r3, [sp, #16]
 800bf36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf3a:	2206      	movs	r2, #6
 800bf3c:	4829      	ldr	r0, [pc, #164]	@ (800bfe4 <_vfiprintf_r+0x224>)
 800bf3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf42:	f7fe fb00 	bl	800a546 <memchr>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d03f      	beq.n	800bfca <_vfiprintf_r+0x20a>
 800bf4a:	4b27      	ldr	r3, [pc, #156]	@ (800bfe8 <_vfiprintf_r+0x228>)
 800bf4c:	bb1b      	cbnz	r3, 800bf96 <_vfiprintf_r+0x1d6>
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	3307      	adds	r3, #7
 800bf52:	f023 0307 	bic.w	r3, r3, #7
 800bf56:	3308      	adds	r3, #8
 800bf58:	9303      	str	r3, [sp, #12]
 800bf5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf5c:	443b      	add	r3, r7
 800bf5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf60:	e76a      	b.n	800be38 <_vfiprintf_r+0x78>
 800bf62:	460c      	mov	r4, r1
 800bf64:	2001      	movs	r0, #1
 800bf66:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf6a:	e7a8      	b.n	800bebe <_vfiprintf_r+0xfe>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	f04f 0c0a 	mov.w	ip, #10
 800bf72:	4619      	mov	r1, r3
 800bf74:	3401      	adds	r4, #1
 800bf76:	9305      	str	r3, [sp, #20]
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf7e:	3a30      	subs	r2, #48	@ 0x30
 800bf80:	2a09      	cmp	r2, #9
 800bf82:	d903      	bls.n	800bf8c <_vfiprintf_r+0x1cc>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0c6      	beq.n	800bf16 <_vfiprintf_r+0x156>
 800bf88:	9105      	str	r1, [sp, #20]
 800bf8a:	e7c4      	b.n	800bf16 <_vfiprintf_r+0x156>
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	2301      	movs	r3, #1
 800bf90:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf94:	e7f0      	b.n	800bf78 <_vfiprintf_r+0x1b8>
 800bf96:	ab03      	add	r3, sp, #12
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	462a      	mov	r2, r5
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	4b13      	ldr	r3, [pc, #76]	@ (800bfec <_vfiprintf_r+0x22c>)
 800bfa0:	a904      	add	r1, sp, #16
 800bfa2:	f7fd fd8f 	bl	8009ac4 <_printf_float>
 800bfa6:	4607      	mov	r7, r0
 800bfa8:	1c78      	adds	r0, r7, #1
 800bfaa:	d1d6      	bne.n	800bf5a <_vfiprintf_r+0x19a>
 800bfac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfae:	07d9      	lsls	r1, r3, #31
 800bfb0:	d405      	bmi.n	800bfbe <_vfiprintf_r+0x1fe>
 800bfb2:	89ab      	ldrh	r3, [r5, #12]
 800bfb4:	059a      	lsls	r2, r3, #22
 800bfb6:	d402      	bmi.n	800bfbe <_vfiprintf_r+0x1fe>
 800bfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfba:	f7fe fac3 	bl	800a544 <__retarget_lock_release_recursive>
 800bfbe:	89ab      	ldrh	r3, [r5, #12]
 800bfc0:	065b      	lsls	r3, r3, #25
 800bfc2:	f53f af1f 	bmi.w	800be04 <_vfiprintf_r+0x44>
 800bfc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfc8:	e71e      	b.n	800be08 <_vfiprintf_r+0x48>
 800bfca:	ab03      	add	r3, sp, #12
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	462a      	mov	r2, r5
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	4b06      	ldr	r3, [pc, #24]	@ (800bfec <_vfiprintf_r+0x22c>)
 800bfd4:	a904      	add	r1, sp, #16
 800bfd6:	f7fe f813 	bl	800a000 <_printf_i>
 800bfda:	e7e4      	b.n	800bfa6 <_vfiprintf_r+0x1e6>
 800bfdc:	0800c486 	.word	0x0800c486
 800bfe0:	0800c48c 	.word	0x0800c48c
 800bfe4:	0800c490 	.word	0x0800c490
 800bfe8:	08009ac5 	.word	0x08009ac5
 800bfec:	0800bd9d 	.word	0x0800bd9d

0800bff0 <__swbuf_r>:
 800bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff2:	460e      	mov	r6, r1
 800bff4:	4614      	mov	r4, r2
 800bff6:	4605      	mov	r5, r0
 800bff8:	b118      	cbz	r0, 800c002 <__swbuf_r+0x12>
 800bffa:	6a03      	ldr	r3, [r0, #32]
 800bffc:	b90b      	cbnz	r3, 800c002 <__swbuf_r+0x12>
 800bffe:	f7fe f9a9 	bl	800a354 <__sinit>
 800c002:	69a3      	ldr	r3, [r4, #24]
 800c004:	60a3      	str	r3, [r4, #8]
 800c006:	89a3      	ldrh	r3, [r4, #12]
 800c008:	071a      	lsls	r2, r3, #28
 800c00a:	d501      	bpl.n	800c010 <__swbuf_r+0x20>
 800c00c:	6923      	ldr	r3, [r4, #16]
 800c00e:	b943      	cbnz	r3, 800c022 <__swbuf_r+0x32>
 800c010:	4621      	mov	r1, r4
 800c012:	4628      	mov	r0, r5
 800c014:	f000 f82a 	bl	800c06c <__swsetup_r>
 800c018:	b118      	cbz	r0, 800c022 <__swbuf_r+0x32>
 800c01a:	f04f 37ff 	mov.w	r7, #4294967295
 800c01e:	4638      	mov	r0, r7
 800c020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c022:	6823      	ldr	r3, [r4, #0]
 800c024:	6922      	ldr	r2, [r4, #16]
 800c026:	b2f6      	uxtb	r6, r6
 800c028:	1a98      	subs	r0, r3, r2
 800c02a:	6963      	ldr	r3, [r4, #20]
 800c02c:	4637      	mov	r7, r6
 800c02e:	4283      	cmp	r3, r0
 800c030:	dc05      	bgt.n	800c03e <__swbuf_r+0x4e>
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f7ff fdeb 	bl	800bc10 <_fflush_r>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d1ed      	bne.n	800c01a <__swbuf_r+0x2a>
 800c03e:	68a3      	ldr	r3, [r4, #8]
 800c040:	3b01      	subs	r3, #1
 800c042:	60a3      	str	r3, [r4, #8]
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	1c5a      	adds	r2, r3, #1
 800c048:	6022      	str	r2, [r4, #0]
 800c04a:	701e      	strb	r6, [r3, #0]
 800c04c:	6962      	ldr	r2, [r4, #20]
 800c04e:	1c43      	adds	r3, r0, #1
 800c050:	429a      	cmp	r2, r3
 800c052:	d004      	beq.n	800c05e <__swbuf_r+0x6e>
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	07db      	lsls	r3, r3, #31
 800c058:	d5e1      	bpl.n	800c01e <__swbuf_r+0x2e>
 800c05a:	2e0a      	cmp	r6, #10
 800c05c:	d1df      	bne.n	800c01e <__swbuf_r+0x2e>
 800c05e:	4621      	mov	r1, r4
 800c060:	4628      	mov	r0, r5
 800c062:	f7ff fdd5 	bl	800bc10 <_fflush_r>
 800c066:	2800      	cmp	r0, #0
 800c068:	d0d9      	beq.n	800c01e <__swbuf_r+0x2e>
 800c06a:	e7d6      	b.n	800c01a <__swbuf_r+0x2a>

0800c06c <__swsetup_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4b29      	ldr	r3, [pc, #164]	@ (800c114 <__swsetup_r+0xa8>)
 800c070:	4605      	mov	r5, r0
 800c072:	6818      	ldr	r0, [r3, #0]
 800c074:	460c      	mov	r4, r1
 800c076:	b118      	cbz	r0, 800c080 <__swsetup_r+0x14>
 800c078:	6a03      	ldr	r3, [r0, #32]
 800c07a:	b90b      	cbnz	r3, 800c080 <__swsetup_r+0x14>
 800c07c:	f7fe f96a 	bl	800a354 <__sinit>
 800c080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c084:	0719      	lsls	r1, r3, #28
 800c086:	d422      	bmi.n	800c0ce <__swsetup_r+0x62>
 800c088:	06da      	lsls	r2, r3, #27
 800c08a:	d407      	bmi.n	800c09c <__swsetup_r+0x30>
 800c08c:	2209      	movs	r2, #9
 800c08e:	602a      	str	r2, [r5, #0]
 800c090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c094:	f04f 30ff 	mov.w	r0, #4294967295
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	e033      	b.n	800c104 <__swsetup_r+0x98>
 800c09c:	0758      	lsls	r0, r3, #29
 800c09e:	d512      	bpl.n	800c0c6 <__swsetup_r+0x5a>
 800c0a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0a2:	b141      	cbz	r1, 800c0b6 <__swsetup_r+0x4a>
 800c0a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0a8:	4299      	cmp	r1, r3
 800c0aa:	d002      	beq.n	800c0b2 <__swsetup_r+0x46>
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f7ff f8b7 	bl	800b220 <_free_r>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0b6:	89a3      	ldrh	r3, [r4, #12]
 800c0b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0bc:	81a3      	strh	r3, [r4, #12]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6063      	str	r3, [r4, #4]
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	f043 0308 	orr.w	r3, r3, #8
 800c0cc:	81a3      	strh	r3, [r4, #12]
 800c0ce:	6923      	ldr	r3, [r4, #16]
 800c0d0:	b94b      	cbnz	r3, 800c0e6 <__swsetup_r+0x7a>
 800c0d2:	89a3      	ldrh	r3, [r4, #12]
 800c0d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0dc:	d003      	beq.n	800c0e6 <__swsetup_r+0x7a>
 800c0de:	4621      	mov	r1, r4
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	f000 f882 	bl	800c1ea <__smakebuf_r>
 800c0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ea:	f013 0201 	ands.w	r2, r3, #1
 800c0ee:	d00a      	beq.n	800c106 <__swsetup_r+0x9a>
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	60a2      	str	r2, [r4, #8]
 800c0f4:	6962      	ldr	r2, [r4, #20]
 800c0f6:	4252      	negs	r2, r2
 800c0f8:	61a2      	str	r2, [r4, #24]
 800c0fa:	6922      	ldr	r2, [r4, #16]
 800c0fc:	b942      	cbnz	r2, 800c110 <__swsetup_r+0xa4>
 800c0fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c102:	d1c5      	bne.n	800c090 <__swsetup_r+0x24>
 800c104:	bd38      	pop	{r3, r4, r5, pc}
 800c106:	0799      	lsls	r1, r3, #30
 800c108:	bf58      	it	pl
 800c10a:	6962      	ldrpl	r2, [r4, #20]
 800c10c:	60a2      	str	r2, [r4, #8]
 800c10e:	e7f4      	b.n	800c0fa <__swsetup_r+0x8e>
 800c110:	2000      	movs	r0, #0
 800c112:	e7f7      	b.n	800c104 <__swsetup_r+0x98>
 800c114:	2000018c 	.word	0x2000018c

0800c118 <_raise_r>:
 800c118:	291f      	cmp	r1, #31
 800c11a:	b538      	push	{r3, r4, r5, lr}
 800c11c:	4605      	mov	r5, r0
 800c11e:	460c      	mov	r4, r1
 800c120:	d904      	bls.n	800c12c <_raise_r+0x14>
 800c122:	2316      	movs	r3, #22
 800c124:	6003      	str	r3, [r0, #0]
 800c126:	f04f 30ff 	mov.w	r0, #4294967295
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c12e:	b112      	cbz	r2, 800c136 <_raise_r+0x1e>
 800c130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c134:	b94b      	cbnz	r3, 800c14a <_raise_r+0x32>
 800c136:	4628      	mov	r0, r5
 800c138:	f000 f830 	bl	800c19c <_getpid_r>
 800c13c:	4622      	mov	r2, r4
 800c13e:	4601      	mov	r1, r0
 800c140:	4628      	mov	r0, r5
 800c142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c146:	f000 b817 	b.w	800c178 <_kill_r>
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d00a      	beq.n	800c164 <_raise_r+0x4c>
 800c14e:	1c59      	adds	r1, r3, #1
 800c150:	d103      	bne.n	800c15a <_raise_r+0x42>
 800c152:	2316      	movs	r3, #22
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	2001      	movs	r0, #1
 800c158:	e7e7      	b.n	800c12a <_raise_r+0x12>
 800c15a:	2100      	movs	r1, #0
 800c15c:	4620      	mov	r0, r4
 800c15e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c162:	4798      	blx	r3
 800c164:	2000      	movs	r0, #0
 800c166:	e7e0      	b.n	800c12a <_raise_r+0x12>

0800c168 <raise>:
 800c168:	4b02      	ldr	r3, [pc, #8]	@ (800c174 <raise+0xc>)
 800c16a:	4601      	mov	r1, r0
 800c16c:	6818      	ldr	r0, [r3, #0]
 800c16e:	f7ff bfd3 	b.w	800c118 <_raise_r>
 800c172:	bf00      	nop
 800c174:	2000018c 	.word	0x2000018c

0800c178 <_kill_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	2300      	movs	r3, #0
 800c17c:	4d06      	ldr	r5, [pc, #24]	@ (800c198 <_kill_r+0x20>)
 800c17e:	4604      	mov	r4, r0
 800c180:	4608      	mov	r0, r1
 800c182:	4611      	mov	r1, r2
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	f7f5 f906 	bl	8001396 <_kill>
 800c18a:	1c43      	adds	r3, r0, #1
 800c18c:	d102      	bne.n	800c194 <_kill_r+0x1c>
 800c18e:	682b      	ldr	r3, [r5, #0]
 800c190:	b103      	cbz	r3, 800c194 <_kill_r+0x1c>
 800c192:	6023      	str	r3, [r4, #0]
 800c194:	bd38      	pop	{r3, r4, r5, pc}
 800c196:	bf00      	nop
 800c198:	20001710 	.word	0x20001710

0800c19c <_getpid_r>:
 800c19c:	f7f5 b8f4 	b.w	8001388 <_getpid>

0800c1a0 <__swhatbuf_r>:
 800c1a0:	b570      	push	{r4, r5, r6, lr}
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a8:	4615      	mov	r5, r2
 800c1aa:	2900      	cmp	r1, #0
 800c1ac:	461e      	mov	r6, r3
 800c1ae:	b096      	sub	sp, #88	@ 0x58
 800c1b0:	da0c      	bge.n	800c1cc <__swhatbuf_r+0x2c>
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1ba:	bf14      	ite	ne
 800c1bc:	2340      	movne	r3, #64	@ 0x40
 800c1be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	6031      	str	r1, [r6, #0]
 800c1c6:	602b      	str	r3, [r5, #0]
 800c1c8:	b016      	add	sp, #88	@ 0x58
 800c1ca:	bd70      	pop	{r4, r5, r6, pc}
 800c1cc:	466a      	mov	r2, sp
 800c1ce:	f000 f849 	bl	800c264 <_fstat_r>
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	dbed      	blt.n	800c1b2 <__swhatbuf_r+0x12>
 800c1d6:	9901      	ldr	r1, [sp, #4]
 800c1d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1e0:	4259      	negs	r1, r3
 800c1e2:	4159      	adcs	r1, r3
 800c1e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1e8:	e7eb      	b.n	800c1c2 <__swhatbuf_r+0x22>

0800c1ea <__smakebuf_r>:
 800c1ea:	898b      	ldrh	r3, [r1, #12]
 800c1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1ee:	079d      	lsls	r5, r3, #30
 800c1f0:	4606      	mov	r6, r0
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	d507      	bpl.n	800c206 <__smakebuf_r+0x1c>
 800c1f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1fa:	6023      	str	r3, [r4, #0]
 800c1fc:	6123      	str	r3, [r4, #16]
 800c1fe:	2301      	movs	r3, #1
 800c200:	6163      	str	r3, [r4, #20]
 800c202:	b003      	add	sp, #12
 800c204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c206:	466a      	mov	r2, sp
 800c208:	ab01      	add	r3, sp, #4
 800c20a:	f7ff ffc9 	bl	800c1a0 <__swhatbuf_r>
 800c20e:	9f00      	ldr	r7, [sp, #0]
 800c210:	4605      	mov	r5, r0
 800c212:	4639      	mov	r1, r7
 800c214:	4630      	mov	r0, r6
 800c216:	f7ff f875 	bl	800b304 <_malloc_r>
 800c21a:	b948      	cbnz	r0, 800c230 <__smakebuf_r+0x46>
 800c21c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c220:	059a      	lsls	r2, r3, #22
 800c222:	d4ee      	bmi.n	800c202 <__smakebuf_r+0x18>
 800c224:	f023 0303 	bic.w	r3, r3, #3
 800c228:	f043 0302 	orr.w	r3, r3, #2
 800c22c:	81a3      	strh	r3, [r4, #12]
 800c22e:	e7e2      	b.n	800c1f6 <__smakebuf_r+0xc>
 800c230:	89a3      	ldrh	r3, [r4, #12]
 800c232:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23a:	81a3      	strh	r3, [r4, #12]
 800c23c:	9b01      	ldr	r3, [sp, #4]
 800c23e:	6020      	str	r0, [r4, #0]
 800c240:	b15b      	cbz	r3, 800c25a <__smakebuf_r+0x70>
 800c242:	4630      	mov	r0, r6
 800c244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c248:	f000 f81e 	bl	800c288 <_isatty_r>
 800c24c:	b128      	cbz	r0, 800c25a <__smakebuf_r+0x70>
 800c24e:	89a3      	ldrh	r3, [r4, #12]
 800c250:	f023 0303 	bic.w	r3, r3, #3
 800c254:	f043 0301 	orr.w	r3, r3, #1
 800c258:	81a3      	strh	r3, [r4, #12]
 800c25a:	89a3      	ldrh	r3, [r4, #12]
 800c25c:	431d      	orrs	r5, r3
 800c25e:	81a5      	strh	r5, [r4, #12]
 800c260:	e7cf      	b.n	800c202 <__smakebuf_r+0x18>
	...

0800c264 <_fstat_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	2300      	movs	r3, #0
 800c268:	4d06      	ldr	r5, [pc, #24]	@ (800c284 <_fstat_r+0x20>)
 800c26a:	4604      	mov	r4, r0
 800c26c:	4608      	mov	r0, r1
 800c26e:	4611      	mov	r1, r2
 800c270:	602b      	str	r3, [r5, #0]
 800c272:	f7f5 f8ef 	bl	8001454 <_fstat>
 800c276:	1c43      	adds	r3, r0, #1
 800c278:	d102      	bne.n	800c280 <_fstat_r+0x1c>
 800c27a:	682b      	ldr	r3, [r5, #0]
 800c27c:	b103      	cbz	r3, 800c280 <_fstat_r+0x1c>
 800c27e:	6023      	str	r3, [r4, #0]
 800c280:	bd38      	pop	{r3, r4, r5, pc}
 800c282:	bf00      	nop
 800c284:	20001710 	.word	0x20001710

0800c288 <_isatty_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	2300      	movs	r3, #0
 800c28c:	4d05      	ldr	r5, [pc, #20]	@ (800c2a4 <_isatty_r+0x1c>)
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	602b      	str	r3, [r5, #0]
 800c294:	f7f5 f8ed 	bl	8001472 <_isatty>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_isatty_r+0x1a>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_isatty_r+0x1a>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	20001710 	.word	0x20001710

0800c2a8 <_init>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	bf00      	nop
 800c2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ae:	bc08      	pop	{r3}
 800c2b0:	469e      	mov	lr, r3
 800c2b2:	4770      	bx	lr

0800c2b4 <_fini>:
 800c2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b6:	bf00      	nop
 800c2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ba:	bc08      	pop	{r3}
 800c2bc:	469e      	mov	lr, r3
 800c2be:	4770      	bx	lr
